
STEVAL_SPIN3201_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea8  08006ea8  00020518  2**0
                  CONTENTS
  4 .ARM          00000000  08006ea8  08006ea8  00020518  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ea8  08006ea8  00020518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000518  080073c8  00020518  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  2000070c  080073c8  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 12 .debug_line   00027b93  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00029bee  00000000  00000000  000480d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006aa7  00000000  00000000  00071cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00078768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00079562  00000000  00000000  000799d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000038e8  00000000  00000000  000f2f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000160c9  00000000  00000000  000f6820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001958e  00000000  00000000  0010c8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125e77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002adc  00000000  00000000  00125ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000518 	.word	0x20000518
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fc8 	.word	0x08005fc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000051c 	.word	0x2000051c
 8000104:	08005fc8 	.word	0x08005fc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
 80003fa:	b580      	push	{r7, lr}
 80003fc:	0007      	movs	r7, r0
 80003fe:	4699      	mov	r9, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	469c      	mov	ip, r3
 8000404:	0413      	lsls	r3, r2, #16
 8000406:	0c1b      	lsrs	r3, r3, #16
 8000408:	001d      	movs	r5, r3
 800040a:	000e      	movs	r6, r1
 800040c:	4661      	mov	r1, ip
 800040e:	0400      	lsls	r0, r0, #16
 8000410:	0c14      	lsrs	r4, r2, #16
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	4345      	muls	r5, r0
 8000416:	434b      	muls	r3, r1
 8000418:	4360      	muls	r0, r4
 800041a:	4361      	muls	r1, r4
 800041c:	18c0      	adds	r0, r0, r3
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	1820      	adds	r0, r4, r0
 8000422:	468c      	mov	ip, r1
 8000424:	4283      	cmp	r3, r0
 8000426:	d903      	bls.n	8000430 <__aeabi_lmul+0x3c>
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	025b      	lsls	r3, r3, #9
 800042c:	4698      	mov	r8, r3
 800042e:	44c4      	add	ip, r8
 8000430:	4649      	mov	r1, r9
 8000432:	4379      	muls	r1, r7
 8000434:	4372      	muls	r2, r6
 8000436:	0c03      	lsrs	r3, r0, #16
 8000438:	4463      	add	r3, ip
 800043a:	042d      	lsls	r5, r5, #16
 800043c:	0c2d      	lsrs	r5, r5, #16
 800043e:	18c9      	adds	r1, r1, r3
 8000440:	0400      	lsls	r0, r0, #16
 8000442:	1940      	adds	r0, r0, r5
 8000444:	1889      	adds	r1, r1, r2
 8000446:	bcc0      	pop	{r6, r7}
 8000448:	46b9      	mov	r9, r7
 800044a:	46b0      	mov	r8, r6
 800044c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fmul>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	464f      	mov	r7, r9
 8000454:	4646      	mov	r6, r8
 8000456:	46d6      	mov	lr, sl
 8000458:	0244      	lsls	r4, r0, #9
 800045a:	0045      	lsls	r5, r0, #1
 800045c:	b5c0      	push	{r6, r7, lr}
 800045e:	0a64      	lsrs	r4, r4, #9
 8000460:	1c0f      	adds	r7, r1, #0
 8000462:	0e2d      	lsrs	r5, r5, #24
 8000464:	0fc6      	lsrs	r6, r0, #31
 8000466:	2d00      	cmp	r5, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fmul+0x1c>
 800046a:	e08d      	b.n	8000588 <__aeabi_fmul+0x138>
 800046c:	2dff      	cmp	r5, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fmul+0x22>
 8000470:	e092      	b.n	8000598 <__aeabi_fmul+0x148>
 8000472:	2300      	movs	r3, #0
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	4699      	mov	r9, r3
 8000478:	469a      	mov	sl, r3
 800047a:	00e4      	lsls	r4, r4, #3
 800047c:	04c0      	lsls	r0, r0, #19
 800047e:	4304      	orrs	r4, r0
 8000480:	3d7f      	subs	r5, #127	; 0x7f
 8000482:	0278      	lsls	r0, r7, #9
 8000484:	0a43      	lsrs	r3, r0, #9
 8000486:	4698      	mov	r8, r3
 8000488:	007b      	lsls	r3, r7, #1
 800048a:	0e1b      	lsrs	r3, r3, #24
 800048c:	0fff      	lsrs	r7, r7, #31
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <__aeabi_fmul+0x44>
 8000492:	e070      	b.n	8000576 <__aeabi_fmul+0x126>
 8000494:	2bff      	cmp	r3, #255	; 0xff
 8000496:	d100      	bne.n	800049a <__aeabi_fmul+0x4a>
 8000498:	e086      	b.n	80005a8 <__aeabi_fmul+0x158>
 800049a:	4642      	mov	r2, r8
 800049c:	00d0      	lsls	r0, r2, #3
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	3b7f      	subs	r3, #127	; 0x7f
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	04d2      	lsls	r2, r2, #19
 80004a8:	4302      	orrs	r2, r0
 80004aa:	4690      	mov	r8, r2
 80004ac:	469c      	mov	ip, r3
 80004ae:	0031      	movs	r1, r6
 80004b0:	464b      	mov	r3, r9
 80004b2:	4079      	eors	r1, r7
 80004b4:	1c68      	adds	r0, r5, #1
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d81c      	bhi.n	80004f4 <__aeabi_fmul+0xa4>
 80004ba:	4a76      	ldr	r2, [pc, #472]	; (8000694 <__aeabi_fmul+0x244>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58d3      	ldr	r3, [r2, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	0039      	movs	r1, r7
 80004c4:	4644      	mov	r4, r8
 80004c6:	46e2      	mov	sl, ip
 80004c8:	4653      	mov	r3, sl
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d00f      	beq.n	80004ee <__aeabi_fmul+0x9e>
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fmul+0x84>
 80004d2:	e0d7      	b.n	8000684 <__aeabi_fmul+0x234>
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d137      	bne.n	8000548 <__aeabi_fmul+0xf8>
 80004d8:	2000      	movs	r0, #0
 80004da:	2400      	movs	r4, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4320      	orrs	r0, r4
 80004e0:	07c9      	lsls	r1, r1, #31
 80004e2:	4308      	orrs	r0, r1
 80004e4:	bce0      	pop	{r5, r6, r7}
 80004e6:	46ba      	mov	sl, r7
 80004e8:	46b1      	mov	r9, r6
 80004ea:	46a8      	mov	r8, r5
 80004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ee:	20ff      	movs	r0, #255	; 0xff
 80004f0:	2400      	movs	r4, #0
 80004f2:	e7f3      	b.n	80004dc <__aeabi_fmul+0x8c>
 80004f4:	0c26      	lsrs	r6, r4, #16
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	0c22      	lsrs	r2, r4, #16
 80004fa:	4644      	mov	r4, r8
 80004fc:	0424      	lsls	r4, r4, #16
 80004fe:	0c24      	lsrs	r4, r4, #16
 8000500:	4643      	mov	r3, r8
 8000502:	0027      	movs	r7, r4
 8000504:	0c1b      	lsrs	r3, r3, #16
 8000506:	4357      	muls	r7, r2
 8000508:	4374      	muls	r4, r6
 800050a:	435a      	muls	r2, r3
 800050c:	435e      	muls	r6, r3
 800050e:	1912      	adds	r2, r2, r4
 8000510:	0c3b      	lsrs	r3, r7, #16
 8000512:	189b      	adds	r3, r3, r2
 8000514:	429c      	cmp	r4, r3
 8000516:	d903      	bls.n	8000520 <__aeabi_fmul+0xd0>
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	0252      	lsls	r2, r2, #9
 800051c:	4694      	mov	ip, r2
 800051e:	4466      	add	r6, ip
 8000520:	043f      	lsls	r7, r7, #16
 8000522:	041a      	lsls	r2, r3, #16
 8000524:	0c3f      	lsrs	r7, r7, #16
 8000526:	19d2      	adds	r2, r2, r7
 8000528:	0194      	lsls	r4, r2, #6
 800052a:	1e67      	subs	r7, r4, #1
 800052c:	41bc      	sbcs	r4, r7
 800052e:	0c1b      	lsrs	r3, r3, #16
 8000530:	0e92      	lsrs	r2, r2, #26
 8000532:	199b      	adds	r3, r3, r6
 8000534:	4314      	orrs	r4, r2
 8000536:	019b      	lsls	r3, r3, #6
 8000538:	431c      	orrs	r4, r3
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	d400      	bmi.n	8000540 <__aeabi_fmul+0xf0>
 800053e:	e09b      	b.n	8000678 <__aeabi_fmul+0x228>
 8000540:	2301      	movs	r3, #1
 8000542:	0862      	lsrs	r2, r4, #1
 8000544:	401c      	ands	r4, r3
 8000546:	4314      	orrs	r4, r2
 8000548:	0002      	movs	r2, r0
 800054a:	327f      	adds	r2, #127	; 0x7f
 800054c:	2a00      	cmp	r2, #0
 800054e:	dd64      	ble.n	800061a <__aeabi_fmul+0x1ca>
 8000550:	0763      	lsls	r3, r4, #29
 8000552:	d004      	beq.n	800055e <__aeabi_fmul+0x10e>
 8000554:	230f      	movs	r3, #15
 8000556:	4023      	ands	r3, r4
 8000558:	2b04      	cmp	r3, #4
 800055a:	d000      	beq.n	800055e <__aeabi_fmul+0x10e>
 800055c:	3404      	adds	r4, #4
 800055e:	0123      	lsls	r3, r4, #4
 8000560:	d503      	bpl.n	800056a <__aeabi_fmul+0x11a>
 8000562:	0002      	movs	r2, r0
 8000564:	4b4c      	ldr	r3, [pc, #304]	; (8000698 <__aeabi_fmul+0x248>)
 8000566:	3280      	adds	r2, #128	; 0x80
 8000568:	401c      	ands	r4, r3
 800056a:	2afe      	cmp	r2, #254	; 0xfe
 800056c:	dcbf      	bgt.n	80004ee <__aeabi_fmul+0x9e>
 800056e:	01a4      	lsls	r4, r4, #6
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	b2d0      	uxtb	r0, r2
 8000574:	e7b2      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d13d      	bne.n	80005f8 <__aeabi_fmul+0x1a8>
 800057c:	464a      	mov	r2, r9
 800057e:	3301      	adds	r3, #1
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	469c      	mov	ip, r3
 8000586:	e792      	b.n	80004ae <__aeabi_fmul+0x5e>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d129      	bne.n	80005e0 <__aeabi_fmul+0x190>
 800058c:	2304      	movs	r3, #4
 800058e:	4699      	mov	r9, r3
 8000590:	3b03      	subs	r3, #3
 8000592:	2500      	movs	r5, #0
 8000594:	469a      	mov	sl, r3
 8000596:	e774      	b.n	8000482 <__aeabi_fmul+0x32>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d11b      	bne.n	80005d4 <__aeabi_fmul+0x184>
 800059c:	2308      	movs	r3, #8
 800059e:	4699      	mov	r9, r3
 80005a0:	3b06      	subs	r3, #6
 80005a2:	25ff      	movs	r5, #255	; 0xff
 80005a4:	469a      	mov	sl, r3
 80005a6:	e76c      	b.n	8000482 <__aeabi_fmul+0x32>
 80005a8:	4643      	mov	r3, r8
 80005aa:	35ff      	adds	r5, #255	; 0xff
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10b      	bne.n	80005c8 <__aeabi_fmul+0x178>
 80005b0:	2302      	movs	r3, #2
 80005b2:	464a      	mov	r2, r9
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4691      	mov	r9, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	e778      	b.n	80004ae <__aeabi_fmul+0x5e>
 80005bc:	4653      	mov	r3, sl
 80005be:	0031      	movs	r1, r6
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fmul+0x176>
 80005c4:	e783      	b.n	80004ce <__aeabi_fmul+0x7e>
 80005c6:	e792      	b.n	80004ee <__aeabi_fmul+0x9e>
 80005c8:	2303      	movs	r3, #3
 80005ca:	464a      	mov	r2, r9
 80005cc:	431a      	orrs	r2, r3
 80005ce:	4691      	mov	r9, r2
 80005d0:	469c      	mov	ip, r3
 80005d2:	e76c      	b.n	80004ae <__aeabi_fmul+0x5e>
 80005d4:	230c      	movs	r3, #12
 80005d6:	4699      	mov	r9, r3
 80005d8:	3b09      	subs	r3, #9
 80005da:	25ff      	movs	r5, #255	; 0xff
 80005dc:	469a      	mov	sl, r3
 80005de:	e750      	b.n	8000482 <__aeabi_fmul+0x32>
 80005e0:	0020      	movs	r0, r4
 80005e2:	f000 f8a9 	bl	8000738 <__clzsi2>
 80005e6:	2576      	movs	r5, #118	; 0x76
 80005e8:	1f43      	subs	r3, r0, #5
 80005ea:	409c      	lsls	r4, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	426d      	negs	r5, r5
 80005f0:	4699      	mov	r9, r3
 80005f2:	469a      	mov	sl, r3
 80005f4:	1a2d      	subs	r5, r5, r0
 80005f6:	e744      	b.n	8000482 <__aeabi_fmul+0x32>
 80005f8:	4640      	mov	r0, r8
 80005fa:	f000 f89d 	bl	8000738 <__clzsi2>
 80005fe:	4642      	mov	r2, r8
 8000600:	1f43      	subs	r3, r0, #5
 8000602:	409a      	lsls	r2, r3
 8000604:	2300      	movs	r3, #0
 8000606:	1a2d      	subs	r5, r5, r0
 8000608:	4690      	mov	r8, r2
 800060a:	469c      	mov	ip, r3
 800060c:	3d76      	subs	r5, #118	; 0x76
 800060e:	e74e      	b.n	80004ae <__aeabi_fmul+0x5e>
 8000610:	2480      	movs	r4, #128	; 0x80
 8000612:	2100      	movs	r1, #0
 8000614:	20ff      	movs	r0, #255	; 0xff
 8000616:	03e4      	lsls	r4, r4, #15
 8000618:	e760      	b.n	80004dc <__aeabi_fmul+0x8c>
 800061a:	2301      	movs	r3, #1
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	2b1b      	cmp	r3, #27
 8000620:	dd00      	ble.n	8000624 <__aeabi_fmul+0x1d4>
 8000622:	e759      	b.n	80004d8 <__aeabi_fmul+0x88>
 8000624:	0022      	movs	r2, r4
 8000626:	309e      	adds	r0, #158	; 0x9e
 8000628:	40da      	lsrs	r2, r3
 800062a:	4084      	lsls	r4, r0
 800062c:	0013      	movs	r3, r2
 800062e:	1e62      	subs	r2, r4, #1
 8000630:	4194      	sbcs	r4, r2
 8000632:	431c      	orrs	r4, r3
 8000634:	0763      	lsls	r3, r4, #29
 8000636:	d004      	beq.n	8000642 <__aeabi_fmul+0x1f2>
 8000638:	230f      	movs	r3, #15
 800063a:	4023      	ands	r3, r4
 800063c:	2b04      	cmp	r3, #4
 800063e:	d000      	beq.n	8000642 <__aeabi_fmul+0x1f2>
 8000640:	3404      	adds	r4, #4
 8000642:	0163      	lsls	r3, r4, #5
 8000644:	d51a      	bpl.n	800067c <__aeabi_fmul+0x22c>
 8000646:	2001      	movs	r0, #1
 8000648:	2400      	movs	r4, #0
 800064a:	e747      	b.n	80004dc <__aeabi_fmul+0x8c>
 800064c:	2080      	movs	r0, #128	; 0x80
 800064e:	03c0      	lsls	r0, r0, #15
 8000650:	4204      	tst	r4, r0
 8000652:	d009      	beq.n	8000668 <__aeabi_fmul+0x218>
 8000654:	4643      	mov	r3, r8
 8000656:	4203      	tst	r3, r0
 8000658:	d106      	bne.n	8000668 <__aeabi_fmul+0x218>
 800065a:	4644      	mov	r4, r8
 800065c:	4304      	orrs	r4, r0
 800065e:	0264      	lsls	r4, r4, #9
 8000660:	0039      	movs	r1, r7
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	e739      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000668:	2080      	movs	r0, #128	; 0x80
 800066a:	03c0      	lsls	r0, r0, #15
 800066c:	4304      	orrs	r4, r0
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0031      	movs	r1, r6
 8000672:	20ff      	movs	r0, #255	; 0xff
 8000674:	0a64      	lsrs	r4, r4, #9
 8000676:	e731      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000678:	0028      	movs	r0, r5
 800067a:	e765      	b.n	8000548 <__aeabi_fmul+0xf8>
 800067c:	01a4      	lsls	r4, r4, #6
 800067e:	2000      	movs	r0, #0
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	e72b      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000684:	2080      	movs	r0, #128	; 0x80
 8000686:	03c0      	lsls	r0, r0, #15
 8000688:	4304      	orrs	r4, r0
 800068a:	0264      	lsls	r4, r4, #9
 800068c:	20ff      	movs	r0, #255	; 0xff
 800068e:	0a64      	lsrs	r4, r4, #9
 8000690:	e724      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	08005fe0 	.word	0x08005fe0
 8000698:	f7ffffff 	.word	0xf7ffffff

0800069c <__aeabi_i2f>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	2800      	cmp	r0, #0
 80006a0:	d013      	beq.n	80006ca <__aeabi_i2f+0x2e>
 80006a2:	17c3      	asrs	r3, r0, #31
 80006a4:	18c6      	adds	r6, r0, r3
 80006a6:	405e      	eors	r6, r3
 80006a8:	0fc4      	lsrs	r4, r0, #31
 80006aa:	0030      	movs	r0, r6
 80006ac:	f000 f844 	bl	8000738 <__clzsi2>
 80006b0:	239e      	movs	r3, #158	; 0x9e
 80006b2:	0005      	movs	r5, r0
 80006b4:	1a1b      	subs	r3, r3, r0
 80006b6:	2b96      	cmp	r3, #150	; 0x96
 80006b8:	dc0f      	bgt.n	80006da <__aeabi_i2f+0x3e>
 80006ba:	2808      	cmp	r0, #8
 80006bc:	dd01      	ble.n	80006c2 <__aeabi_i2f+0x26>
 80006be:	3d08      	subs	r5, #8
 80006c0:	40ae      	lsls	r6, r5
 80006c2:	0276      	lsls	r6, r6, #9
 80006c4:	0a76      	lsrs	r6, r6, #9
 80006c6:	b2d8      	uxtb	r0, r3
 80006c8:	e002      	b.n	80006d0 <__aeabi_i2f+0x34>
 80006ca:	2400      	movs	r4, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	2600      	movs	r6, #0
 80006d0:	05c0      	lsls	r0, r0, #23
 80006d2:	4330      	orrs	r0, r6
 80006d4:	07e4      	lsls	r4, r4, #31
 80006d6:	4320      	orrs	r0, r4
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006da:	2b99      	cmp	r3, #153	; 0x99
 80006dc:	dd0c      	ble.n	80006f8 <__aeabi_i2f+0x5c>
 80006de:	2205      	movs	r2, #5
 80006e0:	0031      	movs	r1, r6
 80006e2:	1a12      	subs	r2, r2, r0
 80006e4:	40d1      	lsrs	r1, r2
 80006e6:	000a      	movs	r2, r1
 80006e8:	0001      	movs	r1, r0
 80006ea:	0030      	movs	r0, r6
 80006ec:	311b      	adds	r1, #27
 80006ee:	4088      	lsls	r0, r1
 80006f0:	1e41      	subs	r1, r0, #1
 80006f2:	4188      	sbcs	r0, r1
 80006f4:	4302      	orrs	r2, r0
 80006f6:	0016      	movs	r6, r2
 80006f8:	2d05      	cmp	r5, #5
 80006fa:	dc12      	bgt.n	8000722 <__aeabi_i2f+0x86>
 80006fc:	0031      	movs	r1, r6
 80006fe:	4f0d      	ldr	r7, [pc, #52]	; (8000734 <__aeabi_i2f+0x98>)
 8000700:	4039      	ands	r1, r7
 8000702:	0772      	lsls	r2, r6, #29
 8000704:	d009      	beq.n	800071a <__aeabi_i2f+0x7e>
 8000706:	200f      	movs	r0, #15
 8000708:	4030      	ands	r0, r6
 800070a:	2804      	cmp	r0, #4
 800070c:	d005      	beq.n	800071a <__aeabi_i2f+0x7e>
 800070e:	3104      	adds	r1, #4
 8000710:	014a      	lsls	r2, r1, #5
 8000712:	d502      	bpl.n	800071a <__aeabi_i2f+0x7e>
 8000714:	239f      	movs	r3, #159	; 0x9f
 8000716:	4039      	ands	r1, r7
 8000718:	1b5b      	subs	r3, r3, r5
 800071a:	0189      	lsls	r1, r1, #6
 800071c:	0a4e      	lsrs	r6, r1, #9
 800071e:	b2d8      	uxtb	r0, r3
 8000720:	e7d6      	b.n	80006d0 <__aeabi_i2f+0x34>
 8000722:	1f6a      	subs	r2, r5, #5
 8000724:	4096      	lsls	r6, r2
 8000726:	0031      	movs	r1, r6
 8000728:	4f02      	ldr	r7, [pc, #8]	; (8000734 <__aeabi_i2f+0x98>)
 800072a:	4039      	ands	r1, r7
 800072c:	0772      	lsls	r2, r6, #29
 800072e:	d0f4      	beq.n	800071a <__aeabi_i2f+0x7e>
 8000730:	e7e9      	b.n	8000706 <__aeabi_i2f+0x6a>
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	fbffffff 	.word	0xfbffffff

08000738 <__clzsi2>:
 8000738:	211c      	movs	r1, #28
 800073a:	2301      	movs	r3, #1
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	4298      	cmp	r0, r3
 8000740:	d301      	bcc.n	8000746 <__clzsi2+0xe>
 8000742:	0c00      	lsrs	r0, r0, #16
 8000744:	3910      	subs	r1, #16
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	4298      	cmp	r0, r3
 800074a:	d301      	bcc.n	8000750 <__clzsi2+0x18>
 800074c:	0a00      	lsrs	r0, r0, #8
 800074e:	3908      	subs	r1, #8
 8000750:	091b      	lsrs	r3, r3, #4
 8000752:	4298      	cmp	r0, r3
 8000754:	d301      	bcc.n	800075a <__clzsi2+0x22>
 8000756:	0900      	lsrs	r0, r0, #4
 8000758:	3904      	subs	r1, #4
 800075a:	a202      	add	r2, pc, #8	; (adr r2, 8000764 <__clzsi2+0x2c>)
 800075c:	5c10      	ldrb	r0, [r2, r0]
 800075e:	1840      	adds	r0, r0, r1
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	02020304 	.word	0x02020304
 8000768:	01010101 	.word	0x01010101
	...

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f003 faf2 	bl	8003d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f005 fbdb 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f000 fbb7 	bl	8000f18 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000518 	.word	0x20000518
  ldr r2, =_sidata
 80007b8:	08006eb0 	.word	0x08006eb0
  ldr r2, =_sbss
 80007bc:	20000518 	.word	0x20000518
  ldr r4, =_ebss
 80007c0:	2000070c 	.word	0x2000070c

080007c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_IRQHandler>
	...

080007c8 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80007c8:	b510      	push	{r4, lr}
 80007ca:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 80007cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ce:	6940      	ldr	r0, [r0, #20]
 80007d0:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80007d2:	2200      	movs	r2, #0
 80007d4:	234c      	movs	r3, #76	; 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80007d6:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 80007d8:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80007da:	3b04      	subs	r3, #4
 80007dc:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80007de:	6960      	ldr	r0, [r4, #20]
 80007e0:	2204      	movs	r2, #4
 80007e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007e4:	311c      	adds	r1, #28
 80007e6:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)

080007ec <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80007ee:	780a      	ldrb	r2, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 80007f0:	790b      	ldrb	r3, [r1, #4]
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80007f2:	01d2      	lsls	r2, r2, #7
               | (((uint32_t)capabilities->version) << 4U)
 80007f4:	011b      	lsls	r3, r3, #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007f6:	4313      	orrs	r3, r2
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80007f8:	784a      	ldrb	r2, [r1, #1]
  header &= 0x0fffffffU;
 80007fa:	2505      	movs	r5, #5
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80007fc:	0212      	lsls	r2, r2, #8
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007fe:	4313      	orrs	r3, r2
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000800:	788a      	ldrb	r2, [r1, #2]
{
 8000802:	0004      	movs	r4, r0
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000804:	0392      	lsls	r2, r2, #14
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000806:	4313      	orrs	r3, r2
 8000808:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800080a:	21ff      	movs	r1, #255	; 0xff
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800080c:	0552      	lsls	r2, r2, #21
 800080e:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000810:	4e16      	ldr	r6, [pc, #88]	; (800086c <ASPEP_sendBeacon+0x80>)
 8000812:	4019      	ands	r1, r3
 8000814:	4329      	orrs	r1, r5
  header &= 0x0fffffffU;
 8000816:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000818:	5c70      	ldrb	r0, [r6, r1]
 800081a:	0b17      	lsrs	r7, r2, #12
 800081c:	4078      	eors	r0, r7
 800081e:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000820:	5c31      	ldrb	r1, [r6, r0]
 8000822:	0d17      	lsrs	r7, r2, #20
 8000824:	4079      	eors	r1, r7
 8000826:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000828:	5c71      	ldrb	r1, [r6, r1]
 800082a:	0f12      	lsrs	r2, r2, #28
 800082c:	404a      	eors	r2, r1
 800082e:	4910      	ldr	r1, [pc, #64]	; (8000870 <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 8000830:	5c8a      	ldrb	r2, [r1, r2]
 8000832:	0712      	lsls	r2, r2, #28
 8000834:	4313      	orrs	r3, r2
 8000836:	432b      	orrs	r3, r5
 8000838:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083a:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800083c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800083e:	2b00      	cmp	r3, #0
 8000840:	d007      	beq.n	8000852 <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8000842:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000844:	2324      	movs	r3, #36	; 0x24
 8000846:	5ce2      	ldrb	r2, [r4, r3]
 8000848:	2a00      	cmp	r2, #0
 800084a:	d101      	bne.n	8000850 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 800084c:	3202      	adds	r2, #2
 800084e:	54e2      	strb	r2, [r4, r3]
}
 8000850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000852:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000854:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000856:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000858:	3324      	adds	r3, #36	; 0x24
 800085a:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800085c:	6321      	str	r1, [r4, #48]	; 0x30
 800085e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000860:	6960      	ldr	r0, [r4, #20]
 8000862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000864:	3201      	adds	r2, #1
 8000866:	4798      	blx	r3
 8000868:	e7f2      	b.n	8000850 <ASPEP_sendBeacon+0x64>
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	08006030 	.word	0x08006030
 8000870:	08006020 	.word	0x08006020

08000874 <ASPEP_sendPing>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	000c      	movs	r4, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000878:	2148      	movs	r1, #72	; 0x48
{
 800087a:	0003      	movs	r3, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800087c:	5c41      	ldrb	r1, [r0, r1]
              | (uint32_t)((uint32_t)Nbit << 6U)
 800087e:	2001      	movs	r0, #1
 8000880:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000882:	0121      	lsls	r1, r4, #4
              | (uint32_t)((uint32_t)cBit << 5U)
 8000884:	0164      	lsls	r4, r4, #5
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000886:	4321      	orrs	r1, r4
 8000888:	0312      	lsls	r2, r2, #12
 800088a:	430a      	orrs	r2, r1
              | (uint32_t)((uint32_t)Nbit << 6U)
 800088c:	0181      	lsls	r1, r0, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800088e:	430a      	orrs	r2, r1
    uint8_t ipID = pHandle->liid & 0xFU;
 8000890:	214b      	movs	r1, #75	; 0x4b
              | (uint32_t)((uint32_t)Nbit << 7U)
 8000892:	01c0      	lsls	r0, r0, #7
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000894:	4302      	orrs	r2, r0
    uint8_t ipID = pHandle->liid & 0xFU;
 8000896:	5c58      	ldrb	r0, [r3, r1]
              | (uint32_t)((uint32_t)ipID << 8U)
 8000898:	393c      	subs	r1, #60	; 0x3c
 800089a:	4001      	ands	r1, r0
 800089c:	0209      	lsls	r1, r1, #8
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800089e:	430a      	orrs	r2, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008a0:	21ff      	movs	r1, #255	; 0xff
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80008a2:	2006      	movs	r0, #6
 80008a4:	0014      	movs	r4, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80008a6:	4d16      	ldr	r5, [pc, #88]	; (8000900 <ASPEP_sendPing+0x8c>)
 80008a8:	4011      	ands	r1, r2
 80008aa:	4301      	orrs	r1, r0
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80008ac:	4304      	orrs	r4, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008ae:	5c68      	ldrb	r0, [r5, r1]
 80008b0:	0a16      	lsrs	r6, r2, #8
 80008b2:	4070      	eors	r0, r6
 80008b4:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008b6:	5c29      	ldrb	r1, [r5, r0]
 80008b8:	0c16      	lsrs	r6, r2, #16
 80008ba:	4071      	eors	r1, r6
 80008bc:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008be:	5c69      	ldrb	r1, [r5, r1]
 80008c0:	0e12      	lsrs	r2, r2, #24
 80008c2:	404a      	eors	r2, r1
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 80008c6:	5c8a      	ldrb	r2, [r1, r2]
 80008c8:	0712      	lsls	r2, r2, #28
 80008ca:	4322      	orrs	r2, r4
 80008cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008ce:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d007      	beq.n	80008e6 <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 80008d6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	5c99      	ldrb	r1, [r3, r2]
 80008dc:	2900      	cmp	r1, #0
 80008de:	d101      	bne.n	80008e4 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 80008e0:	3102      	adds	r1, #2
 80008e2:	5499      	strb	r1, [r3, r2]
}
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008e6:	0019      	movs	r1, r3
        pHandle->ctrlBuffer.state = readLock;
 80008e8:	2003      	movs	r0, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008ea:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80008ec:	3224      	adds	r2, #36	; 0x24
 80008ee:	5498      	strb	r0, [r3, r2]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80008f0:	6319      	str	r1, [r3, #48]	; 0x30
 80008f2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80008f4:	6958      	ldr	r0, [r3, #20]
 80008f6:	3a20      	subs	r2, #32
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4798      	blx	r3
 80008fc:	e7f2      	b.n	80008e4 <ASPEP_sendPing+0x70>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	08006030 	.word	0x08006030
 8000904:	08006020 	.word	0x08006020

08000908 <ASPEP_getBuffer>:
{
 8000908:	0003      	movs	r3, r0
 800090a:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 800090c:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 800090e:	2a0a      	cmp	r2, #10
 8000910:	d000      	beq.n	8000914 <ASPEP_getBuffer+0xc>
}
 8000912:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000914:	3224      	adds	r2, #36	; 0x24
 8000916:	5c9c      	ldrb	r4, [r3, r2]
 8000918:	2c01      	cmp	r4, #1
 800091a:	d8fa      	bhi.n	8000912 <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800091c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800091e:	3004      	adds	r0, #4
 8000920:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000922:	2101      	movs	r1, #1
  bool result = true;
 8000924:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 8000926:	5499      	strb	r1, [r3, r2]
 8000928:	e7f3      	b.n	8000912 <ASPEP_getBuffer+0xa>
 800092a:	46c0      	nop			; (mov r8, r8)

0800092c <ASPEP_sendPacket>:
{
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000930:	204c      	movs	r0, #76	; 0x4c
{
 8000932:	46c6      	mov	lr, r8
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000934:	5c25      	ldrb	r5, [r4, r0]
{
 8000936:	b500      	push	{lr}
      result = ASPEP_NOT_CONNECTED;
 8000938:	384a      	subs	r0, #74	; 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800093a:	2d02      	cmp	r5, #2
 800093c:	d002      	beq.n	8000944 <ASPEP_sendPacket+0x18>
}
 800093e:	bc80      	pop	{r7}
 8000940:	46b8      	mov	r8, r7
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000944:	0110      	lsls	r0, r2, #4
 8000946:	4318      	orrs	r0, r3
      *header = tmpHeader;
 8000948:	1f0e      	subs	r6, r1, #4
 800094a:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800094c:	2054      	movs	r0, #84	; 0x54
 800094e:	5c20      	ldrb	r0, [r4, r0]
 8000950:	2801      	cmp	r0, #1
 8000952:	d106      	bne.n	8000962 <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000954:	30c9      	adds	r0, #201	; 0xc9
 8000956:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000958:	1889      	adds	r1, r1, r2
 800095a:	3034      	adds	r0, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 800095c:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 800095e:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000960:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000962:	2b0a      	cmp	r3, #10
 8000964:	d105      	bne.n	8000972 <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 8000966:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 8000968:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 800096a:	2900      	cmp	r1, #0
 800096c:	d0e7      	beq.n	800093e <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 800096e:	2100      	movs	r1, #0
 8000970:	7421      	strb	r1, [r4, #16]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000972:	20ff      	movs	r0, #255	; 0xff
  header &= 0x0fffffffU;
 8000974:	6831      	ldr	r1, [r6, #0]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000976:	6837      	ldr	r7, [r6, #0]
  header &= 0x0fffffffU;
 8000978:	010d      	lsls	r5, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800097a:	4038      	ands	r0, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800097c:	0b2f      	lsrs	r7, r5, #12
 800097e:	46b8      	mov	r8, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000980:	4923      	ldr	r1, [pc, #140]	; (8000a10 <ASPEP_sendPacket+0xe4>)
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000982:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000984:	5c0f      	ldrb	r7, [r1, r0]
 8000986:	4640      	mov	r0, r8
 8000988:	4047      	eors	r7, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800098a:	0d28      	lsrs	r0, r5, #20
 800098c:	4680      	mov	r8, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800098e:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000990:	5dc8      	ldrb	r0, [r1, r7]
 8000992:	4647      	mov	r7, r8
 8000994:	4078      	eors	r0, r7
 8000996:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000998:	5c08      	ldrb	r0, [r1, r0]
 800099a:	0f2d      	lsrs	r5, r5, #28
 800099c:	4045      	eors	r5, r0
 800099e:	481d      	ldr	r0, [pc, #116]	; (8000a14 <ASPEP_sendPacket+0xe8>)
  *headerPtr |= (uint32_t)crc << 28;
 80009a0:	6831      	ldr	r1, [r6, #0]
 80009a2:	5d40      	ldrb	r0, [r0, r5]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80009a4:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 80009a6:	0700      	lsls	r0, r0, #28
 80009a8:	4308      	orrs	r0, r1
 80009aa:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80009ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d016      	beq.n	80009e2 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 80009b4:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d009      	beq.n	80009ce <ASPEP_sendPacket+0xa2>
  uint8_t result = ASPEP_OK;
 80009ba:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1be      	bne.n	800093e <ASPEP_sendPacket+0x12>
        if (pHandle->ctrlBuffer.state != available)
 80009c0:	3324      	adds	r3, #36	; 0x24
 80009c2:	5ce0      	ldrb	r0, [r4, r3]
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d121      	bne.n	8000a0c <ASPEP_sendPacket+0xe0>
          pHandle->ctrlBuffer.state = pending;
 80009c8:	2202      	movs	r2, #2
 80009ca:	54e2      	strb	r2, [r4, r3]
 80009cc:	e7b7      	b.n	800093e <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 80009ce:	3324      	adds	r3, #36	; 0x24
 80009d0:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 80009d2:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 80009d4:	2901      	cmp	r1, #1
 80009d6:	d1b2      	bne.n	800093e <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 80009d8:	3101      	adds	r1, #1
 80009da:	54e1      	strb	r1, [r4, r3]
  uint8_t result = ASPEP_OK;
 80009dc:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 80009de:	85a2      	strh	r2, [r4, #44]	; 0x2c
 80009e0:	e7ad      	b.n	800093e <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d00c      	beq.n	8000a00 <ASPEP_sendPacket+0xd4>
        pHandle->ctrlBuffer.state = readLock;
 80009e6:	2324      	movs	r3, #36	; 0x24
 80009e8:	2103      	movs	r1, #3
 80009ea:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009ec:	0023      	movs	r3, r4
 80009ee:	3320      	adds	r3, #32
 80009f0:	6323      	str	r3, [r4, #48]	; 0x30
 80009f2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009f4:	0031      	movs	r1, r6
 80009f6:	6960      	ldr	r0, [r4, #20]
 80009f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009fa:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 80009fc:	2000      	movs	r0, #0
 80009fe:	e79e      	b.n	800093e <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000a00:	3324      	adds	r3, #36	; 0x24
 8000a02:	3103      	adds	r1, #3
 8000a04:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000a06:	0023      	movs	r3, r4
 8000a08:	3328      	adds	r3, #40	; 0x28
 8000a0a:	e7f1      	b.n	80009f0 <ASPEP_sendPacket+0xc4>
          result = ASPEP_BUFFER_ERROR;
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	e796      	b.n	800093e <ASPEP_sendPacket+0x12>
 8000a10:	08006030 	.word	0x08006030
 8000a14:	08006020 	.word	0x08006020

08000a18 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000a1a:	2524      	movs	r5, #36	; 0x24
 8000a1c:	5d43      	ldrb	r3, [r0, r5]
{
 8000a1e:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d012      	beq.n	8000a4a <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000a24:	2200      	movs	r2, #0
 8000a26:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000a28:	718a      	strb	r2, [r1, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000a2a:	322e      	adds	r2, #46	; 0x2e
 8000a2c:	5c82      	ldrb	r2, [r0, r2]
 8000a2e:	2a02      	cmp	r2, #2
 8000a30:	d011      	beq.n	8000a56 <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d11b      	bne.n	8000a6e <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a36:	0001      	movs	r1, r0
 8000a38:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000a3c:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000a3e:	2204      	movs	r2, #4
 8000a40:	6940      	ldr	r0, [r0, #20]
 8000a42:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000a44:	2303      	movs	r3, #3
 8000a46:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 8000a4e:	332e      	adds	r3, #46	; 0x2e
 8000a50:	5cc3      	ldrb	r3, [r0, r3]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d10b      	bne.n	8000a6e <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a56:	0023      	movs	r3, r4
 8000a58:	3328      	adds	r3, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000a5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a5c:	6323      	str	r3, [r4, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000a5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a62:	6960      	ldr	r0, [r4, #20]
 8000a64:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000a66:	232e      	movs	r3, #46	; 0x2e
 8000a68:	2203      	movs	r2, #3
 8000a6a:	54e2      	strb	r2, [r4, r3]
 8000a6c:	e7ec      	b.n	8000a48 <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000a72:	e7e9      	b.n	8000a48 <ASPEP_HWDataTransmittedIT+0x30>

08000a74 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	46de      	mov	lr, fp
 8000a78:	4657      	mov	r7, sl
 8000a7a:	464e      	mov	r6, r9
 8000a7c:	4645      	mov	r5, r8
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
 8000a7e:	2200      	movs	r2, #0
{
 8000a80:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000a82:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000a84:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000a86:	3249      	adds	r2, #73	; 0x49
{
 8000a88:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000a8a:	5c80      	ldrb	r0, [r0, r2]
{
 8000a8c:	b083      	sub	sp, #12
    if (pHandle->NewPacketAvailable)
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	d018      	beq.n	8000ac4 <ASPEP_RXframeProcess+0x50>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000a92:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000a94:	264c      	movs	r6, #76	; 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000a96:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000a98:	5da2      	ldrb	r2, [r4, r6]
 8000a9a:	2a01      	cmp	r2, #1
 8000a9c:	d05e      	beq.n	8000b5c <ASPEP_RXframeProcess+0xe8>
 8000a9e:	2a02      	cmp	r2, #2
 8000aa0:	d047      	beq.n	8000b32 <ASPEP_RXframeProcess+0xbe>
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d038      	beq.n	8000b1a <ASPEP_RXframeProcess+0xa6>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	2204      	movs	r2, #4
 8000aac:	6960      	ldr	r0, [r4, #20]
 8000aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ab0:	311c      	adds	r1, #28
 8000ab2:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	b003      	add	sp, #12
 8000ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aba:	46bb      	mov	fp, r7
 8000abc:	46b2      	mov	sl, r6
 8000abe:	46a9      	mov	r9, r5
 8000ac0:	46a0      	mov	r8, r4
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000ac4:	234a      	movs	r3, #74	; 0x4a
 8000ac6:	5ce3      	ldrb	r3, [r4, r3]
  uint8_t *result = NULL;
 8000ac8:	2500      	movs	r5, #0
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f2      	beq.n	8000ab4 <ASPEP_RXframeProcess+0x40>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ace:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	021a      	lsls	r2, r3, #8
 8000ad4:	041b      	lsls	r3, r3, #16
 8000ad6:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ad8:	0a1a      	lsrs	r2, r3, #8
 8000ada:	48a9      	ldr	r0, [pc, #676]	; (8000d80 <ASPEP_RXframeProcess+0x30c>)
 8000adc:	406a      	eors	r2, r5
 8000ade:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ae0:	5c82      	ldrb	r2, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000ae2:	4319      	orrs	r1, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ae4:	0c1b      	lsrs	r3, r3, #16
 8000ae6:	4053      	eors	r3, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000ae8:	5cc3      	ldrb	r3, [r0, r3]
 8000aea:	4aa6      	ldr	r2, [pc, #664]	; (8000d84 <ASPEP_RXframeProcess+0x310>)
  *headerPtr |= (uint32_t)crc << 28;
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	071b      	lsls	r3, r3, #28
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d03e      	beq.n	8000b7a <ASPEP_RXframeProcess+0x106>
  __ASM volatile ("cpsie i" : : : "memory");
 8000afc:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000afe:	2324      	movs	r3, #36	; 0x24
 8000b00:	5ce2      	ldrb	r2, [r4, r3]
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d101      	bne.n	8000b0a <ASPEP_RXframeProcess+0x96>
          pHandle->ctrlBuffer.state = pending;
 8000b06:	3202      	adds	r2, #2
 8000b08:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000b0a:	234a      	movs	r3, #74	; 0x4a
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000b10:	6960      	ldr	r0, [r4, #20]
 8000b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b14:	4798      	blx	r3
  uint8_t *result = NULL;
 8000b16:	2500      	movs	r5, #0
 8000b18:	e7cc      	b.n	8000ab4 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000b1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b1c:	2a05      	cmp	r2, #5
 8000b1e:	d038      	beq.n	8000b92 <ASPEP_RXframeProcess+0x11e>
          else if (PING == pHandle->rxPacketType)
 8000b20:	2a06      	cmp	r2, #6
 8000b22:	d1c1      	bne.n	8000aa8 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000b24:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b26:	2100      	movs	r1, #0
 8000b28:	0020      	movs	r0, r4
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	f7ff fea2 	bl	8000874 <ASPEP_sendPing>
 8000b30:	e7ba      	b.n	8000aa8 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000b32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b34:	2a05      	cmp	r2, #5
 8000b36:	d100      	bne.n	8000b3a <ASPEP_RXframeProcess+0xc6>
 8000b38:	e0a0      	b.n	8000c7c <ASPEP_RXframeProcess+0x208>
          else if (PING == pHandle->rxPacketType)
 8000b3a:	2a06      	cmp	r2, #6
 8000b3c:	d100      	bne.n	8000b40 <ASPEP_RXframeProcess+0xcc>
 8000b3e:	e0d5      	b.n	8000cec <ASPEP_RXframeProcess+0x278>
  uint8_t *result = NULL;
 8000b40:	2500      	movs	r5, #0
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000b42:	2a09      	cmp	r2, #9
 8000b44:	d1b0      	bne.n	8000aa8 <ASPEP_RXframeProcess+0x34>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000b46:	323f      	adds	r2, #63	; 0x3f
 8000b48:	5ca3      	ldrb	r3, [r4, r2]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000b52:	3343      	adds	r3, #67	; 0x43
 8000b54:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000b56:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 8000b58:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000b5a:	e7a5      	b.n	8000aa8 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000b5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b5e:	2a05      	cmp	r2, #5
 8000b60:	d056      	beq.n	8000c10 <ASPEP_RXframeProcess+0x19c>
  uint8_t *result = NULL;
 8000b62:	2500      	movs	r5, #0
          else if (PING == pHandle->rxPacketType)
 8000b64:	2a06      	cmp	r2, #6
 8000b66:	d19f      	bne.n	8000aa8 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000b68:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f7ff fe80 	bl	8000874 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000b74:	2302      	movs	r3, #2
 8000b76:	55a3      	strb	r3, [r4, r6]
 8000b78:	e796      	b.n	8000aa8 <ASPEP_RXframeProcess+0x34>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b7a:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	3324      	adds	r3, #36	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b80:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b82:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b84:	6321      	str	r1, [r4, #48]	; 0x30
 8000b86:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000b88:	6960      	ldr	r0, [r4, #20]
 8000b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b8c:	3201      	adds	r2, #1
 8000b8e:	4798      	blx	r3
 8000b90:	e7bb      	b.n	8000b0a <ASPEP_RXframeProcess+0x96>
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b92:	217f      	movs	r1, #127	; 0x7f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000b94:	7f62      	ldrb	r2, [r4, #29]
 8000b96:	353f      	adds	r5, #63	; 0x3f
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000b98:	0d5e      	lsrs	r6, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000b9a:	4015      	ands	r5, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b9c:	0b9a      	lsrs	r2, r3, #14
 8000b9e:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000ba0:	4031      	ands	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ba2:	2654      	movs	r6, #84	; 0x54
 8000ba4:	5da6      	ldrb	r6, [r4, r6]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000ba6:	7f20      	ldrb	r0, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ba8:	46b4      	mov	ip, r6
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000baa:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bac:	1c06      	adds	r6, r0, #0
 8000bae:	4560      	cmp	r0, ip
 8000bb0:	d900      	bls.n	8000bb4 <ASPEP_RXframeProcess+0x140>
 8000bb2:	4666      	mov	r6, ip
 8000bb4:	2754      	movs	r7, #84	; 0x54
 8000bb6:	55e6      	strb	r6, [r4, r7]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bb8:	2655      	movs	r6, #85	; 0x55
 8000bba:	5da6      	ldrb	r6, [r4, r6]
 8000bbc:	1c37      	adds	r7, r6, #0
 8000bbe:	42ae      	cmp	r6, r5
 8000bc0:	d900      	bls.n	8000bc4 <ASPEP_RXframeProcess+0x150>
 8000bc2:	1c2f      	adds	r7, r5, #0
 8000bc4:	b2fe      	uxtb	r6, r7
 8000bc6:	9600      	str	r6, [sp, #0]
 8000bc8:	2655      	movs	r6, #85	; 0x55
 8000bca:	55a7      	strb	r7, [r4, r6]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bcc:	2756      	movs	r7, #86	; 0x56
 8000bce:	5de6      	ldrb	r6, [r4, r7]
 8000bd0:	4690      	mov	r8, r2
 8000bd2:	46b1      	mov	r9, r6
 8000bd4:	42b2      	cmp	r2, r6
 8000bd6:	d900      	bls.n	8000bda <ASPEP_RXframeProcess+0x166>
 8000bd8:	46b0      	mov	r8, r6
 8000bda:	4646      	mov	r6, r8
 8000bdc:	b2f6      	uxtb	r6, r6
 8000bde:	2756      	movs	r7, #86	; 0x56
 8000be0:	9601      	str	r6, [sp, #4]
 8000be2:	4646      	mov	r6, r8
 8000be4:	55e6      	strb	r6, [r4, r7]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000be6:	3701      	adds	r7, #1
 8000be8:	5de6      	ldrb	r6, [r4, r7]
 8000bea:	1c0f      	adds	r7, r1, #0
 8000bec:	46b2      	mov	sl, r6
 8000bee:	42b1      	cmp	r1, r6
 8000bf0:	d900      	bls.n	8000bf4 <ASPEP_RXframeProcess+0x180>
 8000bf2:	1c37      	adds	r7, r6, #0
 8000bf4:	b2fe      	uxtb	r6, r7
 8000bf6:	46b0      	mov	r8, r6
 8000bf8:	2657      	movs	r6, #87	; 0x57
 8000bfa:	55a7      	strb	r7, [r4, r6]
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000bfc:	4560      	cmp	r0, ip
 8000bfe:	d800      	bhi.n	8000c02 <ASPEP_RXframeProcess+0x18e>
 8000c00:	e09a      	b.n	8000d38 <ASPEP_RXframeProcess+0x2c4>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c02:	0021      	movs	r1, r4
 8000c04:	0020      	movs	r0, r4
 8000c06:	3154      	adds	r1, #84	; 0x54
 8000c08:	f7ff fdf0 	bl	80007ec <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	e74b      	b.n	8000aa8 <ASPEP_RXframeProcess+0x34>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c10:	213f      	movs	r1, #63	; 0x3f
 8000c12:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c14:	0d58      	lsrs	r0, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c16:	4011      	ands	r1, r2
 8000c18:	468c      	mov	ip, r1
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c1a:	217f      	movs	r1, #127	; 0x7f
 8000c1c:	0b9a      	lsrs	r2, r3, #14
 8000c1e:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c20:	4001      	ands	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c22:	2054      	movs	r0, #84	; 0x54
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c24:	7f27      	ldrb	r7, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c26:	5c20      	ldrb	r0, [r4, r0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c28:	09ff      	lsrs	r7, r7, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c2a:	1c3d      	adds	r5, r7, #0
 8000c2c:	4287      	cmp	r7, r0
 8000c2e:	d900      	bls.n	8000c32 <ASPEP_RXframeProcess+0x1be>
 8000c30:	1c05      	adds	r5, r0, #0
 8000c32:	2654      	movs	r6, #84	; 0x54
 8000c34:	55a5      	strb	r5, [r4, r6]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c36:	2555      	movs	r5, #85	; 0x55
 8000c38:	5d66      	ldrb	r6, [r4, r5]
 8000c3a:	1c35      	adds	r5, r6, #0
 8000c3c:	4566      	cmp	r6, ip
 8000c3e:	d900      	bls.n	8000c42 <ASPEP_RXframeProcess+0x1ce>
 8000c40:	4665      	mov	r5, ip
 8000c42:	b2ee      	uxtb	r6, r5
 8000c44:	46b1      	mov	r9, r6
 8000c46:	2655      	movs	r6, #85	; 0x55
 8000c48:	55a5      	strb	r5, [r4, r6]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c4a:	2556      	movs	r5, #86	; 0x56
 8000c4c:	5d65      	ldrb	r5, [r4, r5]
 8000c4e:	1c16      	adds	r6, r2, #0
 8000c50:	46ab      	mov	fp, r5
 8000c52:	42aa      	cmp	r2, r5
 8000c54:	d900      	bls.n	8000c58 <ASPEP_RXframeProcess+0x1e4>
 8000c56:	1c2e      	adds	r6, r5, #0
 8000c58:	2556      	movs	r5, #86	; 0x56
 8000c5a:	5566      	strb	r6, [r4, r5]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c5c:	2657      	movs	r6, #87	; 0x57
 8000c5e:	5da5      	ldrb	r5, [r4, r6]
 8000c60:	4688      	mov	r8, r1
 8000c62:	9500      	str	r5, [sp, #0]
 8000c64:	42a9      	cmp	r1, r5
 8000c66:	d900      	bls.n	8000c6a <ASPEP_RXframeProcess+0x1f6>
 8000c68:	46a8      	mov	r8, r5
 8000c6a:	2557      	movs	r5, #87	; 0x57
 8000c6c:	4646      	mov	r6, r8
 8000c6e:	5566      	strb	r6, [r4, r5]
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c70:	4287      	cmp	r7, r0
 8000c72:	d942      	bls.n	8000cfa <ASPEP_RXframeProcess+0x286>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000c74:	234c      	movs	r3, #76	; 0x4c
 8000c76:	2200      	movs	r2, #0
 8000c78:	54e2      	strb	r2, [r4, r3]
 8000c7a:	e7c2      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c7c:	273f      	movs	r7, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c7e:	217f      	movs	r1, #127	; 0x7f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c80:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c82:	0d58      	lsrs	r0, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c84:	4017      	ands	r7, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c86:	0b9a      	lsrs	r2, r3, #14
 8000c88:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c8a:	4001      	ands	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c8c:	2054      	movs	r0, #84	; 0x54
 8000c8e:	5c20      	ldrb	r0, [r4, r0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c90:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c92:	4684      	mov	ip, r0
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c94:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c96:	1c30      	adds	r0, r6, #0
 8000c98:	4566      	cmp	r6, ip
 8000c9a:	d900      	bls.n	8000c9e <ASPEP_RXframeProcess+0x22a>
 8000c9c:	4660      	mov	r0, ip
 8000c9e:	2554      	movs	r5, #84	; 0x54
 8000ca0:	5560      	strb	r0, [r4, r5]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ca2:	2055      	movs	r0, #85	; 0x55
 8000ca4:	5c25      	ldrb	r5, [r4, r0]
 8000ca6:	1c28      	adds	r0, r5, #0
 8000ca8:	42bd      	cmp	r5, r7
 8000caa:	d900      	bls.n	8000cae <ASPEP_RXframeProcess+0x23a>
 8000cac:	1c38      	adds	r0, r7, #0
 8000cae:	b2c5      	uxtb	r5, r0
 8000cb0:	46a9      	mov	r9, r5
 8000cb2:	2555      	movs	r5, #85	; 0x55
 8000cb4:	5560      	strb	r0, [r4, r5]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cb6:	2056      	movs	r0, #86	; 0x56
 8000cb8:	5c20      	ldrb	r0, [r4, r0]
 8000cba:	1c15      	adds	r5, r2, #0
 8000cbc:	4683      	mov	fp, r0
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	d900      	bls.n	8000cc4 <ASPEP_RXframeProcess+0x250>
 8000cc2:	1c05      	adds	r5, r0, #0
 8000cc4:	2056      	movs	r0, #86	; 0x56
 8000cc6:	5425      	strb	r5, [r4, r0]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cc8:	2557      	movs	r5, #87	; 0x57
 8000cca:	5d60      	ldrb	r0, [r4, r5]
 8000ccc:	4688      	mov	r8, r1
 8000cce:	9000      	str	r0, [sp, #0]
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d900      	bls.n	8000cd6 <ASPEP_RXframeProcess+0x262>
 8000cd4:	4680      	mov	r8, r0
 8000cd6:	2057      	movs	r0, #87	; 0x57
 8000cd8:	4645      	mov	r5, r8
 8000cda:	5425      	strb	r5, [r4, r0]
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	4680      	mov	r8, r0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ce0:	4566      	cmp	r6, ip
 8000ce2:	d918      	bls.n	8000d16 <ASPEP_RXframeProcess+0x2a2>
 8000ce4:	234c      	movs	r3, #76	; 0x4c
 8000ce6:	4642      	mov	r2, r8
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ce8:	54e2      	strb	r2, [r4, r3]
 8000cea:	e78a      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000cec:	2101      	movs	r1, #1
 8000cee:	0020      	movs	r0, r4
 8000cf0:	7f62      	ldrb	r2, [r4, #29]
 8000cf2:	f7ff fdbf 	bl	8000874 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	e6d6      	b.n	8000aa8 <ASPEP_RXframeProcess+0x34>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000cfa:	45cc      	cmp	ip, r9
 8000cfc:	d8ba      	bhi.n	8000c74 <ASPEP_RXframeProcess+0x200>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000cfe:	455a      	cmp	r2, fp
 8000d00:	d8b8      	bhi.n	8000c74 <ASPEP_RXframeProcess+0x200>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d02:	9a00      	ldr	r2, [sp, #0]
 8000d04:	4291      	cmp	r1, r2
 8000d06:	d8b5      	bhi.n	8000c74 <ASPEP_RXframeProcess+0x200>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d08:	2258      	movs	r2, #88	; 0x58
 8000d0a:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000d0c:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d0e:	0f5b      	lsrs	r3, r3, #29
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d1af      	bne.n	8000c74 <ASPEP_RXframeProcess+0x200>
 8000d14:	e775      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000d16:	454f      	cmp	r7, r9
 8000d18:	d8e4      	bhi.n	8000ce4 <ASPEP_RXframeProcess+0x270>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000d1a:	455a      	cmp	r2, fp
 8000d1c:	d8e2      	bhi.n	8000ce4 <ASPEP_RXframeProcess+0x270>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d1e:	9a00      	ldr	r2, [sp, #0]
 8000d20:	4291      	cmp	r1, r2
 8000d22:	d8df      	bhi.n	8000ce4 <ASPEP_RXframeProcess+0x270>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d24:	2258      	movs	r2, #88	; 0x58
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000d26:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d28:	5ca2      	ldrb	r2, [r4, r2]
 8000d2a:	0f5b      	lsrs	r3, r3, #29
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	425a      	negs	r2, r3
 8000d30:	4153      	adcs	r3, r2
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4698      	mov	r8, r3
 8000d36:	e7d5      	b.n	8000ce4 <ASPEP_RXframeProcess+0x270>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000d38:	9800      	ldr	r0, [sp, #0]
 8000d3a:	4285      	cmp	r5, r0
 8000d3c:	d900      	bls.n	8000d40 <ASPEP_RXframeProcess+0x2cc>
 8000d3e:	e760      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000d40:	454a      	cmp	r2, r9
 8000d42:	d900      	bls.n	8000d46 <ASPEP_RXframeProcess+0x2d2>
 8000d44:	e75d      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000d46:	4551      	cmp	r1, sl
 8000d48:	d900      	bls.n	8000d4c <ASPEP_RXframeProcess+0x2d8>
 8000d4a:	e75a      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d4c:	2258      	movs	r2, #88	; 0x58
 8000d4e:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000d50:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000d52:	0f5b      	lsrs	r3, r3, #29
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d000      	beq.n	8000d5a <ASPEP_RXframeProcess+0x2e6>
 8000d58:	e753      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d5a:	9f01      	ldr	r7, [sp, #4]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d5c:	0006      	movs	r6, r0
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d5e:	3701      	adds	r7, #1
 8000d60:	b2fb      	uxtb	r3, r7
 8000d62:	015b      	lsls	r3, r3, #5
 8000d64:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d66:	4643      	mov	r3, r8
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d68:	2246      	movs	r2, #70	; 0x46
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d6a:	019b      	lsls	r3, r3, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d6c:	3601      	adds	r6, #1
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d6e:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d70:	b2f3      	uxtb	r3, r6
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d76:	234c      	movs	r3, #76	; 0x4c
 8000d78:	3a45      	subs	r2, #69	; 0x45
 8000d7a:	54e2      	strb	r2, [r4, r3]
 8000d7c:	e741      	b.n	8000c02 <ASPEP_RXframeProcess+0x18e>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	08006030 	.word	0x08006030
 8000d84:	08006020 	.word	0x08006020

08000d88 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000d88:	b570      	push	{r4, r5, r6, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000d8a:	254d      	movs	r5, #77	; 0x4d
 8000d8c:	5d43      	ldrb	r3, [r0, r5]
{
 8000d8e:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <ASPEP_HWDataReceivedIT+0x1a>
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d103      	bne.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000d98:	2200      	movs	r2, #0
 8000d9a:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000d9c:	3249      	adds	r2, #73	; 0x49
 8000d9e:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000da0:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000da2:	481f      	ldr	r0, [pc, #124]	; (8000e20 <ASPEP_HWDataReceivedIT+0x98>)
 8000da4:	7f21      	ldrb	r1, [r4, #28]
 8000da6:	69e3      	ldr	r3, [r4, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000da8:	5c41      	ldrb	r1, [r0, r1]
 8000daa:	0a1a      	lsrs	r2, r3, #8
 8000dac:	4051      	eors	r1, r2
 8000dae:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000db0:	5c42      	ldrb	r2, [r0, r1]
 8000db2:	0c1e      	lsrs	r6, r3, #16
 8000db4:	4072      	eors	r2, r6
 8000db6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000db8:	5c82      	ldrb	r2, [r0, r2]
 8000dba:	0e1b      	lsrs	r3, r3, #24
 8000dbc:	4053      	eors	r3, r2
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000dbe:	5cc3      	ldrb	r3, [r0, r3]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10b      	bne.n	8000ddc <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000dc4:	7f22      	ldrb	r2, [r4, #28]
 8000dc6:	330f      	adds	r3, #15
 8000dc8:	4013      	ands	r3, r2
 8000dca:	6523      	str	r3, [r4, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d809      	bhi.n	8000de4 <ASPEP_HWDataReceivedIT+0x5c>
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d81d      	bhi.n	8000e10 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000dd4:	234a      	movs	r3, #74	; 0x4a
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	54e2      	strb	r2, [r4, r3]
              break;
 8000dda:	e7e1      	b.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000ddc:	234a      	movs	r3, #74	; 0x4a
 8000dde:	2204      	movs	r2, #4
 8000de0:	54e2      	strb	r2, [r4, r3]
 8000de2:	e7dd      	b.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d1f5      	bne.n	8000dd4 <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000de8:	8ba2      	ldrh	r2, [r4, #28]
 8000dea:	333b      	adds	r3, #59	; 0x3b
 8000dec:	0912      	lsrs	r2, r2, #4
 8000dee:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000df0:	d00e      	beq.n	8000e10 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000df2:	2346      	movs	r3, #70	; 0x46
 8000df4:	5ae3      	ldrh	r3, [r4, r3]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d30e      	bcc.n	8000e18 <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000dfa:	2354      	movs	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000dfc:	5ce3      	ldrb	r3, [r4, r3]
 8000dfe:	69a1      	ldr	r1, [r4, #24]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	18d2      	adds	r2, r2, r3
 8000e04:	6960      	ldr	r0, [r4, #20]
 8000e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e08:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	5563      	strb	r3, [r4, r5]
 8000e0e:	e7c7      	b.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000e10:	2349      	movs	r3, #73	; 0x49
 8000e12:	2201      	movs	r2, #1
 8000e14:	54e2      	strb	r2, [r4, r3]
              break;
 8000e16:	e7c3      	b.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000e18:	234a      	movs	r3, #74	; 0x4a
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	54e2      	strb	r2, [r4, r3]
 8000e1e:	e7bf      	b.n	8000da0 <ASPEP_HWDataReceivedIT+0x18>
 8000e20:	08006030 	.word	0x08006030

08000e24 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e24:	224d      	movs	r2, #77	; 0x4d
 8000e26:	2100      	movs	r1, #0
{
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e2c:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000e2e:	0001      	movs	r1, r0
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	6940      	ldr	r0, [r0, #20]
 8000e34:	311c      	adds	r1, #28
 8000e36:	3a49      	subs	r2, #73	; 0x49
 8000e38:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <SystemClock_Config+0xc8>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b510      	push	{r4, lr}
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e48:	6813      	ldr	r3, [r2, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000e4a:	4219      	tst	r1, r3
 8000e4c:	d0fc      	beq.n	8000e48 <SystemClock_Config+0xc>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	4319      	orrs	r1, r3
 8000e54:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e56:	2102      	movs	r1, #2
 8000e58:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000e5a:	4219      	tst	r1, r3
 8000e5c:	d0fc      	beq.n	8000e58 <SystemClock_Config+0x1c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e5e:	21f8      	movs	r1, #248	; 0xf8
 8000e60:	6813      	ldr	r3, [r2, #0]
 8000e62:	438b      	bics	r3, r1
 8000e64:	3978      	subs	r1, #120	; 0x78
 8000e66:	430b      	orrs	r3, r1
 8000e68:	6013      	str	r3, [r2, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8000e6a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000e6c:	397f      	subs	r1, #127	; 0x7f
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6353      	str	r3, [r2, #52]	; 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8000e72:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e74:	3101      	adds	r1, #1
 8000e76:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI14_Enable();

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 8000e78:	4219      	tst	r1, r3
 8000e7a:	d0fc      	beq.n	8000e76 <SystemClock_Config+0x3a>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 8000e7c:	21f8      	movs	r1, #248	; 0xf8
 8000e7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000e80:	438b      	bics	r3, r1
 8000e82:	3978      	subs	r1, #120	; 0x78
 8000e84:	430b      	orrs	r3, r1
 8000e86:	6353      	str	r3, [r2, #52]	; 0x34
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000e88:	6853      	ldr	r3, [r2, #4]
 8000e8a:	4920      	ldr	r1, [pc, #128]	; (8000f0c <SystemClock_Config+0xd0>)
 8000e8c:	4019      	ands	r1, r3
 8000e8e:	23a0      	movs	r3, #160	; 0xa0
 8000e90:	039b      	lsls	r3, r3, #14
 8000e92:	430b      	orrs	r3, r1
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000e94:	210f      	movs	r1, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000e96:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000e98:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e9a:	438b      	bics	r3, r1
 8000e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	045b      	lsls	r3, r3, #17
 8000ea4:	430b      	orrs	r3, r1
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000ea6:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ea8:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <SystemClock_Config+0xcc>)
 8000eac:	0489      	lsls	r1, r1, #18
 8000eae:	6813      	ldr	r3, [r2, #0]
  LL_RCC_HSI14_SetCalibTrimming(16);
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000eb0:	420b      	tst	r3, r1
 8000eb2:	d0fc      	beq.n	8000eae <SystemClock_Config+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eb4:	21f0      	movs	r1, #240	; 0xf0
 8000eb6:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eb8:	4c13      	ldr	r4, [pc, #76]	; (8000f08 <SystemClock_Config+0xcc>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eba:	438b      	bics	r3, r1
 8000ebc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000ebe:	6853      	ldr	r3, [r2, #4]
 8000ec0:	4913      	ldr	r1, [pc, #76]	; (8000f10 <SystemClock_Config+0xd4>)
 8000ec2:	400b      	ands	r3, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ec4:	2103      	movs	r1, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000ec6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ec8:	6853      	ldr	r3, [r2, #4]
 8000eca:	438b      	bics	r3, r1
 8000ecc:	3901      	subs	r1, #1
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	6863      	ldr	r3, [r4, #4]
 8000ed6:	4013      	ands	r3, r2
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d1fb      	bne.n	8000ed4 <SystemClock_Config+0x98>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <SystemClock_Config+0xd8>)
 8000ede:	f003 fb0b 	bl	80044f8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f002 ff3e 	bl	8003d64 <HAL_InitTick>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xb4>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eee:	e7fe      	b.n	8000eee <SystemClock_Config+0xb2>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ef4:	4393      	bics	r3, r2
 8000ef6:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000ef8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000efa:	3a01      	subs	r2, #1
 8000efc:	4393      	bics	r3, r2
 8000efe:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40022000 	.word	0x40022000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	ffc2ffff 	.word	0xffc2ffff
 8000f10:	fffff8ff 	.word	0xfffff8ff
 8000f14:	02dc6c00 	.word	0x02dc6c00

08000f18 <main>:
{
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	46de      	mov	lr, fp
 8000f1c:	4657      	mov	r7, sl
 8000f1e:	464e      	mov	r6, r9
 8000f20:	4645      	mov	r5, r8
 8000f22:	b5e0      	push	{r5, r6, r7, lr}
 8000f24:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8000f26:	f002 ff43 	bl	8003db0 <HAL_Init>
  SystemClock_Config();
 8000f2a:	f7ff ff87 	bl	8000e3c <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f2e:	466b      	mov	r3, sp
 8000f30:	225f      	movs	r2, #95	; 0x5f
 8000f32:	2500      	movs	r5, #0
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	701d      	strb	r5, [r3, #0]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	2218      	movs	r2, #24
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	a81c      	add	r0, sp, #112	; 0x70
 8000f3e:	f005 f83a 	bl	8005fb6 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	4bfe      	ldr	r3, [pc, #1016]	; (8001340 <main+0x428>)
 8000f46:	03c9      	lsls	r1, r1, #15
 8000f48:	4698      	mov	r8, r3
 8000f4a:	695a      	ldr	r2, [r3, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f4c:	2480      	movs	r4, #128	; 0x80
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f52:	695b      	ldr	r3, [r3, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f54:	2280      	movs	r2, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f56:	400b      	ands	r3, r1
 8000f58:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000f5a:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4641      	mov	r1, r8
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	0292      	lsls	r2, r2, #10
 8000f64:	4313      	orrs	r3, r2
 8000f66:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f68:	694b      	ldr	r3, [r1, #20]
 8000f6a:	0124      	lsls	r4, r4, #4
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8000f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  SET_BIT(RCC->AHBENR, Periphs);
 8000f72:	694b      	ldr	r3, [r1, #20]
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	02c9      	lsls	r1, r1, #11
 8000f78:	4689      	mov	r9, r1
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	4641      	mov	r1, r8
 8000f7e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f80:	694b      	ldr	r3, [r1, #20]
 8000f82:	4649      	mov	r1, r9
 8000f84:	400b      	ands	r3, r1
 8000f86:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 8000f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f8a:	2390      	movs	r3, #144	; 0x90
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	619c      	str	r4, [r3, #24]
 8000f90:	469a      	mov	sl, r3
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f92:	0018      	movs	r0, r3
 8000f94:	2380      	movs	r3, #128	; 0x80
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4cea      	ldr	r4, [pc, #936]	; (8001344 <main+0x42c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f9a:	015b      	lsls	r3, r3, #5
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f9c:	61a1      	str	r1, [r4, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f9e:	6283      	str	r3, [r0, #40]	; 0x28
 8000fa0:	2340      	movs	r3, #64	; 0x40
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fa2:	0017      	movs	r7, r2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000fa4:	4ae8      	ldr	r2, [pc, #928]	; (8001348 <main+0x430>)
 8000fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fa8:	6893      	ldr	r3, [r2, #8]
 8000faa:	3971      	subs	r1, #113	; 0x71
 8000fac:	438b      	bics	r3, r1
 8000fae:	390a      	subs	r1, #10
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	68e3      	ldr	r3, [r4, #12]
 8000fba:	4683      	mov	fp, r0
 8000fbc:	4393      	bics	r3, r2
 8000fbe:	4303      	orrs	r3, r0
 8000fc0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000fc2:	6823      	ldr	r3, [r4, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fc4:	265c      	movs	r6, #92	; 0x5c
 8000fc6:	4393      	bics	r3, r2
 8000fc8:	6023      	str	r3, [r4, #0]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000fca:	9016      	str	r0, [sp, #88]	; 0x58
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fcc:	4668      	mov	r0, sp
 8000fce:	1980      	adds	r0, r0, r6
 8000fd0:	465e      	mov	r6, fp
 8000fd2:	8006      	strh	r6, [r0, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000fd4:	4668      	mov	r0, sp
 8000fd6:	365d      	adds	r6, #93	; 0x5d
 8000fd8:	3502      	adds	r5, #2
 8000fda:	1980      	adds	r0, r0, r6
 8000fdc:	7005      	strb	r5, [r0, #0]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fde:	a816      	add	r0, sp, #88	; 0x58
 8000fe0:	f002 ff8c 	bl	8003efc <LL_EXTI_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	921c      	str	r2, [sp, #112]	; 0x70
 8000fec:	931d      	str	r3, [sp, #116]	; 0x74
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2300      	movs	r3, #0
  LL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	a81c      	add	r0, sp, #112	; 0x70
 8000ff4:	0001      	movs	r1, r0
 8000ff6:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8000ff8:	921e      	str	r2, [sp, #120]	; 0x78
 8000ffa:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ffc:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f002 ffd3 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = _3FG_HIZ_Pin;
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	2301      	movs	r3, #1
 8001006:	0152      	lsls	r2, r2, #5
 8001008:	921c      	str	r2, [sp, #112]	; 0x70
 800100a:	931d      	str	r3, [sp, #116]	; 0x74
 800100c:	2200      	movs	r2, #0
 800100e:	2300      	movs	r3, #0
  LL_GPIO_Init(_3FG_HIZ_GPIO_Port, &GPIO_InitStruct);
 8001010:	a81c      	add	r0, sp, #112	; 0x70
 8001012:	0001      	movs	r1, r0
 8001014:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = _3FG_HIZ_Pin;
 8001016:	921e      	str	r2, [sp, #120]	; 0x78
 8001018:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800101a:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(_3FG_HIZ_GPIO_Port, &GPIO_InitStruct);
 800101c:	f002 ffc4 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin;
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	2301      	movs	r3, #1
 8001024:	921c      	str	r2, [sp, #112]	; 0x70
 8001026:	931d      	str	r3, [sp, #116]	; 0x74
 8001028:	2200      	movs	r2, #0
 800102a:	2300      	movs	r3, #0
  LL_GPIO_Init(OCTH_STBY2_GPIO_Port, &GPIO_InitStruct);
 800102c:	a81c      	add	r0, sp, #112	; 0x70
 800102e:	0001      	movs	r1, r0
 8001030:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin;
 8001032:	921e      	str	r2, [sp, #120]	; 0x78
 8001034:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001036:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(OCTH_STBY2_GPIO_Port, &GPIO_InitStruct);
 8001038:	f002 ffb6 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY1_Pin;
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	2301      	movs	r3, #1
 8001040:	921c      	str	r2, [sp, #112]	; 0x70
 8001042:	931d      	str	r3, [sp, #116]	; 0x74
 8001044:	2200      	movs	r2, #0
 8001046:	2300      	movs	r3, #0
  LL_GPIO_Init(OCTH_STBY1_GPIO_Port, &GPIO_InitStruct);
 8001048:	a81c      	add	r0, sp, #112	; 0x70
 800104a:	0001      	movs	r1, r0
 800104c:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = OCTH_STBY1_Pin;
 800104e:	921e      	str	r2, [sp, #120]	; 0x78
 8001050:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001052:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(OCTH_STBY1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f002 ffa8 	bl	8003fa8 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8001058:	4640      	mov	r0, r8
 800105a:	6943      	ldr	r3, [r0, #20]
 800105c:	4658      	mov	r0, fp
 800105e:	4303      	orrs	r3, r0
 8001060:	4640      	mov	r0, r8
 8001062:	6143      	str	r3, [r0, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001064:	6943      	ldr	r3, [r0, #20]
 8001066:	4658      	mov	r0, fp
 8001068:	4003      	ands	r3, r0
 800106a:	9300      	str	r3, [sp, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800106c:	2210      	movs	r2, #16
 800106e:	2100      	movs	r1, #0
 8001070:	a810      	add	r0, sp, #64	; 0x40
  (void)tmpreg;
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	f004 ff9f 	bl	8005fb6 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001078:	2214      	movs	r2, #20
 800107a:	2100      	movs	r1, #0
 800107c:	a816      	add	r0, sp, #88	; 0x58
 800107e:	f004 ff9a 	bl	8005fb6 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	2210      	movs	r2, #16
 8001084:	2100      	movs	r1, #0
 8001086:	a81e      	add	r0, sp, #120	; 0x78
 8001088:	f004 ff95 	bl	8005fb6 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800108c:	4640      	mov	r0, r8
 800108e:	6983      	ldr	r3, [r0, #24]
 8001090:	2080      	movs	r0, #128	; 0x80
 8001092:	4646      	mov	r6, r8
 8001094:	0080      	lsls	r0, r0, #2
 8001096:	4303      	orrs	r3, r0
 8001098:	61b3      	str	r3, [r6, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800109a:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 800109c:	2208      	movs	r2, #8
 800109e:	4003      	ands	r3, r0
 80010a0:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80010a2:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 80010a4:	6973      	ldr	r3, [r6, #20]
  LL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 80010a6:	4650      	mov	r0, sl
 80010a8:	433b      	orrs	r3, r7
 80010aa:	6173      	str	r3, [r6, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010ac:	6973      	ldr	r3, [r6, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ae:	2500      	movs	r5, #0
 80010b0:	403b      	ands	r3, r7
 80010b2:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 80010b4:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 80010b6:	6973      	ldr	r3, [r6, #20]
 80010b8:	464e      	mov	r6, r9
 80010ba:	4333      	orrs	r3, r6
 80010bc:	4646      	mov	r6, r8
 80010be:	6173      	str	r3, [r6, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010c0:	6973      	ldr	r3, [r6, #20]
 80010c2:	464e      	mov	r6, r9
 80010c4:	4033      	ands	r3, r6
 80010c6:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 80010c8:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 80010ca:	2303      	movs	r3, #3
  LL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 80010cc:	ae1c      	add	r6, sp, #112	; 0x70
 80010ce:	0031      	movs	r1, r6
  GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin;
 80010d0:	921c      	str	r2, [sp, #112]	; 0x70
 80010d2:	931d      	str	r3, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_CURR_AMPL_W_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f002 ff68 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80010d8:	2210      	movs	r2, #16
 80010da:	2303      	movs	r3, #3
  LL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80010dc:	0031      	movs	r1, r6
 80010de:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80010e0:	921c      	str	r2, [sp, #112]	; 0x70
 80010e2:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e4:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f002 ff5f 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80010ea:	2220      	movs	r2, #32
 80010ec:	2303      	movs	r3, #3
  LL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80010ee:	0031      	movs	r1, r6
 80010f0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 80010f2:	921c      	str	r2, [sp, #112]	; 0x70
 80010f4:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f6:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(M1_CURR_AMPL_U_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f002 ff56 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80010fc:	2202      	movs	r2, #2
 80010fe:	2303      	movs	r3, #3
  LL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001100:	0031      	movs	r1, r6
 8001102:	4892      	ldr	r0, [pc, #584]	; (800134c <main+0x434>)
  GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001104:	921c      	str	r2, [sp, #112]	; 0x70
 8001106:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001108:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800110a:	f002 ff4d 	bl	8003fa8 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800110e:	2080      	movs	r0, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001110:	4b8f      	ldr	r3, [pc, #572]	; (8001350 <main+0x438>)
 8001112:	4f90      	ldr	r7, [pc, #576]	; (8001354 <main+0x43c>)
 8001114:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001116:	4e90      	ldr	r6, [pc, #576]	; (8001358 <main+0x440>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001118:	403a      	ands	r2, r7
 800111a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	0180      	lsls	r0, r0, #6
 8001120:	4032      	ands	r2, r6
 8001122:	4302      	orrs	r2, r0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001124:	2020      	movs	r0, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001126:	2140      	movs	r1, #64	; 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001128:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800112a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800112c:	4c8b      	ldr	r4, [pc, #556]	; (800135c <main+0x444>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800112e:	4382      	bics	r2, r0
 8001130:	4302      	orrs	r2, r0
 8001132:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	438a      	bics	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	3140      	adds	r1, #64	; 0x40
 800113e:	438a      	bics	r2, r1
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001144:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001146:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001148:	4022      	ands	r2, r4
 800114a:	2480      	movs	r4, #128	; 0x80
 800114c:	0064      	lsls	r4, r4, #1
 800114e:	4322      	orrs	r2, r4
 8001150:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4c82      	ldr	r4, [pc, #520]	; (8001360 <main+0x448>)
 8001156:	00c9      	lsls	r1, r1, #3
 8001158:	4022      	ands	r2, r4
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800115e:	2208      	movs	r2, #8
 8001160:	4c80      	ldr	r4, [pc, #512]	; (8001364 <main+0x44c>)
 8001162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001164:	4313      	orrs	r3, r2
 8001166:	62a3      	str	r3, [r4, #40]	; 0x28
 8001168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800116a:	3208      	adds	r2, #8
 800116c:	4313      	orrs	r3, r2
 800116e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 8001172:	2200      	movs	r2, #0
 8001174:	4303      	orrs	r3, r0
 8001176:	62a3      	str	r3, [r4, #40]	; 0x28
 8001178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800117a:	30e1      	adds	r0, #225	; 0xe1
 800117c:	30ff      	adds	r0, #255	; 0xff
 800117e:	4303      	orrs	r3, r0
 8001180:	62a3      	str	r3, [r4, #40]	; 0x28
 8001182:	2300      	movs	r3, #0
 8001184:	9210      	str	r2, [sp, #64]	; 0x40
 8001186:	9311      	str	r3, [sp, #68]	; 0x44
 8001188:	2220      	movs	r2, #32
 800118a:	2300      	movs	r3, #0
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800118c:	a810      	add	r0, sp, #64	; 0x40
 800118e:	0001      	movs	r1, r0
 8001190:	0020      	movs	r0, r4
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 8001192:	9212      	str	r2, [sp, #72]	; 0x48
 8001194:	9313      	str	r3, [sp, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001196:	f002 fe7f 	bl	8003e98 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO;
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	2300      	movs	r3, #0
 800119e:	00d2      	lsls	r2, r2, #3
 80011a0:	9216      	str	r2, [sp, #88]	; 0x58
 80011a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80011a4:	2200      	movs	r2, #0
 80011a6:	2303      	movs	r3, #3
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80011a8:	951a      	str	r5, [sp, #104]	; 0x68
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011aa:	ad16      	add	r5, sp, #88	; 0x58
 80011ac:	0029      	movs	r1, r5
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80011ae:	2504      	movs	r5, #4
 80011b0:	0020      	movs	r0, r4
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO;
 80011b2:	9218      	str	r2, [sp, #96]	; 0x60
 80011b4:	9319      	str	r3, [sp, #100]	; 0x64
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80011b6:	f002 fe89 	bl	8003ecc <LL_ADC_REG_Init>
 80011ba:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80011bc:	2207      	movs	r2, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80011be:	43ab      	bics	r3, r5
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80011c0:	465d      	mov	r5, fp
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80011c2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80011c4:	6963      	ldr	r3, [r4, #20]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011c6:	2100      	movs	r1, #0
 80011c8:	4393      	bics	r3, r2
 80011ca:	432b      	orrs	r3, r5
 80011cc:	6163      	str	r3, [r4, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80011ce:	68e3      	ldr	r3, [r4, #12]
 80011d0:	4d63      	ldr	r5, [pc, #396]	; (8001360 <main+0x448>)
 80011d2:	320d      	adds	r2, #13
 80011d4:	402b      	ands	r3, r5
 80011d6:	2580      	movs	r5, #128	; 0x80
 80011d8:	00ed      	lsls	r5, r5, #3
 80011da:	432b      	orrs	r3, r5
 80011dc:	ad0b      	add	r5, sp, #44	; 0x2c
 80011de:	60e3      	str	r3, [r4, #12]
 80011e0:	0028      	movs	r0, r5
 80011e2:	f004 fee8 	bl	8005fb6 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80011e6:	ab1c      	add	r3, sp, #112	; 0x70
 80011e8:	2220      	movs	r2, #32
 80011ea:	2100      	movs	r1, #0
 80011ec:	0018      	movs	r0, r3
 80011ee:	f004 fee2 	bl	8005fb6 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80011f2:	ab10      	add	r3, sp, #64	; 0x40
 80011f4:	2218      	movs	r2, #24
 80011f6:	2100      	movs	r1, #0
 80011f8:	0018      	movs	r0, r3
 80011fa:	f004 fedc 	bl	8005fb6 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	ab18      	add	r3, sp, #96	; 0x60
 8001200:	2208      	movs	r2, #8
 8001202:	2100      	movs	r1, #0
 8001204:	0018      	movs	r0, r3
 8001206:	f004 fed6 	bl	8005fb6 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 800120a:	4643      	mov	r3, r8
 800120c:	2480      	movs	r4, #128	; 0x80
 800120e:	4641      	mov	r1, r8
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	0124      	lsls	r4, r4, #4
 8001214:	4323      	orrs	r3, r4
 8001216:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001218:	698b      	ldr	r3, [r1, #24]
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	4023      	ands	r3, r4
  SET_BIT(RCC->AHBENR, Periphs);
 800121e:	464c      	mov	r4, r9
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001220:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001222:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001224:	694b      	ldr	r3, [r1, #20]
 8001226:	0152      	lsls	r2, r2, #5
 8001228:	4323      	orrs	r3, r4
 800122a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800122c:	694b      	ldr	r3, [r1, #20]
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800122e:	4847      	ldr	r0, [pc, #284]	; (800134c <main+0x434>)
 8001230:	4023      	ands	r3, r4
 8001232:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001234:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001236:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001238:	2402      	movs	r4, #2
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 800123a:	9216      	str	r2, [sp, #88]	; 0x58
 800123c:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800123e:	2302      	movs	r3, #2
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001240:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001242:	931a      	str	r3, [sp, #104]	; 0x68
 8001244:	941b      	str	r4, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001246:	f002 feaf 	bl	8003fa8 <LL_GPIO_Init>
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 800124a:	2420      	movs	r4, #32
  TIM_InitStruct.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800124c:	2000      	movs	r0, #0
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 800124e:	2396      	movs	r3, #150	; 0x96
  TIM_InitStruct.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001250:	8028      	strh	r0, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 8001252:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 8001254:	465c      	mov	r4, fp
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 800125a:	2380      	movs	r3, #128	; 0x80
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 800125c:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800125e:	4c42      	ldr	r4, [pc, #264]	; (8001368 <main+0x450>)
 8001260:	0029      	movs	r1, r5
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001262:	005b      	lsls	r3, r3, #1
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001264:	0020      	movs	r0, r4
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001266:	930e      	str	r3, [sp, #56]	; 0x38
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001268:	f002 ff86 	bl	8004178 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800126c:	2180      	movs	r1, #128	; 0x80
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800126e:	2208      	movs	r2, #8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001270:	6823      	ldr	r3, [r4, #0]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001272:	0020      	movs	r0, r4
 8001274:	438b      	bics	r3, r1
 8001276:	6023      	str	r3, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001278:	69a3      	ldr	r3, [r4, #24]
 800127a:	a91c      	add	r1, sp, #112	; 0x70
 800127c:	4313      	orrs	r3, r2
 800127e:	61a3      	str	r3, [r4, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001280:	2260      	movs	r2, #96	; 0x60
 8001282:	2300      	movs	r3, #0
 8001284:	921c      	str	r2, [sp, #112]	; 0x70
 8001286:	931d      	str	r3, [sp, #116]	; 0x74
 8001288:	2396      	movs	r3, #150	; 0x96
 800128a:	2200      	movs	r2, #0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	921e      	str	r2, [sp, #120]	; 0x78
 8001290:	931f      	str	r3, [sp, #124]	; 0x7c
 8001292:	2300      	movs	r3, #0
 8001294:	2200      	movs	r2, #0
 8001296:	9220      	str	r2, [sp, #128]	; 0x80
 8001298:	9321      	str	r3, [sp, #132]	; 0x84
 800129a:	9222      	str	r2, [sp, #136]	; 0x88
 800129c:	9323      	str	r3, [sp, #140]	; 0x8c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800129e:	000a      	movs	r2, r1
 80012a0:	2101      	movs	r1, #1
 80012a2:	f002 ffad 	bl	8004200 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012a6:	2004      	movs	r0, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012a8:	2180      	movs	r1, #128	; 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012aa:	69a3      	ldr	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012ac:	0109      	lsls	r1, r1, #4
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012ae:	4383      	bics	r3, r0
 80012b0:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012b2:	69a3      	ldr	r3, [r4, #24]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80012b4:	0020      	movs	r0, r4
 80012b6:	430b      	orrs	r3, r1
 80012b8:	61a3      	str	r3, [r4, #24]
 80012ba:	ab1c      	add	r3, sp, #112	; 0x70
 80012bc:	001a      	movs	r2, r3
 80012be:	2110      	movs	r1, #16
 80012c0:	f002 ff9e 	bl	8004200 <LL_TIM_OC_Init>
 80012c4:	2208      	movs	r2, #8
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80012c6:	2180      	movs	r1, #128	; 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012c8:	69a3      	ldr	r3, [r4, #24]
 80012ca:	4828      	ldr	r0, [pc, #160]	; (800136c <main+0x454>)
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012cc:	4d28      	ldr	r5, [pc, #160]	; (8001370 <main+0x458>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012ce:	4003      	ands	r3, r0
 80012d0:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012d2:	686b      	ldr	r3, [r5, #4]
 80012d4:	0020      	movs	r0, r4
 80012d6:	4313      	orrs	r3, r2
 80012d8:	606b      	str	r3, [r5, #4]
 80012da:	aa1c      	add	r2, sp, #112	; 0x70
 80012dc:	0049      	lsls	r1, r1, #1
 80012de:	f002 ff8f 	bl	8004200 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012e2:	2004      	movs	r0, #4
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012e4:	2180      	movs	r1, #128	; 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012e6:	686b      	ldr	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012e8:	0109      	lsls	r1, r1, #4
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012ea:	4383      	bics	r3, r0
 80012ec:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012ee:	686b      	ldr	r3, [r5, #4]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80012f0:	aa1c      	add	r2, sp, #112	; 0x70
 80012f2:	430b      	orrs	r3, r1
 80012f4:	606b      	str	r3, [r5, #4]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80012f6:	2370      	movs	r3, #112	; 0x70
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80012f8:	2180      	movs	r1, #128	; 0x80
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 80012fa:	931c      	str	r3, [sp, #112]	; 0x70
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <main+0x45c>)
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80012fe:	0020      	movs	r0, r4
 8001300:	0149      	lsls	r1, r1, #5
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001302:	931f      	str	r3, [sp, #124]	; 0x7c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001304:	f002 ff7c 	bl	8004200 <LL_TIM_OC_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001308:	2170      	movs	r1, #112	; 0x70
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800130a:	686b      	ldr	r3, [r5, #4]
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <main+0x454>)
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	4003      	ands	r3, r0
 8001312:	606b      	str	r3, [r5, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001314:	6863      	ldr	r3, [r4, #4]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	438b      	bics	r3, r1
 800131a:	430b      	orrs	r3, r1
 800131c:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	3110      	adds	r1, #16
 8001322:	438b      	bics	r3, r1
 8001324:	60a3      	str	r3, [r4, #8]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	9210      	str	r2, [sp, #64]	; 0x40
 800132c:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001334:	254c      	movs	r5, #76	; 0x4c
 8001336:	466b      	mov	r3, sp
 8001338:	195d      	adds	r5, r3, r5
 800133a:	2310      	movs	r3, #16
 800133c:	e01c      	b.n	8001378 <main+0x460>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40021000 	.word	0x40021000
 8001344:	48001400 	.word	0x48001400
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	40020008 	.word	0x40020008
 8001354:	ffffbfef 	.word	0xffffbfef
 8001358:	ffffcfff 	.word	0xffffcfff
 800135c:	fffffcff 	.word	0xfffffcff
 8001360:	fffff3ff 	.word	0xfffff3ff
 8001364:	40012400 	.word	0x40012400
 8001368:	40012c00 	.word	0x40012c00
 800136c:	fffffbff 	.word	0xfffffbff
 8001370:	40012c18 	.word	0x40012c18
 8001374:	0000095f 	.word	0x0000095f
 8001378:	702b      	strb	r3, [r5, #0]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 800137a:	466b      	mov	r3, sp
 800137c:	254e      	movs	r5, #78	; 0x4e
 800137e:	195d      	adds	r5, r3, r5
 8001380:	2380      	movs	r3, #128	; 0x80
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001382:	2280      	movs	r2, #128	; 0x80
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	802b      	strh	r3, [r5, #0]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001388:	2300      	movs	r3, #0
 800138a:	0192      	lsls	r2, r2, #6
 800138c:	9214      	str	r2, [sp, #80]	; 0x50
 800138e:	9315      	str	r3, [sp, #84]	; 0x54
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001390:	ab10      	add	r3, sp, #64	; 0x40
 8001392:	0019      	movs	r1, r3
 8001394:	0020      	movs	r0, r4
 8001396:	f003 f835 	bl	8004404 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 800139a:	4643      	mov	r3, r8
 800139c:	464c      	mov	r4, r9
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	4323      	orrs	r3, r4
 80013a4:	4644      	mov	r4, r8
 80013a6:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013a8:	6963      	ldr	r3, [r4, #20]
 80013aa:	464c      	mov	r4, r9
 80013ac:	4023      	ands	r3, r4
 80013ae:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80013b0:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 80013b2:	4643      	mov	r3, r8
 80013b4:	4644      	mov	r4, r8
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	0292      	lsls	r2, r2, #10
 80013ba:	4313      	orrs	r3, r2
 80013bc:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013be:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80013c0:	2500      	movs	r5, #0
 80013c2:	4013      	ands	r3, r2
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	2280      	movs	r2, #128	; 0x80
  (void)tmpreg;
 80013c8:	9b04      	ldr	r3, [sp, #16]
 80013ca:	2302      	movs	r3, #2
 80013cc:	0192      	lsls	r2, r2, #6
 80013ce:	9216      	str	r2, [sp, #88]	; 0x58
 80013d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80013d2:	2202      	movs	r2, #2
 80013d4:	2302      	movs	r3, #2
 80013d6:	2403      	movs	r4, #3
 80013d8:	921a      	str	r2, [sp, #104]	; 0x68
 80013da:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80013dc:	ab16      	add	r3, sp, #88	; 0x58
 80013de:	0019      	movs	r1, r3
 80013e0:	4892      	ldr	r0, [pc, #584]	; (800162c <main+0x714>)
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80013e2:	9418      	str	r4, [sp, #96]	; 0x60
 80013e4:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f002 fddf 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	2302      	movs	r3, #2
 80013ee:	01d2      	lsls	r2, r2, #7
 80013f0:	9216      	str	r2, [sp, #88]	; 0x58
 80013f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80013f4:	2202      	movs	r2, #2
 80013f6:	2302      	movs	r3, #2
 80013f8:	921a      	str	r2, [sp, #104]	; 0x68
 80013fa:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 80013fc:	ab16      	add	r3, sp, #88	; 0x58
 80013fe:	0019      	movs	r1, r3
 8001400:	488a      	ldr	r0, [pc, #552]	; (800162c <main+0x714>)
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8001402:	9418      	str	r4, [sp, #96]	; 0x60
 8001404:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8001406:	f002 fdcf 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	2302      	movs	r3, #2
 800140e:	0212      	lsls	r2, r2, #8
 8001410:	9216      	str	r2, [sp, #88]	; 0x58
 8001412:	9317      	str	r3, [sp, #92]	; 0x5c
 8001414:	2202      	movs	r2, #2
 8001416:	2302      	movs	r3, #2
 8001418:	921a      	str	r2, [sp, #104]	; 0x68
 800141a:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800141c:	ab16      	add	r3, sp, #88	; 0x58
 800141e:	0019      	movs	r1, r3
 8001420:	4882      	ldr	r0, [pc, #520]	; (800162c <main+0x714>)
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001422:	9418      	str	r4, [sp, #96]	; 0x60
 8001424:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001426:	f002 fdbf 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin;
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	2302      	movs	r3, #2
 800142e:	0052      	lsls	r2, r2, #1
 8001430:	9216      	str	r2, [sp, #88]	; 0x58
 8001432:	9317      	str	r3, [sp, #92]	; 0x5c
 8001434:	2202      	movs	r2, #2
 8001436:	2302      	movs	r3, #2
 8001438:	921a      	str	r2, [sp, #104]	; 0x68
 800143a:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 800143c:	ab16      	add	r3, sp, #88	; 0x58
 800143e:	0019      	movs	r1, r3
 8001440:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin;
 8001442:	9418      	str	r4, [sp, #96]	; 0x60
 8001444:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 8001446:	f002 fdaf 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VH_Pin;
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	2302      	movs	r3, #2
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	9216      	str	r2, [sp, #88]	; 0x58
 8001452:	9317      	str	r3, [sp, #92]	; 0x5c
 8001454:	2202      	movs	r2, #2
 8001456:	2302      	movs	r3, #2
 8001458:	921a      	str	r2, [sp, #104]	; 0x68
 800145a:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 800145c:	ab16      	add	r3, sp, #88	; 0x58
 800145e:	0019      	movs	r1, r3
 8001460:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_VH_Pin;
 8001462:	9418      	str	r4, [sp, #96]	; 0x60
 8001464:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 8001466:	f002 fd9f 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_WH_Pin;
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	2302      	movs	r3, #2
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	9216      	str	r2, [sp, #88]	; 0x58
 8001472:	9317      	str	r3, [sp, #92]	; 0x5c
 8001474:	2302      	movs	r3, #2
 8001476:	2202      	movs	r2, #2
 8001478:	921a      	str	r2, [sp, #104]	; 0x68
 800147a:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 800147c:	aa16      	add	r2, sp, #88	; 0x58
 800147e:	0011      	movs	r1, r2
 8001480:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_WH_Pin;
 8001482:	9418      	str	r4, [sp, #96]	; 0x60
 8001484:	9519      	str	r5, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 8001486:	f002 fd8f 	bl	8003fa8 <LL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800148a:	ab1c      	add	r3, sp, #112	; 0x70
 800148c:	221c      	movs	r2, #28
 800148e:	2100      	movs	r1, #0
 8001490:	0018      	movs	r0, r3
 8001492:	f004 fd90 	bl	8005fb6 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	ab18      	add	r3, sp, #96	; 0x60
 8001498:	220c      	movs	r2, #12
 800149a:	2100      	movs	r1, #0
 800149c:	0018      	movs	r0, r3
 800149e:	f004 fd8a 	bl	8005fb6 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a2:	4642      	mov	r2, r8
 80014a4:	2480      	movs	r4, #128	; 0x80
 80014a6:	6993      	ldr	r3, [r2, #24]
 80014a8:	01e4      	lsls	r4, r4, #7
 80014aa:	4323      	orrs	r3, r4
 80014ac:	6193      	str	r3, [r2, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014ae:	6993      	ldr	r3, [r2, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80014b0:	2500      	movs	r5, #0
 80014b2:	4023      	ands	r3, r4
 80014b4:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 80014b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->AHBENR, Periphs);
 80014b8:	6953      	ldr	r3, [r2, #20]
 80014ba:	464a      	mov	r2, r9
 80014bc:	4313      	orrs	r3, r2
 80014be:	4642      	mov	r2, r8
 80014c0:	6153      	str	r3, [r2, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014c2:	6953      	ldr	r3, [r2, #20]
 80014c4:	464a      	mov	r2, r9
 80014c6:	4013      	ands	r3, r2
 80014c8:	9310      	str	r3, [sp, #64]	; 0x40
  (void)tmpreg;
 80014ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = UART_TX_Pin;
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	2302      	movs	r3, #2
 80014d0:	9216      	str	r2, [sp, #88]	; 0x58
 80014d2:	9317      	str	r3, [sp, #92]	; 0x5c
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80014d4:	aa16      	add	r2, sp, #88	; 0x58
 80014d6:	0011      	movs	r1, r2
 80014d8:	4854      	ldr	r0, [pc, #336]	; (800162c <main+0x714>)
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80014da:	951b      	str	r5, [sp, #108]	; 0x6c
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f002 fd64 	bl	8003fa8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = UART_RX_Pin;
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	2302      	movs	r3, #2
 80014e4:	9216      	str	r2, [sp, #88]	; 0x58
 80014e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80014e8:	2300      	movs	r3, #0
 80014ea:	2200      	movs	r2, #0
 80014ec:	9218      	str	r2, [sp, #96]	; 0x60
 80014ee:	9319      	str	r3, [sp, #100]	; 0x64
 80014f0:	921a      	str	r2, [sp, #104]	; 0x68
 80014f2:	931b      	str	r3, [sp, #108]	; 0x6c
  LL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80014f4:	aa16      	add	r2, sp, #88	; 0x58
 80014f6:	0011      	movs	r1, r2
 80014f8:	484c      	ldr	r0, [pc, #304]	; (800162c <main+0x714>)
 80014fa:	f002 fd55 	bl	8003fa8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014fe:	2020      	movs	r0, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001500:	2140      	movs	r1, #64	; 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001502:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <main+0x718>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	403a      	ands	r2, r7
 8001508:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4032      	ands	r2, r6
 800150e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001510:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001512:	4e48      	ldr	r6, [pc, #288]	; (8001634 <main+0x71c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001514:	4382      	bics	r2, r0
 8001516:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	438a      	bics	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	3140      	adds	r1, #64	; 0x40
 8001522:	438a      	bics	r2, r1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4032      	ands	r2, r6
 800152c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4e41      	ldr	r6, [pc, #260]	; (8001638 <main+0x720>)
 8001532:	4032      	ands	r2, r6
 8001534:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <main+0x724>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	403a      	ands	r2, r7
 800153c:	2710      	movs	r7, #16
 800153e:	433a      	orrs	r2, r7
 8001540:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4f3e      	ldr	r7, [pc, #248]	; (8001640 <main+0x728>)
 8001546:	403a      	ands	r2, r7
 8001548:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	0007      	movs	r7, r0
 800154e:	4382      	bics	r2, r0
 8001550:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	3020      	adds	r0, #32
 8001556:	4382      	bics	r2, r0
 8001558:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	438a      	bics	r2, r1
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4933      	ldr	r1, [pc, #204]	; (8001634 <main+0x71c>)
 8001566:	400a      	ands	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800156a:	681a      	ldr	r2, [r3, #0]
  LL_USART_Init(USART1, &USART_InitStruct);
 800156c:	a91c      	add	r1, sp, #112	; 0x70
 800156e:	4032      	ands	r2, r6
 8001570:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 1843200;
 8001572:	22e1      	movs	r2, #225	; 0xe1
 8001574:	2300      	movs	r3, #0
 8001576:	0352      	lsls	r2, r2, #13
 8001578:	921c      	str	r2, [sp, #112]	; 0x70
 800157a:	931d      	str	r3, [sp, #116]	; 0x74
 800157c:	2200      	movs	r2, #0
 800157e:	2300      	movs	r3, #0
 8001580:	921e      	str	r2, [sp, #120]	; 0x78
 8001582:	931f      	str	r3, [sp, #124]	; 0x7c
 8001584:	220c      	movs	r2, #12
 8001586:	2300      	movs	r3, #0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001588:	9522      	str	r5, [sp, #136]	; 0x88
  LL_USART_Init(USART1, &USART_InitStruct);
 800158a:	4d2e      	ldr	r5, [pc, #184]	; (8001644 <main+0x72c>)
  USART_InitStruct.BaudRate = 1843200;
 800158c:	9220      	str	r2, [sp, #128]	; 0x80
 800158e:	9321      	str	r3, [sp, #132]	; 0x84
  LL_USART_Init(USART1, &USART_InitStruct);
 8001590:	0028      	movs	r0, r5
 8001592:	f002 ff61 	bl	8004458 <LL_USART_Init>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001596:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800159a:	f38b 8810 	msr	PRIMASK, fp
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800159e:	4e2a      	ldr	r6, [pc, #168]	; (8001648 <main+0x730>)
 80015a0:	68ab      	ldr	r3, [r5, #8]
 80015a2:	4033      	ands	r3, r6
 80015a4:	60ab      	str	r3, [r5, #8]
 80015a6:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015aa:	4a28      	ldr	r2, [pc, #160]	; (800164c <main+0x734>)
 80015ac:	686b      	ldr	r3, [r5, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015ae:	465e      	mov	r6, fp
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b0:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015b2:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b4:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015b6:	68ab      	ldr	r3, [r5, #8]
 80015b8:	4393      	bics	r3, r2
 80015ba:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	4333      	orrs	r3, r6
 80015c0:	602b      	str	r3, [r5, #0]
  MX_MotorControl_Init();
 80015c2:	f000 ff33 	bl	800242c <MX_MotorControl_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c6:	20c6      	movs	r0, #198	; 0xc6
 80015c8:	21c0      	movs	r1, #192	; 0xc0
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <main+0x738>)
 80015cc:	0080      	lsls	r0, r0, #2
 80015ce:	581a      	ldr	r2, [r3, r0]
 80015d0:	0609      	lsls	r1, r1, #24
 80015d2:	0212      	lsls	r2, r2, #8
 80015d4:	0a12      	lsrs	r2, r2, #8
 80015d6:	430a      	orrs	r2, r1
 80015d8:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	0512      	lsls	r2, r2, #20
 80015de:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e0:	22c2      	movs	r2, #194	; 0xc2
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	5898      	ldr	r0, [r3, r2]
 80015e6:	491b      	ldr	r1, [pc, #108]	; (8001654 <main+0x73c>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e8:	2580      	movs	r5, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ea:	4008      	ands	r0, r1
 80015ec:	4304      	orrs	r4, r0
 80015ee:	509c      	str	r4, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f0:	2480      	movs	r4, #128	; 0x80
 80015f2:	00a4      	lsls	r4, r4, #2
 80015f4:	601c      	str	r4, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f6:	5898      	ldr	r0, [r3, r2]
 80015f8:	4c17      	ldr	r4, [pc, #92]	; (8001658 <main+0x740>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	00ed      	lsls	r5, r5, #3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4004      	ands	r4, r0
 80015fe:	20c0      	movs	r0, #192	; 0xc0
 8001600:	0400      	lsls	r0, r0, #16
 8001602:	4320      	orrs	r0, r4
 8001604:	5098      	str	r0, [r3, r2]
 8001606:	20c3      	movs	r0, #195	; 0xc3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001608:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160a:	0080      	lsls	r0, r0, #2
 800160c:	581a      	ldr	r2, [r3, r0]
 800160e:	400a      	ands	r2, r1
 8001610:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0192      	lsls	r2, r2, #6
 8001616:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001618:	3808      	subs	r0, #8
 800161a:	581a      	ldr	r2, [r3, r0]
 800161c:	4011      	ands	r1, r2
 800161e:	22c0      	movs	r2, #192	; 0xc0
 8001620:	0212      	lsls	r2, r2, #8
 8001622:	430a      	orrs	r2, r1
 8001624:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	601f      	str	r7, [r3, #0]
  while (1)
 8001628:	e7fe      	b.n	8001628 <main+0x710>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	48000400 	.word	0x48000400
 8001630:	40020030 	.word	0x40020030
 8001634:	fffffcff 	.word	0xfffffcff
 8001638:	fffff3ff 	.word	0xfffff3ff
 800163c:	4002001c 	.word	0x4002001c
 8001640:	ffffcfff 	.word	0xffffcfff
 8001644:	40013800 	.word	0x40013800
 8001648:	fffffbff 	.word	0xfffffbff
 800164c:	ffffb7ff 	.word	0xffffb7ff
 8001650:	e000e100 	.word	0xe000e100
 8001654:	ffff00ff 	.word	0xffff00ff
 8001658:	ff00ffff 	.word	0xff00ffff

0800165c <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 800165c:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <MC_StartMotor1+0xc>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f000 f88f 	bl	8001784 <MCI_StartMotor>
}
 8001666:	bd10      	pop	{r4, pc}
 8001668:	200006b4 	.word	0x200006b4

0800166c <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 800166c:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 800166e:	4b02      	ldr	r3, [pc, #8]	; (8001678 <MC_StopMotor1+0xc>)
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	f000 f89f 	bl	80017b4 <MCI_StopMotor>
}
 8001676:	bd10      	pop	{r4, pc}
 8001678:	200006b4 	.word	0x200006b4

0800167c <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
 800167c:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 800167e:	4b02      	ldr	r3, [pc, #8]	; (8001688 <MC_GetSTMStateMotor1+0xc>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	f000 f879 	bl	8001778 <MCI_GetSTMState>
}
 8001686:	bd10      	pop	{r4, pc}
 8001688:	200006b4 	.word	0x200006b4

0800168c <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 800168c:	2002      	movs	r0, #2
 800168e:	4770      	bx	lr

08001690 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001690:	4770      	bx	lr
 8001692:	46c0      	nop			; (mov r8, r8)

08001694 <MC_APP_PostMediumFrequencyHook_M1>:
 8001694:	4770      	bx	lr
 8001696:	46c0      	nop			; (mov r8, r8)

08001698 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 8001698:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800169a:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 800169c:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
 800169e:	6042      	str	r2, [r0, #4]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80016a0:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80016a2:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 80016a4:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 80016a6:	82c3      	strh	r3, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
 80016a8:	6183      	str	r3, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
    pHandle->PastFaults = MC_NO_FAULTS;
 80016aa:	8383      	strh	r3, [r0, #28]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80016ac:	7783      	strb	r3, [r0, #30]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016ae:	4770      	bx	lr

080016b0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 80016b6:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80016b8:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016ba:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016bc:	4770      	bx	lr
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	00000301 	.word	0x00000301

080016c4 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 80016ca:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80016cc:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016ce:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016d0:	4770      	bx	lr
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	00000401 	.word	0x00000401

080016d8 <MCI_SetCurrentReferences>:
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016d8:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <MCI_SetCurrentReferences+0x14>)
{
 80016dc:	b082      	sub	sp, #8
    pHandle->Iqdref.q = Iqdref.q;
 80016de:	8241      	strh	r1, [r0, #18]
    pHandle->Iqdref.d = Iqdref.d;
 80016e0:	0c09      	lsrs	r1, r1, #16
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016e2:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.d = Iqdref.d;
 80016e4:	8281      	strh	r1, [r0, #20]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016e6:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016e8:	b002      	add	sp, #8
 80016ea:	4770      	bx	lr
 80016ec:	00000401 	.word	0x00000401

080016f0 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016f0:	8b43      	ldrh	r3, [r0, #26]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	4393      	bics	r3, r2
 80016f6:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80016f8:	8b83      	ldrh	r3, [r0, #28]
 80016fa:	4319      	orrs	r1, r3
 80016fc:	8381      	strh	r1, [r0, #28]

  return;
}
 80016fe:	4770      	bx	lr

08001700 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8001700:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001702:	7f83      	ldrb	r3, [r0, #30]
{
 8001704:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001706:	2b01      	cmp	r3, #1
 8001708:	d000      	beq.n	800170c <MCI_ExecBufferedCommands+0xc>
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800170a:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 800170c:	7b02      	ldrb	r2, [r0, #12]
 800170e:	2a02      	cmp	r2, #2
 8001710:	d006      	beq.n	8001720 <MCI_ExecBufferedCommands+0x20>
 8001712:	2a03      	cmp	r2, #3
 8001714:	d026      	beq.n	8001764 <MCI_ExecBufferedCommands+0x64>
 8001716:	2a01      	cmp	r2, #1
 8001718:	d015      	beq.n	8001746 <MCI_ExecBufferedCommands+0x46>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800171a:	2303      	movs	r3, #3
 800171c:	77a3      	strb	r3, [r4, #30]
}
 800171e:	e7f4      	b.n	800170a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001720:	2324      	movs	r3, #36	; 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	6841      	ldr	r1, [r0, #4]
 8001726:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001728:	6800      	ldr	r0, [r0, #0]
 800172a:	2104      	movs	r1, #4
 800172c:	f003 ff4a 	bl	80055c4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001730:	8ae2      	ldrh	r2, [r4, #22]
 8001732:	2310      	movs	r3, #16
 8001734:	5ee1      	ldrsh	r1, [r4, r3]
 8001736:	6820      	ldr	r0, [r4, #0]
 8001738:	f003 ff48 	bl	80055cc <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800173c:	2800      	cmp	r0, #0
 800173e:	d0ec      	beq.n	800171a <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001740:	2302      	movs	r3, #2
 8001742:	77a3      	strb	r3, [r4, #30]
 8001744:	e7e1      	b.n	800170a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001746:	2200      	movs	r2, #0
 8001748:	6841      	ldr	r1, [r0, #4]
 800174a:	3323      	adds	r3, #35	; 0x23
 800174c:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	2103      	movs	r1, #3
 8001752:	f003 ff37 	bl	80055c4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001756:	8ae2      	ldrh	r2, [r4, #22]
 8001758:	230e      	movs	r3, #14
 800175a:	5ee1      	ldrsh	r1, [r4, r3]
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	f003 ff35 	bl	80055cc <STC_ExecRamp>
          break;
 8001762:	e7eb      	b.n	800173c <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001764:	2224      	movs	r2, #36	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001766:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001768:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800176a:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800176c:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800176e:	3a20      	subs	r2, #32
 8001770:	3010      	adds	r0, #16
 8001772:	f004 fc17 	bl	8005fa4 <memcpy>
      if (commandHasBeenExecuted)
 8001776:	e7e3      	b.n	8001740 <MCI_ExecBufferedCommands+0x40>

08001778 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
 8001778:	7e40      	ldrb	r0, [r0, #25]
}
 800177a:	4770      	bx	lr

0800177c <MCI_GetOccurredFaults>:
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
 800177c:	8b80      	ldrh	r0, [r0, #28]
}
 800177e:	4770      	bx	lr

08001780 <MCI_GetCurrentFaults>:
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
 8001780:	8b40      	ldrh	r0, [r0, #26]
}
 8001782:	4770      	bx	lr

08001784 <MCI_StartMotor>:
{
 8001784:	b510      	push	{r4, lr}
 8001786:	0004      	movs	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001788:	f7ff fff6 	bl	8001778 <MCI_GetSTMState>
 800178c:	2800      	cmp	r0, #0
 800178e:	d001      	beq.n	8001794 <MCI_StartMotor+0x10>
    RetVal = false;
 8001790:	2000      	movs	r0, #0
}
 8001792:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001794:	0020      	movs	r0, r4
 8001796:	f7ff fff1 	bl	800177c <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800179a:	2800      	cmp	r0, #0
 800179c:	d1f8      	bne.n	8001790 <MCI_StartMotor+0xc>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800179e:	0020      	movs	r0, r4
 80017a0:	f7ff ffee 	bl	8001780 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d1f3      	bne.n	8001790 <MCI_StartMotor+0xc>
    pHandle->DirectCommand = MCI_START;
 80017a8:	2301      	movs	r3, #1
    RetVal = true;
 80017aa:	3001      	adds	r0, #1
    pHandle->DirectCommand = MCI_START;
 80017ac:	7623      	strb	r3, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80017ae:	77a3      	strb	r3, [r4, #30]
    RetVal = true;
 80017b0:	e7ef      	b.n	8001792 <MCI_StartMotor+0xe>
 80017b2:	46c0      	nop			; (mov r8, r8)

080017b4 <MCI_StopMotor>:
{
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	0004      	movs	r4, r0
  State = MCI_GetSTMState(pHandle);
 80017b8:	f7ff ffde 	bl	8001778 <MCI_GetSTMState>
    status = false;
 80017bc:	2500      	movs	r5, #0
  if (IDLE == State  || ICLWAIT == State)
 80017be:	2800      	cmp	r0, #0
 80017c0:	d004      	beq.n	80017cc <MCI_StopMotor+0x18>
 80017c2:	0003      	movs	r3, r0
 80017c4:	3b0c      	subs	r3, #12
 80017c6:	1e5a      	subs	r2, r3, #1
 80017c8:	4193      	sbcs	r3, r2
 80017ca:	b2dd      	uxtb	r5, r3
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017cc:	0020      	movs	r0, r4
 80017ce:	f7ff ffd5 	bl	800177c <MCI_GetOccurredFaults>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d002      	beq.n	80017dc <MCI_StopMotor+0x28>
    RetVal = false;
 80017d6:	2500      	movs	r5, #0
}
 80017d8:	0028      	movs	r0, r5
 80017da:	bd70      	pop	{r4, r5, r6, pc}
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017dc:	0020      	movs	r0, r4
 80017de:	f7ff ffcf 	bl	8001780 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d1f7      	bne.n	80017d6 <MCI_StopMotor+0x22>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017e6:	2d00      	cmp	r5, #0
 80017e8:	d0f5      	beq.n	80017d6 <MCI_StopMotor+0x22>
    pHandle->DirectCommand = MCI_STOP;
 80017ea:	2305      	movs	r3, #5
 80017ec:	7623      	strb	r3, [r4, #24]
    RetVal = true;
 80017ee:	e7f3      	b.n	80017d8 <MCI_StopMotor+0x24>

080017f0 <MCI_FaultAcknowledged>:
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	0004      	movs	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80017f4:	f7ff ffc0 	bl	8001778 <MCI_GetSTMState>
 80017f8:	280b      	cmp	r0, #11
 80017fa:	d001      	beq.n	8001800 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 80017fc:	2000      	movs	r0, #0
}
 80017fe:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001800:	0020      	movs	r0, r4
 8001802:	f7ff ffbd 	bl	8001780 <MCI_GetCurrentFaults>
 8001806:	2800      	cmp	r0, #0
 8001808:	d1f8      	bne.n	80017fc <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800180a:	2302      	movs	r3, #2
    pHandle->PastFaults = MC_NO_FAULTS;
 800180c:	83a0      	strh	r0, [r4, #28]
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800180e:	7623      	strb	r3, [r4, #24]
    RetVal = true;
 8001810:	3001      	adds	r0, #1
 8001812:	e7f4      	b.n	80017fe <MCI_FaultAcknowledged+0xe>

08001814 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001814:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001816:	8b40      	ldrh	r0, [r0, #26]
 8001818:	0400      	lsls	r0, r0, #16
 800181a:	4318      	orrs	r0, r3

  return (LocalFaultState);
}
 800181c:	4770      	bx	lr
 800181e:	46c0      	nop			; (mov r8, r8)

08001820 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8001820:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8001822:	4770      	bx	lr

08001824 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001824:	7b02      	ldrb	r2, [r0, #12]
{
 8001826:	0003      	movs	r3, r0
    switch (pHandle->lastCommand)
 8001828:	2a02      	cmp	r2, #2
 800182a:	d005      	beq.n	8001838 <MCI_GetImposedMotorDirection+0x14>
 800182c:	2a03      	cmp	r2, #3
 800182e:	d012      	beq.n	8001856 <MCI_GetImposedMotorDirection+0x32>
 8001830:	2001      	movs	r0, #1
 8001832:	2a01      	cmp	r2, #1
 8001834:	d007      	beq.n	8001846 <MCI_GetImposedMotorDirection+0x22>
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001836:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001838:	2010      	movs	r0, #16
 800183a:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 800183c:	43c0      	mvns	r0, r0
 800183e:	17c0      	asrs	r0, r0, #31
 8001840:	4010      	ands	r0, r2
 8001842:	3801      	subs	r0, #1
 8001844:	e7f7      	b.n	8001836 <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->hFinalSpeed < 0)
 8001846:	200e      	movs	r0, #14
 8001848:	5e18      	ldrsh	r0, [r3, r0]
          retVal = -1;
 800184a:	43c0      	mvns	r0, r0
 800184c:	2302      	movs	r3, #2
 800184e:	17c0      	asrs	r0, r0, #31
 8001850:	4018      	ands	r0, r3
 8001852:	3801      	subs	r0, #1
 8001854:	e7ef      	b.n	8001836 <MCI_GetImposedMotorDirection+0x12>
        if (pHandle->Iqdref.q < 0)
 8001856:	2012      	movs	r0, #18
 8001858:	5e18      	ldrsh	r0, [r3, r0]
 800185a:	e7f6      	b.n	800184a <MCI_GetImposedMotorDirection+0x26>

0800185c <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 800185c:	230e      	movs	r3, #14
 800185e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8001860:	4770      	bx	lr
 8001862:	46c0      	nop			; (mov r8, r8)

08001864 <MCI_GetLastRampFinalTorque>:
  {
    retVal = pHandle->hFinalTorque;
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
 8001864:	2310      	movs	r3, #16
 8001866:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8001868:	4770      	bx	lr
 800186a:	46c0      	nop			; (mov r8, r8)

0800186c <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 800186c:	8ac0      	ldrh	r0, [r0, #22]
#endif
}
 800186e:	4770      	bx	lr

08001870 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8001870:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001872:	6800      	ldr	r0, [r0, #0]
 8001874:	f003 feec 	bl	8005650 <STC_StopRamp>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			; (mov r8, r8)

0800187c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 800187c:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 800187e:	6800      	ldr	r0, [r0, #0]
 8001880:	f003 fe8c 	bl	800559c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001884:	f003 fe32 	bl	80054ec <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001888:	bd10      	pop	{r4, pc}
 800188a:	46c0      	nop			; (mov r8, r8)

0800188c <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 800188c:	b510      	push	{r4, lr}
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 800188e:	6800      	ldr	r0, [r0, #0]
 8001890:	f003 fe90 	bl	80055b4 <STC_GetMecSpeedRefUnit>
#endif
}
 8001894:	bd10      	pop	{r4, pc}
 8001896:	46c0      	nop			; (mov r8, r8)

08001898 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
{
 8001898:	b500      	push	{lr}
 800189a:	b083      	sub	sp, #12
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 800189c:	6841      	ldr	r1, [r0, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	a801      	add	r0, sp, #4
 80018a2:	f004 fb7f 	bl	8005fa4 <memcpy>
 80018a6:	466b      	mov	r3, sp
 80018a8:	466a      	mov	r2, sp
 80018aa:	88db      	ldrh	r3, [r3, #6]
 80018ac:	8890      	ldrh	r0, [r2, #4]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4318      	orrs	r0, r3
#endif
}
 80018b2:	b003      	add	sp, #12
 80018b4:	bd00      	pop	{pc}
 80018b6:	46c0      	nop			; (mov r8, r8)

080018b8 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
{
 80018b8:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80018ba:	6841      	ldr	r1, [r0, #4]
{
 80018bc:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Ialphabeta);
 80018be:	2204      	movs	r2, #4
 80018c0:	3104      	adds	r1, #4
 80018c2:	a801      	add	r0, sp, #4
 80018c4:	f004 fb6e 	bl	8005fa4 <memcpy>
 80018c8:	466b      	mov	r3, sp
 80018ca:	466a      	mov	r2, sp
 80018cc:	88db      	ldrh	r3, [r3, #6]
 80018ce:	8890      	ldrh	r0, [r2, #4]
 80018d0:	041b      	lsls	r3, r3, #16
 80018d2:	4318      	orrs	r0, r3
#endif
}
 80018d4:	b003      	add	sp, #12
 80018d6:	bd00      	pop	{pc}

080018d8 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
{
 80018d8:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80018da:	6841      	ldr	r1, [r0, #4]
{
 80018dc:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Iqd);
 80018de:	2204      	movs	r2, #4
 80018e0:	310c      	adds	r1, #12
 80018e2:	a801      	add	r0, sp, #4
 80018e4:	f004 fb5e 	bl	8005fa4 <memcpy>
 80018e8:	466b      	mov	r3, sp
 80018ea:	466a      	mov	r2, sp
 80018ec:	88db      	ldrh	r3, [r3, #6]
 80018ee:	8890      	ldrh	r0, [r2, #4]
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	4318      	orrs	r0, r3
#endif
}
 80018f4:	b003      	add	sp, #12
 80018f6:	bd00      	pop	{pc}

080018f8 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
{
 80018f8:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80018fa:	6841      	ldr	r1, [r0, #4]
{
 80018fc:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Iqdref);
 80018fe:	2204      	movs	r2, #4
 8001900:	3110      	adds	r1, #16
 8001902:	a801      	add	r0, sp, #4
 8001904:	f004 fb4e 	bl	8005fa4 <memcpy>
 8001908:	466b      	mov	r3, sp
 800190a:	466a      	mov	r2, sp
 800190c:	88db      	ldrh	r3, [r3, #6]
 800190e:	8890      	ldrh	r0, [r2, #4]
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	4318      	orrs	r0, r3
#endif
}
 8001914:	b003      	add	sp, #12
 8001916:	bd00      	pop	{pc}

08001918 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
{
 8001918:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800191a:	6841      	ldr	r1, [r0, #4]
{
 800191c:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 800191e:	2204      	movs	r2, #4
 8001920:	3116      	adds	r1, #22
 8001922:	a801      	add	r0, sp, #4
 8001924:	f004 fb3e 	bl	8005fa4 <memcpy>
 8001928:	466b      	mov	r3, sp
 800192a:	466a      	mov	r2, sp
 800192c:	88db      	ldrh	r3, [r3, #6]
 800192e:	8890      	ldrh	r0, [r2, #4]
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	4318      	orrs	r0, r3
#endif
}
 8001934:	b003      	add	sp, #12
 8001936:	bd00      	pop	{pc}

08001938 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
{
 8001938:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 800193a:	6841      	ldr	r1, [r0, #4]
{
 800193c:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 800193e:	2204      	movs	r2, #4
 8001940:	311a      	adds	r1, #26
 8001942:	a801      	add	r0, sp, #4
 8001944:	f004 fb2e 	bl	8005fa4 <memcpy>
 8001948:	466b      	mov	r3, sp
 800194a:	466a      	mov	r2, sp
 800194c:	88db      	ldrh	r3, [r3, #6]
 800194e:	8890      	ldrh	r0, [r2, #4]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4318      	orrs	r0, r3
#endif
}
 8001954:	b003      	add	sp, #12
 8001956:	bd00      	pop	{pc}

08001958 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001958:	6843      	ldr	r3, [r0, #4]
 800195a:	201e      	movs	r0, #30
 800195c:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 800195e:	4770      	bx	lr

08001960 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001960:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001962:	c811      	ldmia	r0, {r0, r4}
 8001964:	f003 fea8 	bl	80056b8 <STC_GetDefaultIqdref>
 8001968:	8220      	strh	r0, [r4, #16]
 800196a:	0c00      	lsrs	r0, r0, #16
 800196c:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800196e:	bd10      	pop	{r4, pc}

08001970 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MCM_Clarke+0x48>)
 8001972:	b201      	sxth	r1, r0
 8001974:	1400      	asrs	r0, r0, #16
 8001976:	4350      	muls	r0, r2
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001978:	434a      	muls	r2, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800197a:	4253      	negs	r3, r2
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800197c:	2280      	movs	r2, #128	; 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800197e:	1a1b      	subs	r3, r3, r0
 8001980:	1a1b      	subs	r3, r3, r0
{
 8001982:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001984:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	4293      	cmp	r3, r2
 800198a:	da04      	bge.n	8001996 <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <MCM_Clarke+0x4c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	da08      	bge.n	80019a4 <MCM_Clarke+0x34>
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MCM_Clarke+0x50>)
 8001994:	e000      	b.n	8001998 <MCM_Clarke+0x28>
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MCM_Clarke+0x54>)
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001998:	0409      	lsls	r1, r1, #16
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	0c08      	lsrs	r0, r1, #16
 800199e:	4318      	orrs	r0, r3
}
 80019a0:	b004      	add	sp, #16
 80019a2:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <MCM_Clarke+0x50>)
 80019a6:	1c18      	adds	r0, r3, #0
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4293      	cmp	r3, r2
 80019ac:	db01      	blt.n	80019b2 <MCM_Clarke+0x42>
 80019ae:	b203      	sxth	r3, r0
 80019b0:	e7f2      	b.n	8001998 <MCM_Clarke+0x28>
 80019b2:	1c10      	adds	r0, r2, #0
 80019b4:	b203      	sxth	r3, r0
 80019b6:	e7ef      	b.n	8001998 <MCM_Clarke+0x28>
 80019b8:	000049e6 	.word	0x000049e6
 80019bc:	ffff8000 	.word	0xffff8000
 80019c0:	ffff8001 	.word	0xffff8001
 80019c4:	00007fff 	.word	0x00007fff

080019c8 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0209      	lsls	r1, r1, #8
 80019cc:	468c      	mov	ip, r1
 80019ce:	4460      	add	r0, ip
  uhindex = (uint16_t)shindex;
 80019d0:	b280      	uxth	r0, r0
{
 80019d2:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 80019d4:	0980      	lsrs	r0, r0, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 80019d6:	24c0      	movs	r4, #192	; 0xc0
 80019d8:	0001      	movs	r1, r0
 80019da:	2580      	movs	r5, #128	; 0x80
 80019dc:	00a4      	lsls	r4, r4, #2
{
 80019de:	2200      	movs	r2, #0
 80019e0:	2300      	movs	r3, #0
 80019e2:	b083      	sub	sp, #12
 80019e4:	4021      	ands	r1, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 80019e6:	00ad      	lsls	r5, r5, #2
 80019e8:	42a9      	cmp	r1, r5
 80019ea:	d023      	beq.n	8001a34 <MCM_Trig_Functions+0x6c>
 80019ec:	d815      	bhi.n	8001a1a <MCM_Trig_Functions+0x52>
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d029      	beq.n	8001a46 <MCM_Trig_Functions+0x7e>
 80019f2:	2480      	movs	r4, #128	; 0x80
 80019f4:	0064      	lsls	r4, r4, #1
 80019f6:	42a1      	cmp	r1, r4
 80019f8:	d109      	bne.n	8001a0e <MCM_Trig_Functions+0x46>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019fa:	b2c0      	uxtb	r0, r0
 80019fc:	43c3      	mvns	r3, r0
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <MCM_Trig_Functions+0x98>)
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a06:	0040      	lsls	r0, r0, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a08:	425b      	negs	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a0a:	5e82      	ldrsh	r2, [r0, r2]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a0c:	b21b      	sxth	r3, r3
    }

    default:
      break;
  }
  return (Local_Components);
 8001a0e:	0412      	lsls	r2, r2, #16
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	0c10      	lsrs	r0, r2, #16
 8001a14:	4318      	orrs	r0, r3
}
 8001a16:	b003      	add	sp, #12
 8001a18:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001a1a:	42a1      	cmp	r1, r4
 8001a1c:	d1f7      	bne.n	8001a0e <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a1e:	b2c0      	uxtb	r0, r0
 8001a20:	43c3      	mvns	r3, r0
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <MCM_Trig_Functions+0x98>)
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	005b      	lsls	r3, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a28:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a2a:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a2c:	5a82      	ldrh	r2, [r0, r2]
 8001a2e:	4252      	negs	r2, r2
 8001a30:	b212      	sxth	r2, r2
      break;
 8001a32:	e7ec      	b.n	8001a0e <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a34:	b2c0      	uxtb	r0, r0
 8001a36:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a38:	43c0      	mvns	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a3c:	b2c0      	uxtb	r0, r0
 8001a3e:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a40:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a42:	5e82      	ldrsh	r2, [r0, r2]
      break;
 8001a44:	e7e3      	b.n	8001a0e <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a46:	b2c0      	uxtb	r0, r0
 8001a48:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a4a:	43c0      	mvns	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a4e:	b2c0      	uxtb	r0, r0
 8001a50:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a52:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a54:	5a82      	ldrh	r2, [r0, r2]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a56:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a58:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a5a:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a5c:	b212      	sxth	r2, r2
      break;
 8001a5e:	e7d6      	b.n	8001a0e <MCM_Trig_Functions+0x46>
 8001a60:	080061cc 	.word	0x080061cc

08001a64 <MCM_Park>:
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	9001      	str	r0, [sp, #4]
 8001a6a:	b205      	sxth	r5, r0
 8001a6c:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a6e:	0008      	movs	r0, r1
 8001a70:	f7ff ffaa 	bl	80019c8 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001a74:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001a76:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001a78:	000b      	movs	r3, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001a7a:	0002      	movs	r2, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001a7c:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001a7e:	4362      	muls	r2, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a80:	1a9b      	subs	r3, r3, r2
  if (wqd_tmp > INT16_MAX)
 8001a82:	2280      	movs	r2, #128	; 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a84:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001a86:	0212      	lsls	r2, r2, #8
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	da12      	bge.n	8001ab2 <MCM_Park+0x4e>
  else if (wqd_tmp < (-32768))
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <MCM_Park+0x94>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	da24      	bge.n	8001adc <MCM_Park+0x78>
  if (wqd_tmp > INT16_MAX)
 8001a92:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8001a94:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001a96:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a98:	1840      	adds	r0, r0, r1
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <MCM_Park+0x98>)
 8001a9c:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	4298      	cmp	r0, r3
 8001aa2:	db0f      	blt.n	8001ac4 <MCM_Park+0x60>
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MCM_Park+0x9c>)
  return (Output);
 8001aa6:	0410      	lsls	r0, r2, #16
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	0c00      	lsrs	r0, r0, #16
 8001aac:	4318      	orrs	r0, r3
}
 8001aae:	b004      	add	sp, #16
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
 8001ab2:	4a13      	ldr	r2, [pc, #76]	; (8001b00 <MCM_Park+0x9c>)
  if (wqd_tmp > INT16_MAX)
 8001ab4:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8001ab6:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001ab8:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001aba:	1840      	adds	r0, r0, r1
 8001abc:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4298      	cmp	r0, r3
 8001ac2:	daef      	bge.n	8001aa4 <MCM_Park+0x40>
  else if (wqd_tmp < (-32768))
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MCM_Park+0x94>)
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	da01      	bge.n	8001ace <MCM_Park+0x6a>
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MCM_Park+0x98>)
 8001acc:	e7eb      	b.n	8001aa6 <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001ace:	490b      	ldr	r1, [pc, #44]	; (8001afc <MCM_Park+0x98>)
 8001ad0:	1c03      	adds	r3, r0, #0
 8001ad2:	b200      	sxth	r0, r0
 8001ad4:	4288      	cmp	r0, r1
 8001ad6:	db0b      	blt.n	8001af0 <MCM_Park+0x8c>
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	e7e4      	b.n	8001aa6 <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001adc:	4e07      	ldr	r6, [pc, #28]	; (8001afc <MCM_Park+0x98>)
 8001ade:	1c1a      	adds	r2, r3, #0
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	42b3      	cmp	r3, r6
 8001ae4:	db01      	blt.n	8001aea <MCM_Park+0x86>
 8001ae6:	b212      	sxth	r2, r2
 8001ae8:	e7e4      	b.n	8001ab4 <MCM_Park+0x50>
 8001aea:	1c32      	adds	r2, r6, #0
 8001aec:	b212      	sxth	r2, r2
 8001aee:	e7e1      	b.n	8001ab4 <MCM_Park+0x50>
 8001af0:	1c0b      	adds	r3, r1, #0
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	e7d7      	b.n	8001aa6 <MCM_Park+0x42>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	ffff8000 	.word	0xffff8000
 8001afc:	ffff8001 	.word	0xffff8001
 8001b00:	00007fff 	.word	0x00007fff

08001b04 <MCM_Rev_Park>:
{
 8001b04:	b530      	push	{r4, r5, lr}
 8001b06:	b085      	sub	sp, #20
 8001b08:	b205      	sxth	r5, r0
 8001b0a:	9001      	str	r0, [sp, #4]
 8001b0c:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001b0e:	0008      	movs	r0, r1
 8001b10:	f7ff ff5a 	bl	80019c8 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b14:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001b16:	1400      	asrs	r0, r0, #16
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b18:	0013      	movs	r3, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001b1a:	0001      	movs	r1, r0
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001b1c:	436b      	muls	r3, r5
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001b1e:	4361      	muls	r1, r4
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8001b20:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001b22:	4354      	muls	r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001b24:	185b      	adds	r3, r3, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001b26:	1a20      	subs	r0, r4, r0
 8001b28:	13c0      	asrs	r0, r0, #15
  return (Output);
 8001b2a:	005c      	lsls	r4, r3, #1
 8001b2c:	0c24      	lsrs	r4, r4, #16
 8001b2e:	0400      	lsls	r0, r0, #16
 8001b30:	4320      	orrs	r0, r4
}
 8001b32:	b005      	add	sp, #20
 8001b34:	bd30      	pop	{r4, r5, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)

08001b38 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001b38:	2126      	movs	r1, #38	; 0x26
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4341      	muls	r1, r0
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <FOC_Clear+0x50>)
{
 8001b40:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8001b42:	52ca      	strh	r2, [r1, r3]
 8001b44:	185b      	adds	r3, r3, r1
 8001b46:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001b48:	809a      	strh	r2, [r3, #4]
 8001b4a:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001b4c:	819a      	strh	r2, [r3, #12]
 8001b4e:	81da      	strh	r2, [r3, #14]
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 8001b50:	821a      	strh	r2, [r3, #16]
 8001b52:	825a      	strh	r2, [r3, #18]
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001b54:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001b56:	82da      	strh	r2, [r3, #22]
 8001b58:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001b5a:	835a      	strh	r2, [r3, #26]
 8001b5c:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001b5e:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <FOC_Clear+0x54>)
 8001b62:	0084      	lsls	r4, r0, #2
 8001b64:	58e0      	ldr	r0, [r4, r3]
 8001b66:	2100      	movs	r1, #0
 8001b68:	f002 fe24 	bl	80047b4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <FOC_Clear+0x58>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	58e0      	ldr	r0, [r4, r3]
 8001b72:	f002 fe1f 	bl	80047b4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <FOC_Clear+0x5c>)
 8001b78:	58e0      	ldr	r0, [r4, r3]
 8001b7a:	f003 fd11 	bl	80055a0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <FOC_Clear+0x60>)
 8001b80:	58e0      	ldr	r0, [r4, r3]
 8001b82:	f000 fd7d 	bl	8002680 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001b86:	bd10      	pop	{r4, pc}
 8001b88:	20000568 	.word	0x20000568
 8001b8c:	2000046c 	.word	0x2000046c
 8001b90:	20000468 	.word	0x20000468
 8001b94:	20000470 	.word	0x20000470
 8001b98:	2000059c 	.word	0x2000059c

08001b9c <MCboot>:
{
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	46ce      	mov	lr, r9
 8001ba0:	4647      	mov	r7, r8
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	0004      	movs	r4, r0
 8001ba6:	b085      	sub	sp, #20
  if (MC_NULL == pMCIList)
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d064      	beq.n	8001c76 <MCboot+0xda>
    bMCBootCompleted = (uint8_t )0;
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <MCboot+0xe4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001bae:	4f35      	ldr	r7, [pc, #212]	; (8001c84 <MCboot+0xe8>)
    bMCBootCompleted = (uint8_t )0;
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	4642      	mov	r2, r8
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001bb6:	4834      	ldr	r0, [pc, #208]	; (8001c88 <MCboot+0xec>)
    bMCBootCompleted = (uint8_t )0;
 8001bb8:	7013      	strb	r3, [r2, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001bba:	6038      	str	r0, [r7, #0]
    R3_1_Init(&PWM_Handle_M1);
 8001bbc:	f002 ff02 	bl	80049c4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001bc0:	4832      	ldr	r0, [pc, #200]	; (8001c8c <MCboot+0xf0>)
 8001bc2:	f7fe fe01 	bl	80007c8 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001bc6:	4e32      	ldr	r6, [pc, #200]	; (8001c90 <MCboot+0xf4>)
 8001bc8:	0030      	movs	r0, r6
 8001bca:	f002 fddf 	bl	800478c <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <MCboot+0xf8>)
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f003 ffbe 	bl	8005b54 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001bd8:	4d2f      	ldr	r5, [pc, #188]	; (8001c98 <MCboot+0xfc>)
 8001bda:	464a      	mov	r2, r9
 8001bdc:	0031      	movs	r1, r6
 8001bde:	6828      	ldr	r0, [r5, #0]
 8001be0:	f003 fcc8 	bl	8005574 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001be4:	4e2d      	ldr	r6, [pc, #180]	; (8001c9c <MCboot+0x100>)
 8001be6:	0030      	movs	r0, r6
 8001be8:	f004 f8aa 	bl	8005d40 <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	0032      	movs	r2, r6
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	6829      	ldr	r1, [r5, #0]
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MCboot+0x104>)
 8001bf6:	482b      	ldr	r0, [pc, #172]	; (8001ca4 <MCboot+0x108>)
 8001bf8:	f003 fb9c 	bl	8005334 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001bfc:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <MCboot+0x10c>)
 8001bfe:	f002 fdc5 	bl	800478c <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001c02:	482a      	ldr	r0, [pc, #168]	; (8001cac <MCboot+0x110>)
 8001c04:	f002 fdc2 	bl	800478c <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001c08:	4e29      	ldr	r6, [pc, #164]	; (8001cb0 <MCboot+0x114>)
 8001c0a:	0030      	movs	r0, r6
 8001c0c:	f003 fa9a 	bl	8005144 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <MCboot+0x118>)
    NTC_Init(&TempSensor_M1);
 8001c12:	4829      	ldr	r0, [pc, #164]	; (8001cb8 <MCboot+0x11c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001c18:	4e28      	ldr	r6, [pc, #160]	; (8001cbc <MCboot+0x120>)
 8001c1a:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001c1c:	f002 fd72 	bl	8004704 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MCboot+0x124>)
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <MCboot+0x128>)
 8001c24:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001c26:	f003 fafb 	bl	8005220 <REMNG_Init>
    FOC_Clear(M1);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ff84 	bl	8001b38 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c30:	2301      	movs	r3, #1
 8001c32:	4699      	mov	r9, r3
 8001c34:	464a      	mov	r2, r9
 8001c36:	3323      	adds	r3, #35	; 0x23
 8001c38:	54f2      	strb	r2, [r6, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c3a:	6828      	ldr	r0, [r5, #0]
 8001c3c:	f003 fd3c 	bl	80056b8 <STC_GetDefaultIqdref>
 8001c40:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c42:	6828      	ldr	r0, [r5, #0]
 8001c44:	f003 fd38 	bl	80056b8 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4f1f      	ldr	r7, [pc, #124]	; (8001cc8 <MCboot+0x12c>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c4c:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c4e:	0032      	movs	r2, r6
 8001c50:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001c52:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001c54:	0038      	movs	r0, r7
 8001c56:	f7ff fd1f 	bl	8001698 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001c5a:	6828      	ldr	r0, [r5, #0]
 8001c5c:	f003 fd28 	bl	80056b0 <STC_GetMecSpeedRefUnitDefault>
 8001c60:	2200      	movs	r2, #0
 8001c62:	0001      	movs	r1, r0
 8001c64:	0038      	movs	r0, r7
 8001c66:	f7ff fd23 	bl	80016b0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001c6a:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8001c6c:	f7ff fd10 	bl	8001690 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001c70:	4643      	mov	r3, r8
 8001c72:	464a      	mov	r2, r9
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	b005      	add	sp, #20
 8001c78:	bcc0      	pop	{r6, r7}
 8001c7a:	46b9      	mov	r9, r7
 8001c7c:	46b0      	mov	r8, r6
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c80:	2000058e 	.word	0x2000058e
 8001c84:	2000059c 	.word	0x2000059c
 8001c88:	20000174 	.word	0x20000174
 8001c8c:	200004ac 	.word	0x200004ac
 8001c90:	20000138 	.word	0x20000138
 8001c94:	200002a8 	.word	0x200002a8
 8001c98:	20000470 	.word	0x20000470
 8001c9c:	2000042c 	.word	0x2000042c
 8001ca0:	20000294 	.word	0x20000294
 8001ca4:	2000021c 	.word	0x2000021c
 8001ca8:	2000010c 	.word	0x2000010c
 8001cac:	200000e0 	.word	0x200000e0
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000464 	.word	0x20000464
 8001cb8:	20000404 	.word	0x20000404
 8001cbc:	20000568 	.word	0x20000568
 8001cc0:	20000598 	.word	0x20000598
 8001cc4:	20000204 	.word	0x20000204
 8001cc8:	20000534 	.word	0x20000534

08001ccc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001ccc:	4770      	bx	lr
 8001cce:	46c0      	nop			; (mov r8, r8)

08001cd0 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001cd0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001cd2:	2426      	movs	r4, #38	; 0x26
 8001cd4:	4344      	muls	r4, r0
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <FOC_CalcCurrRef+0x28>)
 8001cd8:	191c      	adds	r4, r3, r4
 8001cda:	0023      	movs	r3, r4
 8001cdc:	3324      	adds	r3, #36	; 0x24
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d000      	beq.n	8001ce6 <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001ce4:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <FOC_CalcCurrRef+0x2c>)
 8001ce8:	0080      	lsls	r0, r0, #2
 8001cea:	58c0      	ldr	r0, [r0, r3]
 8001cec:	f003 fcb4 	bl	8005658 <STC_CalcTorqueReference>
 8001cf0:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001cf2:	8220      	strh	r0, [r4, #16]
}
 8001cf4:	e7f6      	b.n	8001ce4 <FOC_CalcCurrRef+0x14>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	20000568 	.word	0x20000568
 8001cfc:	20000470 	.word	0x20000470

08001d00 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001d00:	4b01      	ldr	r3, [pc, #4]	; (8001d08 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001d02:	8018      	strh	r0, [r3, #0]
}
 8001d04:	4770      	bx	lr
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000590 	.word	0x20000590

08001d0c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8001d0e:	8818      	ldrh	r0, [r3, #0]
 8001d10:	4243      	negs	r3, r0
 8001d12:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001d14:	b2c0      	uxtb	r0, r0
}
 8001d16:	4770      	bx	lr
 8001d18:	20000590 	.word	0x20000590

08001d1c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001d1c:	4b01      	ldr	r3, [pc, #4]	; (8001d24 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001d1e:	8018      	strh	r0, [r3, #0]
}
 8001d20:	4770      	bx	lr
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	20000594 	.word	0x20000594

08001d28 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8001d2a:	8818      	ldrh	r0, [r3, #0]
 8001d2c:	4243      	negs	r3, r0
 8001d2e:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001d30:	b2c0      	uxtb	r0, r0
}
 8001d32:	4770      	bx	lr
 8001d34:	20000594 	.word	0x20000594

08001d38 <TSK_MediumFrequencyTaskM1>:
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	466a      	mov	r2, sp
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d40:	4fa9      	ldr	r7, [pc, #676]	; (8001fe8 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001d42:	4669      	mov	r1, sp
 8001d44:	0038      	movs	r0, r7
  int16_t wAux = 0;
 8001d46:	8013      	strh	r3, [r2, #0]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d48:	f003 fde4 	bl	8005914 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d4c:	4ea7      	ldr	r6, [pc, #668]	; (8001fec <TSK_MediumFrequencyTaskM1+0x2b4>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d4e:	0005      	movs	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d50:	6830      	ldr	r0, [r6, #0]
 8001d52:	f002 fda7 	bl	80048a4 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001d56:	4ca6      	ldr	r4, [pc, #664]	; (8001ff0 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8001d58:	0020      	movs	r0, r4
 8001d5a:	f7ff fd11 	bl	8001780 <MCI_GetCurrentFaults>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d003      	beq.n	8001d6a <TSK_MediumFrequencyTaskM1+0x32>
    Mci[M1].State = FAULT_NOW;
 8001d62:	230a      	movs	r3, #10
 8001d64:	7663      	strb	r3, [r4, #25]
}
 8001d66:	b003      	add	sp, #12
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f7ff fd06 	bl	800177c <MCI_GetOccurredFaults>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d106      	bne.n	8001d82 <TSK_MediumFrequencyTaskM1+0x4a>
      switch (Mci[M1].State)
 8001d74:	7e63      	ldrb	r3, [r4, #25]
 8001d76:	2b13      	cmp	r3, #19
 8001d78:	d8f5      	bhi.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
 8001d7a:	4a9e      	ldr	r2, [pc, #632]	; (8001ff4 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	58d3      	ldr	r3, [r2, r3]
 8001d80:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8001d82:	230b      	movs	r3, #11
 8001d84:	7663      	strb	r3, [r4, #25]
 8001d86:	e7ee      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001d88:	7e23      	ldrb	r3, [r4, #24]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d100      	bne.n	8001d90 <TSK_MediumFrequencyTaskM1+0x58>
 8001d8e:	e0d2      	b.n	8001f36 <TSK_MediumFrequencyTaskM1+0x1fe>
            if(! RUC_Exec(&RevUpControlM1))
 8001d90:	4899      	ldr	r0, [pc, #612]	; (8001ff8 <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001d92:	f003 fb47 	bl	8005424 <RUC_Exec>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d000      	beq.n	8001d9c <TSK_MediumFrequencyTaskM1+0x64>
 8001d9a:	e0e7      	b.n	8001f6c <TSK_MediumFrequencyTaskM1+0x234>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2110      	movs	r1, #16
 8001da0:	0020      	movs	r0, r4
 8001da2:	f7ff fca5 	bl	80016f0 <MCI_FaultProcessing>
 8001da6:	e7de      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001da8:	7e23      	ldrb	r3, [r4, #24]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d100      	bne.n	8001db0 <TSK_MediumFrequencyTaskM1+0x78>
 8001dae:	e0c2      	b.n	8001f36 <TSK_MediumFrequencyTaskM1+0x1fe>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001db0:	4d92      	ldr	r5, [pc, #584]	; (8001ffc <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	6828      	ldr	r0, [r5, #0]
 8001db6:	f000 fc6b 	bl	8002690 <PWMC_CurrentReadingCalibr>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d0d3      	beq.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001dbe:	7e23      	ldrb	r3, [r4, #24]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d100      	bne.n	8001dc6 <TSK_MediumFrequencyTaskM1+0x8e>
 8001dc4:	e107      	b.n	8001fd6 <TSK_MediumFrequencyTaskM1+0x29e>
                  R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001dc6:	6828      	ldr	r0, [r5, #0]
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f002 ffa9 	bl	8004d20 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f7ff ff96 	bl	8001d00 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	7663      	strb	r3, [r4, #25]
 8001dd8:	e7c5      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001dda:	7e23      	ldrb	r3, [r4, #24]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d100      	bne.n	8001de2 <TSK_MediumFrequencyTaskM1+0xaa>
 8001de0:	e0a9      	b.n	8001f36 <TSK_MediumFrequencyTaskM1+0x1fe>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001de2:	f7ff ff93 	bl	8001d0c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d0bd      	beq.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001dea:	4d84      	ldr	r5, [pc, #528]	; (8001ffc <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001dec:	6828      	ldr	r0, [r5, #0]
 8001dee:	f003 f833 	bl	8004e58 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001df2:	2324      	movs	r3, #36	; 0x24
 8001df4:	2101      	movs	r1, #1
 8001df6:	4a82      	ldr	r2, [pc, #520]	; (8002000 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001df8:	54d1      	strb	r1, [r2, r3]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001dfc:	4982      	ldr	r1, [pc, #520]	; (8002008 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f003 fbca 	bl	8005598 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001e04:	0038      	movs	r0, r7
 8001e06:	f003 fe7b 	bl	8005b00 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe94 	bl	8001b38 <FOC_Clear>
                Mci[M1].State = START;
 8001e10:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001e12:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001e14:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001e16:	f000 fc37 	bl	8002688 <PWMC_SwitchOnPWM>
 8001e1a:	e7a4      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001e1c:	f7ff ff84 	bl	8001d28 <TSK_StopPermanencyTimeHasElapsedM1>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d0a0      	beq.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001e24:	4b77      	ldr	r3, [pc, #476]	; (8002004 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001e26:	4d78      	ldr	r5, [pc, #480]	; (8002008 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	0029      	movs	r1, r5
 8001e2c:	f003 fbb4 	bl	8005598 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001e30:	0028      	movs	r0, r5
 8001e32:	f003 ff77 	bl	8005d24 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001e36:	2300      	movs	r3, #0
 8001e38:	8323      	strh	r3, [r4, #24]
 8001e3a:	e794      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e3c:	7e23      	ldrb	r3, [r4, #24]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d079      	beq.n	8001f36 <TSK_MediumFrequencyTaskM1+0x1fe>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001e42:	0020      	movs	r0, r4
 8001e44:	f7ff fc5c 	bl	8001700 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ff41 	bl	8001cd0 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	d000      	beq.n	8001e54 <TSK_MediumFrequencyTaskM1+0x11c>
 8001e52:	e788      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2120      	movs	r1, #32
 8001e58:	0020      	movs	r0, r4
 8001e5a:	f7ff fc49 	bl	80016f0 <MCI_FaultProcessing>
 8001e5e:	e782      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e60:	7e23      	ldrb	r3, [r4, #24]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d067      	beq.n	8001f36 <TSK_MediumFrequencyTaskM1+0x1fe>
            if(! RUC_Exec(&RevUpControlM1))
 8001e66:	4d64      	ldr	r5, [pc, #400]	; (8001ff8 <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001e68:	0028      	movs	r0, r5
 8001e6a:	f003 fadb 	bl	8005424 <RUC_Exec>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	d172      	bne.n	8001f58 <TSK_MediumFrequencyTaskM1+0x220>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2110      	movs	r1, #16
 8001e76:	0020      	movs	r0, r4
 8001e78:	f7ff fc3a 	bl	80016f0 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001e7c:	466b      	mov	r3, sp
 8001e7e:	4e62      	ldr	r6, [pc, #392]	; (8002008 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001e80:	1c99      	adds	r1, r3, #2
 8001e82:	0030      	movs	r0, r6
 8001e84:	f003 ffb8 	bl	8005df8 <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001e88:	0028      	movs	r0, r5
 8001e8a:	f003 faff 	bl	800548c <RUC_FirstAccelerationStageReached>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d100      	bne.n	8001e94 <TSK_MediumFrequencyTaskM1+0x15c>
 8001e92:	e768      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001e94:	466b      	mov	r3, sp
 8001e96:	0038      	movs	r0, r7
 8001e98:	1c99      	adds	r1, r3, #2
 8001e9a:	f003 fe95 	bl	8005bc8 <STO_PLL_IsObserverConverged>
 8001e9e:	0005      	movs	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001ea0:	0020      	movs	r0, r4
 8001ea2:	f7ff fcbf 	bl	8001824 <MCI_GetImposedMotorDirection>
 8001ea6:	b241      	sxtb	r1, r0
 8001ea8:	0038      	movs	r0, r7
 8001eaa:	f003 ff37 	bl	8005d1c <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001eae:	0029      	movs	r1, r5
 8001eb0:	0030      	movs	r0, r6
 8001eb2:	f004 f83f 	bl	8005f34 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d100      	bne.n	8001ebc <TSK_MediumFrequencyTaskM1+0x184>
 8001eba:	e754      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001ebc:	0038      	movs	r0, r7
 8001ebe:	f003 fb11 	bl	80054e4 <SPD_GetElAngle>
 8001ec2:	4e4f      	ldr	r6, [pc, #316]	; (8002000 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001ec4:	0001      	movs	r1, r0
 8001ec6:	6870      	ldr	r0, [r6, #4]
 8001ec8:	f7ff fdcc 	bl	8001a64 <MCM_Park>
              REMNG_Init(pREMNG[M1]);
 8001ecc:	4d4f      	ldr	r5, [pc, #316]	; (800200c <TSK_MediumFrequencyTaskM1+0x2d4>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001ece:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001ed0:	6828      	ldr	r0, [r5, #0]
 8001ed2:	f003 f9a5 	bl	8005220 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	5ef1      	ldrsh	r1, [r6, r3]
 8001eda:	2200      	movs	r2, #0
 8001edc:	6828      	ldr	r0, [r5, #0]
 8001ede:	f003 f9e1 	bl	80052a4 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001ee2:	ab01      	add	r3, sp, #4
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5e59      	ldrsh	r1, [r3, r1]
 8001ee8:	2219      	movs	r2, #25
 8001eea:	6828      	ldr	r0, [r5, #0]
 8001eec:	f003 f9da 	bl	80052a4 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001ef0:	2313      	movs	r3, #19
 8001ef2:	7663      	strb	r3, [r4, #25]
 8001ef4:	e737      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	7e25      	ldrb	r5, [r4, #24]
 8001efa:	439d      	bics	r5, r3
 8001efc:	2d01      	cmp	r5, #1
 8001efe:	d000      	beq.n	8001f02 <TSK_MediumFrequencyTaskM1+0x1ca>
 8001f00:	e731      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001f02:	0020      	movs	r0, r4
 8001f04:	f7ff fc8e 	bl	8001824 <MCI_GetImposedMotorDirection>
 8001f08:	0001      	movs	r1, r0
 8001f0a:	483b      	ldr	r0, [pc, #236]	; (8001ff8 <TSK_MediumFrequencyTaskM1+0x2c0>)
 8001f0c:	f003 fa4c 	bl	80053a8 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001f10:	236e      	movs	r3, #110	; 0x6e
 8001f12:	4e3a      	ldr	r6, [pc, #232]	; (8001ffc <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001f14:	6830      	ldr	r0, [r6, #0]
 8001f16:	5cc3      	ldrb	r3, [r0, r3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d155      	bne.n	8001fc8 <TSK_MediumFrequencyTaskM1+0x290>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f000 fbb7 	bl	8002690 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001f22:	2311      	movs	r3, #17
 8001f24:	7663      	strb	r3, [r4, #25]
 8001f26:	e71e      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001f28:	7e23      	ldrb	r3, [r4, #24]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d000      	beq.n	8001f30 <TSK_MediumFrequencyTaskM1+0x1f8>
 8001f2e:	e71a      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001f30:	2300      	movs	r3, #0
 8001f32:	8323      	strh	r3, [r4, #24]
 8001f34:	e717      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f002 ff8d 	bl	8004e58 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fdfa 	bl	8001b38 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001f44:	6830      	ldr	r0, [r6, #0]
 8001f46:	f002 fcc7 	bl	80048d8 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001f4a:	20c8      	movs	r0, #200	; 0xc8
 8001f4c:	0080      	lsls	r0, r0, #2
 8001f4e:	f7ff fee5 	bl	8001d1c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001f52:	2308      	movs	r3, #8
 8001f54:	7663      	strb	r3, [r4, #25]
  return;
 8001f56:	e706      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f003 fb7c 	bl	8005658 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001f62:	2114      	movs	r1, #20
 8001f64:	5e5a      	ldrsh	r2, [r3, r1]
             FOCVars[M1].Iqdref = IqdRef;
 8001f66:	8218      	strh	r0, [r3, #16]
 8001f68:	825a      	strh	r2, [r3, #18]
 8001f6a:	e787      	b.n	8001e7c <TSK_MediumFrequencyTaskM1+0x144>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001f6c:	4e26      	ldr	r6, [pc, #152]	; (8002008 <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001f6e:	a901      	add	r1, sp, #4
 8001f70:	0030      	movs	r0, r6
 8001f72:	f003 ff41 	bl	8005df8 <VSS_CalcAvrgMecSpeedUnit>
 8001f76:	0005      	movs	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001f78:	0030      	movs	r0, r6
 8001f7a:	f003 ffeb 	bl	8005f54 <VSS_TransitionEnded>
              if (true ==  LoopClosed)
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d102      	bne.n	8001f88 <TSK_MediumFrequencyTaskM1+0x250>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d100      	bne.n	8001f88 <TSK_MediumFrequencyTaskM1+0x250>
 8001f86:	e6ee      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001f88:	4e21      	ldr	r6, [pc, #132]	; (8002010 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001f8c:	0030      	movs	r0, r6
 8001f8e:	2510      	movs	r5, #16
 8001f90:	5f5d      	ldrsh	r5, [r3, r5]
 8001f92:	f002 fc19 	bl	80047c8 <PID_GetKIDivisor>
 8001f96:	b201      	sxth	r1, r0
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001f98:	4369      	muls	r1, r5
 8001f9a:	0030      	movs	r0, r6
 8001f9c:	f002 fc0a 	bl	80047b4 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001fa0:	4d18      	ldr	r5, [pc, #96]	; (8002004 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001fa2:	0039      	movs	r1, r7
 8001fa4:	6828      	ldr	r0, [r5, #0]
 8001fa6:	f003 faf7 	bl	8005598 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fe8e 	bl	8001ccc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fe8d 	bl	8001cd0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001fb6:	6828      	ldr	r0, [r5, #0]
 8001fb8:	f003 fb86 	bl	80056c8 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001fbc:	0020      	movs	r0, r4
 8001fbe:	f7ff fb9f 	bl	8001700 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	7663      	strb	r3, [r4, #25]
 8001fc6:	e6ce      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001fc8:	234e      	movs	r3, #78	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001fca:	2101      	movs	r1, #1
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001fcc:	52c5      	strh	r5, [r0, r3]
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001fce:	f000 fb5f 	bl	8002690 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001fd2:	6830      	ldr	r0, [r6, #0]
 8001fd4:	e6f8      	b.n	8001dc8 <TSK_MediumFrequencyTaskM1+0x90>
                  FOC_Clear(M1);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fdae 	bl	8001b38 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001fdc:	6830      	ldr	r0, [r6, #0]
 8001fde:	f002 fc7b 	bl	80048d8 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	8323      	strh	r3, [r4, #24]
 8001fe6:	e6be      	b.n	8001d66 <TSK_MediumFrequencyTaskM1+0x2e>
 8001fe8:	200002a8 	.word	0x200002a8
 8001fec:	20000464 	.word	0x20000464
 8001ff0:	20000534 	.word	0x20000534
 8001ff4:	08006448 	.word	0x08006448
 8001ff8:	2000021c 	.word	0x2000021c
 8001ffc:	2000059c 	.word	0x2000059c
 8002000:	20000568 	.word	0x20000568
 8002004:	20000470 	.word	0x20000470
 8002008:	2000042c 	.word	0x2000042c
 800200c:	20000598 	.word	0x20000598
 8002010:	20000138 	.word	0x20000138

08002014 <MC_Scheduler>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MC_Scheduler+0x80>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d000      	beq.n	8002020 <MC_Scheduler+0xc>
}
 800201e:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 8002020:	4c1d      	ldr	r4, [pc, #116]	; (8002098 <MC_Scheduler+0x84>)
 8002022:	8823      	ldrh	r3, [r4, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 8002028:	3b01      	subs	r3, #1
 800202a:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <MC_Scheduler+0x88>)
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	2a00      	cmp	r2, #0
 8002032:	d003      	beq.n	800203c <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	3a01      	subs	r2, #1
 8002038:	b292      	uxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MC_Scheduler+0x8c>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	2a00      	cmp	r2, #0
 8002042:	d0ec      	beq.n	800201e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	3a01      	subs	r2, #1
 8002048:	b292      	uxth	r2, r2
 800204a:	801a      	strh	r2, [r3, #0]
}
 800204c:	e7e7      	b.n	800201e <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 800204e:	f7ff fe73 	bl	8001d38 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002052:	f7ff fb1f 	bl	8001694 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002056:	4d13      	ldr	r5, [pc, #76]	; (80020a4 <MC_Scheduler+0x90>)
 8002058:	0029      	movs	r1, r5
 800205a:	6828      	ldr	r0, [r5, #0]
 800205c:	310c      	adds	r1, #12
 800205e:	6883      	ldr	r3, [r0, #8]
 8002060:	4798      	blx	r3
 8002062:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002064:	2800      	cmp	r0, #0
 8002066:	d007      	beq.n	8002078 <MC_Scheduler+0x64>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002068:	0029      	movs	r1, r5
 800206a:	6828      	ldr	r0, [r5, #0]
 800206c:	220a      	movs	r2, #10
 800206e:	6803      	ldr	r3, [r0, #0]
 8002070:	3108      	adds	r1, #8
 8002072:	4798      	blx	r3
 8002074:	2800      	cmp	r0, #0
 8002076:	d102      	bne.n	800207e <MC_Scheduler+0x6a>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8002078:	2301      	movs	r3, #1
 800207a:	8023      	strh	r3, [r4, #0]
 800207c:	e7d6      	b.n	800202c <MC_Scheduler+0x18>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 800207e:	0028      	movs	r0, r5
 8002080:	f002 fa86 	bl	8004590 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002084:	6828      	ldr	r0, [r5, #0]
 8002086:	89ea      	ldrh	r2, [r5, #14]
 8002088:	68a9      	ldr	r1, [r5, #8]
 800208a:	230a      	movs	r3, #10
 800208c:	6845      	ldr	r5, [r0, #4]
 800208e:	47a8      	blx	r5
 8002090:	e7f2      	b.n	8002078 <MC_Scheduler+0x64>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	2000058e 	.word	0x2000058e
 8002098:	20000592 	.word	0x20000592
 800209c:	20000590 	.word	0x20000590
 80020a0:	20000594 	.word	0x20000594
 80020a4:	20000488 	.word	0x20000488

080020a8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	46d6      	mov	lr, sl
 80020ac:	464f      	mov	r7, r9
 80020ae:	4646      	mov	r6, r8
  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80020b0:	4c57      	ldr	r4, [pc, #348]	; (8002210 <TSK_HighFrequencyTask+0x168>)
{
 80020b2:	b5c0      	push	{r6, r7, lr}
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80020b4:	0021      	movs	r1, r4
{
 80020b6:	b08a      	sub	sp, #40	; 0x28
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80020b8:	2204      	movs	r2, #4
 80020ba:	311a      	adds	r1, #26
 80020bc:	a807      	add	r0, sp, #28
 80020be:	f003 ff71 	bl	8005fa4 <memcpy>
  if (SWITCH_OVER == Mci[M1].State)
 80020c2:	4f54      	ldr	r7, [pc, #336]	; (8002214 <TSK_HighFrequencyTask+0x16c>)
 80020c4:	7e7b      	ldrb	r3, [r7, #25]
 80020c6:	2b13      	cmp	r3, #19
 80020c8:	d100      	bne.n	80020cc <TSK_HighFrequencyTask+0x24>
 80020ca:	e095      	b.n	80021f8 <TSK_HighFrequencyTask+0x150>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80020cc:	4b52      	ldr	r3, [pc, #328]	; (8002218 <TSK_HighFrequencyTask+0x170>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	f003 fa64 	bl	800559c <STC_GetSpeedSensor>
 80020d4:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80020d6:	f003 fa05 	bl	80054e4 <SPD_GetElAngle>
 80020da:	0005      	movs	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80020dc:	0030      	movs	r0, r6
 80020de:	f003 fa09 	bl	80054f4 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80020e2:	4b4e      	ldr	r3, [pc, #312]	; (800221c <TSK_HighFrequencyTask+0x174>)
 80020e4:	a904      	add	r1, sp, #16
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	4698      	mov	r8, r3
 80020ea:	f000 f9b9 	bl	8002460 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 80020ee:	f001 fc63 	bl	80039b8 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80020f2:	9804      	ldr	r0, [sp, #16]
 80020f4:	f7ff fc3c 	bl	8001970 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80020f8:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80020fa:	9005      	str	r0, [sp, #20]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80020fc:	f7ff fcb2 	bl	8001a64 <MCM_Park>
 8002100:	9002      	str	r0, [sp, #8]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002102:	2310      	movs	r3, #16
 8002104:	5ee1      	ldrsh	r1, [r4, r3]
 8002106:	b203      	sxth	r3, r0
 8002108:	1ac9      	subs	r1, r1, r3
 800210a:	4b45      	ldr	r3, [pc, #276]	; (8002220 <TSK_HighFrequencyTask+0x178>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	f002 fb87 	bl	8004820 <PI_Controller>
 8002112:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002114:	2312      	movs	r3, #18
 8002116:	5ee1      	ldrsh	r1, [r4, r3]
 8002118:	ab02      	add	r3, sp, #8
 800211a:	2202      	movs	r2, #2
 800211c:	5e9b      	ldrsh	r3, [r3, r2]
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	4b40      	ldr	r3, [pc, #256]	; (8002224 <TSK_HighFrequencyTask+0x17c>)
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f002 fb7c 	bl	8004820 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002128:	464a      	mov	r2, r9
 800212a:	ab03      	add	r3, sp, #12
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	8058      	strh	r0, [r3, #2]
 8002130:	9903      	ldr	r1, [sp, #12]
 8002132:	483d      	ldr	r0, [pc, #244]	; (8002228 <TSK_HighFrequencyTask+0x180>)
 8002134:	f002 f9ee 	bl	8004514 <Circle_Limitation>
 8002138:	b203      	sxth	r3, r0
 800213a:	469a      	mov	sl, r3
 800213c:	9003      	str	r0, [sp, #12]
 800213e:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002140:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002142:	4699      	mov	r9, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002144:	f003 f9d6 	bl	80054f4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002148:	0029      	movs	r1, r5
 800214a:	9803      	ldr	r0, [sp, #12]
 800214c:	f7ff fcda 	bl	8001b04 <MCM_Rev_Park>
 8002150:	9006      	str	r0, [sp, #24]
  RCM_ReadOngoingConv();
 8002152:	f001 fc69 	bl	8003a28 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002156:	4643      	mov	r3, r8
 8002158:	9906      	ldr	r1, [sp, #24]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f000 f984 	bl	8002468 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
 8002160:	4653      	mov	r3, sl
 8002162:	82e3      	strh	r3, [r4, #22]
 8002164:	464b      	mov	r3, r9
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002166:	0006      	movs	r6, r0
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8002168:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 800216a:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 800216c:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 800216e:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 8002170:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002172:	9b05      	ldr	r3, [sp, #20]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002174:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002176:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002178:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 800217a:	a906      	add	r1, sp, #24
  FOCVars[M1].Iqd = Iqd;
 800217c:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800217e:	f003 ff11 	bl	8005fa4 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8002182:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8002184:	2e01      	cmp	r6, #1
 8002186:	d031      	beq.n	80021ec <TSK_HighFrequencyTask+0x144>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002188:	4828      	ldr	r0, [pc, #160]	; (800222c <TSK_HighFrequencyTask+0x184>)
 800218a:	f003 f97f 	bl	800548c <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800218e:	6863      	ldr	r3, [r4, #4]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002190:	0005      	movs	r5, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002192:	4827      	ldr	r0, [pc, #156]	; (8002230 <TSK_HighFrequencyTask+0x188>)
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	9308      	str	r3, [sp, #32]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002198:	f002 f9b4 	bl	8004504 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800219c:	4c25      	ldr	r4, [pc, #148]	; (8002234 <TSK_HighFrequencyTask+0x18c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 800219e:	ab02      	add	r3, sp, #8
 80021a0:	8398      	strh	r0, [r3, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80021a2:	a907      	add	r1, sp, #28
 80021a4:	0020      	movs	r0, r4
 80021a6:	f003 fa97 	bl	80056d8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 80021aa:	0020      	movs	r0, r4
 80021ac:	f003 fc72 	bl	8005a94 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d00b      	beq.n	80021cc <TSK_HighFrequencyTask+0x124>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 80021b4:	7e7b      	ldrb	r3, [r7, #25]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d00e      	beq.n	80021d8 <TSK_HighFrequencyTask+0x130>
 80021ba:	2b13      	cmp	r3, #19
 80021bc:	d00c      	beq.n	80021d8 <TSK_HighFrequencyTask+0x130>
}
 80021be:	2000      	movs	r0, #0
 80021c0:	b00a      	add	sp, #40	; 0x28
 80021c2:	bce0      	pop	{r5, r6, r7}
 80021c4:	46ba      	mov	sl, r7
 80021c6:	46b1      	mov	r9, r6
 80021c8:	46a8      	mov	r8, r5
 80021ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80021cc:	0020      	movs	r0, r4
 80021ce:	f003 fd87 	bl	8005ce0 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 80021d2:	7e7b      	ldrb	r3, [r7, #25]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d1f0      	bne.n	80021ba <TSK_HighFrequencyTask+0x112>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80021d8:	0020      	movs	r0, r4
 80021da:	f003 f983 	bl	80054e4 <SPD_GetElAngle>
 80021de:	ab02      	add	r3, sp, #8
 80021e0:	8218      	strh	r0, [r3, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80021e2:	a906      	add	r1, sp, #24
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <TSK_HighFrequencyTask+0x190>)
 80021e6:	f003 fdaf 	bl	8005d48 <VSS_CalcElAngle>
 80021ea:	e7e8      	b.n	80021be <TSK_HighFrequencyTask+0x116>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2101      	movs	r1, #1
 80021f0:	0038      	movs	r0, r7
 80021f2:	f7ff fa7d 	bl	80016f0 <MCI_FaultProcessing>
 80021f6:	e7e2      	b.n	80021be <TSK_HighFrequencyTask+0x116>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80021f8:	4d10      	ldr	r5, [pc, #64]	; (800223c <TSK_HighFrequencyTask+0x194>)
 80021fa:	6828      	ldr	r0, [r5, #0]
 80021fc:	f003 f836 	bl	800526c <REMNG_RampCompleted>
 8002200:	2800      	cmp	r0, #0
 8002202:	d000      	beq.n	8002206 <TSK_HighFrequencyTask+0x15e>
 8002204:	e762      	b.n	80020cc <TSK_HighFrequencyTask+0x24>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8002206:	6828      	ldr	r0, [r5, #0]
 8002208:	f003 f812 	bl	8005230 <REMNG_Calc>
 800220c:	8220      	strh	r0, [r4, #16]
 800220e:	e75d      	b.n	80020cc <TSK_HighFrequencyTask+0x24>
 8002210:	20000568 	.word	0x20000568
 8002214:	20000534 	.word	0x20000534
 8002218:	20000470 	.word	0x20000470
 800221c:	2000059c 	.word	0x2000059c
 8002220:	2000046c 	.word	0x2000046c
 8002224:	20000468 	.word	0x20000468
 8002228:	2000002c 	.word	0x2000002c
 800222c:	2000021c 	.word	0x2000021c
 8002230:	20000000 	.word	0x20000000
 8002234:	200002a8 	.word	0x200002a8
 8002238:	2000042c 	.word	0x2000042c
 800223c:	20000598 	.word	0x20000598

08002240 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	46ce      	mov	lr, r9
 8002244:	4647      	mov	r7, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <TSK_SafetyTask_PWMOFF+0x7c>)
{
 8002248:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800224a:	0087      	lsls	r7, r0, #2
{
 800224c:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800224e:	59d8      	ldr	r0, [r3, r7]
 8002250:	f002 fa6c 	bl	800472c <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002256:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002258:	59d8      	ldr	r0, [r3, r7]
 800225a:	4698      	mov	r8, r3
 800225c:	f000 fa36 	bl	80026cc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002260:	2308      	movs	r3, #8
 8002262:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002264:	4306      	orrs	r6, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002266:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002268:	b2b4      	uxth	r4, r6
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 800226a:	2d00      	cmp	r5, #0
 800226c:	d011      	beq.n	8002292 <TSK_SafetyTask_PWMOFF+0x52>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800226e:	43e2      	mvns	r2, r4
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <TSK_SafetyTask_PWMOFF+0x84>)
 8002272:	016e      	lsls	r6, r5, #5
 8002274:	18f6      	adds	r6, r6, r3
 8002276:	0030      	movs	r0, r6
 8002278:	0021      	movs	r1, r4
 800227a:	b292      	uxth	r2, r2
 800227c:	f7ff fa38 	bl	80016f0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002280:	0030      	movs	r0, r6
 8002282:	f7ff fac7 	bl	8001814 <MCI_GetFaultState>
 8002286:	2800      	cmp	r0, #0
 8002288:	d10b      	bne.n	80022a2 <TSK_SafetyTask_PWMOFF+0x62>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800228a:	bcc0      	pop	{r6, r7}
 800228c:	46b9      	mov	r9, r7
 800228e:	46b0      	mov	r8, r6
 8002290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <TSK_SafetyTask_PWMOFF+0x88>)
 8002294:	f002 ff88 	bl	80051a8 <RVBS_CalcAvVbus>
 8002298:	464b      	mov	r3, r9
 800229a:	4398      	bics	r0, r3
 800229c:	4304      	orrs	r4, r0
 800229e:	b2a4      	uxth	r4, r4
 80022a0:	e7e5      	b.n	800226e <TSK_SafetyTask_PWMOFF+0x2e>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80022a2:	4643      	mov	r3, r8
 80022a4:	59d8      	ldr	r0, [r3, r7]
 80022a6:	f000 f9eb 	bl	8002680 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80022aa:	0028      	movs	r0, r5
 80022ac:	f7ff fc44 	bl	8001b38 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <TSK_SafetyTask_PWMOFF+0x8c>)
 80022b2:	59d8      	ldr	r0, [r3, r7]
 80022b4:	f002 fb10 	bl	80048d8 <PQD_Clear>
}
 80022b8:	e7e7      	b.n	800228a <TSK_SafetyTask_PWMOFF+0x4a>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	20000474 	.word	0x20000474
 80022c0:	2000059c 	.word	0x2000059c
 80022c4:	20000534 	.word	0x20000534
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000464 	.word	0x20000464

080022d0 <TSK_SafetyTask>:
{
 80022d0:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <TSK_SafetyTask+0x18>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d000      	beq.n	80022dc <TSK_SafetyTask+0xc>
}
 80022da:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff ffaf 	bl	8002240 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 80022e2:	f001 fb3b 	bl	800395c <RCM_ExecUserConv>
}
 80022e6:	e7f8      	b.n	80022da <TSK_SafetyTask+0xa>
 80022e8:	2000058e 	.word	0x2000058e

080022ec <MC_RunMotorControlTasks>:
{
 80022ec:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <MC_RunMotorControlTasks+0x18>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d100      	bne.n	80022f8 <MC_RunMotorControlTasks+0xc>
}
 80022f6:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 80022f8:	f7ff fe8c 	bl	8002014 <MC_Scheduler>
    TSK_SafetyTask();
 80022fc:	f7ff ffe8 	bl	80022d0 <TSK_SafetyTask>
}
 8002300:	e7f9      	b.n	80022f6 <MC_RunMotorControlTasks+0xa>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	2000058e 	.word	0x2000058e

08002308 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002308:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <TSK_HardwareFaultTask+0x18>)
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	f002 fda3 	bl	8004e58 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	4803      	ldr	r0, [pc, #12]	; (8002324 <TSK_HardwareFaultTask+0x1c>)
 8002318:	f7ff f9ea 	bl	80016f0 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800231c:	bd10      	pop	{r4, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	2000059c 	.word	0x2000059c
 8002324:	20000534 	.word	0x20000534

08002328 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002328:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800232a:	f7ff f9a7 	bl	800167c <MC_GetSTMStateMotor1>
 800232e:	2800      	cmp	r0, #0
 8002330:	d102      	bne.n	8002338 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8002332:	f7ff f993 	bl	800165c <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002336:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8002338:	f7ff f998 	bl	800166c <MC_StopMotor1>
}
 800233c:	e7fb      	b.n	8002336 <UI_HandleStartStopButton_cb+0xe>
 800233e:	46c0      	nop			; (mov r8, r8)

08002340 <mc_lock_pins>:
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002340:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002342:	2108      	movs	r1, #8
 8002344:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002346:	4a33      	ldr	r2, [pc, #204]	; (8002414 <mc_lock_pins+0xd4>)
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800234c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800234e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002350:	69da      	ldr	r2, [r3, #28]

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8002356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <mc_lock_pins+0xd8>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 800235a:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800235c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800235e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002360:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002362:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002364:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 8002366:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8002368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <mc_lock_pins+0xdc>)
 800236c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800236e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002370:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002372:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002374:	492a      	ldr	r1, [pc, #168]	; (8002420 <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 8002376:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 8002378:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800237a:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <mc_lock_pins+0xe4>)
 800237c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800237e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002380:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002382:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002384:	30fe      	adds	r0, #254	; 0xfe
  temp = READ_REG(GPIOx->LCKR);
 8002386:	9108      	str	r1, [sp, #32]
  (void) temp;
 8002388:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <mc_lock_pins+0xe8>)
 800238c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800238e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002390:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002392:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002394:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8002396:	9107      	str	r1, [sp, #28]
  (void) temp;
 8002398:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800239a:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 800239c:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800239e:	0249      	lsls	r1, r1, #9
 80023a0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023a2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023a4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023a6:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023a8:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80023aa:	9106      	str	r1, [sp, #24]
  (void) temp;
 80023ac:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ae:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023b0:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b2:	0249      	lsls	r1, r1, #9
 80023b4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023b6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ba:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023bc:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80023be:	9105      	str	r1, [sp, #20]
  (void) temp;
 80023c0:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c2:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023c4:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c6:	0249      	lsls	r1, r1, #9
 80023c8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023ca:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023cc:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ce:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023d0:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80023d2:	9104      	str	r1, [sp, #16]
  (void) temp;
 80023d4:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d6:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023d8:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023de:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023e2:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023e4:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80023e6:	9303      	str	r3, [sp, #12]
  (void) temp;
 80023e8:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ea:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023ec:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ee:	025b      	lsls	r3, r3, #9
 80023f0:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023f2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023f4:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023f6:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023f8:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 80023fa:	9302      	str	r3, [sp, #8]
  (void) temp;
 80023fc:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023fe:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002400:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002406:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002408:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800240a:	69d3      	ldr	r3, [r2, #28]
 800240c:	9301      	str	r3, [sp, #4]
  (void) temp;
 800240e:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002410:	b00c      	add	sp, #48	; 0x30
 8002412:	4770      	bx	lr
 8002414:	00010008 	.word	0x00010008
 8002418:	00010020 	.word	0x00010020
 800241c:	00010010 	.word	0x00010010
 8002420:	00010002 	.word	0x00010002
 8002424:	48000400 	.word	0x48000400
 8002428:	00010100 	.word	0x00010100

0800242c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800242c:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800242e:	f001 fd2d 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8002432:	21fa      	movs	r1, #250	; 0xfa
 8002434:	00c9      	lsls	r1, r1, #3
 8002436:	f7fd fe67 	bl	8000108 <__udivsi3>
 800243a:	f001 fd07 	bl	8003e4c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800243e:	2001      	movs	r0, #1
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <MX_MotorControl_Init+0x2c>)
 8002442:	2200      	movs	r2, #0
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	4240      	negs	r0, r0
 8002448:	f001 fcce 	bl	8003de8 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <MX_MotorControl_Init+0x30>)
 800244e:	f7ff fba5 	bl	8001b9c <MCboot>
  mc_lock_pins();
 8002452:	f7ff ff75 	bl	8002340 <mc_lock_pins>
}
 8002456:	bd10      	pop	{r4, pc}
 8002458:	20000514 	.word	0x20000514
 800245c:	200006b4 	.word	0x200006b4

08002460 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8002460:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002462:	6803      	ldr	r3, [r0, #0]
 8002464:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002466:	bd10      	pop	{r4, pc}

08002468 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b083      	sub	sp, #12
 800246c:	9101      	str	r1, [sp, #4]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800246e:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8002470:	b20b      	sxth	r3, r1
 8002472:	435a      	muls	r2, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002474:	2360      	movs	r3, #96	; 0x60
 8002476:	5ac6      	ldrh	r6, [r0, r3]
 8002478:	1409      	asrs	r1, r1, #16
 800247a:	4371      	muls	r1, r6
 800247c:	0049      	lsls	r1, r1, #1
 800247e:	424f      	negs	r7, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002480:	1a51      	subs	r1, r2, r1
 8002482:	0fcc      	lsrs	r4, r1, #31
 8002484:	1864      	adds	r4, r4, r1
    wZ = (wUBeta - wUAlpha) / 2;
 8002486:	1aba      	subs	r2, r7, r2
    wY = (wUBeta + wUAlpha) / 2;
 8002488:	1063      	asrs	r3, r4, #1
    wZ = (wUBeta - wUAlpha) / 2;
 800248a:	0fd4      	lsrs	r4, r2, #31
 800248c:	18a4      	adds	r4, r4, r2
 800248e:	1064      	asrs	r4, r4, #1

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002490:	1c4d      	adds	r5, r1, #1
 8002492:	db57      	blt.n	8002544 <PWMC_SetPhaseVoltage+0xdc>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002494:	1c55      	adds	r5, r2, #1
 8002496:	db35      	blt.n	8002504 <PWMC_SetPhaseVoltage+0x9c>
      {
        pHandle->Sector = SECTOR_2;
 8002498:	256a      	movs	r5, #106	; 0x6a
 800249a:	2701      	movs	r7, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800249c:	1b1c      	subs	r4, r3, r4
        pHandle->Sector = SECTOR_2;
 800249e:	5547      	strb	r7, [r0, r5]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024a0:	17e5      	asrs	r5, r4, #31
 80024a2:	03ad      	lsls	r5, r5, #14
 80024a4:	0bab      	lsrs	r3, r5, #14
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 80024a6:	17cd      	asrs	r5, r1, #31
 80024a8:	03ad      	lsls	r5, r5, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024aa:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - (wY / 131072);
 80024ac:	0bad      	lsrs	r5, r5, #14
 80024ae:	1869      	adds	r1, r5, r1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80024b0:	149b      	asrs	r3, r3, #18
 80024b2:	08b6      	lsrs	r6, r6, #2
 80024b4:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - (wY / 131072);
 80024b6:	1489      	asrs	r1, r1, #18
 80024b8:	1a5d      	subs	r5, r3, r1

        pHandle->lowDuty = (uint16_t)wTimePhB;
 80024ba:	2146      	movs	r1, #70	; 0x46
        wTimePhB = wTimePhA + (wZ / 131072);
 80024bc:	17d4      	asrs	r4, r2, #31
 80024be:	03a4      	lsls	r4, r4, #14
 80024c0:	0ba4      	lsrs	r4, r4, #14
 80024c2:	18a2      	adds	r2, r4, r2
 80024c4:	1492      	asrs	r2, r2, #18
 80024c6:	18d2      	adds	r2, r2, r3
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80024c8:	5242      	strh	r2, [r0, r1]
        pHandle->midDuty = (uint16_t)wTimePhA;
 80024ca:	3102      	adds	r1, #2
 80024cc:	5243      	strh	r3, [r0, r1]
        pHandle->highDuty = (uint16_t)wTimePhC;
 80024ce:	3102      	adds	r1, #2
 80024d0:	5245      	strh	r5, [r0, r1]
          pHandle->midDuty = (uint16_t)wTimePhB;
          pHandle->highDuty = (uint16_t)wTimePhC;
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80024d2:	43dc      	mvns	r4, r3
 80024d4:	17e4      	asrs	r4, r4, #31
 80024d6:	4023      	ands	r3, r4
 80024d8:	43d4      	mvns	r4, r2
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	17e4      	asrs	r4, r4, #31
 80024de:	4022      	ands	r2, r4
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b292      	uxth	r2, r2
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80024e4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80024e6:	5242      	strh	r2, [r0, r1]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80024e8:	43e9      	mvns	r1, r5
 80024ea:	2442      	movs	r4, #66	; 0x42
 80024ec:	17c9      	asrs	r1, r1, #31
 80024ee:	4029      	ands	r1, r5
 80024f0:	b289      	uxth	r1, r1
 80024f2:	5301      	strh	r1, [r0, r4]

    if (1U == pHandle->DTTest)
 80024f4:	341c      	adds	r4, #28
 80024f6:	5b04      	ldrh	r4, [r0, r4]
 80024f8:	2c01      	cmp	r4, #1
 80024fa:	d041      	beq.n	8002580 <PWMC_SetPhaseVoltage+0x118>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80024fc:	6943      	ldr	r3, [r0, #20]
 80024fe:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002500:	b003      	add	sp, #12
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8002504:	2f00      	cmp	r7, #0
 8002506:	dd72      	ble.n	80025ee <PWMC_SetPhaseVoltage+0x186>
          pHandle->Sector = SECTOR_1;
 8002508:	236a      	movs	r3, #106	; 0x6a
 800250a:	2100      	movs	r1, #0
 800250c:	54c1      	strb	r1, [r0, r3]
          wTimePhB = wTimePhA + (wZ / 131072);
 800250e:	17d1      	asrs	r1, r2, #31
 8002510:	0389      	lsls	r1, r1, #14
 8002512:	0b89      	lsrs	r1, r1, #14
 8002514:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhB - (wX / 131072);
 8002516:	17f9      	asrs	r1, r7, #31
 8002518:	03c9      	lsls	r1, r1, #15
 800251a:	0bc9      	lsrs	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800251c:	1b3c      	subs	r4, r7, r4
          wTimePhC = wTimePhB - (wX / 131072);
 800251e:	19cf      	adds	r7, r1, r7
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002520:	2146      	movs	r1, #70	; 0x46
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002522:	17e3      	asrs	r3, r4, #31
 8002524:	039b      	lsls	r3, r3, #14
 8002526:	0b9b      	lsrs	r3, r3, #14
 8002528:	191c      	adds	r4, r3, r4
 800252a:	14a4      	asrs	r4, r4, #18
 800252c:	08b3      	lsrs	r3, r6, #2
 800252e:	18e3      	adds	r3, r4, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002530:	1492      	asrs	r2, r2, #18
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002532:	5243      	strh	r3, [r0, r1]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002534:	18d2      	adds	r2, r2, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002536:	3102      	adds	r1, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002538:	147d      	asrs	r5, r7, #17
          pHandle->midDuty = (uint16_t)wTimePhB;
 800253a:	5242      	strh	r2, [r0, r1]
          wTimePhC = wTimePhB - (wX / 131072);
 800253c:	1b55      	subs	r5, r2, r5
          pHandle->highDuty = (uint16_t)wTimePhC;
 800253e:	3102      	adds	r1, #2
 8002540:	5245      	strh	r5, [r0, r1]
 8002542:	e7c6      	b.n	80024d2 <PWMC_SetPhaseVoltage+0x6a>
      if (wZ < 0)
 8002544:	1c55      	adds	r5, r2, #1
 8002546:	db70      	blt.n	800262a <PWMC_SetPhaseVoltage+0x1c2>
        if (wX <= 0)
 8002548:	2f00      	cmp	r7, #0
 800254a:	dd32      	ble.n	80025b2 <PWMC_SetPhaseVoltage+0x14a>
          pHandle->Sector = SECTOR_3;
 800254c:	226a      	movs	r2, #106	; 0x6a
 800254e:	2402      	movs	r4, #2
 8002550:	5484      	strb	r4, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002552:	1bdc      	subs	r4, r3, r7
 8002554:	17e2      	asrs	r2, r4, #31
 8002556:	0392      	lsls	r2, r2, #14
          wTimePhC = wTimePhA - (wY / 131072);
 8002558:	17cd      	asrs	r5, r1, #31
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800255a:	0b93      	lsrs	r3, r2, #14
          wTimePhC = wTimePhA - (wY / 131072);
 800255c:	03ad      	lsls	r5, r5, #14
 800255e:	0bad      	lsrs	r5, r5, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002560:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002562:	1869      	adds	r1, r5, r1
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002564:	149b      	asrs	r3, r3, #18
 8002566:	08b6      	lsrs	r6, r6, #2
 8002568:	199b      	adds	r3, r3, r6
          wTimePhC = wTimePhA - (wY / 131072);
 800256a:	1489      	asrs	r1, r1, #18
 800256c:	1a5d      	subs	r5, r3, r1
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800256e:	2146      	movs	r1, #70	; 0x46
          wTimePhB = wTimePhC + (wX / 131072);
 8002570:	147a      	asrs	r2, r7, #17
 8002572:	1952      	adds	r2, r2, r5
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002574:	5242      	strh	r2, [r0, r1]
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002576:	3102      	adds	r1, #2
 8002578:	5245      	strh	r5, [r0, r1]
          pHandle->highDuty = (uint16_t)wTimePhA;
 800257a:	3102      	adds	r1, #2
 800257c:	5243      	strh	r3, [r0, r1]
 800257e:	e7a8      	b.n	80024d2 <PWMC_SetPhaseVoltage+0x6a>
      if (pHandle->Ia > 0)
 8002580:	344f      	adds	r4, #79	; 0x4f
 8002582:	5f04      	ldrsh	r4, [r0, r4]
 8002584:	2c00      	cmp	r4, #0
 8002586:	dd75      	ble.n	8002674 <PWMC_SetPhaseVoltage+0x20c>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002588:	2462      	movs	r4, #98	; 0x62
 800258a:	5b04      	ldrh	r4, [r0, r4]
 800258c:	18e3      	adds	r3, r4, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	87c3      	strh	r3, [r0, #62]	; 0x3e
      if (pHandle->Ib > 0)
 8002592:	2352      	movs	r3, #82	; 0x52
 8002594:	5ec3      	ldrsh	r3, [r0, r3]
 8002596:	2b00      	cmp	r3, #0
 8002598:	dd69      	ble.n	800266e <PWMC_SetPhaseVoltage+0x206>
        pHandle->CntPhB += pHandle->DTCompCnt;
 800259a:	1912      	adds	r2, r2, r4
 800259c:	b292      	uxth	r2, r2
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	52c2      	strh	r2, [r0, r3]
      if (pHandle->Ic > 0)
 80025a2:	3314      	adds	r3, #20
 80025a4:	5ec3      	ldrsh	r3, [r0, r3]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	dd5d      	ble.n	8002666 <PWMC_SetPhaseVoltage+0x1fe>
        pHandle->CntPhC += pHandle->DTCompCnt;
 80025aa:	2342      	movs	r3, #66	; 0x42
 80025ac:	1909      	adds	r1, r1, r4
 80025ae:	52c1      	strh	r1, [r0, r3]
 80025b0:	e7a4      	b.n	80024fc <PWMC_SetPhaseVoltage+0x94>
          pHandle->Sector = SECTOR_4;
 80025b2:	236a      	movs	r3, #106	; 0x6a
 80025b4:	2103      	movs	r1, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80025b6:	1b3c      	subs	r4, r7, r4
          pHandle->Sector = SECTOR_4;
 80025b8:	54c1      	strb	r1, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80025ba:	17e1      	asrs	r1, r4, #31
 80025bc:	0389      	lsls	r1, r1, #14
 80025be:	0b8b      	lsrs	r3, r1, #14
          wTimePhB = wTimePhA + (wZ / 131072);
 80025c0:	17d1      	asrs	r1, r2, #31
 80025c2:	0389      	lsls	r1, r1, #14
 80025c4:	0b89      	lsrs	r1, r1, #14
 80025c6:	188a      	adds	r2, r1, r2
          wTimePhC = wTimePhB - (wX / 131072);
 80025c8:	17f9      	asrs	r1, r7, #31
 80025ca:	03c9      	lsls	r1, r1, #15
 80025cc:	0bc9      	lsrs	r1, r1, #15
 80025ce:	19cf      	adds	r7, r1, r7
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025d0:	2146      	movs	r1, #70	; 0x46
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80025d2:	191b      	adds	r3, r3, r4
 80025d4:	149b      	asrs	r3, r3, #18
 80025d6:	08b6      	lsrs	r6, r6, #2
 80025d8:	199b      	adds	r3, r3, r6
          wTimePhB = wTimePhA + (wZ / 131072);
 80025da:	1492      	asrs	r2, r2, #18
 80025dc:	18d2      	adds	r2, r2, r3
          wTimePhC = wTimePhB - (wX / 131072);
 80025de:	147d      	asrs	r5, r7, #17
 80025e0:	1b55      	subs	r5, r2, r5
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80025e2:	5245      	strh	r5, [r0, r1]
          pHandle->midDuty = (uint16_t)wTimePhB;
 80025e4:	3102      	adds	r1, #2
 80025e6:	5242      	strh	r2, [r0, r1]
          pHandle->highDuty = (uint16_t)wTimePhA;
 80025e8:	3102      	adds	r1, #2
 80025ea:	5243      	strh	r3, [r0, r1]
 80025ec:	e771      	b.n	80024d2 <PWMC_SetPhaseVoltage+0x6a>
          pHandle->Sector = SECTOR_6;
 80025ee:	226a      	movs	r2, #106	; 0x6a
 80025f0:	2405      	movs	r4, #5
 80025f2:	5484      	strb	r4, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80025f4:	1bdc      	subs	r4, r3, r7
 80025f6:	17e3      	asrs	r3, r4, #31
          wTimePhC = wTimePhA - (wY / 131072);
 80025f8:	17cd      	asrs	r5, r1, #31
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80025fa:	039b      	lsls	r3, r3, #14
 80025fc:	0b9b      	lsrs	r3, r3, #14
          wTimePhC = wTimePhA - (wY / 131072);
 80025fe:	03ad      	lsls	r5, r5, #14
 8002600:	0bad      	lsrs	r5, r5, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002602:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002604:	1869      	adds	r1, r5, r1
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002606:	149b      	asrs	r3, r3, #18
 8002608:	08b6      	lsrs	r6, r6, #2
 800260a:	199b      	adds	r3, r3, r6
          wTimePhC = wTimePhA - (wY / 131072);
 800260c:	1489      	asrs	r1, r1, #18
 800260e:	1a5d      	subs	r5, r3, r1
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002610:	2146      	movs	r1, #70	; 0x46
          wTimePhB = wTimePhC + (wX / 131072);
 8002612:	17fa      	asrs	r2, r7, #31
 8002614:	03d2      	lsls	r2, r2, #15
 8002616:	0bd2      	lsrs	r2, r2, #15
 8002618:	19d2      	adds	r2, r2, r7
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800261a:	5243      	strh	r3, [r0, r1]
          wTimePhB = wTimePhC + (wX / 131072);
 800261c:	1452      	asrs	r2, r2, #17
          pHandle->midDuty = (uint16_t)wTimePhC;
 800261e:	3102      	adds	r1, #2
 8002620:	5245      	strh	r5, [r0, r1]
          wTimePhB = wTimePhC + (wX / 131072);
 8002622:	1952      	adds	r2, r2, r5
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002624:	3102      	adds	r1, #2
 8002626:	5242      	strh	r2, [r0, r1]
 8002628:	e753      	b.n	80024d2 <PWMC_SetPhaseVoltage+0x6a>
        pHandle->Sector = SECTOR_5;
 800262a:	256a      	movs	r5, #106	; 0x6a
 800262c:	2704      	movs	r7, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800262e:	1b1c      	subs	r4, r3, r4
        pHandle->Sector = SECTOR_5;
 8002630:	5547      	strb	r7, [r0, r5]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002632:	17e5      	asrs	r5, r4, #31
 8002634:	03ad      	lsls	r5, r5, #14
 8002636:	0bab      	lsrs	r3, r5, #14
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002638:	17cd      	asrs	r5, r1, #31
 800263a:	03ad      	lsls	r5, r5, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800263c:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - (wY / 131072) ;
 800263e:	0bad      	lsrs	r5, r5, #14
 8002640:	1869      	adds	r1, r5, r1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002642:	149b      	asrs	r3, r3, #18
 8002644:	08b6      	lsrs	r6, r6, #2
 8002646:	199b      	adds	r3, r3, r6
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002648:	1489      	asrs	r1, r1, #18
 800264a:	1a5d      	subs	r5, r3, r1
        pHandle->lowDuty = (uint16_t)wTimePhC;
 800264c:	2146      	movs	r1, #70	; 0x46
        wTimePhB = wTimePhA + (wZ / 131072);
 800264e:	17d4      	asrs	r4, r2, #31
 8002650:	03a4      	lsls	r4, r4, #14
 8002652:	0ba4      	lsrs	r4, r4, #14
 8002654:	18a2      	adds	r2, r4, r2
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002656:	5245      	strh	r5, [r0, r1]
        wTimePhB = wTimePhA + (wZ / 131072);
 8002658:	1492      	asrs	r2, r2, #18
        pHandle->midDuty = (uint16_t)wTimePhA;
 800265a:	3102      	adds	r1, #2
 800265c:	5243      	strh	r3, [r0, r1]
        wTimePhB = wTimePhA + (wZ / 131072);
 800265e:	18d2      	adds	r2, r2, r3
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002660:	3102      	adds	r1, #2
 8002662:	5242      	strh	r2, [r0, r1]
 8002664:	e735      	b.n	80024d2 <PWMC_SetPhaseVoltage+0x6a>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002666:	2342      	movs	r3, #66	; 0x42
 8002668:	1b09      	subs	r1, r1, r4
 800266a:	52c1      	strh	r1, [r0, r3]
 800266c:	e746      	b.n	80024fc <PWMC_SetPhaseVoltage+0x94>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800266e:	1b12      	subs	r2, r2, r4
 8002670:	b292      	uxth	r2, r2
 8002672:	e794      	b.n	800259e <PWMC_SetPhaseVoltage+0x136>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002674:	2462      	movs	r4, #98	; 0x62
 8002676:	5b04      	ldrh	r4, [r0, r4]
 8002678:	1b1b      	subs	r3, r3, r4
 800267a:	b29b      	uxth	r3, r3
 800267c:	e788      	b.n	8002590 <PWMC_SetPhaseVoltage+0x128>
 800267e:	46c0      	nop			; (mov r8, r8)

08002680 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8002680:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002682:	6843      	ldr	r3, [r0, #4]
 8002684:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002686:	bd10      	pop	{r4, pc}

08002688 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8002688:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800268a:	6883      	ldr	r3, [r0, #8]
 800268c:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 800268e:	bd10      	pop	{r4, pc}

08002690 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002694:	2900      	cmp	r1, #0
 8002696:	d011      	beq.n	80026bc <PWMC_CurrentReadingCalibr+0x2c>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002698:	2901      	cmp	r1, #1
 800269a:	d002      	beq.n	80026a2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800269c:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800269e:	0028      	movs	r0, r5
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80026a2:	224e      	movs	r2, #78	; 0x4e
 80026a4:	5a83      	ldrh	r3, [r0, r2]
        retVal = true;
 80026a6:	2501      	movs	r5, #1
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f8      	beq.n	800269e <PWMC_CurrentReadingCalibr+0xe>
        pHandle->OffCalibrWaitTimeCounter--;
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f2      	bne.n	800269c <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80026b6:	68c3      	ldr	r3, [r0, #12]
 80026b8:	4798      	blx	r3
          retVal = true;
 80026ba:	e7f0      	b.n	800269e <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 80026bc:	f7ff ffe0 	bl	8002680 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80026c0:	0020      	movs	r0, r4
 80026c2:	68e3      	ldr	r3, [r4, #12]
 80026c4:	4798      	blx	r3
      retVal = true;
 80026c6:	2501      	movs	r5, #1
 80026c8:	e7e9      	b.n	800269e <PWMC_CurrentReadingCalibr+0xe>
 80026ca:	46c0      	nop			; (mov r8, r8)

080026cc <PWMC_CheckOverCurrent>:
  *	@param  pHandle: Handler of the current instance of the PWM component.
  * @retval #MC_BREAK_IN if an overcurrent has occurred since last call,
  *         and #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 80026cc:	b510      	push	{r4, lr}
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 80026ce:	6983      	ldr	r3, [r0, #24]
 80026d0:	4798      	blx	r3
#endif
}
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	4657      	mov	r7, sl
 80026d8:	464e      	mov	r6, r9
 80026da:	4645      	mov	r5, r8
 80026dc:	46de      	mov	lr, fp
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 80026de:	6883      	ldr	r3, [r0, #8]
{
 80026e0:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * txData = pHandle->txBuffer;
 80026e2:	469a      	mov	sl, r3
    int16_t rxLength = pHandle->rxLength;
 80026e4:	0003      	movs	r3, r0
{
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	9102      	str	r1, [sp, #8]
    int16_t rxLength = pHandle->rxLength;
 80026ea:	220c      	movs	r2, #12
 80026ec:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 80026ee:	2300      	movs	r3, #0
{
 80026f0:	4681      	mov	r9, r0
    uint8_t * txData = pHandle->txBuffer;
 80026f2:	4655      	mov	r5, sl
    uint8_t * rxData = pHandle->rxBuffer;
 80026f4:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 80026f6:	81c3      	strh	r3, [r0, #14]
  uint8_t retVal = MCP_CMD_OK;
 80026f8:	9303      	str	r3, [sp, #12]
    uint8_t accessResult;
    while (rxLength > 0)
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	dd70      	ble.n	80027e0 <RI_SetRegCommandParser+0x10c>
 80026fe:	0027      	movs	r7, r4
 8002700:	9501      	str	r5, [sp, #4]
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002702:	b293      	uxth	r3, r2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002704:	8838      	ldrh	r0, [r7, #0]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002706:	1e9a      	subs	r2, r3, #2
 8002708:	4698      	mov	r8, r3
 800270a:	b293      	uxth	r3, r2
 800270c:	469b      	mov	fp, r3
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 800270e:	0001      	movs	r1, r0
 8002710:	2307      	movs	r3, #7
 8002712:	4399      	bics	r1, r3
 8002714:	000b      	movs	r3, r1
    uint8_t motorID;
    uint8_t typeID;

    typeID = (uint8_t)dataID & TYPE_MASK;
 8002716:	2138      	movs	r1, #56	; 0x38
 8002718:	4001      	ands	r1, r0
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 800271a:	3908      	subs	r1, #8
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800271c:	1cbe      	adds	r6, r7, #2
    switch (typeID)
 800271e:	b2c9      	uxtb	r1, r1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002720:	46b2      	mov	sl, r6
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002722:	b212      	sxth	r2, r2
    switch (typeID)
 8002724:	2920      	cmp	r1, #32
 8002726:	d803      	bhi.n	8002730 <RI_SetRegCommandParser+0x5c>
 8002728:	4cb6      	ldr	r4, [pc, #728]	; (8002a04 <RI_SetRegCommandParser+0x330>)
 800272a:	0089      	lsls	r1, r1, #2
 800272c:	5861      	ldr	r1, [r4, r1]
 800272e:	468f      	mov	pc, r1
 8002730:	2307      	movs	r3, #7
 8002732:	469c      	mov	ip, r3
        if ((1U == number_of_item) && (0 == rxLength))
 8002734:	9b01      	ldr	r3, [sp, #4]
 8002736:	1aeb      	subs	r3, r5, r3
 8002738:	3301      	adds	r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d049      	beq.n	80027d4 <RI_SetRegCommandParser+0x100>
        if (txSyncFreeSpace !=0 )
 8002740:	9901      	ldr	r1, [sp, #4]
 8002742:	9b02      	ldr	r3, [sp, #8]
 8002744:	4688      	mov	r8, r1
 8002746:	4443      	add	r3, r8
 8002748:	b2a9      	uxth	r1, r5
 800274a:	b29b      	uxth	r3, r3
 800274c:	4299      	cmp	r1, r3
 800274e:	d100      	bne.n	8002752 <RI_SetRegCommandParser+0x7e>
 8002750:	e0df      	b.n	8002912 <RI_SetRegCommandParser+0x23e>
          *txData = accessResult;
 8002752:	4663      	mov	r3, ip
 8002754:	702b      	strb	r3, [r5, #0]
          pHandle->txLength++;
 8002756:	464b      	mov	r3, r9
 8002758:	4649      	mov	r1, r9
 800275a:	89db      	ldrh	r3, [r3, #14]
          txData = txData+1;
 800275c:	3501      	adds	r5, #1
          pHandle->txLength++;
 800275e:	3301      	adds	r3, #1
 8002760:	81cb      	strh	r3, [r1, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002762:	4663      	mov	r3, ip
 8002764:	2b00      	cmp	r3, #0
 8002766:	d000      	beq.n	800276a <RI_SetRegCommandParser+0x96>
 8002768:	e0dc      	b.n	8002924 <RI_SetRegCommandParser+0x250>
    while (rxLength > 0)
 800276a:	2a00      	cmp	r2, #0
 800276c:	dc00      	bgt.n	8002770 <RI_SetRegCommandParser+0x9c>
 800276e:	e336      	b.n	8002dde <RI_SetRegCommandParser+0x70a>
 8002770:	4657      	mov	r7, sl
 8002772:	e7c6      	b.n	8002702 <RI_SetRegCommandParser+0x2e>
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8002774:	8879      	ldrh	r1, [r7, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8002776:	1c8c      	adds	r4, r1, #2
 8002778:	b2a4      	uxth	r4, r4
 800277a:	46a0      	mov	r8, r4
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 800277c:	4294      	cmp	r4, r2
 800277e:	dd00      	ble.n	8002782 <RI_SetRegCommandParser+0xae>
 8002780:	e219      	b.n	8002bb6 <RI_SetRegCommandParser+0x4e2>
          *size = 0;
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
        }
        else
        {
          switch (regID)
 8002782:	22f4      	movs	r2, #244	; 0xf4
 8002784:	0052      	lsls	r2, r2, #1
 8002786:	4293      	cmp	r3, r2
 8002788:	d100      	bne.n	800278c <RI_SetRegCommandParser+0xb8>
 800278a:	e236      	b.n	8002bfa <RI_SetRegCommandParser+0x526>
 800278c:	d92d      	bls.n	80027ea <RI_SetRegCommandParser+0x116>
 800278e:	228a      	movs	r2, #138	; 0x8a
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4293      	cmp	r3, r2
 8002794:	d100      	bne.n	8002798 <RI_SetRegCommandParser+0xc4>
 8002796:	e237      	b.n	8002c08 <RI_SetRegCommandParser+0x534>
 8002798:	3241      	adds	r2, #65	; 0x41
 800279a:	32ff      	adds	r2, #255	; 0xff
 800279c:	4293      	cmp	r3, r2
 800279e:	d000      	beq.n	80027a2 <RI_SetRegCommandParser+0xce>
 80027a0:	e1f5      	b.n	8002b8e <RI_SetRegCommandParser+0x4ba>
            }

            case MC_REG_CURRENT_REF:
            {
              qd_t currComp;
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80027a2:	ab07      	add	r3, sp, #28
 80027a4:	469a      	mov	sl, r3
 80027a6:	4652      	mov	r2, sl
 80027a8:	88bb      	ldrh	r3, [r7, #4]
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
              MCI_SetCurrentReferences(pMCIN, currComp);
 80027aa:	4897      	ldr	r0, [pc, #604]	; (8002a08 <RI_SetRegCommandParser+0x334>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80027ac:	8013      	strh	r3, [r2, #0]
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	8053      	strh	r3, [r2, #2]
              MCI_SetCurrentReferences(pMCIN, currComp);
 80027b2:	9907      	ldr	r1, [sp, #28]
 80027b4:	f7fe ff90 	bl	80016d8 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 80027b8:	465b      	mov	r3, fp
 80027ba:	4642      	mov	r2, r8
 80027bc:	1a9a      	subs	r2, r3, r2
  uint8_t retVal = MCP_CMD_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	469c      	mov	ip, r3
        if ((1U == number_of_item) && (0 == rxLength))
 80027c2:	9b01      	ldr	r3, [sp, #4]
      rxData = rxData+size;
 80027c4:	4446      	add	r6, r8
        if ((1U == number_of_item) && (0 == rxLength))
 80027c6:	1aeb      	subs	r3, r5, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
      rxData = rxData+size;
 80027cc:	46b2      	mov	sl, r6
      rxLength = (int16_t) (rxLength - size);
 80027ce:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d1b5      	bne.n	8002740 <RI_SetRegCommandParser+0x6c>
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	d1b3      	bne.n	8002740 <RI_SetRegCommandParser+0x6c>
 80027d8:	4667      	mov	r7, ip
      if (MCP_CMD_OK == retVal)
 80027da:	2f00      	cmp	r7, #0
 80027dc:	d000      	beq.n	80027e0 <RI_SetRegCommandParser+0x10c>
 80027de:	e099      	b.n	8002914 <RI_SetRegCommandParser+0x240>
      pHandle->txLength = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	464a      	mov	r2, r9
 80027e4:	2700      	movs	r7, #0
 80027e6:	81d3      	strh	r3, [r2, #14]
 80027e8:	e094      	b.n	8002914 <RI_SetRegCommandParser+0x240>
 80027ea:	3a40      	subs	r2, #64	; 0x40
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <RI_SetRegCommandParser+0x11e>
 80027f0:	e246      	b.n	8002c80 <RI_SetRegCommandParser+0x5ac>
 80027f2:	d900      	bls.n	80027f6 <RI_SetRegCommandParser+0x122>
 80027f4:	e1cb      	b.n	8002b8e <RI_SetRegCommandParser+0x4ba>
 80027f6:	2ba8      	cmp	r3, #168	; 0xa8
 80027f8:	d004      	beq.n	8002804 <RI_SetRegCommandParser+0x130>
 80027fa:	d800      	bhi.n	80027fe <RI_SetRegCommandParser+0x12a>
 80027fc:	e1c2      	b.n	8002b84 <RI_SetRegCommandParser+0x4b0>
 80027fe:	2be8      	cmp	r3, #232	; 0xe8
 8002800:	d000      	beq.n	8002804 <RI_SetRegCommandParser+0x130>
 8002802:	e1c4      	b.n	8002b8e <RI_SetRegCommandParser+0x4ba>
      rxLength = (int16_t) (rxLength - size);
 8002804:	465b      	mov	r3, fp
 8002806:	4642      	mov	r2, r8
 8002808:	1a9a      	subs	r2, r3, r2
              retVal = MCP_ERROR_RO_REG;
 800280a:	2304      	movs	r3, #4
      rxData = rxData+size;
 800280c:	4446      	add	r6, r8
 800280e:	46b2      	mov	sl, r6
              retVal = MCP_ERROR_RO_REG;
 8002810:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002812:	b212      	sxth	r2, r2
 8002814:	e78e      	b.n	8002734 <RI_SetRegCommandParser+0x60>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002816:	2302      	movs	r3, #2
 8002818:	56fb      	ldrsb	r3, [r7, r3]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d100      	bne.n	8002820 <RI_SetRegCommandParser+0x14c>
 800281e:	e252      	b.n	8002cc6 <RI_SetRegCommandParser+0x5f2>
 8002820:	2a01      	cmp	r2, #1
 8002822:	dc00      	bgt.n	8002826 <RI_SetRegCommandParser+0x152>
 8002824:	e253      	b.n	8002cce <RI_SetRegCommandParser+0x5fa>
 8002826:	b2b3      	uxth	r3, r6
 8002828:	469a      	mov	sl, r3
 800282a:	9b01      	ldr	r3, [sp, #4]
 800282c:	46a8      	mov	r8, r5
 800282e:	469c      	mov	ip, r3
 8002830:	0015      	movs	r5, r2
 8002832:	4654      	mov	r4, sl
 8002834:	1c71      	adds	r1, r6, #1
 8002836:	e002      	b.n	800283e <RI_SetRegCommandParser+0x16a>
 8002838:	429d      	cmp	r5, r3
 800283a:	dc00      	bgt.n	800283e <RI_SetRegCommandParser+0x16a>
 800283c:	e1b0      	b.n	8002ba0 <RI_SetRegCommandParser+0x4cc>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 800283e:	0008      	movs	r0, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002840:	2200      	movs	r2, #0
 8002842:	3101      	adds	r1, #1
 8002844:	b28f      	uxth	r7, r1
 8002846:	5682      	ldrsb	r2, [r0, r2]
 8002848:	1b3b      	subs	r3, r7, r4
 800284a:	b29b      	uxth	r3, r3
 800284c:	2a00      	cmp	r2, #0
 800284e:	d1f3      	bne.n	8002838 <RI_SetRegCommandParser+0x164>
      rxData = rxData+size;
 8002850:	4662      	mov	r2, ip
 8002852:	4645      	mov	r5, r8
 8002854:	0019      	movs	r1, r3
 8002856:	9201      	str	r2, [sp, #4]
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002858:	2200      	movs	r2, #0
 800285a:	7002      	strb	r2, [r0, #0]
      rxLength = (int16_t) (rxLength - size);
 800285c:	465a      	mov	r2, fp
      rxData = rxData+size;
 800285e:	46b2      	mov	sl, r6
      rxLength = (int16_t) (rxLength - size);
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	b21a      	sxth	r2, r3
      rxData = rxData+size;
 8002864:	448a      	add	sl, r1
        retVal = MCP_ERROR_RO_REG;
 8002866:	2304      	movs	r3, #4
 8002868:	469c      	mov	ip, r3
 800286a:	e763      	b.n	8002734 <RI_SetRegCommandParser+0x60>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800286c:	2299      	movs	r2, #153	; 0x99
 800286e:	887e      	ldrh	r6, [r7, #2]
        switch (regID)
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	4293      	cmp	r3, r2
 8002874:	d100      	bne.n	8002878 <RI_SetRegCommandParser+0x1a4>
 8002876:	e232      	b.n	8002cde <RI_SetRegCommandParser+0x60a>
 8002878:	d900      	bls.n	800287c <RI_SetRegCommandParser+0x1a8>
 800287a:	e0cf      	b.n	8002a1c <RI_SetRegCommandParser+0x348>
 800287c:	22b4      	movs	r2, #180	; 0xb4
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <RI_SetRegCommandParser+0x1b2>
 8002884:	e2a5      	b.n	8002dd2 <RI_SetRegCommandParser+0x6fe>
 8002886:	d800      	bhi.n	800288a <RI_SetRegCommandParser+0x1b6>
 8002888:	e0a8      	b.n	80029dc <RI_SetRegCommandParser+0x308>
 800288a:	2292      	movs	r2, #146	; 0x92
 800288c:	00d2      	lsls	r2, r2, #3
 800288e:	4293      	cmp	r3, r2
 8002890:	d100      	bne.n	8002894 <RI_SetRegCommandParser+0x1c0>
 8002892:	e243      	b.n	8002d1c <RI_SetRegCommandParser+0x648>
 8002894:	d800      	bhi.n	8002898 <RI_SetRegCommandParser+0x1c4>
 8002896:	e070      	b.n	800297a <RI_SetRegCommandParser+0x2a6>
 8002898:	2289      	movs	r2, #137	; 0x89
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	4293      	cmp	r3, r2
 800289e:	d064      	beq.n	800296a <RI_SetRegCommandParser+0x296>
 80028a0:	d955      	bls.n	800294e <RI_SetRegCommandParser+0x27a>
 80028a2:	2295      	movs	r2, #149	; 0x95
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d000      	beq.n	80028ac <RI_SetRegCommandParser+0x1d8>
 80028aa:	e08e      	b.n	80029ca <RI_SetRegCommandParser+0x2f6>
            currComp = MCI_GetIqdref(pMCIN);
 80028ac:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <RI_SetRegCommandParser+0x334>)
 80028ae:	0018      	movs	r0, r3
 80028b0:	469b      	mov	fp, r3
 80028b2:	f7ff f821 	bl	80018f8 <MCI_GetIqdref>
 80028b6:	ab07      	add	r3, sp, #28
 80028b8:	9007      	str	r0, [sp, #28]
            currComp.q = (int16_t)regdata16;
 80028ba:	801e      	strh	r6, [r3, #0]
            MCI_SetCurrentReferences(pMCIN,currComp);
 80028bc:	4658      	mov	r0, fp
 80028be:	9907      	ldr	r1, [sp, #28]
 80028c0:	f7fe ff0a 	bl	80016d8 <MCI_SetCurrentReferences>
      rxData = rxData+size;
 80028c4:	1d3b      	adds	r3, r7, #4
      rxLength = (int16_t) (rxLength - size);
 80028c6:	4642      	mov	r2, r8
      rxData = rxData+size;
 80028c8:	469a      	mov	sl, r3
  uint8_t retVal = MCP_CMD_OK;
 80028ca:	2300      	movs	r3, #0
      rxLength = (int16_t) (rxLength - size);
 80028cc:	3a04      	subs	r2, #4
  uint8_t retVal = MCP_CMD_OK;
 80028ce:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 80028d0:	b212      	sxth	r2, r2
            break;
 80028d2:	e72f      	b.n	8002734 <RI_SetRegCommandParser+0x60>
        switch (regID)
 80028d4:	2b88      	cmp	r3, #136	; 0x88
 80028d6:	d100      	bne.n	80028da <RI_SetRegCommandParser+0x206>
 80028d8:	e182      	b.n	8002be0 <RI_SetRegCommandParser+0x50c>
 80028da:	2387      	movs	r3, #135	; 0x87
      rxLength = (int16_t) (rxLength - size);
 80028dc:	4642      	mov	r2, r8
 80028de:	4398      	bics	r0, r3
 80028e0:	3a03      	subs	r2, #3
      rxData = rxData+size;
 80028e2:	1cfb      	adds	r3, r7, #3
 80028e4:	469a      	mov	sl, r3
      rxLength = (int16_t) (rxLength - size);
 80028e6:	b212      	sxth	r2, r2
 80028e8:	2848      	cmp	r0, #72	; 0x48
 80028ea:	d0bc      	beq.n	8002866 <RI_SetRegCommandParser+0x192>
            retVal = MCP_ERROR_UNKNOWN_REG;
 80028ec:	2305      	movs	r3, #5
 80028ee:	469c      	mov	ip, r3
            break;
 80028f0:	e720      	b.n	8002734 <RI_SetRegCommandParser+0x60>
        switch (regID)
 80028f2:	2b98      	cmp	r3, #152	; 0x98
 80028f4:	d100      	bne.n	80028f8 <RI_SetRegCommandParser+0x224>
 80028f6:	e161      	b.n	8002bbc <RI_SetRegCommandParser+0x4e8>
 80028f8:	d81d      	bhi.n	8002936 <RI_SetRegCommandParser+0x262>
 80028fa:	2347      	movs	r3, #71	; 0x47
 80028fc:	4398      	bics	r0, r3
 80028fe:	2818      	cmp	r0, #24
 8002900:	d01d      	beq.n	800293e <RI_SetRegCommandParser+0x26a>
      rxData = rxData+size;
 8002902:	1dbb      	adds	r3, r7, #6
      rxLength = (int16_t) (rxLength - size);
 8002904:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002906:	469a      	mov	sl, r3
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002908:	2305      	movs	r3, #5
      rxLength = (int16_t) (rxLength - size);
 800290a:	3a06      	subs	r2, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 800290c:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 800290e:	b212      	sxth	r2, r2
            break;
 8002910:	e710      	b.n	8002734 <RI_SetRegCommandParser+0x60>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002912:	2708      	movs	r7, #8
}
 8002914:	0038      	movs	r0, r7
 8002916:	b00b      	add	sp, #44	; 0x2c
 8002918:	bcf0      	pop	{r4, r5, r6, r7}
 800291a:	46bb      	mov	fp, r7
 800291c:	46b2      	mov	sl, r6
 800291e:	46a9      	mov	r9, r5
 8002920:	46a0      	mov	r8, r4
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002924:	2b07      	cmp	r3, #7
 8002926:	d101      	bne.n	800292c <RI_SetRegCommandParser+0x258>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002928:	2701      	movs	r7, #1
  return (retVal);
 800292a:	e7f3      	b.n	8002914 <RI_SetRegCommandParser+0x240>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800292c:	2b0a      	cmp	r3, #10
 800292e:	d0fb      	beq.n	8002928 <RI_SetRegCommandParser+0x254>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002930:	2301      	movs	r3, #1
 8002932:	9303      	str	r3, [sp, #12]
 8002934:	e719      	b.n	800276a <RI_SetRegCommandParser+0x96>
 8002936:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <RI_SetRegCommandParser+0x338>)
 8002938:	3bd8      	subs	r3, #216	; 0xd8
 800293a:	4213      	tst	r3, r2
 800293c:	d1e1      	bne.n	8002902 <RI_SetRegCommandParser+0x22e>
      rxData = rxData+size;
 800293e:	1dbb      	adds	r3, r7, #6
      rxLength = (int16_t) (rxLength - size);
 8002940:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002942:	469a      	mov	sl, r3
            retVal = MCP_ERROR_RO_REG;
 8002944:	2304      	movs	r3, #4
      rxLength = (int16_t) (rxLength - size);
 8002946:	3a06      	subs	r2, #6
            retVal = MCP_ERROR_RO_REG;
 8002948:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 800294a:	b212      	sxth	r2, r2
 800294c:	e6f2      	b.n	8002734 <RI_SetRegCommandParser+0x60>
 800294e:	22ba      	movs	r2, #186	; 0xba
 8002950:	00d2      	lsls	r2, r2, #3
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <RI_SetRegCommandParser+0x296>
 8002956:	d92b      	bls.n	80029b0 <RI_SetRegCommandParser+0x2dc>
 8002958:	2281      	movs	r2, #129	; 0x81
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <RI_SetRegCommandParser+0x296>
 8002960:	d91a      	bls.n	8002998 <RI_SetRegCommandParser+0x2c4>
 8002962:	2285      	movs	r2, #133	; 0x85
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	4293      	cmp	r3, r2
 8002968:	d11c      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
      rxData = rxData+size;
 800296a:	1d3b      	adds	r3, r7, #4
      rxLength = (int16_t) (rxLength - size);
 800296c:	4642      	mov	r2, r8
      rxData = rxData+size;
 800296e:	469a      	mov	sl, r3
            retVal = MCP_ERROR_RO_REG;
 8002970:	2304      	movs	r3, #4
      rxLength = (int16_t) (rxLength - size);
 8002972:	3a04      	subs	r2, #4
            retVal = MCP_ERROR_RO_REG;
 8002974:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002976:	b212      	sxth	r2, r2
            break;
 8002978:	e6dc      	b.n	8002734 <RI_SetRegCommandParser+0x60>
 800297a:	3a01      	subs	r2, #1
 800297c:	3aff      	subs	r2, #255	; 0xff
 800297e:	4293      	cmp	r3, r2
 8002980:	d100      	bne.n	8002984 <RI_SetRegCommandParser+0x2b0>
 8002982:	e1b9      	b.n	8002cf8 <RI_SetRegCommandParser+0x624>
 8002984:	d918      	bls.n	80029b8 <RI_SetRegCommandParser+0x2e4>
 8002986:	228a      	movs	r2, #138	; 0x8a
 8002988:	00d2      	lsls	r2, r2, #3
 800298a:	4293      	cmp	r3, r2
 800298c:	d10a      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 800298e:	4820      	ldr	r0, [pc, #128]	; (8002a10 <RI_SetRegCommandParser+0x33c>)
 8002990:	b231      	sxth	r1, r6
 8002992:	f001 ff05 	bl	80047a0 <PID_SetKI>
            break;
 8002996:	e795      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002998:	23f2      	movs	r3, #242	; 0xf2
 800299a:	2247      	movs	r2, #71	; 0x47
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4390      	bics	r0, r2
 80029a0:	4298      	cmp	r0, r3
 80029a2:	d0e2      	beq.n	800296a <RI_SetRegCommandParser+0x296>
      rxLength = (int16_t) (rxLength - size);
 80029a4:	4642      	mov	r2, r8
      rxData = rxData+size;
 80029a6:	1d3b      	adds	r3, r7, #4
      rxLength = (int16_t) (rxLength - size);
 80029a8:	3a04      	subs	r2, #4
      rxData = rxData+size;
 80029aa:	469a      	mov	sl, r3
      rxLength = (int16_t) (rxLength - size);
 80029ac:	b212      	sxth	r2, r2
 80029ae:	e79d      	b.n	80028ec <RI_SetRegCommandParser+0x218>
 80029b0:	3a40      	subs	r2, #64	; 0x40
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d0d9      	beq.n	800296a <RI_SetRegCommandParser+0x296>
 80029b6:	e7f5      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 80029b8:	3a80      	subs	r2, #128	; 0x80
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d147      	bne.n	8002a4e <RI_SetRegCommandParser+0x37a>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <RI_SetRegCommandParser+0x340>)
 80029c0:	b231      	sxth	r1, r6
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f001 ff1e 	bl	8004804 <PID_SetKD>
            break;
 80029c8:	e77c      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d8ea      	bhi.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <RI_SetRegCommandParser+0x344>)
 80029d0:	4694      	mov	ip, r2
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <RI_SetRegCommandParser+0x338>)
 80029d4:	4463      	add	r3, ip
 80029d6:	4213      	tst	r3, r2
 80029d8:	d1e4      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 80029da:	e7c6      	b.n	800296a <RI_SetRegCommandParser+0x296>
 80029dc:	3a41      	subs	r2, #65	; 0x41
 80029de:	3aff      	subs	r2, #255	; 0xff
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <RI_SetRegCommandParser+0x312>
 80029e4:	e1ef      	b.n	8002dc6 <RI_SetRegCommandParser+0x6f2>
 80029e6:	d950      	bls.n	8002a8a <RI_SetRegCommandParser+0x3b6>
 80029e8:	2284      	movs	r2, #132	; 0x84
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <RI_SetRegCommandParser+0x31e>
 80029f0:	e1e3      	b.n	8002dba <RI_SetRegCommandParser+0x6e6>
 80029f2:	3280      	adds	r2, #128	; 0x80
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d13f      	bne.n	8002a78 <RI_SetRegCommandParser+0x3a4>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <RI_SetRegCommandParser+0x340>)
 80029fa:	b231      	sxth	r1, r6
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	f001 fecd 	bl	800479c <PID_SetKP>
            break;
 8002a02:	e75f      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002a04:	08006498 	.word	0x08006498
 8002a08:	20000534 	.word	0x20000534
 8002a0c:	0000ffbf 	.word	0x0000ffbf
 8002a10:	200002dc 	.word	0x200002dc
 8002a14:	20000468 	.word	0x20000468
 8002a18:	fffff730 	.word	0xfffff730
 8002a1c:	4ac9      	ldr	r2, [pc, #804]	; (8002d44 <RI_SetRegCommandParser+0x670>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d100      	bne.n	8002a24 <RI_SetRegCommandParser+0x350>
 8002a22:	e1c4      	b.n	8002dae <RI_SetRegCommandParser+0x6da>
 8002a24:	d949      	bls.n	8002aba <RI_SetRegCommandParser+0x3e6>
 8002a26:	4ac8      	ldr	r2, [pc, #800]	; (8002d48 <RI_SetRegCommandParser+0x674>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <RI_SetRegCommandParser+0x35a>
 8002a2c:	e1b9      	b.n	8002da2 <RI_SetRegCommandParser+0x6ce>
 8002a2e:	d937      	bls.n	8002aa0 <RI_SetRegCommandParser+0x3cc>
 8002a30:	4ac6      	ldr	r2, [pc, #792]	; (8002d4c <RI_SetRegCommandParser+0x678>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d100      	bne.n	8002a38 <RI_SetRegCommandParser+0x364>
 8002a36:	e176      	b.n	8002d26 <RI_SetRegCommandParser+0x652>
 8002a38:	4ac5      	ldr	r2, [pc, #788]	; (8002d50 <RI_SetRegCommandParser+0x67c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d095      	beq.n	800296a <RI_SetRegCommandParser+0x296>
 8002a3e:	4ac5      	ldr	r2, [pc, #788]	; (8002d54 <RI_SetRegCommandParser+0x680>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d1af      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002a44:	0031      	movs	r1, r6
 8002a46:	48c4      	ldr	r0, [pc, #784]	; (8002d58 <RI_SetRegCommandParser+0x684>)
 8002a48:	f001 fec6 	bl	80047d8 <PID_SetKIDivisorPOW2>
            break;
 8002a4c:	e73a      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002a4e:	3240      	adds	r2, #64	; 0x40
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d1a7      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002a54:	ab07      	add	r3, sp, #28
 8002a56:	469a      	mov	sl, r3
 8002a58:	4bc0      	ldr	r3, [pc, #768]	; (8002d5c <RI_SetRegCommandParser+0x688>)
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	469b      	mov	fp, r3
 8002a5e:	ab06      	add	r3, sp, #24
 8002a60:	4658      	mov	r0, fp
 8002a62:	1c99      	adds	r1, r3, #2
 8002a64:	f003 f928 	bl	8005cb8 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8002a68:	4653      	mov	r3, sl
 8002a6a:	4658      	mov	r0, fp
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	5e9a      	ldrsh	r2, [r3, r2]
 8002a70:	b231      	sxth	r1, r6
 8002a72:	f003 f929 	bl	8005cc8 <STO_PLL_SetObserverGains>
            break;
 8002a76:	e725      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002a78:	3ac0      	subs	r2, #192	; 0xc0
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d192      	bne.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002a7e:	4bb8      	ldr	r3, [pc, #736]	; (8002d60 <RI_SetRegCommandParser+0x68c>)
 8002a80:	b231      	sxth	r1, r6
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	f001 fe8c 	bl	80047a0 <PID_SetKI>
            break;
 8002a88:	e71c      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002a8a:	2bd0      	cmp	r3, #208	; 0xd0
 8002a8c:	d100      	bne.n	8002a90 <RI_SetRegCommandParser+0x3bc>
 8002a8e:	e183      	b.n	8002d98 <RI_SetRegCommandParser+0x6c4>
 8002a90:	3a80      	subs	r2, #128	; 0x80
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d148      	bne.n	8002b28 <RI_SetRegCommandParser+0x454>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002a96:	48b3      	ldr	r0, [pc, #716]	; (8002d64 <RI_SetRegCommandParser+0x690>)
 8002a98:	b231      	sxth	r1, r6
 8002a9a:	f001 feb3 	bl	8004804 <PID_SetKD>
            break;
 8002a9e:	e711      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002aa0:	4ab1      	ldr	r2, [pc, #708]	; (8002d68 <RI_SetRegCommandParser+0x694>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d100      	bne.n	8002aa8 <RI_SetRegCommandParser+0x3d4>
 8002aa6:	e149      	b.n	8002d3c <RI_SetRegCommandParser+0x668>
 8002aa8:	4ab0      	ldr	r2, [pc, #704]	; (8002d6c <RI_SetRegCommandParser+0x698>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d117      	bne.n	8002ade <RI_SetRegCommandParser+0x40a>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002aae:	4bac      	ldr	r3, [pc, #688]	; (8002d60 <RI_SetRegCommandParser+0x68c>)
 8002ab0:	0031      	movs	r1, r6
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f001 fe90 	bl	80047d8 <PID_SetKIDivisorPOW2>
            break;
 8002ab8:	e704      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002aba:	4aad      	ldr	r2, [pc, #692]	; (8002d70 <RI_SetRegCommandParser+0x69c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <RI_SetRegCommandParser+0x3ee>
 8002ac0:	e139      	b.n	8002d36 <RI_SetRegCommandParser+0x662>
 8002ac2:	d91f      	bls.n	8002b04 <RI_SetRegCommandParser+0x430>
 8002ac4:	4aab      	ldr	r2, [pc, #684]	; (8002d74 <RI_SetRegCommandParser+0x6a0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d100      	bne.n	8002acc <RI_SetRegCommandParser+0x3f8>
 8002aca:	e12f      	b.n	8002d2c <RI_SetRegCommandParser+0x658>
 8002acc:	4aaa      	ldr	r2, [pc, #680]	; (8002d78 <RI_SetRegCommandParser+0x6a4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10f      	bne.n	8002af2 <RI_SetRegCommandParser+0x41e>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002ad2:	0031      	movs	r1, r6
 8002ad4:	4ba9      	ldr	r3, [pc, #676]	; (8002d7c <RI_SetRegCommandParser+0x6a8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002ad8:	f001 fe70 	bl	80047bc <PID_SetKPDivisorPOW2>
 8002adc:	e6f2      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002ade:	4aa8      	ldr	r2, [pc, #672]	; (8002d80 <RI_SetRegCommandParser+0x6ac>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d000      	beq.n	8002ae6 <RI_SetRegCommandParser+0x412>
 8002ae4:	e75e      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002ae6:	4ba5      	ldr	r3, [pc, #660]	; (8002d7c <RI_SetRegCommandParser+0x6a8>)
 8002ae8:	0031      	movs	r1, r6
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	f001 fe92 	bl	8004814 <PID_SetKDDivisorPOW2>
            break;
 8002af0:	e6e8      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002af2:	4aa4      	ldr	r2, [pc, #656]	; (8002d84 <RI_SetRegCommandParser+0x6b0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d000      	beq.n	8002afa <RI_SetRegCommandParser+0x426>
 8002af8:	e754      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002afa:	0031      	movs	r1, r6
 8002afc:	4899      	ldr	r0, [pc, #612]	; (8002d64 <RI_SetRegCommandParser+0x690>)
 8002afe:	f001 fe6b 	bl	80047d8 <PID_SetKIDivisorPOW2>
            break;
 8002b02:	e6df      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002b04:	22c1      	movs	r2, #193	; 0xc1
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <RI_SetRegCommandParser+0x43a>
 8002b0c:	e72d      	b.n	800296a <RI_SetRegCommandParser+0x296>
 8002b0e:	d91b      	bls.n	8002b48 <RI_SetRegCommandParser+0x474>
 8002b10:	22e5      	movs	r2, #229	; 0xe5
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <RI_SetRegCommandParser+0x446>
 8002b18:	e6d4      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002b1a:	d90d      	bls.n	8002b38 <RI_SetRegCommandParser+0x464>
 8002b1c:	22e9      	movs	r2, #233	; 0xe9
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <RI_SetRegCommandParser+0x452>
 8002b24:	e6ce      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002b26:	e73d      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 8002b28:	2b90      	cmp	r3, #144	; 0x90
 8002b2a:	d000      	beq.n	8002b2e <RI_SetRegCommandParser+0x45a>
 8002b2c:	e73a      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002b2e:	488d      	ldr	r0, [pc, #564]	; (8002d64 <RI_SetRegCommandParser+0x690>)
 8002b30:	b231      	sxth	r1, r6
 8002b32:	f001 fe33 	bl	800479c <PID_SetKP>
            break;
 8002b36:	e6c5      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002b38:	4a93      	ldr	r2, [pc, #588]	; (8002d88 <RI_SetRegCommandParser+0x6b4>)
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	4a93      	ldr	r2, [pc, #588]	; (8002d8c <RI_SetRegCommandParser+0x6b8>)
 8002b3e:	4463      	add	r3, ip
 8002b40:	4213      	tst	r3, r2
 8002b42:	d000      	beq.n	8002b46 <RI_SetRegCommandParser+0x472>
 8002b44:	e72e      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 8002b46:	e710      	b.n	800296a <RI_SetRegCommandParser+0x296>
 8002b48:	3a81      	subs	r2, #129	; 0x81
 8002b4a:	3aff      	subs	r2, #255	; 0xff
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <RI_SetRegCommandParser+0x47e>
 8002b50:	e780      	b.n	8002a54 <RI_SetRegCommandParser+0x380>
 8002b52:	d90c      	bls.n	8002b6e <RI_SetRegCommandParser+0x49a>
 8002b54:	22b9      	movs	r2, #185	; 0xb9
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <RI_SetRegCommandParser+0x48a>
 8002b5c:	e705      	b.n	800296a <RI_SetRegCommandParser+0x296>
 8002b5e:	23b5      	movs	r3, #181	; 0xb5
 8002b60:	2287      	movs	r2, #135	; 0x87
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	4390      	bics	r0, r2
 8002b66:	4298      	cmp	r0, r3
 8002b68:	d100      	bne.n	8002b6c <RI_SetRegCommandParser+0x498>
 8002b6a:	e6fe      	b.n	800296a <RI_SetRegCommandParser+0x296>
 8002b6c:	e71a      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 8002b6e:	2147      	movs	r1, #71	; 0x47
 8002b70:	3a80      	subs	r2, #128	; 0x80
 8002b72:	4388      	bics	r0, r1
 8002b74:	4290      	cmp	r0, r2
 8002b76:	d100      	bne.n	8002b7a <RI_SetRegCommandParser+0x4a6>
 8002b78:	e76c      	b.n	8002a54 <RI_SetRegCommandParser+0x380>
 8002b7a:	3a40      	subs	r2, #64	; 0x40
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <RI_SetRegCommandParser+0x4ae>
 8002b80:	e768      	b.n	8002a54 <RI_SetRegCommandParser+0x380>
 8002b82:	e70f      	b.n	80029a4 <RI_SetRegCommandParser+0x2d0>
 8002b84:	2347      	movs	r3, #71	; 0x47
 8002b86:	4398      	bics	r0, r3
 8002b88:	2828      	cmp	r0, #40	; 0x28
 8002b8a:	d100      	bne.n	8002b8e <RI_SetRegCommandParser+0x4ba>
 8002b8c:	e63a      	b.n	8002804 <RI_SetRegCommandParser+0x130>
      rxLength = (int16_t) (rxLength - size);
 8002b8e:	465b      	mov	r3, fp
 8002b90:	4642      	mov	r2, r8
 8002b92:	1a9a      	subs	r2, r3, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002b94:	2305      	movs	r3, #5
      rxData = rxData+size;
 8002b96:	4446      	add	r6, r8
 8002b98:	46b2      	mov	sl, r6
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002b9a:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002b9c:	b212      	sxth	r2, r2
              break;
 8002b9e:	e5c9      	b.n	8002734 <RI_SetRegCommandParser+0x60>
      rxData = rxData+size;
 8002ba0:	46b2      	mov	sl, r6
      rxLength = (int16_t) (rxLength - size);
 8002ba2:	4662      	mov	r2, ip
      rxData = rxData+size;
 8002ba4:	449a      	add	sl, r3
        retVal = MCP_ERROR_RO_REG;
 8002ba6:	2304      	movs	r3, #4
      rxLength = (int16_t) (rxLength - size);
 8002ba8:	9201      	str	r2, [sp, #4]
 8002baa:	1be2      	subs	r2, r4, r7
 8002bac:	445a      	add	r2, fp
 8002bae:	4645      	mov	r5, r8
        retVal = MCP_ERROR_RO_REG;
 8002bb0:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002bb2:	b212      	sxth	r2, r2
 8002bb4:	e5be      	b.n	8002734 <RI_SetRegCommandParser+0x60>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	469c      	mov	ip, r3
 8002bba:	e5bb      	b.n	8002734 <RI_SetRegCommandParser+0x60>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	5ef0      	ldrsh	r0, [r6, r3]
 8002bc0:	2106      	movs	r1, #6
 8002bc2:	f7fd fb2b 	bl	800021c <__divsi3>
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	b201      	sxth	r1, r0
 8002bca:	4871      	ldr	r0, [pc, #452]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002bcc:	f7fe fd70 	bl	80016b0 <MCI_ExecSpeedRamp>
      rxData = rxData+size;
 8002bd0:	1dbb      	adds	r3, r7, #6
      rxLength = (int16_t) (rxLength - size);
 8002bd2:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002bd4:	469a      	mov	sl, r3
  uint8_t retVal = MCP_CMD_OK;
 8002bd6:	2300      	movs	r3, #0
      rxLength = (int16_t) (rxLength - size);
 8002bd8:	3a06      	subs	r2, #6
  uint8_t retVal = MCP_CMD_OK;
 8002bda:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002bdc:	b212      	sxth	r2, r2
            break;
 8002bde:	e5a9      	b.n	8002734 <RI_SetRegCommandParser+0x60>
            uint8_t regdata8 = *data;
 8002be0:	78bb      	ldrb	r3, [r7, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d065      	beq.n	8002cb2 <RI_SetRegCommandParser+0x5de>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d059      	beq.n	8002c9e <RI_SetRegCommandParser+0x5ca>
      rxData = rxData+size;
 8002bea:	1cfb      	adds	r3, r7, #3
      rxLength = (int16_t) (rxLength - size);
 8002bec:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002bee:	469a      	mov	sl, r3
  uint8_t retVal = MCP_CMD_OK;
 8002bf0:	2300      	movs	r3, #0
      rxLength = (int16_t) (rxLength - size);
 8002bf2:	3a03      	subs	r2, #3
  uint8_t retVal = MCP_CMD_OK;
 8002bf4:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002bf6:	b212      	sxth	r2, r2
 8002bf8:	e59c      	b.n	8002734 <RI_SetRegCommandParser+0x60>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002bfa:	893a      	ldrh	r2, [r7, #8]
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	5ef9      	ldrsh	r1, [r7, r3]
 8002c00:	4863      	ldr	r0, [pc, #396]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002c02:	f7fe fd5f 	bl	80016c4 <MCI_ExecTorqueRamp>
              break;
 8002c06:	e5d7      	b.n	80027b8 <RI_SetRegCommandParser+0xe4>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002c08:	230a      	movs	r3, #10
 8002c0a:	469c      	mov	ip, r3
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002c0c:	074b      	lsls	r3, r1, #29
 8002c0e:	d130      	bne.n	8002c72 <RI_SetRegCommandParser+0x59e>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002c10:	b2c9      	uxtb	r1, r1
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002c12:	292f      	cmp	r1, #47	; 0x2f
 8002c14:	d82d      	bhi.n	8002c72 <RI_SetRegCommandParser+0x59e>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002c16:	08cb      	lsrs	r3, r1, #3
 8002c18:	1e19      	subs	r1, r3, #0
                for (i = 0; i <nbrOfPhase; i++)
 8002c1a:	d028      	beq.n	8002c6e <RI_SetRegCommandParser+0x59a>
 8002c1c:	aa07      	add	r2, sp, #28
 8002c1e:	4692      	mov	sl, r2
 8002c20:	465a      	mov	r2, fp
 8002c22:	2300      	movs	r3, #0
 8002c24:	9204      	str	r2, [sp, #16]
 8002c26:	9a01      	ldr	r2, [sp, #4]
 8002c28:	3704      	adds	r7, #4
 8002c2a:	46ab      	mov	fp, r5
 8002c2c:	003c      	movs	r4, r7
 8002c2e:	4655      	mov	r5, sl
 8002c30:	9605      	str	r6, [sp, #20]
 8002c32:	4692      	mov	sl, r2
 8002c34:	001f      	movs	r7, r3
 8002c36:	000e      	movs	r6, r1
                revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	5ee0      	ldrsh	r0, [r4, r3]
 8002c3c:	2106      	movs	r1, #6
 8002c3e:	f7fd faed 	bl	800021c <__divsi3>
 8002c42:	8068      	strh	r0, [r5, #2]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c44:	2204      	movs	r2, #4
 8002c46:	5ea3      	ldrsh	r3, [r4, r2]
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002c48:	0039      	movs	r1, r7
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c4a:	80ab      	strh	r3, [r5, #4]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c4c:	88e3      	ldrh	r3, [r4, #6]
                for (i = 0; i <nbrOfPhase; i++)
 8002c4e:	3701      	adds	r7, #1
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002c50:	002a      	movs	r2, r5
 8002c52:	4850      	ldr	r0, [pc, #320]	; (8002d94 <RI_SetRegCommandParser+0x6c0>)
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002c54:	802b      	strh	r3, [r5, #0]
                for (i = 0; i <nbrOfPhase; i++)
 8002c56:	b2ff      	uxtb	r7, r7
                (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002c58:	f002 fc22 	bl	80054a0 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8002c5c:	3408      	adds	r4, #8
 8002c5e:	42be      	cmp	r6, r7
 8002c60:	d1ea      	bne.n	8002c38 <RI_SetRegCommandParser+0x564>
 8002c62:	4653      	mov	r3, sl
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9b04      	ldr	r3, [sp, #16]
 8002c68:	465d      	mov	r5, fp
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	9e05      	ldr	r6, [sp, #20]
  uint8_t retVal = MCP_CMD_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002c72:	465b      	mov	r3, fp
 8002c74:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002c76:	4446      	add	r6, r8
      rxLength = (int16_t) (rxLength - size);
 8002c78:	1a9a      	subs	r2, r3, r2
      rxData = rxData+size;
 8002c7a:	46b2      	mov	sl, r6
      rxLength = (int16_t) (rxLength - size);
 8002c7c:	b212      	sxth	r2, r2
 8002c7e:	e559      	b.n	8002734 <RI_SetRegCommandParser+0x60>
              rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8002c80:	88f8      	ldrh	r0, [r7, #6]
 8002c82:	88ba      	ldrh	r2, [r7, #4]
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002c84:	893b      	ldrh	r3, [r7, #8]
              rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8002c86:	0400      	lsls	r0, r0, #16
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002c88:	2106      	movs	r1, #6
              rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8002c8a:	4310      	orrs	r0, r2
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002c8c:	469a      	mov	sl, r3
 8002c8e:	f7fd fac5 	bl	800021c <__divsi3>
 8002c92:	4652      	mov	r2, sl
 8002c94:	b201      	sxth	r1, r0
 8002c96:	483e      	ldr	r0, [pc, #248]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002c98:	f7fe fd0a 	bl	80016b0 <MCI_ExecSpeedRamp>
              break;
 8002c9c:	e58c      	b.n	80027b8 <RI_SetRegCommandParser+0xe4>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002c9e:	4e3c      	ldr	r6, [pc, #240]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002ca0:	0030      	movs	r0, r6
 8002ca2:	f7fe fdf3 	bl	800188c <MCI_GetMecSpeedRefUnit>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	0001      	movs	r1, r0
 8002caa:	0030      	movs	r0, r6
 8002cac:	f7fe fd00 	bl	80016b0 <MCI_ExecSpeedRamp>
 8002cb0:	e79b      	b.n	8002bea <RI_SetRegCommandParser+0x516>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002cb2:	4e37      	ldr	r6, [pc, #220]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002cb4:	0030      	movs	r0, r6
 8002cb6:	f7fe fe4f 	bl	8001958 <MCI_GetTeref>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	0001      	movs	r1, r0
 8002cbe:	0030      	movs	r0, r6
 8002cc0:	f7fe fd00 	bl	80016c4 <MCI_ExecTorqueRamp>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002cc4:	e791      	b.n	8002bea <RI_SetRegCommandParser+0x516>
  const char_t *tempsrcString = srcString;
 8002cc6:	0030      	movs	r0, r6
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002cc8:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e5c4      	b.n	8002858 <RI_SetRegCommandParser+0x184>
      rxData = rxData+size;
 8002cce:	1cfb      	adds	r3, r7, #3
      rxLength = (int16_t) (rxLength - size);
 8002cd0:	4642      	mov	r2, r8
      rxData = rxData+size;
 8002cd2:	469a      	mov	sl, r3
        retVal = MCP_ERROR_RO_REG;
 8002cd4:	2304      	movs	r3, #4
      rxLength = (int16_t) (rxLength - size);
 8002cd6:	3a03      	subs	r2, #3
        retVal = MCP_ERROR_RO_REG;
 8002cd8:	469c      	mov	ip, r3
      rxLength = (int16_t) (rxLength - size);
 8002cda:	b212      	sxth	r2, r2
 8002cdc:	e52a      	b.n	8002734 <RI_SetRegCommandParser+0x60>
            currComp = MCI_GetIqdref(pMCIN);
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <RI_SetRegCommandParser+0x6bc>)
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	469b      	mov	fp, r3
 8002ce4:	f7fe fe08 	bl	80018f8 <MCI_GetIqdref>
 8002ce8:	ab07      	add	r3, sp, #28
 8002cea:	9007      	str	r0, [sp, #28]
            currComp.d = (int16_t)regdata16;
 8002cec:	805e      	strh	r6, [r3, #2]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002cee:	4658      	mov	r0, fp
 8002cf0:	9907      	ldr	r1, [sp, #28]
 8002cf2:	f7fe fcf1 	bl	80016d8 <MCI_SetCurrentReferences>
            break;
 8002cf6:	e5e5      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002cf8:	ab07      	add	r3, sp, #28
 8002cfa:	469a      	mov	sl, r3
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <RI_SetRegCommandParser+0x688>)
 8002cfe:	4652      	mov	r2, sl
 8002d00:	469b      	mov	fp, r3
 8002d02:	ab06      	add	r3, sp, #24
 8002d04:	4658      	mov	r0, fp
 8002d06:	1c99      	adds	r1, r3, #2
 8002d08:	f002 ffd6 	bl	8005cb8 <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002d0c:	ab06      	add	r3, sp, #24
 8002d0e:	4658      	mov	r0, fp
 8002d10:	2102      	movs	r1, #2
 8002d12:	5e59      	ldrsh	r1, [r3, r1]
 8002d14:	b232      	sxth	r2, r6
 8002d16:	f002 ffd7 	bl	8005cc8 <STO_PLL_SetObserverGains>
            break;
 8002d1a:	e5d3      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002d1c:	480e      	ldr	r0, [pc, #56]	; (8002d58 <RI_SetRegCommandParser+0x684>)
 8002d1e:	b231      	sxth	r1, r6
 8002d20:	f001 fd3c 	bl	800479c <PID_SetKP>
            break;
 8002d24:	e5ce      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002d26:	0031      	movs	r1, r6
 8002d28:	480b      	ldr	r0, [pc, #44]	; (8002d58 <RI_SetRegCommandParser+0x684>)
 8002d2a:	e6d5      	b.n	8002ad8 <RI_SetRegCommandParser+0x404>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002d2c:	0031      	movs	r1, r6
 8002d2e:	480d      	ldr	r0, [pc, #52]	; (8002d64 <RI_SetRegCommandParser+0x690>)
 8002d30:	f001 fd70 	bl	8004814 <PID_SetKDDivisorPOW2>
            break;
 8002d34:	e5c6      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002d36:	0031      	movs	r1, r6
 8002d38:	480a      	ldr	r0, [pc, #40]	; (8002d64 <RI_SetRegCommandParser+0x690>)
 8002d3a:	e6cd      	b.n	8002ad8 <RI_SetRegCommandParser+0x404>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <RI_SetRegCommandParser+0x68c>)
 8002d3e:	0031      	movs	r1, r6
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	e6c9      	b.n	8002ad8 <RI_SetRegCommandParser+0x404>
 8002d44:	00001550 	.word	0x00001550
 8002d48:	00001650 	.word	0x00001650
 8002d4c:	00001910 	.word	0x00001910
 8002d50:	00001b58 	.word	0x00001b58
 8002d54:	000018d0 	.word	0x000018d0
 8002d58:	200002dc 	.word	0x200002dc
 8002d5c:	200002a8 	.word	0x200002a8
 8002d60:	2000046c 	.word	0x2000046c
 8002d64:	20000138 	.word	0x20000138
 8002d68:	000015d0 	.word	0x000015d0
 8002d6c:	00001610 	.word	0x00001610
 8002d70:	00001450 	.word	0x00001450
 8002d74:	000014d0 	.word	0x000014d0
 8002d78:	00001510 	.word	0x00001510
 8002d7c:	20000468 	.word	0x20000468
 8002d80:	00001590 	.word	0x00001590
 8002d84:	00001490 	.word	0x00001490
 8002d88:	fffff3b0 	.word	0xfffff3b0
 8002d8c:	0000ffbf 	.word	0x0000ffbf
 8002d90:	20000534 	.word	0x20000534
 8002d94:	2000021c 	.word	0x2000021c
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002d98:	4812      	ldr	r0, [pc, #72]	; (8002de4 <RI_SetRegCommandParser+0x710>)
 8002d9a:	b231      	sxth	r1, r6
 8002d9c:	f001 fd00 	bl	80047a0 <PID_SetKI>
            break;
 8002da0:	e590      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <RI_SetRegCommandParser+0x714>)
 8002da4:	0031      	movs	r1, r6
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	f001 fd34 	bl	8004814 <PID_SetKDDivisorPOW2>
            break;
 8002dac:	e58a      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <RI_SetRegCommandParser+0x718>)
 8002db0:	0031      	movs	r1, r6
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f001 fd10 	bl	80047d8 <PID_SetKIDivisorPOW2>
            break;
 8002db8:	e584      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <RI_SetRegCommandParser+0x714>)
 8002dbc:	b231      	sxth	r1, r6
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	f001 fd20 	bl	8004804 <PID_SetKD>
            break;
 8002dc4:	e57e      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <RI_SetRegCommandParser+0x714>)
 8002dc8:	b231      	sxth	r1, r6
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	f001 fce6 	bl	800479c <PID_SetKP>
            break;
 8002dd0:	e578      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <RI_SetRegCommandParser+0x718>)
 8002dd4:	b231      	sxth	r1, r6
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f001 fce2 	bl	80047a0 <PID_SetKI>
            break;
 8002ddc:	e572      	b.n	80028c4 <RI_SetRegCommandParser+0x1f0>
 8002dde:	9f03      	ldr	r7, [sp, #12]
 8002de0:	e4fb      	b.n	80027da <RI_SetRegCommandParser+0x106>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	20000138 	.word	0x20000138
 8002de8:	2000046c 	.word	0x2000046c
 8002dec:	20000468 	.word	0x20000468

08002df0 <RI_GetRegCommandParser>:
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	46de      	mov	lr, fp
 8002df4:	4657      	mov	r7, sl
 8002df6:	464e      	mov	r6, r9
 8002df8:	4645      	mov	r5, r8
 8002dfa:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 8002dfc:	6843      	ldr	r3, [r0, #4]
{
 8002dfe:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 8002e00:	469b      	mov	fp, r3
    uint16_t rxLength = pHandle->rxLength;
 8002e02:	8983      	ldrh	r3, [r0, #12]
    uint8_t * txData = pHandle->txBuffer;
 8002e04:	6886      	ldr	r6, [r0, #8]
    uint16_t rxLength = pHandle->rxLength;
 8002e06:	4698      	mov	r8, r3
    pHandle->txLength = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002e0c:	4643      	mov	r3, r8
{
 8002e0e:	b099      	sub	sp, #100	; 0x64
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 8002e10:	b20c      	sxth	r4, r1
    while (rxLength > 0U)
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d100      	bne.n	8002e18 <RI_GetRegCommandParser+0x28>
 8002e16:	e36f      	b.n	80034f8 <RI_GetRegCommandParser+0x708>
    switch (typeID)
 8002e18:	4bb3      	ldr	r3, [pc, #716]	; (80030e8 <RI_GetRegCommandParser+0x2f8>)
    while (rxLength > 0U)
 8002e1a:	465d      	mov	r5, fp
    switch (typeID)
 8002e1c:	469a      	mov	sl, r3
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002e1e:	8829      	ldrh	r1, [r5, #0]
    uint16_t regID = dataID & REG_MASK;
 8002e20:	2307      	movs	r3, #7
 8002e22:	000a      	movs	r2, r1
 8002e24:	439a      	bics	r2, r3
 8002e26:	0013      	movs	r3, r2
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8002e28:	2238      	movs	r2, #56	; 0x38
 8002e2a:	400a      	ands	r2, r1
    switch (typeID)
 8002e2c:	3a08      	subs	r2, #8
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	2a20      	cmp	r2, #32
 8002e32:	d803      	bhi.n	8002e3c <RI_GetRegCommandParser+0x4c>
 8002e34:	4651      	mov	r1, sl
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	588a      	ldr	r2, [r1, r2]
 8002e3a:	4697      	mov	pc, r2
 8002e3c:	2007      	movs	r0, #7
}
 8002e3e:	b019      	add	sp, #100	; 0x64
 8002e40:	bcf0      	pop	{r4, r5, r6, r7}
 8002e42:	46bb      	mov	fp, r7
 8002e44:	46b2      	mov	sl, r6
 8002e46:	46a9      	mov	r9, r5
 8002e48:	46a0      	mov	r8, r4
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rawData++;
 8002e4c:	22d4      	movs	r2, #212	; 0xd4
 8002e4e:	1cb0      	adds	r0, r6, #2
        switch (regID)
 8002e50:	0052      	lsls	r2, r2, #1
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d100      	bne.n	8002e58 <RI_GetRegCommandParser+0x68>
 8002e56:	e2ee      	b.n	8003436 <RI_GetRegCommandParser+0x646>
 8002e58:	d900      	bls.n	8002e5c <RI_GetRegCommandParser+0x6c>
 8002e5a:	e10f      	b.n	800307c <RI_GetRegCommandParser+0x28c>
 8002e5c:	2ba8      	cmp	r3, #168	; 0xa8
 8002e5e:	d100      	bne.n	8002e62 <RI_GetRegCommandParser+0x72>
 8002e60:	e2db      	b.n	800341a <RI_GetRegCommandParser+0x62a>
 8002e62:	d900      	bls.n	8002e66 <RI_GetRegCommandParser+0x76>
 8002e64:	e101      	b.n	800306a <RI_GetRegCommandParser+0x27a>
 8002e66:	2b28      	cmp	r3, #40	; 0x28
 8002e68:	d100      	bne.n	8002e6c <RI_GetRegCommandParser+0x7c>
 8002e6a:	e31d      	b.n	80034a8 <RI_GetRegCommandParser+0x6b8>
 8002e6c:	2b68      	cmp	r3, #104	; 0x68
 8002e6e:	d000      	beq.n	8002e72 <RI_GetRegCommandParser+0x82>
 8002e70:	e0be      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002e72:	233c      	movs	r3, #60	; 0x3c
 8002e74:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002e76:	2c3d      	cmp	r4, #61	; 0x3d
 8002e78:	d900      	bls.n	8002e7c <RI_GetRegCommandParser+0x8c>
 8002e7a:	e334      	b.n	80034e6 <RI_GetRegCommandParser+0x6f6>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002e7c:	2008      	movs	r0, #8
 8002e7e:	e7de      	b.n	8002e3e <RI_GetRegCommandParser+0x4e>
        switch (regID)
 8002e80:	2ba0      	cmp	r3, #160	; 0xa0
 8002e82:	d100      	bne.n	8002e86 <RI_GetRegCommandParser+0x96>
 8002e84:	e251      	b.n	800332a <RI_GetRegCommandParser+0x53a>
 8002e86:	d900      	bls.n	8002e8a <RI_GetRegCommandParser+0x9a>
 8002e88:	e0cd      	b.n	8003026 <RI_GetRegCommandParser+0x236>
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d100      	bne.n	8002e90 <RI_GetRegCommandParser+0xa0>
 8002e8e:	e267      	b.n	8003360 <RI_GetRegCommandParser+0x570>
 8002e90:	2b60      	cmp	r3, #96	; 0x60
 8002e92:	d000      	beq.n	8002e96 <RI_GetRegCommandParser+0xa6>
 8002e94:	e0ac      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e96:	2000      	movs	r0, #0
 8002e98:	4994      	ldr	r1, [pc, #592]	; (80030ec <RI_GetRegCommandParser+0x2fc>)
 8002e9a:	5608      	ldrsb	r0, [r1, r0]
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d100      	bne.n	8002ea2 <RI_GetRegCommandParser+0xb2>
 8002ea0:	e288      	b.n	80033b4 <RI_GetRegCommandParser+0x5c4>
 8002ea2:	2c01      	cmp	r4, #1
 8002ea4:	dc00      	bgt.n	8002ea8 <RI_GetRegCommandParser+0xb8>
 8002ea6:	e23e      	b.n	8003326 <RI_GetRegCommandParser+0x536>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	1b9b      	subs	r3, r3, r6
 8002eac:	46ac      	mov	ip, r5
 8002eae:	0032      	movs	r2, r6
 8002eb0:	0025      	movs	r5, r4
 8002eb2:	001c      	movs	r4, r3
 8002eb4:	e002      	b.n	8002ebc <RI_GetRegCommandParser+0xcc>
 8002eb6:	42ab      	cmp	r3, r5
 8002eb8:	db00      	blt.n	8002ebc <RI_GetRegCommandParser+0xcc>
 8002eba:	e234      	b.n	8003326 <RI_GetRegCommandParser+0x536>
    *tempdestString = *tempsrcString;
 8002ebc:	7010      	strb	r0, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ebe:	2000      	movs	r0, #0
    tempsrcString++;
 8002ec0:	3101      	adds	r1, #1
    tempdestString++;
 8002ec2:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002ec4:	5608      	ldrsb	r0, [r1, r0]
 8002ec6:	1913      	adds	r3, r2, r4
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d1f3      	bne.n	8002eb6 <RI_GetRegCommandParser+0xc6>
        txData = txData+size;
 8002ece:	002c      	movs	r4, r5
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	4665      	mov	r5, ip
    *tempdestString = (int8_t)0;
 8002ed4:	2000      	movs	r0, #0
        if (freeSpace >= 2U)
 8002ed6:	b2a4      	uxth	r4, r4
    *tempdestString = (int8_t)0;
 8002ed8:	7010      	strb	r0, [r2, #0]
        pHandle->txLength += size;
 8002eda:	89fa      	ldrh	r2, [r7, #14]
        freeSpaceS16 = freeSpaceS16-size;
 8002edc:	1ae4      	subs	r4, r4, r3
        pHandle->txLength += size;
 8002ede:	189a      	adds	r2, r3, r2
    while (rxLength > 0U)
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	3502      	adds	r5, #2
 8002ee4:	4443      	add	r3, r8
        pHandle->txLength += size;
 8002ee6:	81fa      	strh	r2, [r7, #14]
    while (rxLength > 0U)
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b2aa      	uxth	r2, r5
        txData = txData+size;
 8002eec:	1876      	adds	r6, r6, r1
        freeSpaceS16 = freeSpaceS16-size;
 8002eee:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d000      	beq.n	8002ef6 <RI_GetRegCommandParser+0x106>
 8002ef4:	e793      	b.n	8002e1e <RI_GetRegCommandParser+0x2e>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e7a1      	b.n	8002e3e <RI_GetRegCommandParser+0x4e>
        if (freeSpace >= 2U)
 8002efa:	b2a4      	uxth	r4, r4
 8002efc:	2c01      	cmp	r4, #1
 8002efe:	d9bd      	bls.n	8002e7c <RI_GetRegCommandParser+0x8c>
          switch (regID)
 8002f00:	2299      	movs	r2, #153	; 0x99
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d100      	bne.n	8002f0a <RI_GetRegCommandParser+0x11a>
 8002f08:	e349      	b.n	800359e <RI_GetRegCommandParser+0x7ae>
 8002f0a:	d920      	bls.n	8002f4e <RI_GetRegCommandParser+0x15e>
 8002f0c:	22e9      	movs	r2, #233	; 0xe9
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <RI_GetRegCommandParser+0x126>
 8002f14:	e0e4      	b.n	80030e0 <RI_GetRegCommandParser+0x2f0>
 8002f16:	d800      	bhi.n	8002f1a <RI_GetRegCommandParser+0x12a>
 8002f18:	e0fc      	b.n	8003114 <RI_GetRegCommandParser+0x324>
 8002f1a:	4a75      	ldr	r2, [pc, #468]	; (80030f0 <RI_GetRegCommandParser+0x300>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <RI_GetRegCommandParser+0x132>
 8002f20:	e35f      	b.n	80035e2 <RI_GetRegCommandParser+0x7f2>
 8002f22:	d800      	bhi.n	8002f26 <RI_GetRegCommandParser+0x136>
 8002f24:	e11f      	b.n	8003166 <RI_GetRegCommandParser+0x376>
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <RI_GetRegCommandParser+0x304>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <RI_GetRegCommandParser+0x13e>
 8002f2c:	e3a8      	b.n	8003680 <RI_GetRegCommandParser+0x890>
 8002f2e:	d800      	bhi.n	8002f32 <RI_GetRegCommandParser+0x142>
 8002f30:	e109      	b.n	8003146 <RI_GetRegCommandParser+0x356>
 8002f32:	4a71      	ldr	r2, [pc, #452]	; (80030f8 <RI_GetRegCommandParser+0x308>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <RI_GetRegCommandParser+0x14a>
 8002f38:	e391      	b.n	800365e <RI_GetRegCommandParser+0x86e>
 8002f3a:	4a70      	ldr	r2, [pc, #448]	; (80030fc <RI_GetRegCommandParser+0x30c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d157      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8002f40:	486f      	ldr	r0, [pc, #444]	; (8003100 <RI_GetRegCommandParser+0x310>)
 8002f42:	f001 fc39 	bl	80047b8 <PID_GetKPDivisorPOW2>
 8002f46:	2102      	movs	r1, #2
          *size = 2;
 8002f48:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8002f4a:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8002f4c:	e7c5      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8002f4e:	228a      	movs	r2, #138	; 0x8a
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d100      	bne.n	8002f58 <RI_GetRegCommandParser+0x168>
 8002f56:	e37b      	b.n	8003650 <RI_GetRegCommandParser+0x860>
 8002f58:	d919      	bls.n	8002f8e <RI_GetRegCommandParser+0x19e>
 8002f5a:	2285      	movs	r2, #133	; 0x85
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d100      	bne.n	8002f64 <RI_GetRegCommandParser+0x174>
 8002f62:	e36d      	b.n	8003640 <RI_GetRegCommandParser+0x850>
 8002f64:	d800      	bhi.n	8002f68 <RI_GetRegCommandParser+0x178>
 8002f66:	e174      	b.n	8003252 <RI_GetRegCommandParser+0x462>
 8002f68:	2291      	movs	r2, #145	; 0x91
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <RI_GetRegCommandParser+0x182>
 8002f70:	e35d      	b.n	800362e <RI_GetRegCommandParser+0x83e>
 8002f72:	d800      	bhi.n	8002f76 <RI_GetRegCommandParser+0x186>
 8002f74:	e13c      	b.n	80031f0 <RI_GetRegCommandParser+0x400>
 8002f76:	2295      	movs	r2, #149	; 0x95
 8002f78:	0112      	lsls	r2, r2, #4
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d138      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f7e:	4861      	ldr	r0, [pc, #388]	; (8003104 <RI_GetRegCommandParser+0x314>)
 8002f80:	f7fe fcba 	bl	80018f8 <MCI_GetIqdref>
              break;
 8002f84:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f86:	900e      	str	r0, [sp, #56]	; 0x38
          *size = 2;
 8002f88:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002f8a:	8030      	strh	r0, [r6, #0]
              break;
 8002f8c:	e7a5      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8002f8e:	2284      	movs	r2, #132	; 0x84
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d100      	bne.n	8002f98 <RI_GetRegCommandParser+0x1a8>
 8002f96:	e2b1      	b.n	80034fc <RI_GetRegCommandParser+0x70c>
 8002f98:	d800      	bhi.n	8002f9c <RI_GetRegCommandParser+0x1ac>
 8002f9a:	e149      	b.n	8003230 <RI_GetRegCommandParser+0x440>
 8002f9c:	22c4      	movs	r2, #196	; 0xc4
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <RI_GetRegCommandParser+0x1b6>
 8002fa4:	e304      	b.n	80035b0 <RI_GetRegCommandParser+0x7c0>
 8002fa6:	d800      	bhi.n	8002faa <RI_GetRegCommandParser+0x1ba>
 8002fa8:	e132      	b.n	8003210 <RI_GetRegCommandParser+0x420>
 8002faa:	22d4      	movs	r2, #212	; 0xd4
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d100      	bne.n	8002fb4 <RI_GetRegCommandParser+0x1c4>
 8002fb2:	e307      	b.n	80035c4 <RI_GetRegCommandParser+0x7d4>
 8002fb4:	3240      	adds	r2, #64	; 0x40
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d11a      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002fba:	ab15      	add	r3, sp, #84	; 0x54
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	a902      	add	r1, sp, #8
 8002fc2:	3102      	adds	r1, #2
 8002fc4:	4850      	ldr	r0, [pc, #320]	; (8003108 <RI_GetRegCommandParser+0x318>)
 8002fc6:	f002 fe77 	bl	8005cb8 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002fca:	464b      	mov	r3, r9
 8002fcc:	2200      	movs	r2, #0
 8002fce:	5e9b      	ldrsh	r3, [r3, r2]
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	8033      	strh	r3, [r6, #0]
          *size = 2;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e780      	b.n	8002eda <RI_GetRegCommandParser+0xea>
        if (freeSpace > 0U)
 8002fd8:	2c00      	cmp	r4, #0
 8002fda:	d100      	bne.n	8002fde <RI_GetRegCommandParser+0x1ee>
 8002fdc:	e74e      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
          switch (regID)
 8002fde:	2b88      	cmp	r3, #136	; 0x88
 8002fe0:	d100      	bne.n	8002fe4 <RI_GetRegCommandParser+0x1f4>
 8002fe2:	e1df      	b.n	80033a4 <RI_GetRegCommandParser+0x5b4>
 8002fe4:	2bc8      	cmp	r3, #200	; 0xc8
 8002fe6:	d100      	bne.n	8002fea <RI_GetRegCommandParser+0x1fa>
 8002fe8:	e1d4      	b.n	8003394 <RI_GetRegCommandParser+0x5a4>
 8002fea:	2b48      	cmp	r3, #72	; 0x48
 8002fec:	d100      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
 8002fee:	e192      	b.n	8003316 <RI_GetRegCommandParser+0x526>
 8002ff0:	2005      	movs	r0, #5
  return (retVal);
 8002ff2:	e724      	b.n	8002e3e <RI_GetRegCommandParser+0x4e>
        if (freeSpace >= 4U)
 8002ff4:	b2a4      	uxth	r4, r4
 8002ff6:	2c03      	cmp	r4, #3
 8002ff8:	d800      	bhi.n	8002ffc <RI_GetRegCommandParser+0x20c>
 8002ffa:	e73f      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
          switch (regID)
 8002ffc:	2bd8      	cmp	r3, #216	; 0xd8
 8002ffe:	d100      	bne.n	8003002 <RI_GetRegCommandParser+0x212>
 8003000:	e26a      	b.n	80034d8 <RI_GetRegCommandParser+0x6e8>
 8003002:	d900      	bls.n	8003006 <RI_GetRegCommandParser+0x216>
 8003004:	e176      	b.n	80032f4 <RI_GetRegCommandParser+0x504>
 8003006:	2b58      	cmp	r3, #88	; 0x58
 8003008:	d100      	bne.n	800300c <RI_GetRegCommandParser+0x21c>
 800300a:	e25a      	b.n	80034c2 <RI_GetRegCommandParser+0x6d2>
 800300c:	2b98      	cmp	r3, #152	; 0x98
 800300e:	d000      	beq.n	8003012 <RI_GetRegCommandParser+0x222>
 8003010:	e166      	b.n	80032e0 <RI_GetRegCommandParser+0x4f0>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003012:	483c      	ldr	r0, [pc, #240]	; (8003104 <RI_GetRegCommandParser+0x314>)
 8003014:	f7fe fc3a 	bl	800188c <MCI_GetMecSpeedRefUnit>
 8003018:	0043      	lsls	r3, r0, #1
 800301a:	181b      	adds	r3, r3, r0
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	6033      	str	r3, [r6, #0]
 8003020:	2104      	movs	r1, #4
          *size = 4;
 8003022:	2304      	movs	r3, #4
 8003024:	e759      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003026:	2be0      	cmp	r3, #224	; 0xe0
 8003028:	d1e2      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800302a:	4b38      	ldr	r3, [pc, #224]	; (800310c <RI_GetRegCommandParser+0x31c>)
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800302c:	2224      	movs	r2, #36	; 0x24
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003032:	5699      	ldrsb	r1, [r3, r2]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003034:	3024      	adds	r0, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003036:	2900      	cmp	r1, #0
 8003038:	d100      	bne.n	800303c <RI_GetRegCommandParser+0x24c>
 800303a:	e1bb      	b.n	80033b4 <RI_GetRegCommandParser+0x5c4>
 800303c:	2c01      	cmp	r4, #1
 800303e:	dc00      	bgt.n	8003042 <RI_GetRegCommandParser+0x252>
 8003040:	e171      	b.n	8003326 <RI_GetRegCommandParser+0x536>
 8003042:	2301      	movs	r3, #1
 8003044:	1b9b      	subs	r3, r3, r6
 8003046:	46ac      	mov	ip, r5
 8003048:	0032      	movs	r2, r6
 800304a:	0025      	movs	r5, r4
 800304c:	001c      	movs	r4, r3
 800304e:	e002      	b.n	8003056 <RI_GetRegCommandParser+0x266>
 8003050:	42ab      	cmp	r3, r5
 8003052:	db00      	blt.n	8003056 <RI_GetRegCommandParser+0x266>
 8003054:	e167      	b.n	8003326 <RI_GetRegCommandParser+0x536>
    *tempdestString = *tempsrcString;
 8003056:	7011      	strb	r1, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003058:	2100      	movs	r1, #0
    tempsrcString++;
 800305a:	3001      	adds	r0, #1
    tempdestString++;
 800305c:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800305e:	5641      	ldrsb	r1, [r0, r1]
 8003060:	1913      	adds	r3, r2, r4
 8003062:	b29b      	uxth	r3, r3
 8003064:	2900      	cmp	r1, #0
 8003066:	d1f3      	bne.n	8003050 <RI_GetRegCommandParser+0x260>
 8003068:	e731      	b.n	8002ece <RI_GetRegCommandParser+0xde>
 800306a:	2be8      	cmp	r3, #232	; 0xe8
 800306c:	d1c0      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800306e:	230e      	movs	r3, #14
 8003070:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003072:	2c0f      	cmp	r4, #15
 8003074:	d800      	bhi.n	8003078 <RI_GetRegCommandParser+0x288>
 8003076:	e701      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <RI_GetRegCommandParser+0x320>)
 800307a:	e1d4      	b.n	8003426 <RI_GetRegCommandParser+0x636>
 800307c:	228a      	movs	r2, #138	; 0x8a
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <RI_GetRegCommandParser+0x296>
 8003084:	e19a      	b.n	80033bc <RI_GetRegCommandParser+0x5cc>
 8003086:	3241      	adds	r2, #65	; 0x41
 8003088:	32ff      	adds	r2, #255	; 0xff
 800308a:	4293      	cmp	r3, r2
 800308c:	d114      	bne.n	80030b8 <RI_GetRegCommandParser+0x2c8>
            *rawSize = 4;
 800308e:	2304      	movs	r3, #4
 8003090:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <RI_GetRegCommandParser+0x314>)
 8003094:	0018      	movs	r0, r3
 8003096:	4699      	mov	r9, r3
 8003098:	f7fe fc2e 	bl	80018f8 <MCI_GetIqdref>
 800309c:	9004      	str	r0, [sp, #16]
 800309e:	8070      	strh	r0, [r6, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80030a0:	4648      	mov	r0, r9
 80030a2:	f7fe fc29 	bl	80018f8 <MCI_GetIqdref>
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	0c00      	lsrs	r0, r0, #16
 80030aa:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 80030ac:	8833      	ldrh	r3, [r6, #0]
        if (freeSpace >= 2U)
 80030ae:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 80030b0:	3302      	adds	r3, #2
 80030b2:	b29b      	uxth	r3, r3
        txData = txData+size;
 80030b4:	0019      	movs	r1, r3
 80030b6:	e710      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80030b8:	3a81      	subs	r2, #129	; 0x81
 80030ba:	3aff      	subs	r2, #255	; 0xff
 80030bc:	4293      	cmp	r3, r2
 80030be:	d197      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
            *rawSize = 4;
 80030c0:	2304      	movs	r3, #4
 80030c2:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <RI_GetRegCommandParser+0x314>)
 80030c6:	0018      	movs	r0, r3
 80030c8:	4699      	mov	r9, r3
 80030ca:	f7fe fbcb 	bl	8001864 <MCI_GetLastRampFinalTorque>
 80030ce:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80030d0:	4648      	mov	r0, r9
 80030d2:	f7fe fbcb 	bl	800186c <MCI_GetLastRampFinalDuration>
 80030d6:	e7e8      	b.n	80030aa <RI_GetRegCommandParser+0x2ba>
 80030d8:	32c1      	adds	r2, #193	; 0xc1
 80030da:	32ff      	adds	r2, #255	; 0xff
 80030dc:	4293      	cmp	r3, r2
 80030de:	d187      	bne.n	8002ff0 <RI_GetRegCommandParser+0x200>
 80030e0:	2102      	movs	r1, #2
 80030e2:	2302      	movs	r3, #2
 80030e4:	e6f9      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	0800651c 	.word	0x0800651c
 80030ec:	08006130 	.word	0x08006130
 80030f0:	00001590 	.word	0x00001590
 80030f4:	00001650 	.word	0x00001650
 80030f8:	000018d0 	.word	0x000018d0
 80030fc:	00001910 	.word	0x00001910
 8003100:	200002dc 	.word	0x200002dc
 8003104:	20000534 	.word	0x20000534
 8003108:	200002a8 	.word	0x200002a8
 800310c:	20000480 	.word	0x20000480
 8003110:	2000047c 	.word	0x2000047c
 8003114:	22b9      	movs	r2, #185	; 0xb9
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	4293      	cmp	r3, r2
 800311a:	d100      	bne.n	800311e <RI_GetRegCommandParser+0x32e>
 800311c:	e280      	b.n	8003620 <RI_GetRegCommandParser+0x830>
 800311e:	d951      	bls.n	80031c4 <RI_GetRegCommandParser+0x3d4>
 8003120:	22c5      	movs	r2, #197	; 0xc5
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	4293      	cmp	r3, r2
 8003126:	d100      	bne.n	800312a <RI_GetRegCommandParser+0x33a>
 8003128:	e2a2      	b.n	8003670 <RI_GetRegCommandParser+0x880>
 800312a:	d93a      	bls.n	80031a2 <RI_GetRegCommandParser+0x3b2>
 800312c:	22c9      	movs	r2, #201	; 0xc9
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	4293      	cmp	r3, r2
 8003132:	d1d1      	bne.n	80030d8 <RI_GetRegCommandParser+0x2e8>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003134:	48c9      	ldr	r0, [pc, #804]	; (800345c <RI_GetRegCommandParser+0x66c>)
 8003136:	f002 fda7 	bl	8005c88 <STO_PLL_GetEstimatedBemf>
 800313a:	9005      	str	r0, [sp, #20]
 800313c:	0c00      	lsrs	r0, r0, #16
              break;
 800313e:	2102      	movs	r1, #2
          *size = 2;
 8003140:	2302      	movs	r3, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003142:	8030      	strh	r0, [r6, #0]
              break;
 8003144:	e6c9      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003146:	4ac6      	ldr	r2, [pc, #792]	; (8003460 <RI_GetRegCommandParser+0x670>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d100      	bne.n	800314e <RI_GetRegCommandParser+0x35e>
 800314c:	e28e      	b.n	800366c <RI_GetRegCommandParser+0x87c>
 800314e:	4ac5      	ldr	r2, [pc, #788]	; (8003464 <RI_GetRegCommandParser+0x674>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d000      	beq.n	8003156 <RI_GetRegCommandParser+0x366>
 8003154:	e74c      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003156:	4bc4      	ldr	r3, [pc, #784]	; (8003468 <RI_GetRegCommandParser+0x678>)
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f001 fb37 	bl	80047cc <PID_GetKIDivisorPOW2>
 800315e:	2102      	movs	r1, #2
          *size = 2;
 8003160:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003162:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8003164:	e6b9      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003166:	4ac1      	ldr	r2, [pc, #772]	; (800346c <RI_GetRegCommandParser+0x67c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <RI_GetRegCommandParser+0x37e>
 800316c:	e1ce      	b.n	800350c <RI_GetRegCommandParser+0x71c>
 800316e:	d909      	bls.n	8003184 <RI_GetRegCommandParser+0x394>
 8003170:	4abf      	ldr	r2, [pc, #764]	; (8003470 <RI_GetRegCommandParser+0x680>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d100      	bne.n	8003178 <RI_GetRegCommandParser+0x388>
 8003176:	e21d      	b.n	80035b4 <RI_GetRegCommandParser+0x7c4>
 8003178:	4abe      	ldr	r2, [pc, #760]	; (8003474 <RI_GetRegCommandParser+0x684>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d000      	beq.n	8003180 <RI_GetRegCommandParser+0x390>
 800317e:	e737      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003180:	4bbd      	ldr	r3, [pc, #756]	; (8003478 <RI_GetRegCommandParser+0x688>)
 8003182:	e7e9      	b.n	8003158 <RI_GetRegCommandParser+0x368>
 8003184:	4abd      	ldr	r2, [pc, #756]	; (800347c <RI_GetRegCommandParser+0x68c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d100      	bne.n	800318c <RI_GetRegCommandParser+0x39c>
 800318a:	e223      	b.n	80035d4 <RI_GetRegCommandParser+0x7e4>
 800318c:	4abc      	ldr	r2, [pc, #752]	; (8003480 <RI_GetRegCommandParser+0x690>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d000      	beq.n	8003194 <RI_GetRegCommandParser+0x3a4>
 8003192:	e72d      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003194:	48bb      	ldr	r0, [pc, #748]	; (8003484 <RI_GetRegCommandParser+0x694>)
 8003196:	f001 fb19 	bl	80047cc <PID_GetKIDivisorPOW2>
 800319a:	2102      	movs	r1, #2
          *size = 2;
 800319c:	2302      	movs	r3, #2
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 800319e:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80031a0:	e69b      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80031a2:	3a80      	subs	r2, #128	; 0x80
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d100      	bne.n	80031aa <RI_GetRegCommandParser+0x3ba>
 80031a8:	e22b      	b.n	8003602 <RI_GetRegCommandParser+0x812>
 80031aa:	3240      	adds	r2, #64	; 0x40
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d000      	beq.n	80031b2 <RI_GetRegCommandParser+0x3c2>
 80031b0:	e71e      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80031b2:	48aa      	ldr	r0, [pc, #680]	; (800345c <RI_GetRegCommandParser+0x66c>)
 80031b4:	f002 fd72 	bl	8005c9c <STO_PLL_GetEstimatedCurrent>
 80031b8:	9007      	str	r0, [sp, #28]
 80031ba:	0c00      	lsrs	r0, r0, #16
              break;
 80031bc:	2102      	movs	r1, #2
          *size = 2;
 80031be:	2302      	movs	r3, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80031c0:	8030      	strh	r0, [r6, #0]
              break;
 80031c2:	e68a      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80031c4:	3a41      	subs	r2, #65	; 0x41
 80031c6:	3aff      	subs	r2, #255	; 0xff
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <RI_GetRegCommandParser+0x3de>
 80031cc:	e211      	b.n	80035f2 <RI_GetRegCommandParser+0x802>
 80031ce:	d958      	bls.n	8003282 <RI_GetRegCommandParser+0x492>
 80031d0:	22a9      	movs	r2, #169	; 0xa9
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <RI_GetRegCommandParser+0x3ea>
 80031d8:	e1b0      	b.n	800353c <RI_GetRegCommandParser+0x74c>
 80031da:	32c0      	adds	r2, #192	; 0xc0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d000      	beq.n	80031e2 <RI_GetRegCommandParser+0x3f2>
 80031e0:	e706      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80031e2:	489e      	ldr	r0, [pc, #632]	; (800345c <RI_GetRegCommandParser+0x66c>)
 80031e4:	f002 f97e 	bl	80054e4 <SPD_GetElAngle>
              break;
 80031e8:	2102      	movs	r1, #2
          *size = 2;
 80031ea:	2302      	movs	r3, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 80031ec:	8030      	strh	r0, [r6, #0]
              break;
 80031ee:	e674      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80031f0:	3a80      	subs	r2, #128	; 0x80
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d100      	bne.n	80031f8 <RI_GetRegCommandParser+0x408>
 80031f6:	e198      	b.n	800352a <RI_GetRegCommandParser+0x73a>
 80031f8:	3240      	adds	r2, #64	; 0x40
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d000      	beq.n	8003200 <RI_GetRegCommandParser+0x410>
 80031fe:	e6f7      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003200:	48a1      	ldr	r0, [pc, #644]	; (8003488 <RI_GetRegCommandParser+0x698>)
 8003202:	f7fe fb69 	bl	80018d8 <MCI_GetIqd>
              break;
 8003206:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003208:	9010      	str	r0, [sp, #64]	; 0x40
          *size = 2;
 800320a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800320c:	8030      	strh	r0, [r6, #0]
              break;
 800320e:	e664      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003210:	3a80      	subs	r2, #128	; 0x80
 8003212:	4293      	cmp	r3, r2
 8003214:	d100      	bne.n	8003218 <RI_GetRegCommandParser+0x428>
 8003216:	e180      	b.n	800351a <RI_GetRegCommandParser+0x72a>
 8003218:	3240      	adds	r2, #64	; 0x40
 800321a:	4293      	cmp	r3, r2
 800321c:	d000      	beq.n	8003220 <RI_GetRegCommandParser+0x430>
 800321e:	e6e7      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003220:	4b95      	ldr	r3, [pc, #596]	; (8003478 <RI_GetRegCommandParser+0x688>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	f001 fac2 	bl	80047ac <PID_GetKI>
              break;
 8003228:	2102      	movs	r1, #2
          *size = 2;
 800322a:	2302      	movs	r3, #2
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 800322c:	8030      	strh	r0, [r6, #0]
              break;
 800322e:	e654      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003230:	3a01      	subs	r2, #1
 8003232:	3aff      	subs	r2, #255	; 0xff
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <RI_GetRegCommandParser+0x44a>
 8003238:	e19b      	b.n	8003572 <RI_GetRegCommandParser+0x782>
 800323a:	d933      	bls.n	80032a4 <RI_GetRegCommandParser+0x4b4>
 800323c:	22c8      	movs	r2, #200	; 0xc8
 800323e:	0052      	lsls	r2, r2, #1
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <RI_GetRegCommandParser+0x456>
 8003244:	e193      	b.n	800356e <RI_GetRegCommandParser+0x77e>
 8003246:	3240      	adds	r2, #64	; 0x40
 8003248:	4293      	cmp	r3, r2
 800324a:	d000      	beq.n	800324e <RI_GetRegCommandParser+0x45e>
 800324c:	e6d0      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800324e:	4b86      	ldr	r3, [pc, #536]	; (8003468 <RI_GetRegCommandParser+0x678>)
 8003250:	e7e7      	b.n	8003222 <RI_GetRegCommandParser+0x432>
 8003252:	22ba      	movs	r2, #186	; 0xba
 8003254:	00d2      	lsls	r2, r2, #3
 8003256:	4293      	cmp	r3, r2
 8003258:	d100      	bne.n	800325c <RI_GetRegCommandParser+0x46c>
 800325a:	e180      	b.n	800355e <RI_GetRegCommandParser+0x76e>
 800325c:	d92f      	bls.n	80032be <RI_GetRegCommandParser+0x4ce>
 800325e:	22fa      	movs	r2, #250	; 0xfa
 8003260:	00d2      	lsls	r2, r2, #3
 8003262:	4293      	cmp	r3, r2
 8003264:	d100      	bne.n	8003268 <RI_GetRegCommandParser+0x478>
 8003266:	e172      	b.n	800354e <RI_GetRegCommandParser+0x75e>
 8003268:	3240      	adds	r2, #64	; 0x40
 800326a:	4293      	cmp	r3, r2
 800326c:	d000      	beq.n	8003270 <RI_GetRegCommandParser+0x480>
 800326e:	e6bf      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003270:	4885      	ldr	r0, [pc, #532]	; (8003488 <RI_GetRegCommandParser+0x698>)
 8003272:	f7fe fb11 	bl	8001898 <MCI_GetIab>
 8003276:	9013      	str	r0, [sp, #76]	; 0x4c
 8003278:	0c00      	lsrs	r0, r0, #16
              break;
 800327a:	2102      	movs	r1, #2
          *size = 2;
 800327c:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIab(pMCIN).b;
 800327e:	8030      	strh	r0, [r6, #0]
              break;
 8003280:	e62b      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 8003282:	3a80      	subs	r2, #128	; 0x80
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <RI_GetRegCommandParser+0x49a>
 8003288:	e181      	b.n	800358e <RI_GetRegCommandParser+0x79e>
 800328a:	3240      	adds	r2, #64	; 0x40
 800328c:	4293      	cmp	r3, r2
 800328e:	d000      	beq.n	8003292 <RI_GetRegCommandParser+0x4a2>
 8003290:	e6ae      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003292:	487d      	ldr	r0, [pc, #500]	; (8003488 <RI_GetRegCommandParser+0x698>)
 8003294:	f7fe fb40 	bl	8001918 <MCI_GetVqd>
 8003298:	900b      	str	r0, [sp, #44]	; 0x2c
 800329a:	0c00      	lsrs	r0, r0, #16
              break;
 800329c:	2102      	movs	r1, #2
          *size = 2;
 800329e:	2302      	movs	r3, #2
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80032a0:	8030      	strh	r0, [r6, #0]
              break;
 80032a2:	e61a      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80032a4:	2b90      	cmp	r3, #144	; 0x90
 80032a6:	d100      	bne.n	80032aa <RI_GetRegCommandParser+0x4ba>
 80032a8:	e16a      	b.n	8003580 <RI_GetRegCommandParser+0x790>
 80032aa:	2bd0      	cmp	r3, #208	; 0xd0
 80032ac:	d000      	beq.n	80032b0 <RI_GetRegCommandParser+0x4c0>
 80032ae:	e69f      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80032b0:	4874      	ldr	r0, [pc, #464]	; (8003484 <RI_GetRegCommandParser+0x694>)
 80032b2:	f001 fa7b 	bl	80047ac <PID_GetKI>
              break;
 80032b6:	2102      	movs	r1, #2
          *size = 2;
 80032b8:	2302      	movs	r3, #2
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80032ba:	8030      	strh	r0, [r6, #0]
              break;
 80032bc:	e60d      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80032be:	3a41      	subs	r2, #65	; 0x41
 80032c0:	3aff      	subs	r2, #255	; 0xff
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d100      	bne.n	80032c8 <RI_GetRegCommandParser+0x4d8>
 80032c6:	e1a4      	b.n	8003612 <RI_GetRegCommandParser+0x822>
 80032c8:	3201      	adds	r2, #1
 80032ca:	32ff      	adds	r2, #255	; 0xff
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d000      	beq.n	80032d2 <RI_GetRegCommandParser+0x4e2>
 80032d0:	e68e      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80032d2:	486e      	ldr	r0, [pc, #440]	; (800348c <RI_GetRegCommandParser+0x69c>)
 80032d4:	f001 f918 	bl	8004508 <VBS_GetAvBusVoltage_V>
              break;
 80032d8:	2102      	movs	r1, #2
          *size = 2;
 80032da:	2302      	movs	r3, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80032dc:	8030      	strh	r0, [r6, #0]
              break;
 80032de:	e5fc      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80032e0:	2b18      	cmp	r3, #24
 80032e2:	d000      	beq.n	80032e6 <RI_GetRegCommandParser+0x4f6>
 80032e4:	e684      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80032e6:	4868      	ldr	r0, [pc, #416]	; (8003488 <RI_GetRegCommandParser+0x698>)
 80032e8:	f7fe fa94 	bl	8001814 <MCI_GetFaultState>
 80032ec:	2104      	movs	r1, #4
          *size = 4;
 80032ee:	2304      	movs	r3, #4
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80032f0:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80032f2:	e5f2      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 80032f4:	228c      	movs	r2, #140	; 0x8c
 80032f6:	0052      	lsls	r2, r2, #1
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d100      	bne.n	80032fe <RI_GetRegCommandParser+0x50e>
 80032fc:	e0e5      	b.n	80034ca <RI_GetRegCommandParser+0x6da>
 80032fe:	4a64      	ldr	r2, [pc, #400]	; (8003490 <RI_GetRegCommandParser+0x6a0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d000      	beq.n	8003306 <RI_GetRegCommandParser+0x516>
 8003304:	e674      	b.n	8002ff0 <RI_GetRegCommandParser+0x200>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <RI_GetRegCommandParser+0x6a4>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f001 fae9 	bl	80048e0 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val;
 800330e:	2104      	movs	r1, #4
          *size = 4;
 8003310:	2304      	movs	r3, #4
              *regdataU32 = ReadVal.U32_Val;
 8003312:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8003314:	e5e1      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003316:	485c      	ldr	r0, [pc, #368]	; (8003488 <RI_GetRegCommandParser+0x698>)
 8003318:	f7fe fa2e 	bl	8001778 <MCI_GetSTMState>
        if (freeSpace >= 2U)
 800331c:	b2a4      	uxth	r4, r4
 800331e:	2101      	movs	r1, #1
          *size = 1;
 8003320:	2301      	movs	r3, #1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003322:	7030      	strb	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8003324:	e5d9      	b.n	8002eda <RI_GetRegCommandParser+0xea>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003326:	2006      	movs	r0, #6
 8003328:	e589      	b.n	8002e3e <RI_GetRegCommandParser+0x4e>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800332a:	2100      	movs	r1, #0
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800332c:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <RI_GetRegCommandParser+0x6a8>)
 800332e:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003330:	5641      	ldrsb	r1, [r0, r1]
 8003332:	2900      	cmp	r1, #0
 8003334:	d03e      	beq.n	80033b4 <RI_GetRegCommandParser+0x5c4>
 8003336:	2c01      	cmp	r4, #1
 8003338:	ddf5      	ble.n	8003326 <RI_GetRegCommandParser+0x536>
 800333a:	2301      	movs	r3, #1
 800333c:	1b9b      	subs	r3, r3, r6
 800333e:	46ac      	mov	ip, r5
 8003340:	0032      	movs	r2, r6
 8003342:	0025      	movs	r5, r4
 8003344:	001c      	movs	r4, r3
 8003346:	e001      	b.n	800334c <RI_GetRegCommandParser+0x55c>
 8003348:	42ab      	cmp	r3, r5
 800334a:	daec      	bge.n	8003326 <RI_GetRegCommandParser+0x536>
    *tempdestString = *tempsrcString;
 800334c:	7011      	strb	r1, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800334e:	2100      	movs	r1, #0
    tempsrcString++;
 8003350:	3001      	adds	r0, #1
    tempdestString++;
 8003352:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003354:	5641      	ldrsb	r1, [r0, r1]
 8003356:	1913      	adds	r3, r2, r4
 8003358:	b29b      	uxth	r3, r3
 800335a:	2900      	cmp	r1, #0
 800335c:	d1f4      	bne.n	8003348 <RI_GetRegCommandParser+0x558>
 800335e:	e5b6      	b.n	8002ece <RI_GetRegCommandParser+0xde>
 8003360:	2000      	movs	r0, #0
 8003362:	494e      	ldr	r1, [pc, #312]	; (800349c <RI_GetRegCommandParser+0x6ac>)
 8003364:	5608      	ldrsb	r0, [r1, r0]
 8003366:	2800      	cmp	r0, #0
 8003368:	d024      	beq.n	80033b4 <RI_GetRegCommandParser+0x5c4>
 800336a:	2c01      	cmp	r4, #1
 800336c:	dddb      	ble.n	8003326 <RI_GetRegCommandParser+0x536>
 800336e:	2301      	movs	r3, #1
 8003370:	1b9b      	subs	r3, r3, r6
 8003372:	46ac      	mov	ip, r5
 8003374:	0032      	movs	r2, r6
 8003376:	0025      	movs	r5, r4
 8003378:	001c      	movs	r4, r3
 800337a:	e001      	b.n	8003380 <RI_GetRegCommandParser+0x590>
 800337c:	42ab      	cmp	r3, r5
 800337e:	dad2      	bge.n	8003326 <RI_GetRegCommandParser+0x536>
    *tempdestString = *tempsrcString;
 8003380:	7010      	strb	r0, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003382:	2000      	movs	r0, #0
    tempsrcString++;
 8003384:	3101      	adds	r1, #1
    tempdestString++;
 8003386:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003388:	5608      	ldrsb	r0, [r1, r0]
 800338a:	1913      	adds	r3, r2, r4
 800338c:	b29b      	uxth	r3, r3
 800338e:	2800      	cmp	r0, #0
 8003390:	d1f4      	bne.n	800337c <RI_GetRegCommandParser+0x58c>
 8003392:	e59c      	b.n	8002ece <RI_GetRegCommandParser+0xde>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 8003394:	4842      	ldr	r0, [pc, #264]	; (80034a0 <RI_GetRegCommandParser+0x6b0>)
 8003396:	f002 f893 	bl	80054c0 <RUC_GetNumberOfPhases>
        if (freeSpace >= 2U)
 800339a:	b2a4      	uxth	r4, r4
              break;
 800339c:	2101      	movs	r1, #1
          *size = 1;
 800339e:	2301      	movs	r3, #1
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 80033a0:	7030      	strb	r0, [r6, #0]
              break;
 80033a2:	e59a      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80033a4:	4838      	ldr	r0, [pc, #224]	; (8003488 <RI_GetRegCommandParser+0x698>)
 80033a6:	f7fe fa3b 	bl	8001820 <MCI_GetControlMode>
        if (freeSpace >= 2U)
 80033aa:	b2a4      	uxth	r4, r4
              break;
 80033ac:	2101      	movs	r1, #1
          *size = 1;
 80033ae:	2301      	movs	r3, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80033b0:	7030      	strb	r0, [r6, #0]
              break;
 80033b2:	e592      	b.n	8002eda <RI_GetRegCommandParser+0xea>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033b4:	0032      	movs	r2, r6
 80033b6:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 80033b8:	2301      	movs	r3, #1
 80033ba:	e58b      	b.n	8002ed4 <RI_GetRegCommandParser+0xe4>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80033bc:	2328      	movs	r3, #40	; 0x28
 80033be:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80033c0:	2c29      	cmp	r4, #41	; 0x29
 80033c2:	d800      	bhi.n	80033c6 <RI_GetRegCommandParser+0x5d6>
 80033c4:	e55a      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
 80033c6:	4659      	mov	r1, fp
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	aa15      	add	r2, sp, #84	; 0x54
 80033cc:	9100      	str	r1, [sp, #0]
 80033ce:	4641      	mov	r1, r8
 80033d0:	46ab      	mov	fp, r5
 80033d2:	46b0      	mov	r8, r6
 80033d4:	46a1      	mov	r9, r4
 80033d6:	0005      	movs	r5, r0
 80033d8:	001c      	movs	r4, r3
 80033da:	0016      	movs	r6, r2
 80033dc:	9101      	str	r1, [sp, #4]
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80033de:	0032      	movs	r2, r6
 80033e0:	0021      	movs	r1, r4
 80033e2:	482f      	ldr	r0, [pc, #188]	; (80034a0 <RI_GetRegCommandParser+0x6b0>)
 80033e4:	f002 f870 	bl	80054c8 <RUC_GetPhase>
                rpm32 = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80033e8:	2302      	movs	r3, #2
 80033ea:	5ef2      	ldrsh	r2, [r6, r3]
 80033ec:	3401      	adds	r4, #1
 80033ee:	0053      	lsls	r3, r2, #1
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
                *rpm16p = (uint16_t)rpm32; /* 16 LSB access */ //cstat !MISRAC2012-Rule-11.3
 80033f4:	802b      	strh	r3, [r5, #0]
                *(rpm16p+1) = ((uint16_t)(rpm32 >> 16)); /* 16 MSB access */ //cstat !MISRAC2012-Rule-11.3
 80033f6:	141b      	asrs	r3, r3, #16
 80033f8:	806b      	strh	r3, [r5, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80033fa:	88b3      	ldrh	r3, [r6, #4]
 80033fc:	b2e4      	uxtb	r4, r4
 80033fe:	80ab      	strh	r3, [r5, #4]
                *durationms  = revUpPhase.hDurationms;
 8003400:	8833      	ldrh	r3, [r6, #0]
 8003402:	80eb      	strh	r3, [r5, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003404:	3508      	adds	r5, #8
 8003406:	2c05      	cmp	r4, #5
 8003408:	d1e9      	bne.n	80033de <RI_GetRegCommandParser+0x5ee>
        *size = (*rawSize) + 2U;
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	4646      	mov	r6, r8
 800340e:	4698      	mov	r8, r3
 8003410:	9b00      	ldr	r3, [sp, #0]
 8003412:	465d      	mov	r5, fp
 8003414:	464c      	mov	r4, r9
 8003416:	469b      	mov	fp, r3
 8003418:	e648      	b.n	80030ac <RI_GetRegCommandParser+0x2bc>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 800341a:	230e      	movs	r3, #14
 800341c:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 800341e:	2c0f      	cmp	r4, #15
 8003420:	dc00      	bgt.n	8003424 <RI_GetRegCommandParser+0x634>
 8003422:	e52b      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <RI_GetRegCommandParser+0x6b4>)
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	220e      	movs	r2, #14
 800342a:	f002 fdbb 	bl	8005fa4 <memcpy>
        if (freeSpace >= 2U)
 800342e:	b2a4      	uxth	r4, r4
 8003430:	2110      	movs	r1, #16
        *size = (*rawSize) + 2U;
 8003432:	2310      	movs	r3, #16
 8003434:	e551      	b.n	8002eda <RI_GetRegCommandParser+0xea>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003436:	4814      	ldr	r0, [pc, #80]	; (8003488 <RI_GetRegCommandParser+0x698>)
 8003438:	f7fe fa10 	bl	800185c <MCI_GetLastRampFinalSpeed>
 800343c:	0043      	lsls	r3, r0, #1
 800343e:	181b      	adds	r3, r3, r0
 8003440:	005b      	lsls	r3, r3, #1
            *rpm16p = (uint16_t) rpm32;
 8003442:	8073      	strh	r3, [r6, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 8003444:	141b      	asrs	r3, r3, #16
 8003446:	80b3      	strh	r3, [r6, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003448:	480f      	ldr	r0, [pc, #60]	; (8003488 <RI_GetRegCommandParser+0x698>)
 800344a:	f7fe fa0f 	bl	800186c <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800344e:	2306      	movs	r3, #6
        if (freeSpace >= 2U)
 8003450:	2108      	movs	r1, #8
            *rawSize = 6;
 8003452:	8033      	strh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003454:	80f0      	strh	r0, [r6, #6]
        if (freeSpace >= 2U)
 8003456:	b2a4      	uxth	r4, r4
        *size = (*rawSize) + 2U;
 8003458:	3302      	adds	r3, #2
 800345a:	e53e      	b.n	8002eda <RI_GetRegCommandParser+0xea>
 800345c:	200002a8 	.word	0x200002a8
 8003460:	000015d0 	.word	0x000015d0
 8003464:	00001610 	.word	0x00001610
 8003468:	2000046c 	.word	0x2000046c
 800346c:	000014d0 	.word	0x000014d0
 8003470:	00001510 	.word	0x00001510
 8003474:	00001550 	.word	0x00001550
 8003478:	20000468 	.word	0x20000468
 800347c:	00001450 	.word	0x00001450
 8003480:	00001490 	.word	0x00001490
 8003484:	20000138 	.word	0x20000138
 8003488:	20000534 	.word	0x20000534
 800348c:	20000000 	.word	0x20000000
 8003490:	00001b58 	.word	0x00001b58
 8003494:	20000464 	.word	0x20000464
 8003498:	20000484 	.word	0x20000484
 800349c:	08006140 	.word	0x08006140
 80034a0:	2000021c 	.word	0x2000021c
 80034a4:	20000478 	.word	0x20000478
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80034a8:	230a      	movs	r3, #10
 80034aa:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80034ac:	2c0b      	cmp	r4, #11
 80034ae:	d800      	bhi.n	80034b2 <RI_GetRegCommandParser+0x6c2>
 80034b0:	e4e4      	b.n	8002e7c <RI_GetRegCommandParser+0x8c>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80034b2:	4974      	ldr	r1, [pc, #464]	; (8003684 <RI_GetRegCommandParser+0x894>)
 80034b4:	220a      	movs	r2, #10
 80034b6:	f002 fd75 	bl	8005fa4 <memcpy>
        if (freeSpace >= 2U)
 80034ba:	b2a4      	uxth	r4, r4
 80034bc:	210c      	movs	r1, #12
        *size = (*rawSize) + 2U;
 80034be:	230c      	movs	r3, #12
 80034c0:	e50b      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80034c2:	4871      	ldr	r0, [pc, #452]	; (8003688 <RI_GetRegCommandParser+0x898>)
 80034c4:	f7fe f9da 	bl	800187c <MCI_GetAvrgMecSpeedUnit>
 80034c8:	e5a6      	b.n	8003018 <RI_GetRegCommandParser+0x228>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 80034ca:	4870      	ldr	r0, [pc, #448]	; (800368c <RI_GetRegCommandParser+0x89c>)
 80034cc:	f002 fc12 	bl	8005cf4 <STO_PLL_GetObservedBemfLevel>
 80034d0:	2104      	movs	r1, #4
          *size = 4;
 80034d2:	2304      	movs	r3, #4
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 80034d4:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80034d6:	e500      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80034d8:	486c      	ldr	r0, [pc, #432]	; (800368c <RI_GetRegCommandParser+0x89c>)
 80034da:	f002 fc07 	bl	8005cec <STO_PLL_GetEstimatedBemfLevel>
 80034de:	2104      	movs	r1, #4
          *size = 4;
 80034e0:	2304      	movs	r3, #4
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80034e2:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80034e4:	e4f9      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80034e6:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <RI_GetRegCommandParser+0x8a0>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80034e8:	223c      	movs	r2, #60	; 0x3c
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	f002 fd5a 	bl	8005fa4 <memcpy>
        if (freeSpace >= 2U)
 80034f0:	b2a4      	uxth	r4, r4
 80034f2:	213e      	movs	r1, #62	; 0x3e
        *size = (*rawSize) + 2U;
 80034f4:	233e      	movs	r3, #62	; 0x3e
 80034f6:	e4f0      	b.n	8002eda <RI_GetRegCommandParser+0xea>
  uint8_t retVal = MCP_CMD_NOK;
 80034f8:	2001      	movs	r0, #1
 80034fa:	e4a0      	b.n	8002e3e <RI_GetRegCommandParser+0x4e>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 80034fc:	4b65      	ldr	r3, [pc, #404]	; (8003694 <RI_GetRegCommandParser+0x8a4>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	f001 f982 	bl	8004808 <PID_GetKD>
              break;
 8003504:	2102      	movs	r1, #2
          *size = 2;
 8003506:	2302      	movs	r3, #2
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003508:	8030      	strh	r0, [r6, #0]
              break;
 800350a:	e4e6      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 800350c:	4862      	ldr	r0, [pc, #392]	; (8003698 <RI_GetRegCommandParser+0x8a8>)
 800350e:	f001 f97f 	bl	8004810 <PID_GetKDDivisorPOW2>
 8003512:	2102      	movs	r1, #2
          *size = 2;
 8003514:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003516:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8003518:	e4df      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800351a:	4b60      	ldr	r3, [pc, #384]	; (800369c <RI_GetRegCommandParser+0x8ac>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f001 f941 	bl	80047a4 <PID_GetKP>
              break;
 8003522:	2102      	movs	r1, #2
          *size = 2;
 8003524:	2302      	movs	r3, #2
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003526:	8030      	strh	r0, [r6, #0]
              break;
 8003528:	e4d7      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800352a:	4857      	ldr	r0, [pc, #348]	; (8003688 <RI_GetRegCommandParser+0x898>)
 800352c:	f7fe f9c4 	bl	80018b8 <MCI_GetIalphabeta>
 8003530:	9011      	str	r0, [sp, #68]	; 0x44
 8003532:	0c00      	lsrs	r0, r0, #16
              break;
 8003534:	2102      	movs	r1, #2
          *size = 2;
 8003536:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8003538:	8030      	strh	r0, [r6, #0]
              break;
 800353a:	e4ce      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800353c:	4852      	ldr	r0, [pc, #328]	; (8003688 <RI_GetRegCommandParser+0x898>)
 800353e:	f7fe f9fb 	bl	8001938 <MCI_GetValphabeta>
 8003542:	9009      	str	r0, [sp, #36]	; 0x24
 8003544:	0c00      	lsrs	r0, r0, #16
              break;
 8003546:	2102      	movs	r1, #2
          *size = 2;
 8003548:	2302      	movs	r3, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800354a:	8030      	strh	r0, [r6, #0]
              break;
 800354c:	e4c5      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetIab(pMCIN).a;
 800354e:	484e      	ldr	r0, [pc, #312]	; (8003688 <RI_GetRegCommandParser+0x898>)
 8003550:	f7fe f9a2 	bl	8001898 <MCI_GetIab>
              break;
 8003554:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003556:	9014      	str	r0, [sp, #80]	; 0x50
          *size = 2;
 8003558:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 800355a:	8030      	strh	r0, [r6, #0]
              break;
 800355c:	e4bd      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800355e:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <RI_GetRegCommandParser+0x8b0>)
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	f001 f903 	bl	800476c <NTC_GetAvTemp_C>
              break;
 8003566:	2102      	movs	r1, #2
          *size = 2;
 8003568:	2302      	movs	r3, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800356a:	8030      	strh	r0, [r6, #0]
              break;
 800356c:	e4b5      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <RI_GetRegCommandParser+0x8a4>)
 8003570:	e7d4      	b.n	800351c <RI_GetRegCommandParser+0x72c>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003572:	4849      	ldr	r0, [pc, #292]	; (8003698 <RI_GetRegCommandParser+0x8a8>)
 8003574:	f001 f948 	bl	8004808 <PID_GetKD>
              break;
 8003578:	2102      	movs	r1, #2
          *size = 2;
 800357a:	2302      	movs	r3, #2
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800357c:	8030      	strh	r0, [r6, #0]
              break;
 800357e:	e4ac      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003580:	4845      	ldr	r0, [pc, #276]	; (8003698 <RI_GetRegCommandParser+0x8a8>)
 8003582:	f001 f90f 	bl	80047a4 <PID_GetKP>
 8003586:	2102      	movs	r1, #2
          *size = 2;
 8003588:	2302      	movs	r3, #2
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 800358a:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800358c:	e4a5      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800358e:	483e      	ldr	r0, [pc, #248]	; (8003688 <RI_GetRegCommandParser+0x898>)
 8003590:	f7fe f9c2 	bl	8001918 <MCI_GetVqd>
              break;
 8003594:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003596:	900c      	str	r0, [sp, #48]	; 0x30
          *size = 2;
 8003598:	2302      	movs	r3, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800359a:	8030      	strh	r0, [r6, #0]
              break;
 800359c:	e49d      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800359e:	483a      	ldr	r0, [pc, #232]	; (8003688 <RI_GetRegCommandParser+0x898>)
 80035a0:	f7fe f9aa 	bl	80018f8 <MCI_GetIqdref>
 80035a4:	900d      	str	r0, [sp, #52]	; 0x34
 80035a6:	0c00      	lsrs	r0, r0, #16
              break;
 80035a8:	2102      	movs	r1, #2
          *size = 2;
 80035aa:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80035ac:	8030      	strh	r0, [r6, #0]
              break;
 80035ae:	e494      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80035b0:	4b3a      	ldr	r3, [pc, #232]	; (800369c <RI_GetRegCommandParser+0x8ac>)
 80035b2:	e7a4      	b.n	80034fe <RI_GetRegCommandParser+0x70e>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <RI_GetRegCommandParser+0x8ac>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	f001 f8fe 	bl	80047b8 <PID_GetKPDivisorPOW2>
 80035bc:	2102      	movs	r1, #2
          *size = 2;
 80035be:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 80035c0:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80035c2:	e48a      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80035c4:	a902      	add	r1, sp, #8
 80035c6:	468c      	mov	ip, r1
 80035c8:	2302      	movs	r3, #2
 80035ca:	4463      	add	r3, ip
 80035cc:	4699      	mov	r9, r3
 80035ce:	0019      	movs	r1, r3
 80035d0:	aa15      	add	r2, sp, #84	; 0x54
 80035d2:	e4f7      	b.n	8002fc4 <RI_GetRegCommandParser+0x1d4>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80035d4:	4830      	ldr	r0, [pc, #192]	; (8003698 <RI_GetRegCommandParser+0x8a8>)
 80035d6:	f001 f8ef 	bl	80047b8 <PID_GetKPDivisorPOW2>
 80035da:	2102      	movs	r1, #2
          *size = 2;
 80035dc:	2302      	movs	r3, #2
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80035de:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80035e0:	e47b      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <RI_GetRegCommandParser+0x8ac>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	f001 f913 	bl	8004810 <PID_GetKDDivisorPOW2>
 80035ea:	2102      	movs	r1, #2
          *size = 2;
 80035ec:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80035ee:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80035f0:	e473      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80035f2:	4825      	ldr	r0, [pc, #148]	; (8003688 <RI_GetRegCommandParser+0x898>)
 80035f4:	f7fe f9a0 	bl	8001938 <MCI_GetValphabeta>
              break;
 80035f8:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80035fa:	900a      	str	r0, [sp, #40]	; 0x28
          *size = 2;
 80035fc:	2302      	movs	r3, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80035fe:	8030      	strh	r0, [r6, #0]
              break;
 8003600:	e46b      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003602:	4822      	ldr	r0, [pc, #136]	; (800368c <RI_GetRegCommandParser+0x89c>)
 8003604:	f002 fb4a 	bl	8005c9c <STO_PLL_GetEstimatedCurrent>
              break;
 8003608:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800360a:	9008      	str	r0, [sp, #32]
          *size = 2;
 800360c:	2302      	movs	r3, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800360e:	8030      	strh	r0, [r6, #0]
              break;
 8003610:	e463      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003612:	4824      	ldr	r0, [pc, #144]	; (80036a4 <RI_GetRegCommandParser+0x8b4>)
 8003614:	f001 f8c6 	bl	80047a4 <PID_GetKP>
 8003618:	2102      	movs	r1, #2
          *size = 2;
 800361a:	2302      	movs	r3, #2
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 800361c:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800361e:	e45c      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003620:	481a      	ldr	r0, [pc, #104]	; (800368c <RI_GetRegCommandParser+0x89c>)
 8003622:	f001 ff9b 	bl	800555c <SPD_GetS16Speed>
              break;
 8003626:	2102      	movs	r1, #2
          *size = 2;
 8003628:	2302      	movs	r3, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 800362a:	8030      	strh	r0, [r6, #0]
              break;
 800362c:	e455      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800362e:	4816      	ldr	r0, [pc, #88]	; (8003688 <RI_GetRegCommandParser+0x898>)
 8003630:	f7fe f952 	bl	80018d8 <MCI_GetIqd>
 8003634:	900f      	str	r0, [sp, #60]	; 0x3c
 8003636:	0c00      	lsrs	r0, r0, #16
              break;
 8003638:	2102      	movs	r1, #2
          *size = 2;
 800363a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800363c:	8030      	strh	r0, [r6, #0]
              break;
 800363e:	e44c      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003640:	4811      	ldr	r0, [pc, #68]	; (8003688 <RI_GetRegCommandParser+0x898>)
 8003642:	f7fe f939 	bl	80018b8 <MCI_GetIalphabeta>
              break;
 8003646:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003648:	9012      	str	r0, [sp, #72]	; 0x48
          *size = 2;
 800364a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800364c:	8030      	strh	r0, [r6, #0]
              break;
 800364e:	e444      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003650:	4814      	ldr	r0, [pc, #80]	; (80036a4 <RI_GetRegCommandParser+0x8b4>)
 8003652:	f001 f8ab 	bl	80047ac <PID_GetKI>
 8003656:	2102      	movs	r1, #2
          *size = 2;
 8003658:	2302      	movs	r3, #2
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 800365a:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800365c:	e43d      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 800365e:	4811      	ldr	r0, [pc, #68]	; (80036a4 <RI_GetRegCommandParser+0x8b4>)
 8003660:	f001 f8b4 	bl	80047cc <PID_GetKIDivisorPOW2>
 8003664:	2102      	movs	r1, #2
          *size = 2;
 8003666:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003668:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800366a:	e436      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <RI_GetRegCommandParser+0x8a4>)
 800366e:	e7a2      	b.n	80035b6 <RI_GetRegCommandParser+0x7c6>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003670:	4806      	ldr	r0, [pc, #24]	; (800368c <RI_GetRegCommandParser+0x89c>)
 8003672:	f002 fb09 	bl	8005c88 <STO_PLL_GetEstimatedBemf>
              break;
 8003676:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003678:	9006      	str	r0, [sp, #24]
          *size = 2;
 800367a:	2302      	movs	r3, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800367c:	8030      	strh	r0, [r6, #0]
              break;
 800367e:	e42c      	b.n	8002eda <RI_GetRegCommandParser+0xea>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <RI_GetRegCommandParser+0x8a4>)
 8003682:	e7af      	b.n	80035e4 <RI_GetRegCommandParser+0x7f4>
 8003684:	080061c0 	.word	0x080061c0
 8003688:	20000534 	.word	0x20000534
 800368c:	200002a8 	.word	0x200002a8
 8003690:	20000480 	.word	0x20000480
 8003694:	2000046c 	.word	0x2000046c
 8003698:	20000138 	.word	0x20000138
 800369c:	20000468 	.word	0x20000468
 80036a0:	20000474 	.word	0x20000474
 80036a4:	200002dc 	.word	0x200002dc

080036a8 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 80036a8:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036aa:	4d48      	ldr	r5, [pc, #288]	; (80037cc <RCM_RegisterRegConv+0x124>)
{
 80036ac:	0003      	movs	r3, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d026      	beq.n	8003702 <RCM_RegisterRegConv+0x5a>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036b4:	7902      	ldrb	r2, [r0, #4]
 80036b6:	7908      	ldrb	r0, [r1, #4]
 80036b8:	4282      	cmp	r2, r0
 80036ba:	d016      	beq.n	80036ea <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036bc:	6869      	ldr	r1, [r5, #4]
 80036be:	2900      	cmp	r1, #0
 80036c0:	d055      	beq.n	800376e <RCM_RegisterRegConv+0xc6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036c2:	790c      	ldrb	r4, [r1, #4]
  uint8_t handle = 255U;
 80036c4:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036c6:	4294      	cmp	r4, r2
 80036c8:	d023      	beq.n	8003712 <RCM_RegisterRegConv+0x6a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036ca:	68a9      	ldr	r1, [r5, #8]
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d064      	beq.n	800379a <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036d0:	790c      	ldrb	r4, [r1, #4]
 80036d2:	4294      	cmp	r4, r2
 80036d4:	d053      	beq.n	800377e <RCM_RegisterRegConv+0xd6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036d6:	68e9      	ldr	r1, [r5, #12]
 80036d8:	2900      	cmp	r1, #0
 80036da:	d020      	beq.n	800371e <RCM_RegisterRegConv+0x76>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036dc:	790c      	ldrb	r4, [r1, #4]
 80036de:	4294      	cmp	r4, r2
 80036e0:	d064      	beq.n	80037ac <RCM_RegisterRegConv+0x104>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80036e2:	2803      	cmp	r0, #3
 80036e4:	d91e      	bls.n	8003724 <RCM_RegisterRegConv+0x7c>
 80036e6:	20ff      	movs	r0, #255	; 0xff
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	681c      	ldr	r4, [r3, #0]
 80036ee:	42a1      	cmp	r1, r4
 80036f0:	d04b      	beq.n	800378a <RCM_RegisterRegConv+0xe2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036f2:	6869      	ldr	r1, [r5, #4]
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d1e4      	bne.n	80036c2 <RCM_RegisterRegConv+0x1a>
 80036f8:	68a9      	ldr	r1, [r5, #8]
 80036fa:	2900      	cmp	r1, #0
 80036fc:	d05e      	beq.n	80037bc <RCM_RegisterRegConv+0x114>
      i++;
 80036fe:	2001      	movs	r0, #1
 8003700:	e7e6      	b.n	80036d0 <RCM_RegisterRegConv+0x28>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003702:	6869      	ldr	r1, [r5, #4]
    uint8_t i = 0;
 8003704:	2000      	movs	r0, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003706:	2900      	cmp	r1, #0
 8003708:	d032      	beq.n	8003770 <RCM_RegisterRegConv+0xc8>
 800370a:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800370c:	790c      	ldrb	r4, [r1, #4]
 800370e:	4294      	cmp	r4, r2
 8003710:	d1db      	bne.n	80036ca <RCM_RegisterRegConv+0x22>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003712:	6809      	ldr	r1, [r1, #0]
 8003714:	681c      	ldr	r4, [r3, #0]
 8003716:	42a1      	cmp	r1, r4
 8003718:	d1d7      	bne.n	80036ca <RCM_RegisterRegConv+0x22>
      i++;
 800371a:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 800371c:	e003      	b.n	8003726 <RCM_RegisterRegConv+0x7e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800371e:	2804      	cmp	r0, #4
 8003720:	d900      	bls.n	8003724 <RCM_RegisterRegConv+0x7c>
      i++;
 8003722:	2003      	movs	r0, #3
 8003724:	681c      	ldr	r4, [r3, #0]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003726:	2100      	movs	r1, #0
      RCM_handle_array [handle] = regConv;
 8003728:	0082      	lsls	r2, r0, #2
 800372a:	50ab      	str	r3, [r5, r2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <RCM_RegisterRegConv+0x128>)
 800372e:	00c3      	lsls	r3, r0, #3
 8003730:	5099      	str	r1, [r3, r2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003732:	68a3      	ldr	r3, [r4, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003734:	07db      	lsls	r3, r3, #31
 8003736:	d40f      	bmi.n	8003758 <RCM_RegisterRegConv+0xb0>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003738:	68a3      	ldr	r3, [r4, #8]
 800373a:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <RCM_RegisterRegConv+0x12c>)
 800373c:	401a      	ands	r2, r3
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	4313      	orrs	r3, r2
 8003744:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003746:	68a3      	ldr	r3, [r4, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8003748:	2b00      	cmp	r3, #0
 800374a:	dbfc      	blt.n	8003746 <RCM_RegisterRegConv+0x9e>
  MODIFY_REG(ADCx->CR,
 800374c:	68a3      	ldr	r3, [r4, #8]
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <RCM_RegisterRegConv+0x12c>)
 8003750:	4013      	ands	r3, r2
 8003752:	2201      	movs	r2, #1
 8003754:	4313      	orrs	r3, r2
 8003756:	60a3      	str	r3, [r4, #8]
      RCM_NoInj_array[handle].enable = false;
 8003758:	2100      	movs	r1, #0
 800375a:	0043      	lsls	r3, r0, #1
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <RCM_RegisterRegConv+0x130>)
 800375e:	181b      	adds	r3, r3, r0
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	5499      	strb	r1, [r3, r2]
      RCM_NoInj_array[handle].prev = handle;
 8003764:	18d3      	adds	r3, r2, r3
 8003766:	0202      	lsls	r2, r0, #8
 8003768:	4302      	orrs	r2, r0
 800376a:	809a      	strh	r2, [r3, #4]
 800376c:	e7bc      	b.n	80036e8 <RCM_RegisterRegConv+0x40>
      i++;
 800376e:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003770:	68a9      	ldr	r1, [r5, #8]
 8003772:	2900      	cmp	r1, #0
 8003774:	d00c      	beq.n	8003790 <RCM_RegisterRegConv+0xe8>
 8003776:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003778:	790c      	ldrb	r4, [r1, #4]
 800377a:	4294      	cmp	r4, r2
 800377c:	d1ab      	bne.n	80036d6 <RCM_RegisterRegConv+0x2e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800377e:	6809      	ldr	r1, [r1, #0]
 8003780:	681c      	ldr	r4, [r3, #0]
 8003782:	42a1      	cmp	r1, r4
 8003784:	d1a7      	bne.n	80036d6 <RCM_RegisterRegConv+0x2e>
      i++;
 8003786:	2002      	movs	r0, #2
 8003788:	e7cd      	b.n	8003726 <RCM_RegisterRegConv+0x7e>
    uint8_t i = 0;
 800378a:	2000      	movs	r0, #0
 800378c:	e7cb      	b.n	8003726 <RCM_RegisterRegConv+0x7e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800378e:	2000      	movs	r0, #0
 8003790:	68e9      	ldr	r1, [r5, #12]
 8003792:	2900      	cmp	r1, #0
 8003794:	d0c6      	beq.n	8003724 <RCM_RegisterRegConv+0x7c>
 8003796:	791a      	ldrb	r2, [r3, #4]
 8003798:	e7a0      	b.n	80036dc <RCM_RegisterRegConv+0x34>
 800379a:	2804      	cmp	r0, #4
 800379c:	d9f7      	bls.n	800378e <RCM_RegisterRegConv+0xe6>
 800379e:	68e9      	ldr	r1, [r5, #12]
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d009      	beq.n	80037b8 <RCM_RegisterRegConv+0x110>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037a4:	7908      	ldrb	r0, [r1, #4]
 80037a6:	4290      	cmp	r0, r2
 80037a8:	d106      	bne.n	80037b8 <RCM_RegisterRegConv+0x110>
      i++;
 80037aa:	2002      	movs	r0, #2
 80037ac:	681c      	ldr	r4, [r3, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80037ae:	680a      	ldr	r2, [r1, #0]
 80037b0:	42a2      	cmp	r2, r4
 80037b2:	d196      	bne.n	80036e2 <RCM_RegisterRegConv+0x3a>
      i++;
 80037b4:	2003      	movs	r0, #3
 80037b6:	e7b6      	b.n	8003726 <RCM_RegisterRegConv+0x7e>
 80037b8:	2002      	movs	r0, #2
 80037ba:	e7b3      	b.n	8003724 <RCM_RegisterRegConv+0x7c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80037bc:	68e9      	ldr	r1, [r5, #12]
 80037be:	2900      	cmp	r1, #0
 80037c0:	d0ab      	beq.n	800371a <RCM_RegisterRegConv+0x72>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037c2:	790e      	ldrb	r6, [r1, #4]
      i++;
 80037c4:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037c6:	4296      	cmp	r6, r2
 80037c8:	d0f1      	beq.n	80037ae <RCM_RegisterRegConv+0x106>
 80037ca:	e7ac      	b.n	8003726 <RCM_RegisterRegConv+0x7e>
 80037cc:	200006f8 	.word	0x200006f8
 80037d0:	200006b8 	.word	0x200006b8
 80037d4:	7fffffe8 	.word	0x7fffffe8
 80037d8:	200006d8 	.word	0x200006d8

080037dc <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 80037dc:	0041      	lsls	r1, r0, #1
 80037de:	4b59      	ldr	r3, [pc, #356]	; (8003944 <RCM_ExecRegularConv+0x168>)
 80037e0:	180a      	adds	r2, r1, r0
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	5c9a      	ldrb	r2, [r3, r2]
{
 80037e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (false == RCM_NoInj_array [handle].enable)
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d142      	bne.n	8003872 <RCM_ExecRegularConv+0x96>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d11c      	bne.n	800382c <RCM_ExecRegularConv+0x50>
  uint8_t LastEnable = RCM_MAX_CONV;
 80037f2:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 80037f4:	799a      	ldrb	r2, [r3, #6]
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d100      	bne.n	80037fc <RCM_ExecRegularConv+0x20>
 80037fa:	e07a      	b.n	80038f2 <RCM_ExecRegularConv+0x116>
      {
        if (RCM_NoInj_array[i].next > handle)
 80037fc:	7adf      	ldrb	r7, [r3, #11]
 80037fe:	42b8      	cmp	r0, r7
 8003800:	d200      	bcs.n	8003804 <RCM_ExecRegularConv+0x28>
 8003802:	e092      	b.n	800392a <RCM_ExecRegularConv+0x14e>
      if (true == RCM_NoInj_array [i].enable)
 8003804:	7b1a      	ldrb	r2, [r3, #12]
 8003806:	2a00      	cmp	r2, #0
 8003808:	d100      	bne.n	800380c <RCM_ExecRegularConv+0x30>
 800380a:	e091      	b.n	8003930 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array[i].next > handle)
 800380c:	7c5f      	ldrb	r7, [r3, #17]
 800380e:	42b8      	cmp	r0, r7
 8003810:	d200      	bcs.n	8003814 <RCM_ExecRegularConv+0x38>
 8003812:	e092      	b.n	800393a <RCM_ExecRegularConv+0x15e>
      if (true == RCM_NoInj_array [i].enable)
 8003814:	7c9a      	ldrb	r2, [r3, #18]
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8003816:	2502      	movs	r5, #2
      if (true == RCM_NoInj_array [i].enable)
 8003818:	2a00      	cmp	r2, #0
 800381a:	d100      	bne.n	800381e <RCM_ExecRegularConv+0x42>
 800381c:	e073      	b.n	8003906 <RCM_ExecRegularConv+0x12a>
        if (RCM_NoInj_array[i].next > handle)
 800381e:	7ddf      	ldrb	r7, [r3, #23]
 8003820:	4287      	cmp	r7, r0
 8003822:	d800      	bhi.n	8003826 <RCM_ExecRegularConv+0x4a>
 8003824:	e08c      	b.n	8003940 <RCM_ExecRegularConv+0x164>
      i++;
 8003826:	2203      	movs	r2, #3
      if (true == RCM_NoInj_array [i].enable)
 8003828:	2603      	movs	r6, #3
 800382a:	e005      	b.n	8003838 <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array[i].next > handle)
 800382c:	795f      	ldrb	r7, [r3, #5]
  uint8_t i=0;
 800382e:	2500      	movs	r5, #0
        if (RCM_NoInj_array[i].next > handle)
 8003830:	4287      	cmp	r7, r0
 8003832:	d9df      	bls.n	80037f4 <RCM_ExecRegularConv+0x18>
  uint8_t i=0;
 8003834:	2200      	movs	r2, #0
      if (true == RCM_NoInj_array [i].enable)
 8003836:	2600      	movs	r6, #0
          RCM_NoInj_array[handle].next = formerNext;
 8003838:	180d      	adds	r5, r1, r0
          RCM_NoInj_array[i].next = handle;
 800383a:	0074      	lsls	r4, r6, #1
          RCM_NoInj_array[handle].next = formerNext;
 800383c:	006d      	lsls	r5, r5, #1
          RCM_NoInj_array[i].next = handle;
 800383e:	19a4      	adds	r4, r4, r6
          RCM_NoInj_array[handle].next = formerNext;
 8003840:	195d      	adds	r5, r3, r5
          RCM_NoInj_array[i].next = handle;
 8003842:	0064      	lsls	r4, r4, #1
          RCM_NoInj_array[handle].prev = i;
 8003844:	712a      	strb	r2, [r5, #4]
          RCM_NoInj_array[i].next = handle;
 8003846:	191c      	adds	r4, r3, r4
          RCM_NoInj_array[formerNext].prev = handle;
 8003848:	007a      	lsls	r2, r7, #1
          RCM_NoInj_array[handle].next = formerNext;
 800384a:	716f      	strb	r7, [r5, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 800384c:	19d2      	adds	r2, r2, r7
          RCM_NoInj_array[i].next = handle;
 800384e:	7160      	strb	r0, [r4, #5]
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8003850:	0052      	lsls	r2, r2, #1
 8003852:	189a      	adds	r2, r3, r2
 8003854:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003856:	4a3c      	ldr	r2, [pc, #240]	; (8003948 <RCM_ExecRegularConv+0x16c>)
 8003858:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array[handle].enable = true;
 800385a:	2601      	movs	r6, #1
 800385c:	180c      	adds	r4, r1, r0
 800385e:	0064      	lsls	r4, r4, #1
 8003860:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003862:	006c      	lsls	r4, r5, #1
 8003864:	1964      	adds	r4, r4, r5
 8003866:	0064      	lsls	r4, r4, #1
 8003868:	191c      	adds	r4, r3, r4
 800386a:	7864      	ldrb	r4, [r4, #1]
 800386c:	2c01      	cmp	r4, #1
 800386e:	d000      	beq.n	8003872 <RCM_ExecRegularConv+0x96>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8003870:	7010      	strb	r0, [r2, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003872:	228b      	movs	r2, #139	; 0x8b
 8003874:	4c35      	ldr	r4, [pc, #212]	; (800394c <RCM_ExecRegularConv+0x170>)
 8003876:	5ca2      	ldrb	r2, [r4, r2]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d135      	bne.n	80038e8 <RCM_ExecRegularConv+0x10c>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800387c:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 800387e:	4e34      	ldr	r6, [pc, #208]	; (8003950 <RCM_ExecRegularConv+0x174>)
 8003880:	0082      	lsls	r2, r0, #2
 8003882:	58b5      	ldr	r5, [r6, r2]
 8003884:	682a      	ldr	r2, [r5, #0]
 8003886:	68d4      	ldr	r4, [r2, #12]
 8003888:	43bc      	bics	r4, r7
 800388a:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800388c:	68d4      	ldr	r4, [r2, #12]
 800388e:	4f31      	ldr	r7, [pc, #196]	; (8003954 <RCM_ExecRegularConv+0x178>)
 8003890:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003892:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003894:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003896:	6954      	ldr	r4, [r2, #20]
 8003898:	43bc      	bics	r4, r7
 800389a:	68af      	ldr	r7, [r5, #8]
 800389c:	433c      	orrs	r4, r7
 800389e:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038a0:	2480      	movs	r4, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80038a2:	792d      	ldrb	r5, [r5, #4]
 80038a4:	01a4      	lsls	r4, r4, #6
 80038a6:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80038a8:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038aa:	0b64      	lsrs	r4, r4, #13
 80038ac:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80038ae:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80038b0:	6894      	ldr	r4, [r2, #8]
 80038b2:	4f29      	ldr	r7, [pc, #164]	; (8003958 <RCM_ExecRegularConv+0x17c>)
 80038b4:	403c      	ands	r4, r7
 80038b6:	432c      	orrs	r4, r5
 80038b8:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80038ba:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 80038bc:	4225      	tst	r5, r4
 80038be:	d0fc      	beq.n	80038ba <RCM_ExecRegularConv+0xde>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80038c0:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80038c2:	6c14      	ldr	r4, [r2, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80038c4:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80038c6:	4d20      	ldr	r5, [pc, #128]	; (8003948 <RCM_ExecRegularConv+0x16c>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 80038c8:	0052      	lsls	r2, r2, #1
 80038ca:	189a      	adds	r2, r3, r2
 80038cc:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 80038ce:	782c      	ldrb	r4, [r5, #0]
 80038d0:	00a4      	lsls	r4, r4, #2
 80038d2:	5934      	ldr	r4, [r6, r4]
 80038d4:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80038d6:	68f4      	ldr	r4, [r6, #12]
 80038d8:	43bc      	bics	r4, r7
 80038da:	3f02      	subs	r7, #2
 80038dc:	433c      	orrs	r4, r7
 80038de:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80038e0:	7954      	ldrb	r4, [r2, #5]
 80038e2:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 80038e4:	2402      	movs	r4, #2
 80038e6:	7054      	strb	r4, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80038e8:	1808      	adds	r0, r1, r0
 80038ea:	0040      	lsls	r0, r0, #1
 80038ec:	181b      	adds	r3, r3, r0
  return retVal;
 80038ee:	8858      	ldrh	r0, [r3, #2]
}
 80038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (true == RCM_NoInj_array [i].enable)
 80038f2:	7b1a      	ldrb	r2, [r3, #12]
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d000      	beq.n	80038fa <RCM_ExecRegularConv+0x11e>
 80038f8:	e788      	b.n	800380c <RCM_ExecRegularConv+0x30>
 80038fa:	7c9a      	ldrb	r2, [r3, #18]
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d000      	beq.n	8003902 <RCM_ExecRegularConv+0x126>
 8003900:	e78d      	b.n	800381e <RCM_ExecRegularConv+0x42>
       if (LastEnable != RCM_MAX_CONV )
 8003902:	2d04      	cmp	r5, #4
 8003904:	d00d      	beq.n	8003922 <RCM_ExecRegularConv+0x146>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003906:	006a      	lsls	r2, r5, #1
 8003908:	1952      	adds	r2, r2, r5
 800390a:	0052      	lsls	r2, r2, #1
 800390c:	189a      	adds	r2, r3, r2
         RCM_NoInj_array[handle].next = formerNext;
 800390e:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003910:	7956      	ldrb	r6, [r2, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003912:	0064      	lsls	r4, r4, #1
 8003914:	191c      	adds	r4, r3, r4
 8003916:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 8003918:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800391a:	0072      	lsls	r2, r6, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 800391c:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 800391e:	1992      	adds	r2, r2, r6
 8003920:	e796      	b.n	8003850 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <RCM_ExecRegularConv+0x16c>)
 8003924:	0005      	movs	r5, r0
 8003926:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 8003928:	e797      	b.n	800385a <RCM_ExecRegularConv+0x7e>
      i++;
 800392a:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 800392c:	2601      	movs	r6, #1
 800392e:	e783      	b.n	8003838 <RCM_ExecRegularConv+0x5c>
 8003930:	7c9a      	ldrb	r2, [r3, #18]
      i++;
 8003932:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 8003934:	2a00      	cmp	r2, #0
 8003936:	d0e6      	beq.n	8003906 <RCM_ExecRegularConv+0x12a>
 8003938:	e771      	b.n	800381e <RCM_ExecRegularConv+0x42>
      i++;
 800393a:	2202      	movs	r2, #2
      if (true == RCM_NoInj_array [i].enable)
 800393c:	2602      	movs	r6, #2
 800393e:	e77b      	b.n	8003838 <RCM_ExecRegularConv+0x5c>
      i++;
 8003940:	2503      	movs	r5, #3
 8003942:	e7e0      	b.n	8003906 <RCM_ExecRegularConv+0x12a>
 8003944:	200006d8 	.word	0x200006d8
 8003948:	200006f4 	.word	0x200006f4
 800394c:	20000174 	.word	0x20000174
 8003950:	200006f8 	.word	0x200006f8
 8003954:	fffff23f 	.word	0xfffff23f
 8003958:	7fffffe8 	.word	0x7fffffe8

0800395c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 800395c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800395e:	4c11      	ldr	r4, [pc, #68]	; (80039a4 <RCM_ExecUserConv+0x48>)
 8003960:	7823      	ldrb	r3, [r4, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d000      	beq.n	8003968 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003966:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <RCM_ExecUserConv+0x4c>)
 800396a:	781d      	ldrb	r5, [r3, #0]
 800396c:	0028      	movs	r0, r5
 800396e:	f7ff ff35 	bl	80037dc <RCM_ExecRegularConv>
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <RCM_ExecUserConv+0x50>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003976:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003978:	006b      	lsls	r3, r5, #1
 800397a:	195b      	adds	r3, r3, r5
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003982:	0001      	movs	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003988:	2302      	movs	r3, #2
 800398a:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <RCM_ExecUserConv+0x58>)
 800398e:	00ea      	lsls	r2, r5, #3
 8003990:	58d6      	ldr	r6, [r2, r3]
 8003992:	2e00      	cmp	r6, #0
 8003994:	d0e7      	beq.n	8003966 <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003996:	2000      	movs	r0, #0
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003998:	189b      	adds	r3, r3, r2
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800399a:	7020      	strb	r0, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	0028      	movs	r0, r5
 80039a0:	47b0      	blx	r6
}
 80039a2:	e7e0      	b.n	8003966 <RCM_ExecUserConv+0xa>
 80039a4:	200006f1 	.word	0x200006f1
 80039a8:	200006f0 	.word	0x200006f0
 80039ac:	200006f2 	.word	0x200006f2
 80039b0:	200006d8 	.word	0x200006d8
 80039b4:	200006b8 	.word	0x200006b8

080039b8 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 80039b8:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <RCM_ExecNextConv+0x5c>)
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <RCM_ExecNextConv+0x60>)
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	0053      	lsls	r3, r2, #1
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	5c58      	ldrb	r0, [r3, r1]
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d021      	beq.n	8003a10 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80039cc:	2604      	movs	r6, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80039ce:	2403      	movs	r4, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80039d0:	4812      	ldr	r0, [pc, #72]	; (8003a1c <RCM_ExecNextConv+0x64>)
 80039d2:	0092      	lsls	r2, r2, #2
 80039d4:	5815      	ldr	r5, [r2, r0]
                                         RCM_handle_array[RCM_currentHandle]->samplingTime);
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80039d6:	18cb      	adds	r3, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80039d8:	682a      	ldr	r2, [r5, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80039da:	6016      	str	r6, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80039dc:	68d0      	ldr	r0, [r2, #12]
 80039de:	43a0      	bics	r0, r4
 80039e0:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80039e2:	68d0      	ldr	r0, [r2, #12]
 80039e4:	4c0e      	ldr	r4, [pc, #56]	; (8003a20 <RCM_ExecNextConv+0x68>)
 80039e6:	4020      	ands	r0, r4
 80039e8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80039ea:	2007      	movs	r0, #7
 80039ec:	6954      	ldr	r4, [r2, #20]
 80039ee:	4384      	bics	r4, r0
 80039f0:	68a8      	ldr	r0, [r5, #8]
 80039f2:	4304      	orrs	r4, r0
 80039f4:	6154      	str	r4, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80039f6:	7928      	ldrb	r0, [r5, #4]
 80039f8:	2501      	movs	r5, #1
 80039fa:	002c      	movs	r4, r5
 80039fc:	4084      	lsls	r4, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039fe:	0364      	lsls	r4, r4, #13
 8003a00:	0b64      	lsrs	r4, r4, #13
 8003a02:	6294      	str	r4, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8003a04:	6890      	ldr	r0, [r2, #8]
 8003a06:	4c07      	ldr	r4, [pc, #28]	; (8003a24 <RCM_ExecNextConv+0x6c>)
 8003a08:	4020      	ands	r0, r4
 8003a0a:	4330      	orrs	r0, r6
 8003a0c:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003a0e:	705d      	strb	r5, [r3, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	200006f4 	.word	0x200006f4
 8003a18:	200006d8 	.word	0x200006d8
 8003a1c:	200006f8 	.word	0x200006f8
 8003a20:	fffff23f 	.word	0xfffff23f
 8003a24:	7fffffe8 	.word	0x7fffffe8

08003a28 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003a2a:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a2c:	4d11      	ldr	r5, [pc, #68]	; (8003a74 <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a30:	7828      	ldrb	r0, [r5, #0]
 8003a32:	4912      	ldr	r1, [pc, #72]	; (8003a7c <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a34:	0082      	lsls	r2, r0, #2
 8003a36:	58d3      	ldr	r3, [r2, r3]
 8003a38:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003a3a:	6833      	ldr	r3, [r6, #0]
 8003a3c:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003a3e:	0043      	lsls	r3, r0, #1
 8003a40:	181a      	adds	r2, r3, r0
 8003a42:	0052      	lsls	r2, r2, #1
 8003a44:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003a46:	7854      	ldrb	r4, [r2, #1]
 8003a48:	43bc      	bics	r4, r7
 8003a4a:	d002      	beq.n	8003a52 <RCM_ReadOngoingConv+0x2a>
 8003a4c:	4664      	mov	r4, ip
 8003a4e:	0764      	lsls	r4, r4, #29
 8003a50:	d405      	bmi.n	8003a5e <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a52:	181b      	adds	r3, r3, r0
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	18cb      	adds	r3, r1, r3
 8003a58:	795b      	ldrb	r3, [r3, #5]
 8003a5a:	702b      	strb	r3, [r5, #0]
}
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003a5e:	6c34      	ldr	r4, [r6, #64]	; 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003a60:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8003a62:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003a64:	2403      	movs	r4, #3
 8003a66:	68f2      	ldr	r2, [r6, #12]
 8003a68:	43a2      	bics	r2, r4
 8003a6a:	3c02      	subs	r4, #2
 8003a6c:	4322      	orrs	r2, r4
 8003a6e:	60f2      	str	r2, [r6, #12]
}
 8003a70:	e7ef      	b.n	8003a52 <RCM_ReadOngoingConv+0x2a>
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	200006f4 	.word	0x200006f4
 8003a78:	200006f8 	.word	0x200006f8
 8003a7c:	200006d8 	.word	0x200006d8

08003a80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a80:	2201      	movs	r2, #1
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_MspInit+0x2c>)
{
 8003a84:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	6999      	ldr	r1, [r3, #24]
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	6199      	str	r1, [r3, #24]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	0549      	lsls	r1, r1, #21
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa6:	b002      	add	sp, #8
 8003aa8:	4770      	bx	lr
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000

08003ab0 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8003ab0:	2207      	movs	r2, #7
{
 8003ab2:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8003ab4:	4b02      	ldr	r3, [pc, #8]	; (8003ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8003ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8003ab8:	f7fe faf6 	bl	80020a8 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	40020000 	.word	0x40020000

08003ac4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8003ac4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8003ac6:	258c      	movs	r5, #140	; 0x8c
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4c0f      	ldr	r4, [pc, #60]	; (8003b08 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8003acc:	5963      	ldr	r3, [r4, r5]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	420a      	tst	r2, r1
 8003ad4:	d002      	beq.n	8003adc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003ad6:	68d9      	ldr	r1, [r3, #12]
 8003ad8:	420a      	tst	r2, r1
 8003ada:	d10d      	bne.n	8003af8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	6919      	ldr	r1, [r3, #16]
 8003ae0:	420a      	tst	r2, r1
 8003ae2:	d008      	beq.n	8003af6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	420a      	tst	r2, r1
 8003ae8:	d005      	beq.n	8003af6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003aea:	3a02      	subs	r2, #2
 8003aec:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
   F0XX_BRK_IRQHandler(&PWM_Handle_M1);
 8003aee:	0020      	movs	r0, r4
 8003af0:	611a      	str	r2, [r3, #16]
 8003af2:	f001 fae5 	bl	80050c0 <F0XX_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003af8:	3a03      	subs	r2, #3
 8003afa:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8003afc:	0020      	movs	r0, r4
 8003afe:	f001 fa9f 	bl	8005040 <R3_1_TIMx_UP_IRQHandler>
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003b02:	5963      	ldr	r3, [r4, r5]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	e7e9      	b.n	8003adc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
 8003b08:	20000174 	.word	0x20000174

08003b0c <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <DMA1_Channel4_5_IRQHandler+0x10>)
 8003b10:	0292      	lsls	r2, r2, #10
 8003b12:	6819      	ldr	r1, [r3, #0]
void DMAx_R1_M1_IRQHandler(void)
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8003b14:	4211      	tst	r1, r2
 8003b16:	d000      	beq.n	8003b1a <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003b18:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8003b1a:	4770      	bx	lr
 8003b1c:	40020000 	.word	0x40020000

08003b20 <DMA1_Channel2_3_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8003b20:	2280      	movs	r2, #128	; 0x80
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <DMA1_Channel2_3_IRQHandler+0x18>)
 8003b24:	0092      	lsls	r2, r2, #2
 8003b26:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4211      	tst	r1, r2
 8003b2c:	d003      	beq.n	8003b36 <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003b2e:	4803      	ldr	r0, [pc, #12]	; (8003b3c <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	f7fd f929 	bl	8000d88 <ASPEP_HWDataReceivedIT>
  }
}
 8003b36:	bd10      	pop	{r4, pc}
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	200004ac 	.word	0x200004ac

08003b40 <USART1_IRQHandler>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003b40:	2240      	movs	r2, #64	; 0x40
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <USART1_IRQHandler+0x94>)

void USART1_IRQHandler(void)
{
 8003b44:	b510      	push	{r4, lr}
 8003b46:	69d9      	ldr	r1, [r3, #28]
 8003b48:	420a      	tst	r2, r1
 8003b4a:	d008      	beq.n	8003b5e <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003b4c:	2401      	movs	r4, #1
 8003b4e:	4822      	ldr	r0, [pc, #136]	; (8003bd8 <USART1_IRQHandler+0x98>)
 8003b50:	6801      	ldr	r1, [r0, #0]
 8003b52:	43a1      	bics	r1, r4
 8003b54:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003b56:	4821      	ldr	r0, [pc, #132]	; (8003bdc <USART1_IRQHandler+0x9c>)
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003b58:	621a      	str	r2, [r3, #32]
 8003b5a:	f7fc ff5d 	bl	8000a18 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <USART1_IRQHandler+0x94>)
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	420a      	tst	r2, r1
 8003b66:	d00b      	beq.n	8003b80 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003b68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	3a07      	subs	r2, #7
 8003b70:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003b74:	2010      	movs	r0, #16
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4302      	orrs	r2, r0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003b80:	2210      	movs	r2, #16
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <USART1_IRQHandler+0x94>)
 8003b84:	69d9      	ldr	r1, [r3, #28]
 8003b86:	420a      	tst	r2, r1
 8003b88:	d023      	beq.n	8003bd2 <USART1_IRQHandler+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	420a      	tst	r2, r1
 8003b8e:	d020      	beq.n	8003bd2 <USART1_IRQHandler+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	2101      	movs	r1, #1
 8003b96:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4390      	bics	r0, r2
 8003b9e:	6018      	str	r0, [r3, #0]
 8003ba0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba8:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003bac:	2440      	movs	r4, #64	; 0x40
 8003bae:	6898      	ldr	r0, [r3, #8]
 8003bb0:	43a0      	bics	r0, r4
 8003bb2:	6098      	str	r0, [r3, #8]
 8003bb4:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003bb8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4322      	orrs	r2, r4
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	f380 8810 	msr	PRIMASK, r0
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <USART1_IRQHandler+0x9c>)
 8003bce:	f7fd f929 	bl	8000e24 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8003bd2:	bd10      	pop	{r4, pc}
 8003bd4:	40013800 	.word	0x40013800
 8003bd8:	4002001c 	.word	0x4002001c
 8003bdc:	200004ac 	.word	0x200004ac

08003be0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003be0:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003be2:	f7fe fb91 	bl	8002308 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003be6:	e7fe      	b.n	8003be6 <HardFault_Handler+0x6>

08003be8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003be8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003bea:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <SysTick_Handler+0x38>)
 8003bec:	7823      	ldrb	r3, [r4, #0]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d00f      	beq.n	8003c12 <SysTick_Handler+0x2a>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	7023      	strb	r3, [r4, #0]
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <SysTick_Handler+0x3c>)
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	4211      	tst	r1, r2
 8003c02:	d003      	beq.n	8003c0c <SysTick_Handler+0x24>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8003c04:	4808      	ldr	r0, [pc, #32]	; (8003c28 <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	f7fd f8be 	bl	8000d88 <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8003c0c:	f7fe fb6e 	bl	80022ec <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003c10:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8003c12:	f000 f8dd 	bl	8003dd0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003c16:	f000 f935 	bl	8003e84 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e7eb      	b.n	8003bf6 <SysTick_Handler+0xe>
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	20000508 	.word	0x20000508
 8003c24:	40020000 	.word	0x40020000
 8003c28:	200004ac 	.word	0x200004ac

08003c2c <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 8003c30:	b510      	push	{r4, lr}
 8003c32:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8003c34:	420a      	tst	r2, r1
 8003c36:	d100      	bne.n	8003c3a <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 8003c38:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003c3a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003c3c:	f7fe fb74 	bl	8002328 <UI_HandleStartStopButton_cb>
}
 8003c40:	e7fa      	b.n	8003c38 <EXTI0_1_IRQHandler+0xc>
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	40010400 	.word	0x40010400

08003c48 <UASPEP_INIT>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c48:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003c4a:	6803      	ldr	r3, [r0, #0]
{
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c50:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	2101      	movs	r1, #1
 8003c56:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003c5a:	681c      	ldr	r4, [r3, #0]
 8003c5c:	4314      	orrs	r4, r2
 8003c5e:	601c      	str	r4, [r3, #0]
 8003c60:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8003c64:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c66:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003c6e:	2680      	movs	r6, #128	; 0x80
 8003c70:	68a3      	ldr	r3, [r4, #8]
 8003c72:	4333      	orrs	r3, r6
 8003c74:	60a3      	str	r3, [r4, #8]
 8003c76:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003c7a:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003c7c:	6887      	ldr	r7, [r0, #8]
 8003c7e:	002e      	movs	r6, r5
 8003c80:	46bc      	mov	ip, r7
 8003c82:	6904      	ldr	r4, [r0, #16]
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <UASPEP_INIT+0x8c>)
 8003c86:	3628      	adds	r6, #40	; 0x28
 8003c88:	191c      	adds	r4, r3, r4
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	7824      	ldrb	r4, [r4, #0]
 8003c8e:	4464      	add	r4, ip
 8003c90:	60a6      	str	r6, [r4, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003c92:	622a      	str	r2, [r5, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c94:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c9c:	68ac      	ldr	r4, [r5, #8]
 8003c9e:	430c      	orrs	r4, r1
 8003ca0:	60ac      	str	r4, [r5, #8]
 8003ca2:	f386 8810 	msr	PRIMASK, r6
 8003ca6:	68c6      	ldr	r6, [r0, #12]
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003ca8:	6804      	ldr	r4, [r0, #0]
 8003caa:	46b4      	mov	ip, r6
 8003cac:	0025      	movs	r5, r4
 8003cae:	4463      	add	r3, ip
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	781e      	ldrb	r6, [r3, #0]
 8003cb4:	6843      	ldr	r3, [r0, #4]
 8003cb6:	3524      	adds	r5, #36	; 0x24
 8003cb8:	199b      	adds	r3, r3, r6
 8003cba:	609d      	str	r5, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003cbc:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cbe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003cc6:	68a3      	ldr	r3, [r4, #8]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	60a2      	str	r2, [r4, #8]
 8003ccc:	f380 8810 	msr	PRIMASK, r0
}
 8003cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	080065a0 	.word	0x080065a0

08003cd8 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003cd8:	b530      	push	{r4, r5, lr}
 8003cda:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003cdc:	6902      	ldr	r2, [r0, #16]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003cde:	2501      	movs	r5, #1
 8003ce0:	4694      	mov	ip, r2
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <UASPEP_SEND_PACKET+0x34>)
 8003ce4:	4463      	add	r3, ip
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 8003cec:	2000      	movs	r0, #0
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003cf2:	4215      	tst	r5, r2
 8003cf4:	d109      	bne.n	8003d0a <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003cf6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003cf8:	6859      	ldr	r1, [r3, #4]
    result = true;
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	0c09      	lsrs	r1, r1, #16
 8003cfe:	040a      	lsls	r2, r1, #16
 8003d00:	4322      	orrs	r2, r4
 8003d02:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4315      	orrs	r5, r2
 8003d08:	601d      	str	r5, [r3, #0]
  }
  return result;
}
 8003d0a:	bd30      	pop	{r4, r5, pc}
 8003d0c:	080065a0 	.word	0x080065a0

08003d10 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003d10:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003d12:	68c4      	ldr	r4, [r0, #12]
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <UASPEP_RECEIVE_BUFFER+0x30>)
 8003d16:	46a4      	mov	ip, r4
 8003d18:	4463      	add	r3, ip
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	781c      	ldrb	r4, [r3, #0]
 8003d1e:	6843      	ldr	r3, [r0, #4]
 8003d20:	191b      	adds	r3, r3, r4
 8003d22:	2401      	movs	r4, #1
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	43a0      	bics	r0, r4
 8003d28:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003d2a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	0c09      	lsrs	r1, r1, #16
 8003d30:	0409      	lsls	r1, r1, #16
 8003d32:	4311      	orrs	r1, r2
 8003d34:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4322      	orrs	r2, r4
 8003d3a:	601a      	str	r2, [r3, #0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	080065a0 	.word	0x080065a0

08003d44 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003d44:	2110      	movs	r1, #16

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003d46:	6803      	ldr	r3, [r0, #0]
 8003d48:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003d5e:	4770      	bx	lr

08003d60 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003d60:	4770      	bx	lr
 8003d62:	46c0      	nop			; (mov r8, r8)

08003d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d68:	20fa      	movs	r0, #250	; 0xfa
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_InitTick+0x40>)
 8003d6c:	0080      	lsls	r0, r0, #2
 8003d6e:	7819      	ldrb	r1, [r3, #0]
 8003d70:	f7fc f9ca 	bl	8000108 <__udivsi3>
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_InitTick+0x44>)
 8003d76:	0001      	movs	r1, r0
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f7fc f9c5 	bl	8000108 <__udivsi3>
 8003d7e:	f000 f865 	bl	8003e4c <HAL_SYSTICK_Config>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d10c      	bne.n	8003da0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003d86:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d88:	2c03      	cmp	r4, #3
 8003d8a:	d900      	bls.n	8003d8e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8003d8c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8e:	3802      	subs	r0, #2
 8003d90:	2200      	movs	r2, #0
 8003d92:	0021      	movs	r1, r4
 8003d94:	f000 f828 	bl	8003de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_InitTick+0x48>)
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003d9e:	e7f5      	b.n	8003d8c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
 8003da2:	e7f3      	b.n	8003d8c <HAL_InitTick+0x28>
 8003da4:	20000510 	.word	0x20000510
 8003da8:	2000050c 	.word	0x2000050c
 8003dac:	20000514 	.word	0x20000514

08003db0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db0:	2110      	movs	r1, #16
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <HAL_Init+0x1c>)
{
 8003db4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003db8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dbe:	f7ff ffd1 	bl	8003d64 <HAL_InitTick>
  HAL_MspInit();
 8003dc2:	f7ff fe5d 	bl	8003a80 <HAL_MspInit>
}
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	40022000 	.word	0x40022000

08003dd0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <HAL_IncTick+0x10>)
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_IncTick+0x14>)
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	185b      	adds	r3, r3, r1
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	4770      	bx	lr
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000708 	.word	0x20000708
 8003de4:	20000510 	.word	0x20000510

08003de8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8003dea:	2800      	cmp	r0, #0
 8003dec:	db14      	blt.n	8003e18 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_NVIC_SetPriority+0x5c>)
 8003df0:	2203      	movs	r2, #3
 8003df2:	469c      	mov	ip, r3
 8003df4:	23ff      	movs	r3, #255	; 0xff
 8003df6:	0884      	lsrs	r4, r0, #2
 8003df8:	4010      	ands	r0, r2
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	26c0      	movs	r6, #192	; 0xc0
 8003dfe:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e00:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e02:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e04:	400b      	ands	r3, r1
 8003e06:	4083      	lsls	r3, r0
 8003e08:	00a4      	lsls	r4, r4, #2
 8003e0a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e0c:	00b6      	lsls	r6, r6, #2
 8003e0e:	59a5      	ldr	r5, [r4, r6]
 8003e10:	4395      	bics	r5, r2
 8003e12:	432b      	orrs	r3, r5
 8003e14:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <HAL_NVIC_SetPriority+0x60>)
 8003e1a:	230f      	movs	r3, #15
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	2203      	movs	r2, #3
 8003e20:	4003      	ands	r3, r0
 8003e22:	4010      	ands	r0, r2
 8003e24:	32fc      	adds	r2, #252	; 0xfc
 8003e26:	0015      	movs	r5, r2
 8003e28:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e2a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e2c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e2e:	400a      	ands	r2, r1
 8003e30:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e32:	3b08      	subs	r3, #8
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4463      	add	r3, ip
 8003e3a:	69dc      	ldr	r4, [r3, #28]
 8003e3c:	43ac      	bics	r4, r5
 8003e3e:	4322      	orrs	r2, r4
 8003e40:	61da      	str	r2, [r3, #28]
 8003e42:	e7e8      	b.n	8003e16 <HAL_NVIC_SetPriority+0x2e>
 8003e44:	e000e100 	.word	0xe000e100
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	1e43      	subs	r3, r0, #1
 8003e50:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e52:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d20e      	bcs.n	8003e76 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e58:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5a:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e60:	6a03      	ldr	r3, [r0, #32]
 8003e62:	0609      	lsls	r1, r1, #24
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e6e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e70:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	3307      	adds	r3, #7
 8003e74:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e76:	4770      	bx	lr
 8003e78:	e000e010 	.word	0xe000e010
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e80:	4770      	bx	lr
 8003e82:	46c0      	nop			; (mov r8, r8)

08003e84 <HAL_SYSTICK_IRQHandler>:
{
 8003e84:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003e86:	f7ff fffb 	bl	8003e80 <HAL_SYSTICK_Callback>
}
 8003e8a:	bd10      	pop	{r4, pc}

08003e8c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x8>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
}
 8003e90:	4770      	bx	lr
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	2000050c 	.word	0x2000050c

08003e98 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003e98:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	b510      	push	{r4, lr}
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003e9e:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003ea0:	07d2      	lsls	r2, r2, #31
 8003ea2:	d410      	bmi.n	8003ec6 <LL_ADC_Init+0x2e>
    MODIFY_REG(ADCx->CFGR1,
 8003ea4:	688c      	ldr	r4, [r1, #8]
 8003ea6:	684a      	ldr	r2, [r1, #4]
 8003ea8:	68d8      	ldr	r0, [r3, #12]
 8003eaa:	4322      	orrs	r2, r4
 8003eac:	68cc      	ldr	r4, [r1, #12]
    MODIFY_REG(ADCx->CFGR2,
 8003eae:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 8003eb0:	4322      	orrs	r2, r4
 8003eb2:	4c05      	ldr	r4, [pc, #20]	; (8003ec8 <LL_ADC_Init+0x30>)
 8003eb4:	4020      	ands	r0, r4
 8003eb6:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 8003eb8:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 8003eba:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2,
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	0892      	lsrs	r2, r2, #2
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	611a      	str	r2, [r3, #16]
  }
  return status;
}
 8003ec6:	bd10      	pop	{r4, pc}
 8003ec8:	ffff3fc7 	.word	0xffff3fc7

08003ecc <LL_ADC_REG_Init>:
 8003ecc:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003ece:	0002      	movs	r2, r0
 8003ed0:	b510      	push	{r4, lr}

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003ed2:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003ed4:	07db      	lsls	r3, r3, #31
 8003ed6:	d40e      	bmi.n	8003ef6 <LL_ADC_REG_Init+0x2a>
    MODIFY_REG(ADCx->CFGR1,
 8003ed8:	684c      	ldr	r4, [r1, #4]
 8003eda:	680b      	ldr	r3, [r1, #0]
 8003edc:	68d0      	ldr	r0, [r2, #12]
 8003ede:	4323      	orrs	r3, r4
 8003ee0:	688c      	ldr	r4, [r1, #8]
 8003ee2:	4323      	orrs	r3, r4
 8003ee4:	68cc      	ldr	r4, [r1, #12]
 8003ee6:	6909      	ldr	r1, [r1, #16]
 8003ee8:	4323      	orrs	r3, r4
 8003eea:	430b      	orrs	r3, r1
 8003eec:	4902      	ldr	r1, [pc, #8]	; (8003ef8 <LL_ADC_REG_Init+0x2c>)
 8003eee:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8003ef0:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	60d3      	str	r3, [r2, #12]
  }
  return status;
}
 8003ef6:	bd10      	pop	{r4, pc}
 8003ef8:	fffec23c 	.word	0xfffec23c

08003efc <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003efc:	7902      	ldrb	r2, [r0, #4]
{
 8003efe:	0003      	movs	r3, r0
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	d015      	beq.n	8003f30 <LL_EXTI_Init+0x34>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d011      	beq.n	8003f2e <LL_EXTI_Init+0x32>
    {
      switch (EXTI_InitStruct->Mode)
 8003f0a:	795a      	ldrb	r2, [r3, #5]
 8003f0c:	2a01      	cmp	r2, #1
 8003f0e:	d037      	beq.n	8003f80 <LL_EXTI_Init+0x84>
 8003f10:	2a02      	cmp	r2, #2
 8003f12:	d029      	beq.n	8003f68 <LL_EXTI_Init+0x6c>
 8003f14:	2101      	movs	r1, #1
 8003f16:	2a00      	cmp	r2, #0
 8003f18:	d01d      	beq.n	8003f56 <LL_EXTI_Init+0x5a>
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003f1a:	799b      	ldrb	r3, [r3, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d018      	beq.n	8003f52 <LL_EXTI_Init+0x56>
      {
        switch (EXTI_InitStruct->Trigger)
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d00f      	beq.n	8003f44 <LL_EXTI_Init+0x48>
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d038      	beq.n	8003f9a <LL_EXTI_Init+0x9e>
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d02d      	beq.n	8003f88 <LL_EXTI_Init+0x8c>
 8003f2c:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8003f2e:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003f30:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f32:	6800      	ldr	r0, [r0, #0]
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	4381      	bics	r1, r0
 8003f38:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003f3a:	6853      	ldr	r3, [r2, #4]
 8003f3c:	4383      	bics	r3, r0
 8003f3e:	6053      	str	r3, [r2, #4]
}
 8003f40:	2000      	movs	r0, #0
 8003f42:	e7f4      	b.n	8003f2e <LL_EXTI_Init+0x32>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4382      	bics	r2, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003f4a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	4310      	orrs	r0, r2
 8003f50:	60d8      	str	r0, [r3, #12]
}
 8003f52:	0008      	movs	r0, r1
 8003f54:	e7eb      	b.n	8003f2e <LL_EXTI_Init+0x32>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003f56:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f58:	6851      	ldr	r1, [r2, #4]
 8003f5a:	4381      	bics	r1, r0
 8003f5c:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003f5e:	6811      	ldr	r1, [r2, #0]
 8003f60:	4301      	orrs	r1, r0
 8003f62:	6011      	str	r1, [r2, #0]
}
 8003f64:	2100      	movs	r1, #0
 8003f66:	e7d8      	b.n	8003f1a <LL_EXTI_Init+0x1e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8003f68:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f6a:	6811      	ldr	r1, [r2, #0]
 8003f6c:	4301      	orrs	r1, r0
 8003f6e:	6011      	str	r1, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003f70:	6851      	ldr	r1, [r2, #4]
 8003f72:	4301      	orrs	r1, r0
 8003f74:	6051      	str	r1, [r2, #4]
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003f76:	799b      	ldrb	r3, [r3, #6]
}
 8003f78:	2100      	movs	r1, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0e9      	beq.n	8003f52 <LL_EXTI_Init+0x56>
 8003f7e:	e7cf      	b.n	8003f20 <LL_EXTI_Init+0x24>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f82:	6811      	ldr	r1, [r2, #0]
 8003f84:	4381      	bics	r1, r0
 8003f86:	e7f2      	b.n	8003f6e <LL_EXTI_Init+0x72>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	4382      	bics	r2, r0
 8003f8e:	60da      	str	r2, [r3, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	4310      	orrs	r0, r2
 8003f94:	6098      	str	r0, [r3, #8]
}
 8003f96:	0008      	movs	r0, r1
 8003f98:	e7c9      	b.n	8003f2e <LL_EXTI_Init+0x32>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003f9a:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <LL_EXTI_Init+0xa8>)
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	e7d3      	b.n	8003f4a <LL_EXTI_Init+0x4e>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003faa:	680c      	ldr	r4, [r1, #0]
{
 8003fac:	46de      	mov	lr, fp
 8003fae:	4657      	mov	r7, sl
 8003fb0:	464e      	mov	r6, r9
 8003fb2:	4645      	mov	r5, r8
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003fb4:	43e2      	mvns	r2, r4
  pinpos = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4693      	mov	fp, r2
{
 8003fba:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003fbc:	2c00      	cmp	r4, #0
 8003fbe:	d11a      	bne.n	8003ff6 <LL_GPIO_Init+0x4e>
 8003fc0:	e055      	b.n	800406e <LL_GPIO_Init+0xc6>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003fc2:	68c2      	ldr	r2, [r0, #12]
 8003fc4:	4692      	mov	sl, r2
 8003fc6:	002a      	movs	r2, r5
 8003fc8:	436a      	muls	r2, r5
 8003fca:	0057      	lsls	r7, r2, #1
 8003fcc:	18bf      	adds	r7, r7, r2
 8003fce:	43fd      	mvns	r5, r7
 8003fd0:	4656      	mov	r6, sl
 8003fd2:	46a8      	mov	r8, r5
 8003fd4:	690d      	ldr	r5, [r1, #16]
 8003fd6:	43be      	bics	r6, r7
 8003fd8:	4355      	muls	r5, r2
 8003fda:	4335      	orrs	r5, r6
 8003fdc:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003fde:	4647      	mov	r7, r8
 8003fe0:	6805      	ldr	r5, [r0, #0]
 8003fe2:	402f      	ands	r7, r5
 8003fe4:	003d      	movs	r5, r7
 8003fe6:	4667      	mov	r7, ip
 8003fe8:	437a      	muls	r2, r7
 8003fea:	432a      	orrs	r2, r5
 8003fec:	6002      	str	r2, [r0, #0]
 8003fee:	0022      	movs	r2, r4
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8003ff0:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003ff2:	40da      	lsrs	r2, r3
 8003ff4:	d03b      	beq.n	800406e <LL_GPIO_Init+0xc6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	0025      	movs	r5, r4
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	4015      	ands	r5, r2
    if (currentpin != 0x00u)
 8003ffe:	4214      	tst	r4, r2
 8004000:	d0f5      	beq.n	8003fee <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004002:	684a      	ldr	r2, [r1, #4]
 8004004:	4694      	mov	ip, r2
 8004006:	3a01      	subs	r2, #1
 8004008:	2a01      	cmp	r2, #1
 800400a:	d8da      	bhi.n	8003fc2 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800400c:	002a      	movs	r2, r5
 800400e:	436a      	muls	r2, r5
 8004010:	0056      	lsls	r6, r2, #1
 8004012:	46b1      	mov	r9, r6
 8004014:	4491      	add	r9, r2
 8004016:	464e      	mov	r6, r9
 8004018:	43f6      	mvns	r6, r6
 800401a:	46b0      	mov	r8, r6
 800401c:	688e      	ldr	r6, [r1, #8]
 800401e:	6887      	ldr	r7, [r0, #8]
 8004020:	4356      	muls	r6, r2
 8004022:	46b2      	mov	sl, r6
 8004024:	464e      	mov	r6, r9
 8004026:	43b7      	bics	r7, r6
 8004028:	4656      	mov	r6, sl
 800402a:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800402c:	465e      	mov	r6, fp
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800402e:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004030:	6847      	ldr	r7, [r0, #4]
 8004032:	403e      	ands	r6, r7
 8004034:	68cf      	ldr	r7, [r1, #12]
 8004036:	4367      	muls	r7, r4
 8004038:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800403a:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800403c:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800403e:	4356      	muls	r6, r2
 8004040:	46b2      	mov	sl, r6
 8004042:	464e      	mov	r6, r9
 8004044:	68c7      	ldr	r7, [r0, #12]
 8004046:	43b7      	bics	r7, r6
 8004048:	4656      	mov	r6, sl
 800404a:	4337      	orrs	r7, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800404c:	4666      	mov	r6, ip
 800404e:	60c7      	str	r7, [r0, #12]
 8004050:	2e02      	cmp	r6, #2
 8004052:	d1c4      	bne.n	8003fde <LL_GPIO_Init+0x36>
        if (currentpin < LL_GPIO_PIN_8)
 8004054:	2dff      	cmp	r5, #255	; 0xff
 8004056:	d811      	bhi.n	800407c <LL_GPIO_Init+0xd4>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004058:	0017      	movs	r7, r2
 800405a:	4357      	muls	r7, r2
 800405c:	6a05      	ldr	r5, [r0, #32]
 800405e:	013e      	lsls	r6, r7, #4
 8004060:	1bf6      	subs	r6, r6, r7
 8004062:	43b5      	bics	r5, r6
 8004064:	694e      	ldr	r6, [r1, #20]
 8004066:	4377      	muls	r7, r6
 8004068:	433d      	orrs	r5, r7
 800406a:	6205      	str	r5, [r0, #32]
}
 800406c:	e7b7      	b.n	8003fde <LL_GPIO_Init+0x36>
  }

  return (SUCCESS);
}
 800406e:	2000      	movs	r0, #0
 8004070:	bcf0      	pop	{r4, r5, r6, r7}
 8004072:	46bb      	mov	fp, r7
 8004074:	46b2      	mov	sl, r6
 8004076:	46a9      	mov	r9, r5
 8004078:	46a0      	mov	r8, r4
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800407c:	0a2d      	lsrs	r5, r5, #8
 800407e:	436d      	muls	r5, r5
 8004080:	436d      	muls	r5, r5
 8004082:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004084:	012e      	lsls	r6, r5, #4
 8004086:	1b76      	subs	r6, r6, r5
 8004088:	43b7      	bics	r7, r6
 800408a:	694e      	ldr	r6, [r1, #20]
 800408c:	4375      	muls	r5, r6
 800408e:	433d      	orrs	r5, r7
 8004090:	6245      	str	r5, [r0, #36]	; 0x24
}
 8004092:	e7a4      	b.n	8003fde <LL_GPIO_Init+0x36>

08004094 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004094:	0003      	movs	r3, r0
 8004096:	b570      	push	{r4, r5, r6, lr}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004098:	2000      	movs	r0, #0

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800409a:	2b00      	cmp	r3, #0
 800409c:	d133      	bne.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800409e:	4a31      	ldr	r2, [pc, #196]	; (8004164 <LL_RCC_GetUSARTClockFreq+0xd0>)
 80040a0:	3303      	adds	r3, #3
 80040a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040a4:	400b      	ands	r3, r1
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d052      	beq.n	8004150 <LL_RCC_GetUSARTClockFreq+0xbc>
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d048      	beq.n	8004140 <LL_RCC_GetUSARTClockFreq+0xac>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040ae:	6851      	ldr	r1, [r2, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d029      	beq.n	8004108 <LL_RCC_GetUSARTClockFreq+0x74>
 80040b4:	230c      	movs	r3, #12
 80040b6:	400b      	ands	r3, r1
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d151      	bne.n	8004160 <LL_RCC_GetUSARTClockFreq+0xcc>
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	6850      	ldr	r0, [r2, #4]
 80040c0:	025b      	lsls	r3, r3, #9
 80040c2:	4018      	ands	r0, r3
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80040c4:	4243      	negs	r3, r0
 80040c6:	4158      	adcs	r0, r3
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <LL_RCC_GetUSARTClockFreq+0xd4>)
 80040ca:	4240      	negs	r0, r0
 80040cc:	4018      	ands	r0, r3
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <LL_RCC_GetUSARTClockFreq+0xd8>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80040d0:	240f      	movs	r4, #15
 80040d2:	469c      	mov	ip, r3
 80040d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040d6:	4460      	add	r0, ip
 80040d8:	4021      	ands	r1, r4
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80040da:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80040dc:	6855      	ldr	r5, [r2, #4]
 80040de:	f7fc f813 	bl	8000108 <__udivsi3>
 80040e2:	0003      	movs	r3, r0
 80040e4:	0cad      	lsrs	r5, r5, #18
 80040e6:	402c      	ands	r4, r5
 80040e8:	1ca0      	adds	r0, r4, #2
 80040ea:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <LL_RCC_GetUSARTClockFreq+0xd0>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040ee:	4920      	ldr	r1, [pc, #128]	; (8004170 <LL_RCC_GetUSARTClockFreq+0xdc>)
 80040f0:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0612      	lsls	r2, r2, #24
 80040f6:	0f12      	lsrs	r2, r2, #28
 80040f8:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040fa:	055b      	lsls	r3, r3, #21
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040fc:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <LL_RCC_GetUSARTClockFreq+0xe0>)
 8004100:	0f5b      	lsrs	r3, r3, #29
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	40d8      	lsrs	r0, r3
}
 8004106:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004108:	330b      	adds	r3, #11
 800410a:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 800410c:	2b08      	cmp	r3, #8
 800410e:	d11d      	bne.n	800414c <LL_RCC_GetUSARTClockFreq+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	6850      	ldr	r0, [r2, #4]
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	4018      	ands	r0, r3
      pllinputfreq = HSE_VALUE;
 8004118:	4243      	negs	r3, r0
 800411a:	4158      	adcs	r0, r3
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <LL_RCC_GetUSARTClockFreq+0xd4>)
 800411e:	4240      	negs	r0, r0
 8004120:	4018      	ands	r0, r3
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <LL_RCC_GetUSARTClockFreq+0xd8>)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8004124:	240f      	movs	r4, #15
 8004126:	469c      	mov	ip, r3
 8004128:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800412a:	4460      	add	r0, ip
 800412c:	4021      	ands	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800412e:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004130:	6855      	ldr	r5, [r2, #4]
 8004132:	f7fb ffe9 	bl	8000108 <__udivsi3>
 8004136:	0cad      	lsrs	r5, r5, #18
 8004138:	402c      	ands	r4, r5
 800413a:	3402      	adds	r4, #2
 800413c:	4360      	muls	r0, r4
  return frequency;
 800413e:	e7e2      	b.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	2202      	movs	r2, #2
 8004144:	0010      	movs	r0, r2
 8004146:	4018      	ands	r0, r3
        if (LL_RCC_HSI_IsReady())
 8004148:	421a      	tst	r2, r3
 800414a:	d0dc      	beq.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
          usart_frequency = HSI_VALUE;
 800414c:	4807      	ldr	r0, [pc, #28]	; (800416c <LL_RCC_GetUSARTClockFreq+0xd8>)
  return usart_frequency;
 800414e:	e7da      	b.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004150:	0018      	movs	r0, r3
 8004152:	6a12      	ldr	r2, [r2, #32]
 8004154:	4010      	ands	r0, r2
        if (LL_RCC_LSE_IsReady())
 8004156:	4213      	tst	r3, r2
 8004158:	d0d5      	beq.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
          usart_frequency = LSE_VALUE;
 800415a:	2080      	movs	r0, #128	; 0x80
 800415c:	0200      	lsls	r0, r0, #8
 800415e:	e7d2      	b.n	8004106 <LL_RCC_GetUSARTClockFreq+0x72>
      frequency = HSI_VALUE;
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <LL_RCC_GetUSARTClockFreq+0xd8>)
 8004162:	e7c3      	b.n	80040ec <LL_RCC_GetUSARTClockFreq+0x58>
 8004164:	40021000 	.word	0x40021000
 8004168:	ffc2f700 	.word	0xffc2f700
 800416c:	007a1200 	.word	0x007a1200
 8004170:	080065a8 	.word	0x080065a8
 8004174:	080065b8 	.word	0x080065b8

08004178 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <LL_TIM_Init+0x70>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800417a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	4290      	cmp	r0, r2
 800417e:	d02e      	beq.n	80041de <LL_TIM_Init+0x66>
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	05d2      	lsls	r2, r2, #23
 8004184:	4290      	cmp	r0, r2
 8004186:	d017      	beq.n	80041b8 <LL_TIM_Init+0x40>
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <LL_TIM_Init+0x74>)
 800418a:	4290      	cmp	r0, r2
 800418c:	d014      	beq.n	80041b8 <LL_TIM_Init+0x40>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <LL_TIM_Init+0x78>)
 8004190:	4290      	cmp	r0, r2
 8004192:	d015      	beq.n	80041c0 <LL_TIM_Init+0x48>
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <LL_TIM_Init+0x7c>)
 8004196:	4290      	cmp	r0, r2
 8004198:	d002      	beq.n	80041a0 <LL_TIM_Init+0x28>
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <LL_TIM_Init+0x80>)
 800419c:	4290      	cmp	r0, r2
 800419e:	d113      	bne.n	80041c8 <LL_TIM_Init+0x50>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <LL_TIM_Init+0x84>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ca      	ldr	r2, [r1, #12]
 80041a6:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041a8:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80041aa:	688b      	ldr	r3, [r1, #8]
 80041ac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041ae:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80041b0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80041b2:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80041b4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80041b6:	e00c      	b.n	80041d2 <LL_TIM_Init+0x5a>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041b8:	2270      	movs	r2, #112	; 0x70
 80041ba:	4393      	bics	r3, r2
 80041bc:	684a      	ldr	r2, [r1, #4]
 80041be:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041c0:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <LL_TIM_Init+0x84>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	68ca      	ldr	r2, [r1, #12]
 80041c6:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041c8:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80041ca:	688b      	ldr	r3, [r1, #8]
 80041cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041ce:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80041d0:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80041d2:	2201      	movs	r2, #1
 80041d4:	6943      	ldr	r3, [r0, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80041da:	2000      	movs	r0, #0
 80041dc:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041de:	2270      	movs	r2, #112	; 0x70
 80041e0:	4393      	bics	r3, r2
 80041e2:	684a      	ldr	r2, [r1, #4]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	e7db      	b.n	80041a0 <LL_TIM_Init+0x28>
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40002000 	.word	0x40002000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800
 80041fc:	fffffcff 	.word	0xfffffcff

08004200 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8004200:	2380      	movs	r3, #128	; 0x80
{
 8004202:	b570      	push	{r4, r5, r6, lr}
  switch (Channel)
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4299      	cmp	r1, r3
 8004208:	d100      	bne.n	800420c <LL_TIM_OC_Init+0xc>
 800420a:	e07b      	b.n	8004304 <LL_TIM_OC_Init+0x104>
 800420c:	d82b      	bhi.n	8004266 <LL_TIM_OC_Init+0x66>
 800420e:	2901      	cmp	r1, #1
 8004210:	d057      	beq.n	80042c2 <LL_TIM_OC_Init+0xc2>
 8004212:	2910      	cmp	r1, #16
 8004214:	d153      	bne.n	80042be <LL_TIM_OC_Init+0xbe>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004216:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004218:	4d6f      	ldr	r5, [pc, #444]	; (80043d8 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800421a:	438b      	bics	r3, r1
 800421c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800421e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004220:	6846      	ldr	r6, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004222:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004224:	402c      	ands	r4, r5
 8004226:	6815      	ldr	r5, [r2, #0]
 8004228:	022d      	lsls	r5, r5, #8
 800422a:	432c      	orrs	r4, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800422c:	2520      	movs	r5, #32
 800422e:	43ab      	bics	r3, r5
 8004230:	001d      	movs	r5, r3
 8004232:	6913      	ldr	r3, [r2, #16]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004238:	438b      	bics	r3, r1
 800423a:	6851      	ldr	r1, [r2, #4]
 800423c:	010d      	lsls	r5, r1, #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	4967      	ldr	r1, [pc, #412]	; (80043dc <LL_TIM_OC_Init+0x1dc>)
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004240:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004242:	4288      	cmp	r0, r1
 8004244:	d100      	bne.n	8004248 <LL_TIM_OC_Init+0x48>
 8004246:	e0ab      	b.n	80043a0 <LL_TIM_OC_Init+0x1a0>
 8004248:	4965      	ldr	r1, [pc, #404]	; (80043e0 <LL_TIM_OC_Init+0x1e0>)
 800424a:	4288      	cmp	r0, r1
 800424c:	d100      	bne.n	8004250 <LL_TIM_OC_Init+0x50>
 800424e:	e0a7      	b.n	80043a0 <LL_TIM_OC_Init+0x1a0>
 8004250:	4964      	ldr	r1, [pc, #400]	; (80043e4 <LL_TIM_OC_Init+0x1e4>)
 8004252:	4288      	cmp	r0, r1
 8004254:	d100      	bne.n	8004258 <LL_TIM_OC_Init+0x58>
 8004256:	e0a3      	b.n	80043a0 <LL_TIM_OC_Init+0x1a0>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004258:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800425a:	6046      	str	r6, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800425c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800425e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004260:	6203      	str	r3, [r0, #32]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004262:	2000      	movs	r0, #0
      break;
 8004264:	e02c      	b.n	80042c0 <LL_TIM_OC_Init+0xc0>
  switch (Channel)
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	015b      	lsls	r3, r3, #5
 800426a:	4299      	cmp	r1, r3
 800426c:	d127      	bne.n	80042be <LL_TIM_OC_Init+0xbe>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800426e:	6a01      	ldr	r1, [r0, #32]
 8004270:	4e5d      	ldr	r6, [pc, #372]	; (80043e8 <LL_TIM_OC_Init+0x1e8>)

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004272:	4c59      	ldr	r4, [pc, #356]	; (80043d8 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004274:	4031      	ands	r1, r6
 8004276:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004278:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800427a:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800427c:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800427e:	4021      	ands	r1, r4
 8004280:	6814      	ldr	r4, [r2, #0]
 8004282:	0224      	lsls	r4, r4, #8
 8004284:	430c      	orrs	r4, r1

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004286:	4959      	ldr	r1, [pc, #356]	; (80043ec <LL_TIM_OC_Init+0x1ec>)
 8004288:	4019      	ands	r1, r3
 800428a:	6913      	ldr	r3, [r2, #16]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	430b      	orrs	r3, r1

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004290:	6851      	ldr	r1, [r2, #4]
 8004292:	4033      	ands	r3, r6
 8004294:	0309      	lsls	r1, r1, #12
 8004296:	430b      	orrs	r3, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	4950      	ldr	r1, [pc, #320]	; (80043dc <LL_TIM_OC_Init+0x1dc>)
 800429a:	4288      	cmp	r0, r1
 800429c:	d100      	bne.n	80042a0 <LL_TIM_OC_Init+0xa0>
 800429e:	e095      	b.n	80043cc <LL_TIM_OC_Init+0x1cc>
 80042a0:	494f      	ldr	r1, [pc, #316]	; (80043e0 <LL_TIM_OC_Init+0x1e0>)
 80042a2:	4288      	cmp	r0, r1
 80042a4:	d100      	bne.n	80042a8 <LL_TIM_OC_Init+0xa8>
 80042a6:	e091      	b.n	80043cc <LL_TIM_OC_Init+0x1cc>
 80042a8:	494e      	ldr	r1, [pc, #312]	; (80043e4 <LL_TIM_OC_Init+0x1e4>)
 80042aa:	4288      	cmp	r0, r1
 80042ac:	d100      	bne.n	80042b0 <LL_TIM_OC_Init+0xb0>
 80042ae:	e08d      	b.n	80043cc <LL_TIM_OC_Init+0x1cc>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80042b0:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042b2:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80042b4:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80042b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042b8:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80042ba:	2000      	movs	r0, #0
      break;
 80042bc:	e000      	b.n	80042c0 <LL_TIM_OC_Init+0xc0>
  switch (Channel)
 80042be:	2001      	movs	r0, #1
}
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80042c2:	2673      	movs	r6, #115	; 0x73
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80042c4:	6a03      	ldr	r3, [r0, #32]
 80042c6:	438b      	bics	r3, r1
 80042c8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80042ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042cc:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042ce:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80042d0:	43b4      	bics	r4, r6
 80042d2:	6816      	ldr	r6, [r2, #0]
 80042d4:	4334      	orrs	r4, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80042d6:	2602      	movs	r6, #2
 80042d8:	43b3      	bics	r3, r6
 80042da:	6916      	ldr	r6, [r2, #16]
 80042dc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80042de:	438b      	bics	r3, r1
 80042e0:	6851      	ldr	r1, [r2, #4]
 80042e2:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	493d      	ldr	r1, [pc, #244]	; (80043dc <LL_TIM_OC_Init+0x1dc>)
 80042e6:	4288      	cmp	r0, r1
 80042e8:	d045      	beq.n	8004376 <LL_TIM_OC_Init+0x176>
 80042ea:	493d      	ldr	r1, [pc, #244]	; (80043e0 <LL_TIM_OC_Init+0x1e0>)
 80042ec:	4288      	cmp	r0, r1
 80042ee:	d042      	beq.n	8004376 <LL_TIM_OC_Init+0x176>
 80042f0:	493c      	ldr	r1, [pc, #240]	; (80043e4 <LL_TIM_OC_Init+0x1e4>)
 80042f2:	4288      	cmp	r0, r1
 80042f4:	d03f      	beq.n	8004376 <LL_TIM_OC_Init+0x176>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80042f6:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042f8:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80042fa:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80042fc:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042fe:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004300:	2000      	movs	r0, #0
      break;
 8004302:	e7dd      	b.n	80042c0 <LL_TIM_OC_Init+0xc0>
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004304:	2473      	movs	r4, #115	; 0x73
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004306:	6a01      	ldr	r1, [r0, #32]
 8004308:	4e39      	ldr	r6, [pc, #228]	; (80043f0 <LL_TIM_OC_Init+0x1f0>)
 800430a:	4031      	ands	r1, r6
 800430c:	6201      	str	r1, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800430e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004310:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004312:	69c5      	ldr	r5, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004314:	43a5      	bics	r5, r4
 8004316:	6814      	ldr	r4, [r2, #0]
 8004318:	4325      	orrs	r5, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800431a:	4c36      	ldr	r4, [pc, #216]	; (80043f4 <LL_TIM_OC_Init+0x1f4>)
 800431c:	401c      	ands	r4, r3
 800431e:	6913      	ldr	r3, [r2, #16]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4323      	orrs	r3, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004324:	6854      	ldr	r4, [r2, #4]
 8004326:	4033      	ands	r3, r6
 8004328:	0224      	lsls	r4, r4, #8
 800432a:	431c      	orrs	r4, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <LL_TIM_OC_Init+0x1dc>)
 800432e:	4298      	cmp	r0, r3
 8004330:	d00c      	beq.n	800434c <LL_TIM_OC_Init+0x14c>
 8004332:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <LL_TIM_OC_Init+0x1e0>)
 8004334:	4298      	cmp	r0, r3
 8004336:	d009      	beq.n	800434c <LL_TIM_OC_Init+0x14c>
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <LL_TIM_OC_Init+0x1e4>)
 800433a:	4298      	cmp	r0, r3
 800433c:	d006      	beq.n	800434c <LL_TIM_OC_Init+0x14c>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800433e:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004340:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004342:	61c5      	str	r5, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004344:	63c3      	str	r3, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004346:	6204      	str	r4, [r0, #32]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004348:	2000      	movs	r0, #0
      break;
 800434a:	e7b9      	b.n	80042c0 <LL_TIM_OC_Init+0xc0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800434c:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <LL_TIM_OC_Init+0x1f8>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800434e:	4e26      	ldr	r6, [pc, #152]	; (80043e8 <LL_TIM_OC_Init+0x1e8>)
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004350:	401c      	ands	r4, r3
 8004352:	6953      	ldr	r3, [r2, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004354:	400e      	ands	r6, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	4323      	orrs	r3, r4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800435a:	4c28      	ldr	r4, [pc, #160]	; (80043fc <LL_TIM_OC_Init+0x1fc>)
 800435c:	4023      	ands	r3, r4
 800435e:	6894      	ldr	r4, [r2, #8]
 8004360:	02a4      	lsls	r4, r4, #10
 8004362:	431c      	orrs	r4, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004364:	6993      	ldr	r3, [r2, #24]
 8004366:	0119      	lsls	r1, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <LL_TIM_OC_Init+0x1ec>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800436a:	4331      	orrs	r1, r6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800436c:	4019      	ands	r1, r3
 800436e:	69d3      	ldr	r3, [r2, #28]
 8004370:	015e      	lsls	r6, r3, #5
 8004372:	4331      	orrs	r1, r6
 8004374:	e7e3      	b.n	800433e <LL_TIM_OC_Init+0x13e>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004376:	2108      	movs	r1, #8
 8004378:	438b      	bics	r3, r1
 800437a:	0019      	movs	r1, r3
 800437c:	6953      	ldr	r3, [r2, #20]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	430b      	orrs	r3, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004382:	2104      	movs	r1, #4
 8004384:	438b      	bics	r3, r1
 8004386:	6891      	ldr	r1, [r2, #8]
 8004388:	0089      	lsls	r1, r1, #2
 800438a:	430b      	orrs	r3, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800438c:	4918      	ldr	r1, [pc, #96]	; (80043f0 <LL_TIM_OC_Init+0x1f0>)
 800438e:	400d      	ands	r5, r1
 8004390:	6991      	ldr	r1, [r2, #24]
 8004392:	430d      	orrs	r5, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004394:	4917      	ldr	r1, [pc, #92]	; (80043f4 <LL_TIM_OC_Init+0x1f4>)
 8004396:	400d      	ands	r5, r1
 8004398:	69d1      	ldr	r1, [r2, #28]
 800439a:	0049      	lsls	r1, r1, #1
 800439c:	430d      	orrs	r5, r1
 800439e:	e7aa      	b.n	80042f6 <LL_TIM_OC_Init+0xf6>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	438b      	bics	r3, r1
 80043a4:	001d      	movs	r5, r3
 80043a6:	6953      	ldr	r3, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043a8:	3940      	subs	r1, #64	; 0x40
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80043aa:	019b      	lsls	r3, r3, #6
 80043ac:	432b      	orrs	r3, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043ae:	438b      	bics	r3, r1
 80043b0:	6891      	ldr	r1, [r2, #8]
 80043b2:	018d      	lsls	r5, r1, #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043b4:	4911      	ldr	r1, [pc, #68]	; (80043fc <LL_TIM_OC_Init+0x1fc>)
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043b6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043b8:	400e      	ands	r6, r1
 80043ba:	6991      	ldr	r1, [r2, #24]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043bc:	4d0e      	ldr	r5, [pc, #56]	; (80043f8 <LL_TIM_OC_Init+0x1f8>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043be:	0089      	lsls	r1, r1, #2
 80043c0:	4331      	orrs	r1, r6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043c2:	4029      	ands	r1, r5
 80043c4:	69d5      	ldr	r5, [r2, #28]
 80043c6:	00ee      	lsls	r6, r5, #3
 80043c8:	430e      	orrs	r6, r1
 80043ca:	e745      	b.n	8004258 <LL_TIM_OC_Init+0x58>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043cc:	490c      	ldr	r1, [pc, #48]	; (8004400 <LL_TIM_OC_Init+0x200>)
 80043ce:	400d      	ands	r5, r1
 80043d0:	6991      	ldr	r1, [r2, #24]
 80043d2:	0189      	lsls	r1, r1, #6
 80043d4:	430d      	orrs	r5, r1
 80043d6:	e76b      	b.n	80042b0 <LL_TIM_OC_Init+0xb0>
 80043d8:	ffff8cff 	.word	0xffff8cff
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	ffffefff 	.word	0xffffefff
 80043ec:	ffffdfff 	.word	0xffffdfff
 80043f0:	fffffeff 	.word	0xfffffeff
 80043f4:	fffffdff 	.word	0xfffffdff
 80043f8:	fffff7ff 	.word	0xfffff7ff
 80043fc:	fffffbff 	.word	0xfffffbff
 8004400:	ffffbfff 	.word	0xffffbfff

08004404 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004404:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004406:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004408:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <LL_TIM_BDTR_Init+0x3c>)
 800440c:	4013      	ands	r3, r2
 800440e:	684a      	ldr	r2, [r1, #4]
 8004410:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <LL_TIM_BDTR_Init+0x40>)
 8004414:	4013      	ands	r3, r2
 8004416:	680a      	ldr	r2, [r1, #0]
 8004418:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800441a:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <LL_TIM_BDTR_Init+0x44>)
 800441c:	401a      	ands	r2, r3
 800441e:	89cb      	ldrh	r3, [r1, #14]
 8004420:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <LL_TIM_BDTR_Init+0x48>)
 8004424:	4013      	ands	r3, r2
 8004426:	690a      	ldr	r2, [r1, #16]
 8004428:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <LL_TIM_BDTR_Init+0x4c>)
 800442c:	4013      	ands	r3, r2
 800442e:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004430:	4908      	ldr	r1, [pc, #32]	; (8004454 <LL_TIM_BDTR_Init+0x50>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004432:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004434:	400b      	ands	r3, r1
 8004436:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004438:	6443      	str	r3, [r0, #68]	; 0x44
}
 800443a:	2000      	movs	r0, #0
 800443c:	4770      	bx	lr
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	fffffbff 	.word	0xfffffbff
 8004444:	fffff7ff 	.word	0xfffff7ff
 8004448:	ffffefff 	.word	0xffffefff
 800444c:	ffffdfff 	.word	0xffffdfff
 8004450:	ffffbfff 	.word	0xffffbfff
 8004454:	ffff7fff 	.word	0xffff7fff

08004458 <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004458:	6803      	ldr	r3, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800445a:	b570      	push	{r4, r5, r6, lr}
 800445c:	0004      	movs	r4, r0
 800445e:	000d      	movs	r5, r1
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d41a      	bmi.n	800449a <LL_USART_Init+0x42>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004464:	684b      	ldr	r3, [r1, #4]
 8004466:	68c9      	ldr	r1, [r1, #12]
 8004468:	6802      	ldr	r2, [r0, #0]
 800446a:	430b      	orrs	r3, r1
 800446c:	6929      	ldr	r1, [r5, #16]
 800446e:	430b      	orrs	r3, r1
 8004470:	69a9      	ldr	r1, [r5, #24]
 8004472:	430b      	orrs	r3, r1
 8004474:	491b      	ldr	r1, [pc, #108]	; (80044e4 <LL_USART_Init+0x8c>)
 8004476:	400a      	ands	r2, r1
 8004478:	4313      	orrs	r3, r2
 800447a:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800447c:	6843      	ldr	r3, [r0, #4]
 800447e:	4a1a      	ldr	r2, [pc, #104]	; (80044e8 <LL_USART_Init+0x90>)
 8004480:	4013      	ands	r3, r2
 8004482:	68aa      	ldr	r2, [r5, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004488:	6883      	ldr	r3, [r0, #8]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <LL_USART_Init+0x94>)
 800448c:	4013      	ands	r3, r2
 800448e:	696a      	ldr	r2, [r5, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <LL_USART_Init+0x98>)
 8004496:	4298      	cmp	r0, r3
 8004498:	d001      	beq.n	800449e <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 800449a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800449c:	bd70      	pop	{r4, r5, r6, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7ff fdf8 	bl	8004094 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d0f8      	beq.n	800449a <LL_USART_Init+0x42>
        && (USART_InitStruct->BaudRate != 0U))
 80044a8:	6829      	ldr	r1, [r5, #0]
 80044aa:	2900      	cmp	r1, #0
 80044ac:	d0f5      	beq.n	800449a <LL_USART_Init+0x42>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	69aa      	ldr	r2, [r5, #24]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d008      	beq.n	80044ca <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80044b8:	084b      	lsrs	r3, r1, #1
 80044ba:	1818      	adds	r0, r3, r0
 80044bc:	f7fb fe24 	bl	8000108 <__udivsi3>
 80044c0:	0403      	lsls	r3, r0, #16
 80044c2:	0c1b      	lsrs	r3, r3, #16
      status = SUCCESS;
 80044c4:	2000      	movs	r0, #0
 80044c6:	60e3      	str	r3, [r4, #12]
 80044c8:	e7e8      	b.n	800449c <LL_USART_Init+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80044ca:	084b      	lsrs	r3, r1, #1
 80044cc:	0040      	lsls	r0, r0, #1
 80044ce:	18c0      	adds	r0, r0, r3
 80044d0:	f7fb fe1a 	bl	8000108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <LL_USART_Init+0x9c>)
 80044d6:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d8:	0700      	lsls	r0, r0, #28
 80044da:	0f40      	lsrs	r0, r0, #29
 80044dc:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 80044de:	60e0      	str	r0, [r4, #12]
 80044e0:	2000      	movs	r0, #0
 80044e2:	e7db      	b.n	800449c <LL_USART_Init+0x44>
 80044e4:	ffff69f3 	.word	0xffff69f3
 80044e8:	ffffcfff 	.word	0xffffcfff
 80044ec:	fffffcff 	.word	0xfffffcff
 80044f0:	40013800 	.word	0x40013800
 80044f4:	0000fff0 	.word	0x0000fff0

080044f8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <LL_SetSystemCoreClock+0x8>)
 80044fa:	6018      	str	r0, [r3, #0]
}
 80044fc:	4770      	bx	lr
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	2000050c 	.word	0x2000050c

08004504 <VBS_GetAvBusVoltage_d>:
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8004504:	88c0      	ldrh	r0, [r0, #6]
#endif
}
 8004506:	4770      	bx	lr

08004508 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8004508:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800450a:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800450c:	885b      	ldrh	r3, [r3, #2]
 800450e:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8004510:	0c00      	lsrs	r0, r0, #16
}
 8004512:	4770      	bx	lr

08004514 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8004514:	b20b      	sxth	r3, r1
 8004516:	1409      	asrs	r1, r1, #16
 8004518:	b530      	push	{r4, r5, lr}
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800451a:	000d      	movs	r5, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 800451c:	001c      	movs	r4, r3
    maxModule = (int32_t)pHandle->MaxModule;
 800451e:	8802      	ldrh	r2, [r0, #0]
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004520:	434d      	muls	r5, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004522:	435c      	muls	r4, r3
    square_limit = maxModule * maxModule;
 8004524:	4352      	muls	r2, r2
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8004526:	1964      	adds	r4, r4, r5
{
 8004528:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 800452a:	42a2      	cmp	r2, r4
 800452c:	da10      	bge.n	8004550 <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800452e:	8840      	ldrh	r0, [r0, #2]
 8004530:	0004      	movs	r4, r0
 8004532:	4344      	muls	r4, r0
    {
      if (square_d <= vd_square_limit)
 8004534:	42a5      	cmp	r5, r4
 8004536:	dc11      	bgt.n	800455c <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004538:	1b52      	subs	r2, r2, r5
 800453a:	17d0      	asrs	r0, r2, #31
 800453c:	0300      	lsls	r0, r0, #12
 800453e:	0b00      	lsrs	r0, r0, #12
 8004540:	1882      	adds	r2, r0, r2
 8004542:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004544:	4811      	ldr	r0, [pc, #68]	; (800458c <Circle_Limitation+0x78>)
 8004546:	0052      	lsls	r2, r2, #1
 8004548:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 800454a:	2b00      	cmp	r3, #0
 800454c:	db19      	blt.n	8004582 <Circle_Limitation+0x6e>
        if (Vqd.q < 0)
        {
          new_q = - new_q;
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 800454e:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	0409      	lsls	r1, r1, #16
 8004554:	0c18      	lsrs	r0, r3, #16
 8004556:	4308      	orrs	r0, r1
}
 8004558:	b005      	add	sp, #20
 800455a:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 800455c:	2900      	cmp	r1, #0
 800455e:	db13      	blt.n	8004588 <Circle_Limitation+0x74>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004560:	1b12      	subs	r2, r2, r4
 8004562:	17d1      	asrs	r1, r2, #31
 8004564:	0309      	lsls	r1, r1, #12
 8004566:	0b09      	lsrs	r1, r1, #12
 8004568:	188a      	adds	r2, r1, r2
 800456a:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <Circle_Limitation+0x78>)
 800456e:	0052      	lsls	r2, r2, #1
 8004570:	5a52      	ldrh	r2, [r2, r1]
        if (Vqd.q < 0)
 8004572:	2b00      	cmp	r3, #0
 8004574:	db02      	blt.n	800457c <Circle_Limitation+0x68>
      Local_Vqd.d = (int16_t)new_d;
 8004576:	b201      	sxth	r1, r0
      Local_Vqd.q = (int16_t)new_q;
 8004578:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
 800457a:	e7e9      	b.n	8004550 <Circle_Limitation+0x3c>
          new_q = - new_q;
 800457c:	4252      	negs	r2, r2
      Local_Vqd.d = (int16_t)new_d;
 800457e:	b201      	sxth	r1, r0
 8004580:	e7fa      	b.n	8004578 <Circle_Limitation+0x64>
          new_q = -new_q;
 8004582:	4252      	negs	r2, r2
      Local_Vqd.q = (int16_t)new_q;
 8004584:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
 8004586:	e7e3      	b.n	8004550 <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004588:	4240      	negs	r0, r0
 800458a:	e7e9      	b.n	8004560 <Circle_Limitation+0x4c>
 800458c:	080065c0 	.word	0x080065c0

08004590 <MCP_ReceivedPacket>:
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8004590:	6841      	ldr	r1, [r0, #4]
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004594:	880a      	ldrh	r2, [r1, #0]
{
 8004596:	0004      	movs	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8004598:	2307      	movs	r3, #7
 800459a:	0016      	movs	r6, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800459c:	2780      	movs	r7, #128	; 0x80
 800459e:	20ff      	movs	r0, #255	; 0xff
 80045a0:	0015      	movs	r5, r2
{
 80045a2:	b083      	sub	sp, #12
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80045a4:	439e      	bics	r6, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80045a6:	007f      	lsls	r7, r7, #1
 80045a8:	4385      	bics	r5, r0
 80045aa:	42bd      	cmp	r5, r7
 80045ac:	d02d      	beq.n	800460a <MCP_ReceivedPacket+0x7a>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80045ae:	89a0      	ldrh	r0, [r4, #12]
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80045b0:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80045b2:	4013      	ands	r3, r2
 80045b4:	4d47      	ldr	r5, [pc, #284]	; (80046d4 <MCP_ReceivedPacket+0x144>)
 80045b6:	015b      	lsls	r3, r3, #5
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80045b8:	3802      	subs	r0, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80045ba:	195d      	adds	r5, r3, r5
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80045bc:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80045be:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80045c0:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80045c2:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80045c4:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80045c6:	899a      	ldrh	r2, [r3, #12]
 80045c8:	3a01      	subs	r2, #1
 80045ca:	b293      	uxth	r3, r2
 80045cc:	469c      	mov	ip, r3
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 80045ce:	2300      	movs	r3, #0
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80045d0:	b212      	sxth	r2, r2
    pHandle->txLength = 0;
 80045d2:	81e3      	strh	r3, [r4, #14]

    switch (command)
 80045d4:	2e38      	cmp	r6, #56	; 0x38
 80045d6:	d80c      	bhi.n	80045f2 <MCP_ReceivedPacket+0x62>
 80045d8:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <MCP_ReceivedPacket+0x148>)
 80045da:	00b6      	lsls	r6, r6, #2
 80045dc:	599b      	ldr	r3, [r3, r6]
 80045de:	469f      	mov	pc, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80045e4:	68a2      	ldr	r2, [r4, #8]
 80045e6:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80045e8:	89e3      	ldrh	r3, [r4, #14]
 80045ea:	3301      	adds	r3, #1
 80045ec:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80045ee:	b003      	add	sp, #12
 80045f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80045f2:	2e68      	cmp	r6, #104	; 0x68
 80045f4:	d063      	beq.n	80046be <MCP_ReceivedPacket+0x12e>
 80045f6:	42be      	cmp	r6, r7
 80045f8:	d069      	beq.n	80046ce <MCP_ReceivedPacket+0x13e>
 80045fa:	2e48      	cmp	r6, #72	; 0x48
 80045fc:	d1f0      	bne.n	80045e0 <MCP_ReceivedPacket+0x50>
        MCI_Clear_Iqdref(pMCI);
 80045fe:	0028      	movs	r0, r5
 8004600:	f7fd f9ae 	bl	8001960 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8004604:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004606:	89e3      	ldrh	r3, [r4, #14]
        break;
 8004608:	e7ec      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800460a:	89a0      	ldrh	r0, [r4, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800460c:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800460e:	3802      	subs	r0, #2
 8004610:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004612:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8004614:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8004616:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8004618:	899a      	ldrh	r2, [r3, #12]
    pHandle->txLength = 0;
 800461a:	2300      	movs	r3, #0
      userCommand = (command >> 3) & 0x1f;
 800461c:	08f6      	lsrs	r6, r6, #3
    pHandle->txLength = 0;
 800461e:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8004620:	331e      	adds	r3, #30
      userCommand = (command >> 3) & 0x1f;
 8004622:	b2f5      	uxtb	r5, r6
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8004624:	421e      	tst	r6, r3
 8004626:	d03a      	beq.n	800469e <MCP_ReceivedPacket+0x10e>
        MCPResponse = MCP_CMD_OK;
 8004628:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800462a:	200d      	movs	r0, #13
 800462c:	e7da      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        if (IDLE == MCI_GetSTMState(pMCI))
 800462e:	0028      	movs	r0, r5
 8004630:	f7fd f8a2 	bl	8001778 <MCI_GetSTMState>
 8004634:	2800      	cmp	r0, #0
 8004636:	d005      	beq.n	8004644 <MCP_ReceivedPacket+0xb4>
          (void)MCI_StopMotor(pMCI);
 8004638:	0028      	movs	r0, r5
 800463a:	f7fd f8bb 	bl	80017b4 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 800463e:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004640:	89e3      	ldrh	r3, [r4, #14]
 8004642:	e7cf      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8004644:	0028      	movs	r0, r5
 8004646:	f7fd f89d 	bl	8001784 <MCI_StartMotor>
 800464a:	2301      	movs	r3, #1
 800464c:	4058      	eors	r0, r3
 800464e:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004650:	89e3      	ldrh	r3, [r4, #14]
 8004652:	e7c7      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8004654:	4661      	mov	r1, ip
 8004656:	0020      	movs	r0, r4
 8004658:	f7fe fbca 	bl	8002df0 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800465c:	89e3      	ldrh	r3, [r4, #14]
        break;
 800465e:	e7c1      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        pHandle->txLength = 4;
 8004660:	2304      	movs	r3, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8004662:	68a2      	ldr	r2, [r4, #8]
        pHandle->txLength = 4;
 8004664:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8004666:	3b03      	subs	r3, #3
 8004668:	7013      	strb	r3, [r2, #0]
        MCPResponse = MCP_CMD_OK;
 800466a:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800466c:	89e3      	ldrh	r3, [r4, #14]
      break;
 800466e:	e7b9      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8004670:	4661      	mov	r1, ip
 8004672:	0020      	movs	r0, r4
 8004674:	f7fe f82e 	bl	80026d4 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8004678:	89e3      	ldrh	r3, [r4, #14]
        break;
 800467a:	e7b3      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        if (RUN == MCI_GetSTMState(pMCI))
 800467c:	0028      	movs	r0, r5
 800467e:	f7fd f87b 	bl	8001778 <MCI_GetSTMState>
 8004682:	2806      	cmp	r0, #6
 8004684:	d1db      	bne.n	800463e <MCP_ReceivedPacket+0xae>
          MCI_StopRamp(pMCI);
 8004686:	0028      	movs	r0, r5
 8004688:	f7fd f8f2 	bl	8001870 <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 800468c:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800468e:	89e3      	ldrh	r3, [r4, #14]
 8004690:	e7a8      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
        (void)MCI_FaultAcknowledged(pMCI);
 8004692:	0028      	movs	r0, r5
 8004694:	f7fd f8ac 	bl	80017f0 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8004698:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800469a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800469c:	e7a2      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
      userCommand = (command >> 3) & 0x1f;
 800469e:	231f      	movs	r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80046a0:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 80046a2:	402b      	ands	r3, r5
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80046a4:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80046a6:	4d0d      	ldr	r5, [pc, #52]	; (80046dc <MCP_ReceivedPacket+0x14c>)
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	595d      	ldr	r5, [r3, r5]
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d0bb      	beq.n	8004628 <MCP_ReceivedPacket+0x98>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	0023      	movs	r3, r4
 80046b6:	330e      	adds	r3, #14
 80046b8:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80046ba:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80046bc:	e792      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80046be:	68a3      	ldr	r3, [r4, #8]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	0023      	movs	r3, r4
 80046c4:	330e      	adds	r3, #14
 80046c6:	f7fc ffe1 	bl	800168c <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80046ca:	89e3      	ldrh	r3, [r4, #14]
        break;
 80046cc:	e78a      	b.n	80045e4 <MCP_ReceivedPacket+0x54>
    switch (command)
 80046ce:	2300      	movs	r3, #0
 80046d0:	e7e9      	b.n	80046a6 <MCP_ReceivedPacket+0x116>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	20000534 	.word	0x20000534
 80046d8:	08006dc4 	.word	0x08006dc4
 80046dc:	200006ac 	.word	0x200006ac

080046e0 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80046e0:	8a02      	ldrh	r2, [r0, #16]
 80046e2:	8b41      	ldrh	r1, [r0, #26]
{
 80046e4:	0003      	movs	r3, r0
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80046e6:	4291      	cmp	r1, r2
 80046e8:	d306      	bcc.n	80046f8 <NTC_SetFaultState+0x18>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 80046ea:	8b81      	ldrh	r1, [r0, #28]
    {
      hFault = MC_NO_ERROR;
 80046ec:	2000      	movs	r0, #0
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 80046ee:	4291      	cmp	r1, r2
 80046f0:	d900      	bls.n	80046f4 <NTC_SetFaultState+0x14>
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 80046f2:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 80046f4:	8ad8      	ldrh	r0, [r3, #22]
 80046f6:	e7fc      	b.n	80046f2 <NTC_SetFaultState+0x12>
      hFault = MC_OVER_TEMP;
 80046f8:	2008      	movs	r0, #8
 80046fa:	e7fa      	b.n	80046f2 <NTC_SetFaultState+0x12>

080046fc <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8004700:	4770      	bx	lr
 8004702:	46c0      	nop			; (mov r8, r8)

08004704 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8004704:	7803      	ldrb	r3, [r0, #0]
{
 8004706:	b510      	push	{r4, lr}
 8004708:	0004      	movs	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800470a:	2b00      	cmp	r3, #0
 800470c:	d004      	beq.n	8004718 <NTC_Init+0x14>
      pHandle->hFaultState = MC_NO_ERROR;
 800470e:	2300      	movs	r3, #0
 8004710:	82c3      	strh	r3, [r0, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004712:	8a43      	ldrh	r3, [r0, #18]
 8004714:	8203      	strh	r3, [r0, #16]
}
 8004716:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8004718:	3004      	adds	r0, #4
 800471a:	f7fe ffc5 	bl	80036a8 <RCM_RegisterRegConv>
 800471e:	2326      	movs	r3, #38	; 0x26
 8004720:	54e0      	strb	r0, [r4, r3]
      NTC_Clear(pHandle);
 8004722:	0020      	movs	r0, r4
 8004724:	f7ff ffea 	bl	80046fc <NTC_Clear>
 8004728:	e7f5      	b.n	8004716 <NTC_Init+0x12>
 800472a:	46c0      	nop			; (mov r8, r8)

0800472c <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800472c:	7803      	ldrb	r3, [r0, #0]
{
 800472e:	b510      	push	{r4, lr}
 8004730:	0004      	movs	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <NTC_CalcAvTemp+0x12>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8004736:	2300      	movs	r3, #0
 8004738:	82c3      	strh	r3, [r0, #22]
 800473a:	2000      	movs	r0, #0
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800473c:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800473e:	3326      	adds	r3, #38	; 0x26
 8004740:	5cc0      	ldrb	r0, [r0, r3]
 8004742:	f7ff f84b 	bl	80037dc <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <NTC_CalcAvTemp+0x3c>)
 8004748:	4298      	cmp	r0, r3
 800474a:	d007      	beq.n	800475c <NTC_CalcAvTemp+0x30>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800474c:	8b21      	ldrh	r1, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800474e:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8004750:	1e4b      	subs	r3, r1, #1
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8004752:	4353      	muls	r3, r2
        wtemp += hAux;
 8004754:	18c0      	adds	r0, r0, r3
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8004756:	f7fb fcd7 	bl	8000108 <__udivsi3>
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800475a:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800475c:	0020      	movs	r0, r4
 800475e:	f7ff ffbf 	bl	80046e0 <NTC_SetFaultState>
 8004762:	82e0      	strh	r0, [r4, #22]
 8004764:	e7ea      	b.n	800473c <NTC_CalcAvTemp+0x10>
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	0000ffff 	.word	0x0000ffff

0800476c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 800476c:	7803      	ldrb	r3, [r0, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8004772:	6a02      	ldr	r2, [r0, #32]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8004774:	8a03      	ldrh	r3, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8004776:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8004778:	211e      	movs	r1, #30
 800477a:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800477c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp *= pHandle->hSensitivity;
 800477e:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8004780:	141b      	asrs	r3, r3, #16
 8004782:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8004784:	b200      	sxth	r0, r0
}
 8004786:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8004788:	8a80      	ldrh	r0, [r0, #20]
 800478a:	e7fb      	b.n	8004784 <NTC_GetAvTemp_C+0x18>

0800478c <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800478c:	6803      	ldr	r3, [r0, #0]
 800478e:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004790:	8c03      	ldrh	r3, [r0, #32]
 8004792:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004798:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800479a:	4770      	bx	lr

0800479c <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 800479c:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800479e:	4770      	bx	lr

080047a0 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80047a0:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80047a2:	4770      	bx	lr

080047a4 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 80047a4:	2304      	movs	r3, #4
 80047a6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80047a8:	4770      	bx	lr
 80047aa:	46c0      	nop			; (mov r8, r8)

080047ac <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 80047ac:	2306      	movs	r3, #6
 80047ae:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80047b0:	4770      	bx	lr
 80047b2:	46c0      	nop			; (mov r8, r8)

080047b4 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80047b4:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80047b6:	4770      	bx	lr

080047b8 <PID_GetKPDivisorPOW2>:
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
 80047b8:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 80047ba:	4770      	bx	lr

080047bc <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80047bc:	2301      	movs	r3, #1
 80047be:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80047c0:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80047c2:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80047c4:	4770      	bx	lr
 80047c6:	46c0      	nop			; (mov r8, r8)

080047c8 <PID_GetKIDivisor>:
__weak uint16_t PID_GetKIDivisor(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
 80047c8:	8b40      	ldrh	r0, [r0, #26]
#endif
}
 80047ca:	4770      	bx	lr

080047cc <PID_GetKIDivisorPOW2>:
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
 80047cc:	8bc0      	ldrh	r0, [r0, #30]
#endif
}
 80047ce:	4770      	bx	lr

080047d0 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 80047d0:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80047d2:	4770      	bx	lr

080047d4 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 80047d4:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80047d6:	4770      	bx	lr

080047d8 <PID_SetKIDivisorPOW2>:
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80047d8:	2301      	movs	r3, #1
{
 80047da:	b570      	push	{r4, r5, r6, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80047dc:	408b      	lsls	r3, r1
{
 80047de:	000d      	movs	r5, r1
 80047e0:	0004      	movs	r4, r0
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80047e2:	83c1      	strh	r1, [r0, #30]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80047e4:	4905      	ldr	r1, [pc, #20]	; (80047fc <PID_SetKIDivisorPOW2+0x24>)
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80047e6:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80047e8:	40a9      	lsls	r1, r5
 80047ea:	f7ff fff3 	bl	80047d4 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <PID_SetKIDivisorPOW2+0x28>)
 80047f0:	0020      	movs	r0, r4
 80047f2:	40a9      	lsls	r1, r5
 80047f4:	f7ff ffec 	bl	80047d0 <PID_SetLowerIntegralTermLimit>
}
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	00007fff 	.word	0x00007fff
 8004800:	ffff8001 	.word	0xffff8001

08004804 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8004804:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004806:	4770      	bx	lr

08004808 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8004808:	2322      	movs	r3, #34	; 0x22
 800480a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800480c:	4770      	bx	lr
 800480e:	46c0      	nop			; (mov r8, r8)

08004810 <PID_GetKDDivisorPOW2>:
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
 8004810:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
#endif
}
 8004812:	4770      	bx	lr

08004814 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8004814:	2301      	movs	r3, #1
 8004816:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8004818:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800481a:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800481c:	4770      	bx	lr
 800481e:	46c0      	nop			; (mov r8, r8)

08004820 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8004820:	0003      	movs	r3, r0
 8004822:	b570      	push	{r4, r5, r6, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004824:	2216      	movs	r2, #22
 8004826:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004828:	2214      	movs	r2, #20
 800482a:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800482c:	2406      	movs	r4, #6
 800482e:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004830:	2404      	movs	r4, #4
 8004832:	5f1a      	ldrsh	r2, [r3, r4]
 8004834:	2400      	movs	r4, #0
 8004836:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8004838:	2d00      	cmp	r5, #0
 800483a:	d00b      	beq.n	8004854 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800483c:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800483e:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8004840:	1865      	adds	r5, r4, r1
 8004842:	d41b      	bmi.n	800487c <PI_Controller+0x5c>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8004844:	2c00      	cmp	r4, #0
 8004846:	db24      	blt.n	8004892 <PI_Controller+0x72>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004848:	68dc      	ldr	r4, [r3, #12]
 800484a:	42ac      	cmp	r4, r5
 800484c:	db02      	blt.n	8004854 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800484e:	691c      	ldr	r4, [r3, #16]
 8004850:	42ac      	cmp	r4, r5
 8004852:	dd1c      	ble.n	800488e <PI_Controller+0x6e>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004854:	0025      	movs	r5, r4
 8004856:	8b99      	ldrh	r1, [r3, #28]
 8004858:	410a      	asrs	r2, r1
 800485a:	8bd9      	ldrh	r1, [r3, #30]
 800485c:	410d      	asrs	r5, r1
 800485e:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004860:	4290      	cmp	r0, r2
 8004862:	da03      	bge.n	800486c <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004864:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8004866:	18a4      	adds	r4, r4, r2
 8004868:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800486a:	bd70      	pop	{r4, r5, r6, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800486c:	4296      	cmp	r6, r2
 800486e:	dd03      	ble.n	8004878 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8004870:	1ab2      	subs	r2, r6, r2
 8004872:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8004874:	18a4      	adds	r4, r4, r2
 8004876:	e7f7      	b.n	8004868 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8004878:	b210      	sxth	r0, r2
 800487a:	e7f5      	b.n	8004868 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 800487c:	2c00      	cmp	r4, #0
 800487e:	dde3      	ble.n	8004848 <PI_Controller+0x28>
          if (wIntegral_Term > 0)
 8004880:	2900      	cmp	r1, #0
 8004882:	dde1      	ble.n	8004848 <PI_Controller+0x28>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004884:	68dc      	ldr	r4, [r3, #12]
 8004886:	4905      	ldr	r1, [pc, #20]	; (800489c <PI_Controller+0x7c>)
            wIntegral_sum_temp = INT32_MAX;
 8004888:	0025      	movs	r5, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800488a:	428c      	cmp	r4, r1
 800488c:	d1e2      	bne.n	8004854 <PI_Controller+0x34>
            wIntegral_sum_temp = INT32_MAX;
 800488e:	002c      	movs	r4, r5
 8004890:	e7e0      	b.n	8004854 <PI_Controller+0x34>
          if (wIntegral_Term < 0)
 8004892:	2900      	cmp	r1, #0
 8004894:	dad8      	bge.n	8004848 <PI_Controller+0x28>
            wIntegral_sum_temp = -INT32_MAX;
 8004896:	4d02      	ldr	r5, [pc, #8]	; (80048a0 <PI_Controller+0x80>)
 8004898:	e7d6      	b.n	8004848 <PI_Controller+0x28>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	7fffffff 	.word	0x7fffffff
 80048a0:	80000001 	.word	0x80000001

080048a4 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 80048a4:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80048a6:	6882      	ldr	r2, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80048a8:	230c      	movs	r3, #12
 80048aa:	5ed1      	ldrsh	r1, [r2, r3]
 80048ac:	2416      	movs	r4, #22
 80048ae:	5f13      	ldrsh	r3, [r2, r4]
 80048b0:	434b      	muls	r3, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80048b2:	210e      	movs	r1, #14
 80048b4:	5e54      	ldrsh	r4, [r2, r1]
 80048b6:	2118      	movs	r1, #24
 80048b8:	5e51      	ldrsh	r1, [r2, r1]
 80048ba:	4361      	muls	r1, r4
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80048bc:	1859      	adds	r1, r3, r1
    wAux /= 65536;
 80048be:	17ca      	asrs	r2, r1, #31
 80048c0:	0412      	lsls	r2, r2, #16

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 80048c2:	2300      	movs	r3, #0
 80048c4:	5ec4      	ldrsh	r4, [r0, r3]
    wAux /= 65536;
 80048c6:	0c13      	lsrs	r3, r2, #16
 80048c8:	185b      	adds	r3, r3, r1
 80048ca:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 80048cc:	1b1b      	subs	r3, r3, r4
 80048ce:	111b      	asrs	r3, r3, #4
 80048d0:	191b      	adds	r3, r3, r4
 80048d2:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)

080048d8 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80048dc:	4770      	bx	lr
 80048de:	46c0      	nop			; (mov r8, r8)

080048e0 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80048e0:	b570      	push	{r4, r5, r6, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80048e2:	2300      	movs	r3, #0
 80048e4:	5ec5      	ldrsh	r5, [r0, r3]
{
 80048e6:	0004      	movs	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80048e8:	68c0      	ldr	r0, [r0, #12]
 80048ea:	f7ff fe0d 	bl	8004508 <VBS_GetAvBusVoltage_V>
 80048ee:	4368      	muls	r0, r5
 80048f0:	f7fb fed4 	bl	800069c <__aeabi_i2f>
 80048f4:	6861      	ldr	r1, [r4, #4]
 80048f6:	f7fb fdab 	bl	8000450 <__aeabi_fmul>

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80048fa:	bd70      	pop	{r4, r5, r6, pc}

080048fc <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80048fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80048fe:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004900:	3201      	adds	r2, #1
 8004902:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004904:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8004906:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004908:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800490a:	0176      	lsls	r6, r6, #5
 800490c:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 800490e:	781c      	ldrb	r4, [r3, #0]
 8004910:	2c0f      	cmp	r4, #15
 8004912:	d80c      	bhi.n	800492e <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004914:	6904      	ldr	r4, [r0, #16]
 8004916:	4225      	tst	r5, r4
 8004918:	d0f9      	beq.n	800490e <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800491a:	3201      	adds	r2, #1
 800491c:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800491e:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004920:	4296      	cmp	r6, r2
 8004922:	d8f4      	bhi.n	800490e <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8004924:	781c      	ldrb	r4, [r3, #0]
 8004926:	2c0f      	cmp	r4, #15
 8004928:	d8f1      	bhi.n	800490e <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 800492a:	2301      	movs	r3, #1
 800492c:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 800492e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004930 <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004930:	2387      	movs	r3, #135	; 0x87
{
 8004932:	b530      	push	{r4, r5, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004934:	2570      	movs	r5, #112	; 0x70
 8004936:	4a10      	ldr	r2, [pc, #64]	; (8004978 <R3_1_HFCurrentsCalibrationAB+0x48>)
  uint8_t bSector = pHandle->CalibSector;
 8004938:	5cc4      	ldrb	r4, [r0, r3]
 800493a:	6853      	ldr	r3, [r2, #4]
 800493c:	43ab      	bics	r3, r5
 800493e:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004940:	2386      	movs	r3, #134	; 0x86
 8004942:	5cc2      	ldrb	r2, [r0, r3]
 8004944:	2a0f      	cmp	r2, #15
 8004946:	d813      	bhi.n	8004970 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004948:	228c      	movs	r2, #140	; 0x8c
 800494a:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800494c:	5882      	ldr	r2, [r0, r2]
 800494e:	46ac      	mov	ip, r5
 8004950:	00a4      	lsls	r4, r4, #2
 8004952:	1912      	adds	r2, r2, r4
 8004954:	6b54      	ldr	r4, [r2, #52]	; 0x34
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004956:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 8004958:	8824      	ldrh	r4, [r4, #0]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 800495a:	8812      	ldrh	r2, [r2, #0]
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 800495c:	4464      	add	r4, ip
 800495e:	6704      	str	r4, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 8004960:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8004962:	46a4      	mov	ip, r4
 8004964:	4462      	add	r2, ip
 8004966:	6742      	str	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 8004968:	5cc2      	ldrb	r2, [r0, r3]
 800496a:	3201      	adds	r2, #1
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004974:	804b      	strh	r3, [r1, #2]
}
 8004976:	bd30      	pop	{r4, r5, pc}
 8004978:	40012c00 	.word	0x40012c00

0800497c <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 800497c:	2387      	movs	r3, #135	; 0x87
{
 800497e:	b530      	push	{r4, r5, lr}
 8004980:	2570      	movs	r5, #112	; 0x70
 8004982:	4c0f      	ldr	r4, [pc, #60]	; (80049c0 <R3_1_HFCurrentsCalibrationC+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 8004984:	5cc2      	ldrb	r2, [r0, r3]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	43ab      	bics	r3, r5
 800498a:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 800498c:	236a      	movs	r3, #106	; 0x6a
 800498e:	2400      	movs	r4, #0
 8004990:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8004992:	331c      	adds	r3, #28
 8004994:	5cc4      	ldrb	r4, [r0, r3]
 8004996:	2c0f      	cmp	r4, #15
 8004998:	d80e      	bhi.n	80049b8 <R3_1_HFCurrentsCalibrationC+0x3c>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 800499a:	248c      	movs	r4, #140	; 0x8c
 800499c:	3212      	adds	r2, #18
 800499e:	5904      	ldr	r4, [r0, r4]
 80049a0:	0092      	lsls	r2, r2, #2
 80049a2:	18a2      	adds	r2, r4, r2
 80049a4:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	46a4      	mov	ip, r4
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	4462      	add	r2, ip
 80049ae:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 80049b0:	5cc2      	ldrb	r2, [r0, r3]
 80049b2:	3201      	adds	r2, #1
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80049bc:	804b      	strh	r3, [r1, #2]
}
 80049be:	bd30      	pop	{r4, r5, pc}
 80049c0:	40012c00 	.word	0x40012c00

080049c4 <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80049c4:	2104      	movs	r1, #4
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <R3_1_Init+0xf0>)
{
 80049c8:	b530      	push	{r4, r5, lr}
 80049ca:	6853      	ldr	r3, [r2, #4]
 80049cc:	0004      	movs	r4, r0
 80049ce:	438b      	bics	r3, r1
 80049d0:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80049d2:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80049d4:	6853      	ldr	r3, [r2, #4]
 80049d6:	3104      	adds	r1, #4
 80049d8:	438b      	bics	r3, r1
 80049da:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80049dc:	6011      	str	r1, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <R3_1_Init+0xf4>)
 80049e2:	0309      	lsls	r1, r1, #12
 80049e4:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80049e6:	2580      	movs	r5, #128	; 0x80
 80049e8:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80049ea:	2081      	movs	r0, #129	; 0x81
 80049ec:	6019      	str	r1, [r3, #0]
 80049ee:	4933      	ldr	r1, [pc, #204]	; (8004abc <R3_1_Init+0xf8>)
 80049f0:	4240      	negs	r0, r0
 80049f2:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80049f4:	68c8      	ldr	r0, [r1, #12]
 80049f6:	b083      	sub	sp, #12
 80049f8:	4328      	orrs	r0, r5
 80049fa:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80049fc:	5b60      	ldrh	r0, [r4, r5]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80049fe:	3d7e      	subs	r5, #126	; 0x7e
 8004a00:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 8004a02:	6248      	str	r0, [r1, #36]	; 0x24
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a04:	2080      	movs	r0, #128	; 0x80
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	03c0      	lsls	r0, r0, #15
 8004a0a:	4301      	orrs	r1, r0
 8004a0c:	6199      	str	r1, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a0e:	699b      	ldr	r3, [r3, #24]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004a10:	492b      	ldr	r1, [pc, #172]	; (8004ac0 <R3_1_Init+0xfc>)
 8004a12:	4003      	ands	r3, r0
 8004a14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	68c8      	ldr	r0, [r1, #12]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4303      	orrs	r3, r0
 8004a20:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 8004a22:	6893      	ldr	r3, [r2, #8]
 8004a24:	4927      	ldr	r1, [pc, #156]	; (8004ac4 <R3_1_Init+0x100>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004a26:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 8004a28:	4019      	ands	r1, r3
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004a30:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8004a32:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8004a34:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dbfc      	blt.n	8004a34 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004a3a:	6893      	ldr	r3, [r2, #8]
 8004a3c:	4219      	tst	r1, r3
 8004a3e:	d1f9      	bne.n	8004a34 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004a40:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8004a42:	4218      	tst	r0, r3
 8004a44:	d1f6      	bne.n	8004a34 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004a46:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004a48:	421d      	tst	r5, r3
 8004a4a:	d1f3      	bne.n	8004a34 <R3_1_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8004a4c:	6893      	ldr	r3, [r2, #8]
 8004a4e:	491d      	ldr	r1, [pc, #116]	; (8004ac4 <R3_1_Init+0x100>)
 8004a50:	400b      	ands	r3, r1
 8004a52:	2101      	movs	r1, #1
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8004a58:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8004a5a:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <R3_1_Init+0xf0>)
 8004a5c:	680b      	ldr	r3, [r1, #0]
 8004a5e:	421a      	tst	r2, r3
 8004a60:	d0fc      	beq.n	8004a5c <R3_1_Init+0x98>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 8004a62:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004a64:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004a66:	4918      	ldr	r1, [pc, #96]	; (8004ac8 <R3_1_Init+0x104>)
 8004a68:	3382      	adds	r3, #130	; 0x82
 8004a6a:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <R3_1_Init+0x108>)
    pHandle->ADCRegularLocked=false; 
 8004a6e:	2500      	movs	r5, #0
 8004a70:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004a72:	684b      	ldr	r3, [r1, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	4303      	orrs	r3, r0
 8004a7a:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004a7c:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004a7e:	306d      	adds	r0, #109	; 0x6d
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <R3_1_Init+0xf8>)
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	4381      	bics	r1, r0
 8004a8a:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8004a8c:	6a18      	ldr	r0, [r3, #32]
 8004a8e:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <R3_1_Init+0x10c>)
 8004a90:	4301      	orrs	r1, r0
 8004a92:	6219      	str	r1, [r3, #32]
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	00c9      	lsls	r1, r1, #3
 8004a98:	67e1      	str	r1, [r4, #124]	; 0x7c
    pHandle->OverCurrentFlag = false;
 8004a9a:	2088      	movs	r0, #136	; 0x88
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5221      	strh	r1, [r4, r0]
    pHandle->ADCRegularLocked=false; 
 8004aa0:	3003      	adds	r0, #3
 8004aa2:	5425      	strb	r5, [r4, r0]
    pHandle->_Super.DTTest = 0u;
 8004aa4:	382d      	subs	r0, #45	; 0x2d
 8004aa6:	5221      	strh	r1, [r4, r0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	b003      	add	sp, #12
 8004ab0:	bd30      	pop	{r4, r5, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40012400 	.word	0x40012400
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40015800 	.word	0x40015800
 8004ac4:	7fffffe8 	.word	0x7fffffe8
 8004ac8:	40020008 	.word	0x40020008
 8004acc:	40012440 	.word	0x40012440
 8004ad0:	00000555 	.word	0x00000555

08004ad4 <R3_1_SetOffsetCalib>:
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8004ad4:	c90e      	ldmia	r1, {r1, r2, r3}
 8004ad6:	6742      	str	r2, [r0, #116]	; 0x74
 8004ad8:	6783      	str	r3, [r0, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 8004ada:	2201      	movs	r2, #1
 8004adc:	236e      	movs	r3, #110	; 0x6e
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8004ade:	6701      	str	r1, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 8004ae0:	54c2      	strb	r2, [r0, r3]
}
 8004ae2:	4770      	bx	lr

08004ae4 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8004ae4:	3070      	adds	r0, #112	; 0x70
 8004ae6:	c80d      	ldmia	r0, {r0, r2, r3}
 8004ae8:	c10d      	stmia	r1!, {r0, r2, r3}
}
 8004aea:	4770      	bx	lr

08004aec <R3_1_GetPhaseCurrents>:
{
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004aee:	2470      	movs	r4, #112	; 0x70
 8004af0:	4a59      	ldr	r2, [pc, #356]	; (8004c58 <R3_1_GetPhaseCurrents+0x16c>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004af2:	2504      	movs	r5, #4
 8004af4:	6853      	ldr	r3, [r2, #4]
 8004af6:	43a3      	bics	r3, r4
 8004af8:	6053      	str	r3, [r2, #4]
  bSector = ( uint8_t ) pHandle->_Super.Sector;
 8004afa:	236a      	movs	r3, #106	; 0x6a
 8004afc:	4c57      	ldr	r4, [pc, #348]	; (8004c5c <R3_1_GetPhaseCurrents+0x170>)
 8004afe:	5cc2      	ldrb	r2, [r0, r3]
 8004b00:	68e3      	ldr	r3, [r4, #12]
 8004b02:	43ab      	bics	r3, r5
 8004b04:	60e3      	str	r3, [r4, #12]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004b06:	238c      	movs	r3, #140	; 0x8c
 8004b08:	58c3      	ldr	r3, [r0, r3]
 8004b0a:	0094      	lsls	r4, r2, #2
 8004b0c:	191b      	adds	r3, r3, r4
 8004b0e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004b12:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004b14:	881e      	ldrh	r6, [r3, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004b16:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004b18:	b2b6      	uxth	r6, r6
  switch ( bSector )
 8004b1a:	2a04      	cmp	r2, #4
 8004b1c:	d822      	bhi.n	8004b64 <R3_1_GetPhaseCurrents+0x78>
 8004b1e:	2a02      	cmp	r2, #2
 8004b20:	d841      	bhi.n	8004ba6 <R3_1_GetPhaseCurrents+0xba>
 8004b22:	2a00      	cmp	r2, #0
 8004b24:	d027      	beq.n	8004b76 <R3_1_GetPhaseCurrents+0x8a>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004b26:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004b28:	1b1a      	subs	r2, r3, r4
      if ( wAux < -INT16_MAX )
 8004b2a:	4c4d      	ldr	r4, [pc, #308]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
 8004b2c:	42a2      	cmp	r2, r4
 8004b2e:	da66      	bge.n	8004bfe <R3_1_GetPhaseCurrents+0x112>
        pStator_Currents->a = -INT16_MAX;
 8004b30:	0022      	movs	r2, r4
 8004b32:	0027      	movs	r7, r4
 8004b34:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <R3_1_GetPhaseCurrents+0x178>)
 8004b36:	800c      	strh	r4, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8004b38:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004b3a:	1b35      	subs	r5, r6, r4
      if ( wAux > INT16_MAX )
 8004b3c:	2480      	movs	r4, #128	; 0x80
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 8004b3e:	1aad      	subs	r5, r5, r2
      if ( wAux > INT16_MAX )
 8004b40:	0224      	lsls	r4, r4, #8
 8004b42:	42a5      	cmp	r5, r4
 8004b44:	da51      	bge.n	8004bea <R3_1_GetPhaseCurrents+0xfe>
      else  if ( wAux < -INT16_MAX )
 8004b46:	4c46      	ldr	r4, [pc, #280]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
 8004b48:	42a5      	cmp	r5, r4
 8004b4a:	db00      	blt.n	8004b4e <R3_1_GetPhaseCurrents+0x62>
 8004b4c:	e07c      	b.n	8004c48 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->b = -INT16_MAX;
 8004b4e:	4d45      	ldr	r5, [pc, #276]	; (8004c64 <R3_1_GetPhaseCurrents+0x178>)
 8004b50:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8004b52:	2250      	movs	r2, #80	; 0x50
 8004b54:	5287      	strh	r7, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004b56:	195b      	adds	r3, r3, r5
  pHandle->_Super.Ib = pStator_Currents->b;
 8004b58:	3202      	adds	r2, #2
 8004b5a:	5284      	strh	r4, [r0, r2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004b5c:	425b      	negs	r3, r3
 8004b5e:	3202      	adds	r2, #2
 8004b60:	5283      	strh	r3, [r0, r2]
}
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ( bSector )
 8004b64:	2a05      	cmp	r2, #5
 8004b66:	d006      	beq.n	8004b76 <R3_1_GetPhaseCurrents+0x8a>
  pHandle->_Super.Ia = pStator_Currents->a;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	5ecf      	ldrsh	r7, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004b70:	884d      	ldrh	r5, [r1, #2]
 8004b72:	880b      	ldrh	r3, [r1, #0]
 8004b74:	e7ed      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8004b76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004b78:	1b1a      	subs	r2, r3, r4
      if ( wAux < -INT16_MAX )
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	db23      	blt.n	8004bc8 <R3_1_GetPhaseCurrents+0xdc>
      else  if ( wAux > INT16_MAX )
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	429a      	cmp	r2, r3
 8004b86:	db57      	blt.n	8004c38 <R3_1_GetPhaseCurrents+0x14c>
        pStator_Currents->b = INT16_MAX;
 8004b88:	4d37      	ldr	r5, [pc, #220]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
 8004b8a:	002a      	movs	r2, r5
 8004b8c:	002c      	movs	r4, r5
 8004b8e:	804d      	strh	r5, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004b90:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004b92:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 8004b94:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004b96:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	db1f      	blt.n	8004bde <R3_1_GetPhaseCurrents+0xf2>
        pStator_Currents->a = INT16_MAX;
 8004b9e:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
 8004ba0:	001f      	movs	r7, r3
 8004ba2:	800b      	strh	r3, [r1, #0]
 8004ba4:	e7d5      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004ba6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004ba8:	1b1c      	subs	r4, r3, r4
      if ( wAux < -INT16_MAX )
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	da20      	bge.n	8004bf2 <R3_1_GetPhaseCurrents+0x106>
        pStator_Currents->a = INT16_MAX;
 8004bb0:	800b      	strh	r3, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004bb2:	6f43      	ldr	r3, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8004bb4:	4c2a      	ldr	r4, [pc, #168]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004bb6:	1b9e      	subs	r6, r3, r6
      if ( wAux < -INT16_MAX )
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	da29      	bge.n	8004c10 <R3_1_GetPhaseCurrents+0x124>
  pHandle->_Super.Ia = pStator_Currents->a;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	5ecf      	ldrsh	r7, [r1, r3]
 8004bc0:	4d28      	ldr	r5, [pc, #160]	; (8004c64 <R3_1_GetPhaseCurrents+0x178>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004bc2:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = -INT16_MAX;
 8004bc4:	804c      	strh	r4, [r1, #2]
 8004bc6:	e7c4      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = -INT16_MAX;
 8004bc8:	001a      	movs	r2, r3
 8004bca:	001c      	movs	r4, r3
 8004bcc:	804b      	strh	r3, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004bce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004bd0:	4d24      	ldr	r5, [pc, #144]	; (8004c64 <R3_1_GetPhaseCurrents+0x178>)
 8004bd2:	1af6      	subs	r6, r6, r3
      if ( wAux > INT16_MAX )
 8004bd4:	2380      	movs	r3, #128	; 0x80
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004bd6:	1ab2      	subs	r2, r6, r2
      if ( wAux > INT16_MAX )
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	dadf      	bge.n	8004b9e <R3_1_GetPhaseCurrents+0xb2>
      else  if ( wAux < -INT16_MAX )
 8004bde:	4f20      	ldr	r7, [pc, #128]	; (8004c60 <R3_1_GetPhaseCurrents+0x174>)
 8004be0:	42ba      	cmp	r2, r7
 8004be2:	da35      	bge.n	8004c50 <R3_1_GetPhaseCurrents+0x164>
        pStator_Currents->a = -INT16_MAX;
 8004be4:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <R3_1_GetPhaseCurrents+0x178>)
 8004be6:	800f      	strh	r7, [r1, #0]
 8004be8:	e7b3      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = INT16_MAX;
 8004bea:	4d1f      	ldr	r5, [pc, #124]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
 8004bec:	002c      	movs	r4, r5
 8004bee:	804d      	strh	r5, [r1, #2]
 8004bf0:	e7af      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
      else  if ( wAux > INT16_MAX )
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	db15      	blt.n	8004c26 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->a = INT16_MAX;
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
 8004bfc:	e7d8      	b.n	8004bb0 <R3_1_GetPhaseCurrents+0xc4>
      else  if ( wAux > INT16_MAX )
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	429a      	cmp	r2, r3
 8004c04:	db1c      	blt.n	8004c40 <R3_1_GetPhaseCurrents+0x154>
        pStator_Currents->a = INT16_MAX;
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
 8004c08:	001a      	movs	r2, r3
 8004c0a:	001f      	movs	r7, r3
 8004c0c:	800b      	strh	r3, [r1, #0]
 8004c0e:	e793      	b.n	8004b38 <R3_1_GetPhaseCurrents+0x4c>
      else  if ( wAux > INT16_MAX )
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	429e      	cmp	r6, r3
 8004c16:	db08      	blt.n	8004c2a <R3_1_GetPhaseCurrents+0x13e>
        pStator_Currents->b = INT16_MAX;
 8004c18:	4d13      	ldr	r5, [pc, #76]	; (8004c68 <R3_1_GetPhaseCurrents+0x17c>)
  pHandle->_Super.Ia = pStator_Currents->a;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	5ecf      	ldrsh	r7, [r1, r3]
 8004c1e:	002c      	movs	r4, r5
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c20:	880b      	ldrh	r3, [r1, #0]
        pStator_Currents->b = INT16_MAX;
 8004c22:	804d      	strh	r5, [r1, #2]
 8004c24:	e795      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8004c26:	800c      	strh	r4, [r1, #0]
 8004c28:	e7c3      	b.n	8004bb2 <R3_1_GetPhaseCurrents+0xc6>
        pStator_Currents->b = ( int16_t )wAux;
 8004c2a:	b234      	sxth	r4, r6
  pHandle->_Super.Ia = pStator_Currents->a;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	5ecf      	ldrsh	r7, [r1, r3]
        pStator_Currents->b = ( int16_t )wAux;
 8004c30:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c32:	880b      	ldrh	r3, [r1, #0]
 8004c34:	b2b5      	uxth	r5, r6
 8004c36:	e78c      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->b = ( int16_t )wAux;
 8004c38:	b214      	sxth	r4, r2
 8004c3a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c3c:	b295      	uxth	r5, r2
 8004c3e:	e7a7      	b.n	8004b90 <R3_1_GetPhaseCurrents+0xa4>
        pStator_Currents->a = ( int16_t )wAux;
 8004c40:	b217      	sxth	r7, r2
 8004c42:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c44:	b293      	uxth	r3, r2
 8004c46:	e777      	b.n	8004b38 <R3_1_GetPhaseCurrents+0x4c>
        pStator_Currents->b = ( int16_t )wAux;
 8004c48:	b22c      	sxth	r4, r5
 8004c4a:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c4c:	b2ad      	uxth	r5, r5
 8004c4e:	e780      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
        pStator_Currents->a = ( int16_t )wAux;
 8004c50:	b217      	sxth	r7, r2
 8004c52:	800f      	strh	r7, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004c54:	b293      	uxth	r3, r2
 8004c56:	e77c      	b.n	8004b52 <R3_1_GetPhaseCurrents+0x66>
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40012400 	.word	0x40012400
 8004c60:	ffff8001 	.word	0xffff8001
 8004c64:	00008001 	.word	0x00008001
 8004c68:	00007fff 	.word	0x00007fff

08004c6c <R3_1_WriteTIMRegisters>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004c6c:	228c      	movs	r2, #140	; 0x8c
 8004c6e:	5882      	ldr	r2, [r0, r2]
{
 8004c70:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004c72:	6812      	ldr	r2, [r2, #0]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8004c74:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c76:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 8004c78:	2040      	movs	r0, #64	; 0x40
 8004c7a:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c7c:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 8004c7e:	2042      	movs	r0, #66	; 0x42
 8004c80:	5a18      	ldrh	r0, [r3, r0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c82:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004c84:	6411      	str	r1, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8004c86:	6851      	ldr	r1, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8004c88:	2244      	movs	r2, #68	; 0x44
 8004c8a:	5a98      	ldrh	r0, [r3, r2]
 8004c8c:	2801      	cmp	r0, #1
 8004c8e:	d005      	beq.n	8004c9c <R3_1_WriteTIMRegisters+0x30>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8004c90:	2070      	movs	r0, #112	; 0x70
 8004c92:	4008      	ands	r0, r1
 8004c94:	1e43      	subs	r3, r0, #1
 8004c96:	4198      	sbcs	r0, r3
    hAux = MC_DURATION;
 8004c98:	b280      	uxth	r0, r0
}
 8004c9a:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	5299      	strh	r1, [r3, r2]
 8004ca0:	e7fb      	b.n	8004c9a <R3_1_WriteTIMRegisters+0x2e>
 8004ca2:	46c0      	nop			; (mov r8, r8)

08004ca4 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	00db      	lsls	r3, r3, #3
{
 8004ca8:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004caa:	67c3      	str	r3, [r0, #124]	; 0x7c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8004cac:	2387      	movs	r3, #135	; 0x87
 8004cae:	5cc2      	ldrb	r2, [r0, r3]
 8004cb0:	3b1d      	subs	r3, #29
 8004cb2:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 8004cb4:	3316      	adds	r3, #22
 8004cb6:	5ac1      	ldrh	r1, [r0, r3]
 8004cb8:	3901      	subs	r1, #1
 8004cba:	b289      	uxth	r1, r1
 8004cbc:	f7ff ffd6 	bl	8004c6c <R3_1_WriteTIMRegisters>
}
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)

08004cc4 <R3_1_SetADCSampPointSectX>:
  register uint16_t lowDuty = pHdl->lowDuty;
 8004cc4:	2346      	movs	r3, #70	; 0x46
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004cc6:	218c      	movs	r1, #140	; 0x8c
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8004cca:	5ac4      	ldrh	r4, [r0, r3]
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004ccc:	333a      	adds	r3, #58	; 0x3a
 8004cce:	5846      	ldr	r6, [r0, r1]
 8004cd0:	5ac2      	ldrh	r2, [r0, r3]
 8004cd2:	3926      	subs	r1, #38	; 0x26
 8004cd4:	1b13      	subs	r3, r2, r4
 8004cd6:	5a71      	ldrh	r1, [r6, r1]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	428b      	cmp	r3, r1
 8004cdc:	d907      	bls.n	8004cee <R3_1_SetADCSampPointSectX+0x2a>
    pHandle->_Super.Sector = SECTOR_5;
 8004cde:	2104      	movs	r1, #4
 8004ce0:	236a      	movs	r3, #106	; 0x6a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004ce2:	3a01      	subs	r2, #1
    pHandle->_Super.Sector = SECTOR_5;
 8004ce4:	54c1      	strb	r1, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004ce6:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 8004ce8:	f7ff ffc0 	bl	8004c6c <R3_1_WriteTIMRegisters>
}
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
  register uint16_t midDuty = pHdl->midDuty;
 8004cee:	2548      	movs	r5, #72	; 0x48
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8004cf0:	5b45      	ldrh	r5, [r0, r5]
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8004cf2:	005b      	lsls	r3, r3, #1
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8004cf4:	1b65      	subs	r5, r4, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8004cf6:	b2ad      	uxth	r5, r5
 8004cf8:	429d      	cmp	r5, r3
 8004cfa:	d904      	bls.n	8004d06 <R3_1_SetADCSampPointSectX+0x42>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8004cfc:	2368      	movs	r3, #104	; 0x68
 8004cfe:	5af1      	ldrh	r1, [r6, r3]
 8004d00:	1a61      	subs	r1, r4, r1
 8004d02:	b289      	uxth	r1, r1
 8004d04:	e7f0      	b.n	8004ce8 <R3_1_SetADCSampPointSectX+0x24>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8004d06:	1909      	adds	r1, r1, r4
 8004d08:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8004d0a:	428a      	cmp	r2, r1
 8004d0c:	d8ec      	bhi.n	8004ce8 <R3_1_SetADCSampPointSectX+0x24>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004d0e:	2380      	movs	r3, #128	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d10:	0052      	lsls	r2, r2, #1
 8004d12:	3a01      	subs	r2, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004d14:	011b      	lsls	r3, r3, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d16:	1a51      	subs	r1, r2, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004d18:	67c3      	str	r3, [r0, #124]	; 0x7c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004d1a:	b289      	uxth	r1, r1
 8004d1c:	e7e4      	b.n	8004ce8 <R3_1_SetADCSampPointSectX+0x24>
 8004d1e:	46c0      	nop			; (mov r8, r8)

08004d20 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 8004d20:	236b      	movs	r3, #107	; 0x6b
 8004d22:	2201      	movs	r2, #1
 8004d24:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d26:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <R3_1_TurnOnLowSides+0x44>)
 8004d28:	3b6d      	subs	r3, #109	; 0x6d
 8004d2a:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004d2c:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004d2e:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004d30:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004d32:	2101      	movs	r1, #1
 8004d34:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, ticks);
  LL_TIM_OC_SetCompareCH2(TIMx, ticks);
  LL_TIM_OC_SetCompareCH3(TIMx, ticks);

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8004d36:	4219      	tst	r1, r3
 8004d38:	d0fc      	beq.n	8004d34 <R3_1_TurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004d44:	238c      	movs	r3, #140	; 0x8c
 8004d46:	2278      	movs	r2, #120	; 0x78
 8004d48:	58c3      	ldr	r3, [r0, r3]
 8004d4a:	5c9a      	ldrb	r2, [r3, r2]
 8004d4c:	2a02      	cmp	r2, #2
 8004d4e:	d108      	bne.n	8004d62 <R3_1_TurnOnLowSides+0x42>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004d50:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004d52:	6919      	ldr	r1, [r3, #16]
 8004d54:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	6959      	ldr	r1, [r3, #20]
 8004d5a:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	6193      	str	r3, [r2, #24]

  }
  return;
}
 8004d62:	4770      	bx	lr
 8004d64:	40012c00 	.word	0x40012c00

08004d68 <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8004d68:	236b      	movs	r3, #107	; 0x6b
 8004d6a:	2200      	movs	r2, #0
{
 8004d6c:	b570      	push	{r4, r5, r6, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004d6e:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8004d70:	3320      	adds	r3, #32
 8004d72:	3201      	adds	r2, #1
 8004d74:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 8004d76:	3b0b      	subs	r3, #11
 8004d78:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004d7a:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <R3_1_SwitchOnPWM+0xdc>)
 8004d7c:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8004d7e:	3a05      	subs	r2, #5
 8004d80:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004d82:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004d84:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d88:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004d8a:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d8c:	4252      	negs	r2, r2
 8004d8e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004d90:	691a      	ldr	r2, [r3, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8004d92:	4211      	tst	r1, r2
 8004d94:	d0fc      	beq.n	8004d90 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d96:	2202      	movs	r2, #2
 8004d98:	4252      	negs	r2, r2
 8004d9a:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004da0:	00d2      	lsls	r2, r2, #3
 8004da2:	430a      	orrs	r2, r1
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004daa:	0212      	lsls	r2, r2, #8
 8004dac:	430a      	orrs	r2, r1
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004db0:	228c      	movs	r2, #140	; 0x8c
 8004db2:	2178      	movs	r1, #120	; 0x78
 8004db4:	5882      	ldr	r2, [r0, r2]
 8004db6:	5c51      	ldrb	r1, [r2, r1]
 8004db8:	2902      	cmp	r1, #2
 8004dba:	d029      	beq.n	8004e10 <R3_1_SwitchOnPWM+0xa8>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8004dbc:	2370      	movs	r3, #112	; 0x70
 8004dbe:	5cd3      	ldrb	r3, [r2, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	4921      	ldr	r1, [pc, #132]	; (8004e48 <R3_1_SwitchOnPWM+0xe0>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004dc4:	2502      	movs	r5, #2
 8004dc6:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004dc8:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004dca:	4390      	bics	r0, r2
 8004dcc:	4303      	orrs	r3, r0
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004dce:	2001      	movs	r0, #1
 8004dd0:	614b      	str	r3, [r1, #20]
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <R3_1_SwitchOnPWM+0xe4>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4382      	bics	r2, r0
 8004dd8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	0c12      	lsrs	r2, r2, #16
 8004dde:	0412      	lsls	r2, r2, #16
 8004de0:	432a      	orrs	r2, r5
 8004de2:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	4304      	orrs	r4, r0
 8004de8:	601c      	str	r4, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004dea:	2404      	movs	r4, #4
 8004dec:	600c      	str	r4, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004dee:	68ca      	ldr	r2, [r1, #12]
 8004df0:	43b2      	bics	r2, r6
 8004df2:	4302      	orrs	r2, r0
 8004df4:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <R3_1_SwitchOnPWM+0xe8>)
 8004df8:	6054      	str	r4, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	432a      	orrs	r2, r5
 8004dfe:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004e00:	2202      	movs	r2, #2
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <R3_1_SwitchOnPWM+0xdc>)
 8004e04:	4252      	negs	r2, r2
 8004e06:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4310      	orrs	r0, r2
 8004e0c:	60d8      	str	r0, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4910      	ldr	r1, [pc, #64]	; (8004e54 <R3_1_SwitchOnPWM+0xec>)
 8004e14:	400b      	ands	r3, r1
 8004e16:	428b      	cmp	r3, r1
 8004e18:	d009      	beq.n	8004e2e <R3_1_SwitchOnPWM+0xc6>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004e1a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004e1c:	6911      	ldr	r1, [r2, #16]
 8004e1e:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004e20:	6893      	ldr	r3, [r2, #8]
 8004e22:	6951      	ldr	r1, [r2, #20]
 8004e24:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004e26:	68d3      	ldr	r3, [r2, #12]
 8004e28:	6991      	ldr	r1, [r2, #24]
 8004e2a:	6299      	str	r1, [r3, #40]	; 0x28
}
 8004e2c:	e7c6      	b.n	8004dbc <R3_1_SwitchOnPWM+0x54>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004e2e:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004e30:	6911      	ldr	r1, [r2, #16]
 8004e32:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004e34:	6893      	ldr	r3, [r2, #8]
 8004e36:	6951      	ldr	r1, [r2, #20]
 8004e38:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004e3a:	68d3      	ldr	r3, [r2, #12]
 8004e3c:	6991      	ldr	r1, [r2, #24]
 8004e3e:	6199      	str	r1, [r3, #24]
}
 8004e40:	e7bc      	b.n	8004dbc <R3_1_SwitchOnPWM+0x54>
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40012400 	.word	0x40012400
 8004e4c:	40020008 	.word	0x40020008
 8004e50:	40020000 	.word	0x40020000
 8004e54:	00000555 	.word	0x00000555

08004e58 <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <R3_1_SwitchOffPWM+0x90>)
  * @brief  Contains the TIMx Update event interrupt.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	438a      	bics	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8004e64:	2100      	movs	r1, #0
 8004e66:	226b      	movs	r2, #107	; 0x6b
 8004e68:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6c:	491f      	ldr	r1, [pc, #124]	; (8004eec <R3_1_SwitchOffPWM+0x94>)
 8004e6e:	400a      	ands	r2, r1
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->BrakeActionLock == true )
 8004e72:	238a      	movs	r3, #138	; 0x8a
 8004e74:	5cc3      	ldrb	r3, [r0, r3]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <R3_1_SwitchOffPWM+0x2e>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004e7a:	2278      	movs	r2, #120	; 0x78
 8004e7c:	338c      	adds	r3, #140	; 0x8c
 8004e7e:	58c3      	ldr	r3, [r0, r3]
 8004e80:	5c9a      	ldrb	r2, [r3, r2]
 8004e82:	2a02      	cmp	r2, #2
 8004e84:	d025      	beq.n	8004ed2 <R3_1_SwitchOffPWM+0x7a>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004e86:	2102      	movs	r1, #2
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <R3_1_SwitchOffPWM+0x98>)
  MODIFY_REG(ADCx->CR,
 8004e8a:	4c1a      	ldr	r4, [pc, #104]	; (8004ef4 <R3_1_SwitchOffPWM+0x9c>)
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	438b      	bics	r3, r1
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <R3_1_SwitchOffPWM+0xa0>)
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	4022      	ands	r2, r4
 8004e98:	2410      	movs	r4, #16
 8004e9a:	4322      	orrs	r2, r4
 8004e9c:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	3c0f      	subs	r4, #15
 8004ea2:	43a2      	bics	r2, r4
 8004ea4:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <R3_1_SwitchOffPWM+0xa4>)
 8004ea8:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004eaa:	2204      	movs	r2, #4
 8004eac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4913      	ldr	r1, [pc, #76]	; (8004f00 <R3_1_SwitchOffPWM+0xa8>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8004eb6:	238b      	movs	r3, #139	; 0x8b
 8004eb8:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <R3_1_SwitchOffPWM+0x90>)
 8004ec0:	3b8d      	subs	r3, #141	; 0x8d
 8004ec2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004ec4:	6913      	ldr	r3, [r2, #16]

  /* Wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8004ec6:	4219      	tst	r1, r3
 8004ec8:	d0fc      	beq.n	8004ec4 <R3_1_SwitchOffPWM+0x6c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004eca:	2302      	movs	r3, #2
 8004ecc:	425b      	negs	r3, r3
 8004ece:	6113      	str	r3, [r2, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8004ed0:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004ed2:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004ed4:	6919      	ldr	r1, [r3, #16]
 8004ed6:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	6959      	ldr	r1, [r3, #20]
 8004edc:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004ee4:	e7cf      	b.n	8004e86 <R3_1_SwitchOffPWM+0x2e>
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	ffff7fff 	.word	0xffff7fff
 8004ef0:	40020008 	.word	0x40020008
 8004ef4:	7fffffe8 	.word	0x7fffffe8
 8004ef8:	40012400 	.word	0x40012400
 8004efc:	40020000 	.word	0x40020000
 8004f00:	fffff23f 	.word	0xfffff23f

08004f04 <R3_1_CurrentReadingCalibration>:
{
 8004f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f06:	464e      	mov	r6, r9
 8004f08:	4645      	mov	r5, r8
 8004f0a:	46de      	mov	lr, fp
 8004f0c:	4657      	mov	r7, sl
 8004f0e:	b5e0      	push	{r5, r6, r7, lr}
  if (false == pHandle->_Super.offsetCalibStatus)
 8004f10:	266e      	movs	r6, #110	; 0x6e
 8004f12:	5d85      	ldrb	r5, [r0, r6]
{
 8004f14:	0004      	movs	r4, r0
 8004f16:	b083      	sub	sp, #12
  if (false == pHandle->_Super.offsetCalibStatus)
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	d02d      	beq.n	8004f78 <R3_1_CurrentReadingCalibration+0x74>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f1c:	4a40      	ldr	r2, [pc, #256]	; (8005020 <R3_1_CurrentReadingCalibration+0x11c>)
 8004f1e:	4941      	ldr	r1, [pc, #260]	; (8005024 <R3_1_CurrentReadingCalibration+0x120>)
 8004f20:	6813      	ldr	r3, [r2, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f22:	2508      	movs	r5, #8
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f24:	400b      	ands	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	6813      	ldr	r3, [r2, #0]
 8004f2a:	400b      	ands	r3, r1
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	400b      	ands	r3, r1
 8004f32:	6013      	str	r3, [r2, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	5ae1      	ldrh	r1, [r4, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004f38:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <R3_1_CurrentReadingCalibration+0x124>)
 8004f3a:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004f3c:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004f3e:	63d9      	str	r1, [r3, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f40:	6998      	ldr	r0, [r3, #24]
 8004f42:	4328      	orrs	r0, r5
 8004f44:	6198      	str	r0, [r3, #24]
 8004f46:	2080      	movs	r0, #128	; 0x80
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	0100      	lsls	r0, r0, #4
 8004f4c:	4308      	orrs	r0, r1
 8004f4e:	6198      	str	r0, [r3, #24]
 8004f50:	6811      	ldr	r1, [r2, #0]
 8004f52:	4329      	orrs	r1, r5
 8004f54:	6011      	str	r1, [r2, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004f56:	6a19      	ldr	r1, [r3, #32]
 8004f58:	4a34      	ldr	r2, [pc, #208]	; (800502c <R3_1_CurrentReadingCalibration+0x128>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	621a      	str	r2, [r3, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8004f5e:	236a      	movs	r3, #106	; 0x6a
 8004f60:	2204      	movs	r2, #4
 8004f62:	54e2      	strb	r2, [r4, r3]
  pHandle->BrakeActionLock = false;
 8004f64:	2200      	movs	r2, #0
 8004f66:	3320      	adds	r3, #32
 8004f68:	54e2      	strb	r2, [r4, r3]
}
 8004f6a:	b003      	add	sp, #12
 8004f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8004f6e:	46bb      	mov	fp, r7
 8004f70:	46b2      	mov	sl, r6
 8004f72:	46a9      	mov	r9, r5
 8004f74:	46a0      	mov	r8, r4
 8004f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8004f78:	6803      	ldr	r3, [r0, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004f7a:	4f2b      	ldr	r7, [pc, #172]	; (8005028 <R3_1_CurrentReadingCalibration+0x124>)
 8004f7c:	9300      	str	r3, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8004f7e:	6943      	ldr	r3, [r0, #20]
    pHandle->PhaseAOffset = 0u;
 8004f80:	6705      	str	r5, [r0, #112]	; 0x70
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8004f82:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 8004f84:	2386      	movs	r3, #134	; 0x86
    pHandle->PhaseBOffset = 0u;
 8004f86:	6745      	str	r5, [r0, #116]	; 0x74
    pHandle->PhaseCOffset = 0u;
 8004f88:	6785      	str	r5, [r0, #120]	; 0x78
    pHandle->PolarizationCounter = 0u;
 8004f8a:	54c5      	strb	r5, [r0, r3]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	4a28      	ldr	r2, [pc, #160]	; (8005030 <R3_1_CurrentReadingCalibration+0x12c>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	623b      	str	r3, [r7, #32]
    pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8004f94:	4b27      	ldr	r3, [pc, #156]	; (8005034 <R3_1_CurrentReadingCalibration+0x130>)
    pHandle->CalibSector = SECTOR_5;
 8004f96:	2287      	movs	r2, #135	; 0x87
    pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8004f98:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8004f9a:	4b27      	ldr	r3, [pc, #156]	; (8005038 <R3_1_CurrentReadingCalibration+0x134>)
    pHandle->CalibSector = SECTOR_5;
 8004f9c:	4693      	mov	fp, r2
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8004f9e:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	5483      	strb	r3, [r0, r2]
    pHandle->_Super.Sector = SECTOR_5;
 8004fa4:	3a1d      	subs	r2, #29
 8004fa6:	5483      	strb	r3, [r0, r2]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004fa8:	f7ff fede 	bl	8004d68 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8004fac:	218c      	movs	r1, #140	; 0x8c
 8004fae:	5860      	ldr	r0, [r4, r1]
 8004fb0:	468a      	mov	sl, r1
 8004fb2:	391b      	subs	r1, #27
 8004fb4:	5c42      	ldrb	r2, [r0, r1]
 8004fb6:	2086      	movs	r0, #134	; 0x86
 8004fb8:	4681      	mov	r9, r0
 8004fba:	3842      	subs	r0, #66	; 0x42
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	44a1      	add	r9, r4
 8004fc0:	44a0      	add	r8, r4
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	0038      	movs	r0, r7
 8004fc8:	f7ff fc98 	bl	80048fc <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f7ff ff43 	bl	8004e58 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <R3_1_CurrentReadingCalibration+0x138>)
    pHandle->_Super.Sector = SECTOR_1;
 8004fd4:	226a      	movs	r2, #106	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8004fd6:	6023      	str	r3, [r4, #0]
    pHandle->CalibSector = SECTOR_1;
 8004fd8:	4658      	mov	r0, fp
    pHandle->PolarizationCounter = 0;
 8004fda:	2386      	movs	r3, #134	; 0x86
    pHandle->CalibSector = SECTOR_1;
 8004fdc:	5425      	strb	r5, [r4, r0]
    pHandle->_Super.Sector = SECTOR_1;
 8004fde:	54a5      	strb	r5, [r4, r2]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004fe0:	0020      	movs	r0, r4
    pHandle->PolarizationCounter = 0;
 8004fe2:	54e5      	strb	r5, [r4, r3]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8004fe4:	f7ff fec0 	bl	8004d68 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8004fe8:	4653      	mov	r3, sl
 8004fea:	2171      	movs	r1, #113	; 0x71
 8004fec:	58e3      	ldr	r3, [r4, r3]
 8004fee:	0038      	movs	r0, r7
 8004ff0:	5c5a      	ldrb	r2, [r3, r1]
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	f7ff fc81 	bl	80048fc <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f7ff ff2c 	bl	8004e58 <R3_1_SwitchOffPWM>
    pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8005000:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	6723      	str	r3, [r4, #112]	; 0x70
    pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 8005006:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	6763      	str	r3, [r4, #116]	; 0x74
    pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 800500c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.offsetCalibStatus = true;
 8005012:	2301      	movs	r3, #1
 8005014:	55a3      	strb	r3, [r4, r6]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8005016:	9b00      	ldr	r3, [sp, #0]
 8005018:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	6163      	str	r3, [r4, #20]
 800501e:	e77d      	b.n	8004f1c <R3_1_CurrentReadingCalibration+0x18>
 8005020:	40012c1c 	.word	0x40012c1c
 8005024:	fffff7ff 	.word	0xfffff7ff
 8005028:	40012c00 	.word	0x40012c00
 800502c:	00000555 	.word	0x00000555
 8005030:	fffffaaa 	.word	0xfffffaaa
 8005034:	08004931 	.word	0x08004931
 8005038:	08004ca5 	.word	0x08004ca5
 800503c:	0800497d 	.word	0x0800497d

08005040 <R3_1_TIMx_UP_IRQHandler>:
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <R3_1_TIMx_UP_IRQHandler+0x6c>)
  * @brief  Contains the TIMx Update event interrupt.
  * 
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 8005042:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8005044:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8005046:	4c1a      	ldr	r4, [pc, #104]	; (80050b0 <R3_1_TIMx_UP_IRQHandler+0x70>)
 8005048:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800504a:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 800504c:	4022      	ands	r2, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800504e:	2480      	movs	r4, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8005050:	430a      	orrs	r2, r1
 8005052:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	4917      	ldr	r1, [pc, #92]	; (80050b4 <R3_1_TIMx_UP_IRQHandler+0x74>)
 8005058:	00e4      	lsls	r4, r4, #3
 800505a:	400a      	ands	r2, r1
 800505c:	4322      	orrs	r2, r4
 800505e:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8005060:	228c      	movs	r2, #140	; 0x8c
 8005062:	5887      	ldr	r7, [r0, r2]
 8005064:	3a22      	subs	r2, #34	; 0x22
 8005066:	5c82      	ldrb	r2, [r0, r2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8005068:	68de      	ldr	r6, [r3, #12]
 800506a:	18b9      	adds	r1, r7, r2
 800506c:	3172      	adds	r1, #114	; 0x72
 800506e:	7809      	ldrb	r1, [r1, #0]
 8005070:	43ae      	bics	r6, r5
 8005072:	0089      	lsls	r1, r1, #2
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005074:	3206      	adds	r2, #6
 8005076:	4331      	orrs	r1, r6
 8005078:	0092      	lsls	r2, r2, #2
 800507a:	60d9      	str	r1, [r3, #12]
 800507c:	18ba      	adds	r2, r7, r2
 800507e:	6852      	ldr	r2, [r2, #4]
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;

  return &pHandle->_Super.Motor;
 8005080:	3068      	adds	r0, #104	; 0x68
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8005084:	2270      	movs	r2, #112	; 0x70
 8005086:	5cb9      	ldrb	r1, [r7, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8005088:	2707      	movs	r7, #7
 800508a:	695e      	ldr	r6, [r3, #20]
 800508c:	43be      	bics	r6, r7
 800508e:	4331      	orrs	r1, r6
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005090:	4e09      	ldr	r6, [pc, #36]	; (80050b8 <R3_1_TIMx_UP_IRQHandler+0x78>)
 8005092:	6159      	str	r1, [r3, #20]
 8005094:	6871      	ldr	r1, [r6, #4]
 8005096:	4391      	bics	r1, r2
 8005098:	4311      	orrs	r1, r2
 800509a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(ADCx->CR,
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	4907      	ldr	r1, [pc, #28]	; (80050bc <R3_1_TIMx_UP_IRQHandler+0x7c>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	432a      	orrs	r2, r5
 80050a4:	609a      	str	r2, [r3, #8]
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 80050a6:	6144      	str	r4, [r0, #20]
}
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	40012400 	.word	0x40012400
 80050b0:	fffff3ff 	.word	0xfffff3ff
 80050b4:	fffff23f 	.word	0xfffff23f
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	7fffffe8 	.word	0x7fffffe8

080050c0 <F0XX_BRK_IRQHandler>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80050c0:	238c      	movs	r3, #140	; 0x8c
 80050c2:	2278      	movs	r2, #120	; 0x78
 80050c4:	58c3      	ldr	r3, [r0, r3]
 80050c6:	5c9a      	ldrb	r2, [r3, r2]
 80050c8:	2a02      	cmp	r2, #2
 80050ca:	d108      	bne.n	80050de <F0XX_BRK_IRQHandler+0x1e>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80050cc:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 80050ce:	6919      	ldr	r1, [r3, #16]
 80050d0:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	6959      	ldr	r1, [r3, #20]
 80050d6:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	6293      	str	r3, [r2, #40]	; 0x28
  }
  pHandle->OverCurrentFlag = true;
 80050de:	2388      	movs	r3, #136	; 0x88
 80050e0:	2201      	movs	r2, #1
 80050e2:	54c2      	strb	r2, [r0, r3]

  return MC_NULL;
}
 80050e4:	2000      	movs	r0, #0
 80050e6:	4770      	bx	lr

080050e8 <R3_1_IsOverCurrentOccurred>:
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  uint16_t retVal = MC_NO_FAULTS;


  if ( pHandle->OverVoltageFlag == true )
 80050e8:	2289      	movs	r2, #137	; 0x89
{
 80050ea:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 80050ec:	5c81      	ldrb	r1, [r0, r2]
{
 80050ee:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 80050f0:	2900      	cmp	r1, #0
 80050f2:	d00b      	beq.n	800510c <R3_1_IsOverCurrentOccurred+0x24>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80050f4:	2100      	movs	r1, #0
 80050f6:	2442      	movs	r4, #66	; 0x42
 80050f8:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80050fa:	2002      	movs	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 80050fc:	2288      	movs	r2, #136	; 0x88
 80050fe:	5c99      	ldrb	r1, [r3, r2]
 8005100:	2900      	cmp	r1, #0
 8005102:	d002      	beq.n	800510a <R3_1_IsOverCurrentOccurred+0x22>
  {
    retVal |= MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 8005104:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 8005106:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 8005108:	5499      	strb	r1, [r3, r2]
  }
  return retVal;
}
 800510a:	bd10      	pop	{r4, pc}
 800510c:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 800510e:	2000      	movs	r0, #0
 8005110:	e7f4      	b.n	80050fc <R3_1_IsOverCurrentOccurred+0x14>
 8005112:	46c0      	nop			; (mov r8, r8)

08005114 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005114:	8c03      	ldrh	r3, [r0, #32]
 8005116:	8b42      	ldrh	r2, [r0, #26]
{
 8005118:	b510      	push	{r4, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800511a:	18d2      	adds	r2, r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800511c:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800511e:	0852      	lsrs	r2, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <RVBS_Clear+0x22>
 8005124:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 8005126:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005128:	0059      	lsls	r1, r3, #1
 800512a:	530a      	strh	r2, [r1, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800512c:	3301      	adds	r3, #1
 800512e:	8b01      	ldrh	r1, [r0, #24]
 8005130:	b29b      	uxth	r3, r3
 8005132:	4299      	cmp	r1, r3
 8005134:	d8f8      	bhi.n	8005128 <RVBS_Clear+0x14>
    }
    pHandle->_Super.LatestConv = aux;
 8005136:	0413      	lsls	r3, r2, #16
 8005138:	431a      	orrs	r2, r3
 800513a:	6042      	str	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800513c:	2329      	movs	r3, #41	; 0x29
 800513e:	2200      	movs	r2, #0
 8005140:	54c2      	strb	r2, [r0, r3]
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005142:	bd10      	pop	{r4, pc}

08005144 <RVBS_Init>:
{
 8005144:	b510      	push	{r4, lr}
 8005146:	0004      	movs	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005148:	300c      	adds	r0, #12
 800514a:	f7fe faad 	bl	80036a8 <RCM_RegisterRegConv>
 800514e:	232a      	movs	r3, #42	; 0x2a
 8005150:	54e0      	strb	r0, [r4, r3]
    RVBS_Clear(pHandle);
 8005152:	0020      	movs	r0, r4
 8005154:	f7ff ffde 	bl	8005114 <RVBS_Clear>
}
 8005158:	bd10      	pop	{r4, pc}
 800515a:	46c0      	nop			; (mov r8, r8)

0800515c <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800515c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800515e:	8b42      	ldrh	r2, [r0, #26]
 8005160:	8b81      	ldrh	r1, [r0, #28]
{
 8005162:	0003      	movs	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005164:	428a      	cmp	r2, r1
 8005166:	d00d      	beq.n	8005184 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005168:	88c4      	ldrh	r4, [r0, #6]
 800516a:	8c00      	ldrh	r0, [r0, #32]
 800516c:	42a0      	cmp	r0, r4
 800516e:	d807      	bhi.n	8005180 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005170:	7f98      	ldrb	r0, [r3, #30]
 8005172:	2800      	cmp	r0, #0
 8005174:	d10f      	bne.n	8005196 <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005176:	42a1      	cmp	r1, r4
 8005178:	d913      	bls.n	80051a2 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800517a:	2201      	movs	r2, #1
 800517c:	779a      	strb	r2, [r3, #30]
          fault = MC_NO_ERROR;
 800517e:	e000      	b.n	8005182 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8005180:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005182:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005184:	88c0      	ldrh	r0, [r0, #6]
 8005186:	4282      	cmp	r2, r0
 8005188:	d30b      	bcc.n	80051a2 <RVBS_CheckFaultState+0x46>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800518a:	8c1b      	ldrh	r3, [r3, #32]
        fault = MC_UNDER_VOLT;
 800518c:	4298      	cmp	r0, r3
 800518e:	4180      	sbcs	r0, r0
 8005190:	4240      	negs	r0, r0
 8005192:	0080      	lsls	r0, r0, #2
 8005194:	e7f5      	b.n	8005182 <RVBS_CheckFaultState+0x26>
        fault = MC_NO_ERROR;
 8005196:	2000      	movs	r0, #0
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005198:	42a2      	cmp	r2, r4
 800519a:	d2f2      	bcs.n	8005182 <RVBS_CheckFaultState+0x26>
          pHandle->OverVoltageHysteresisUpDir = false;
 800519c:	7798      	strb	r0, [r3, #30]
          fault = MC_OVER_VOLT;
 800519e:	3002      	adds	r0, #2
 80051a0:	e7ef      	b.n	8005182 <RVBS_CheckFaultState+0x26>
        fault = MC_OVER_VOLT;
 80051a2:	2002      	movs	r0, #2
 80051a4:	e7ed      	b.n	8005182 <RVBS_CheckFaultState+0x26>
 80051a6:	46c0      	nop			; (mov r8, r8)

080051a8 <RVBS_CalcAvVbus>:
{
 80051a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051aa:	46c6      	mov	lr, r8
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80051ac:	232a      	movs	r3, #42	; 0x2a
{
 80051ae:	b500      	push	{lr}
 80051b0:	0004      	movs	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80051b2:	5cc0      	ldrb	r0, [r0, r3]
 80051b4:	f7fe fb12 	bl	80037dc <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 80051b8:	4b18      	ldr	r3, [pc, #96]	; (800521c <RVBS_CalcAvVbus+0x74>)
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80051ba:	0005      	movs	r5, r0
    if (0xFFFFU == hAux)
 80051bc:	4298      	cmp	r0, r3
 80051be:	d01f      	beq.n	8005200 <RVBS_CalcAvVbus+0x58>
      pHandle->aBuffer[pHandle->index] = hAux;
 80051c0:	2329      	movs	r3, #41	; 0x29
 80051c2:	5ce3      	ldrb	r3, [r4, r3]
 80051c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051c6:	4698      	mov	r8, r3
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	5298      	strh	r0, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80051cc:	7e27      	ldrb	r7, [r4, #24]
 80051ce:	8b26      	ldrh	r6, [r4, #24]
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	d020      	beq.n	8005216 <RVBS_CalcAvVbus+0x6e>
 80051d4:	2300      	movs	r3, #0
      wtemp = 0u;
 80051d6:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 80051d8:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80051da:	3301      	adds	r3, #1
 80051dc:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 80051de:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80051e0:	3202      	adds	r2, #2
 80051e2:	42bb      	cmp	r3, r7
 80051e4:	d1f8      	bne.n	80051d8 <RVBS_CalcAvVbus+0x30>
      wtemp /= pHandle->LowPassFilterBW;
 80051e6:	0031      	movs	r1, r6
 80051e8:	f7fa ff8e 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80051ec:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80051ee:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80051f0:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80051f2:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80051f4:	45b0      	cmp	r8, r6
 80051f6:	d20a      	bcs.n	800520e <RVBS_CalcAvVbus+0x66>
        pHandle->index++;
 80051f8:	4647      	mov	r7, r8
 80051fa:	2329      	movs	r3, #41	; 0x29
 80051fc:	3701      	adds	r7, #1
 80051fe:	54e7      	strb	r7, [r4, r3]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8005200:	0020      	movs	r0, r4
 8005202:	f7ff ffab 	bl	800515c <RVBS_CheckFaultState>
 8005206:	8120      	strh	r0, [r4, #8]
}
 8005208:	bc80      	pop	{r7}
 800520a:	46b8      	mov	r8, r7
 800520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 800520e:	2329      	movs	r3, #41	; 0x29
 8005210:	2200      	movs	r2, #0
 8005212:	54e2      	strb	r2, [r4, r3]
 8005214:	e7f4      	b.n	8005200 <RVBS_CalcAvVbus+0x58>
      wtemp /= pHandle->LowPassFilterBW;
 8005216:	2000      	movs	r0, #0
 8005218:	e7e9      	b.n	80051ee <RVBS_CalcAvVbus+0x46>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	0000ffff 	.word	0x0000ffff

08005220 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005224:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8005226:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005228:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 800522a:	3301      	adds	r3, #1
 800522c:	6143      	str	r3, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 800522e:	4770      	bx	lr

08005230 <REMNG_Calc>:
    int32_t current_ref;

    current_ref = pHandle->Ext;

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8005230:	68c3      	ldr	r3, [r0, #12]
{
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	0004      	movs	r4, r0
    current_ref = pHandle->Ext;
 8005236:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8005238:	2b01      	cmp	r3, #1
 800523a:	d90a      	bls.n	8005252 <REMNG_Calc+0x22>
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 800523c:	6902      	ldr	r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 800523e:	3b01      	subs	r3, #1
      current_ref += pHandle->IncDecAmount;
 8005240:	4694      	mov	ip, r2
 8005242:	4465      	add	r5, ip
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005244:	6941      	ldr	r1, [r0, #20]
      pHandle->RampRemainingStep --;
 8005246:	60c3      	str	r3, [r0, #12]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005248:	0028      	movs	r0, r5
 800524a:	f7fa ffe7 	bl	800021c <__divsi3>
    pHandle->Ext = current_ref;
 800524e:	60a5      	str	r5, [r4, #8]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8005250:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005252:	2b01      	cmp	r3, #1
 8005254:	d004      	beq.n	8005260 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8005256:	6941      	ldr	r1, [r0, #20]
 8005258:	0028      	movs	r0, r5
 800525a:	f7fa ffdf 	bl	800021c <__divsi3>
 800525e:	e7f6      	b.n	800524e <REMNG_Calc+0x1e>
      pHandle->RampRemainingStep = 0U;
 8005260:	2300      	movs	r3, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005262:	6840      	ldr	r0, [r0, #4]
 8005264:	6965      	ldr	r5, [r4, #20]
      pHandle->RampRemainingStep = 0U;
 8005266:	60e3      	str	r3, [r4, #12]
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8005268:	4345      	muls	r5, r0
      pHandle->RampRemainingStep = 0U;
 800526a:	e7f0      	b.n	800524e <REMNG_Calc+0x1e>

0800526c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800526c:	68c0      	ldr	r0, [r0, #12]
 800526e:	4243      	negs	r3, r0
 8005270:	4158      	adcs	r0, r3
      /* nothing to do */
    }
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);
 8005272:	b2c0      	uxtb	r0, r0

}
 8005274:	4770      	bx	lr
 8005276:	46c0      	nop			; (mov r8, r8)

08005278 <getScalingFactor>:
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005278:	2180      	movs	r1, #128	; 0x80
    aux = -Target;
 800527a:	17c3      	asrs	r3, r0, #31
 800527c:	18c0      	adds	r0, r0, r3
 800527e:	4058      	eors	r0, r3
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8005280:	0609      	lsls	r1, r1, #24
{
 8005282:	2301      	movs	r3, #1
 8005284:	e002      	b.n	800528c <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8005286:	3301      	adds	r3, #1
 8005288:	2b20      	cmp	r3, #32
 800528a:	d007      	beq.n	800529c <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800528c:	000a      	movs	r2, r1
 800528e:	40da      	lsrs	r2, r3
    if (TargetAbs >= limit)
 8005290:	4290      	cmp	r0, r2
 8005292:	d3f8      	bcc.n	8005286 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8005294:	2001      	movs	r0, #1
 8005296:	3b01      	subs	r3, #1
 8005298:	4098      	lsls	r0, r3
}
 800529a:	4770      	bx	lr
 800529c:	2080      	movs	r0, #128	; 0x80
 800529e:	0600      	lsls	r0, r0, #24
 80052a0:	e7fb      	b.n	800529a <getScalingFactor+0x22>
 80052a2:	46c0      	nop			; (mov r8, r8)

080052a4 <REMNG_ExecRamp>:
{
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	464f      	mov	r7, r9
 80052a8:	4646      	mov	r6, r8
 80052aa:	46d6      	mov	lr, sl
 80052ac:	0004      	movs	r4, r0
 80052ae:	b5c0      	push	{r6, r7, lr}
 80052b0:	4688      	mov	r8, r1
 80052b2:	1e17      	subs	r7, r2, #0
    if (0U == Durationms)
 80052b4:	d10e      	bne.n	80052d4 <REMNG_ExecRamp+0x30>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80052b6:	0008      	movs	r0, r1
 80052b8:	f7ff ffde 	bl	8005278 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80052bc:	4643      	mov	r3, r8
 80052be:	4343      	muls	r3, r0
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80052c0:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80052c2:	60a3      	str	r3, [r4, #8]
      pHandle->RampRemainingStep = 0U;
 80052c4:	60e7      	str	r7, [r4, #12]
      pHandle->IncDecAmount = 0;
 80052c6:	6127      	str	r7, [r4, #16]
}
 80052c8:	2001      	movs	r0, #1
 80052ca:	bce0      	pop	{r5, r6, r7}
 80052cc:	46ba      	mov	sl, r7
 80052ce:	46b1      	mov	r9, r6
 80052d0:	46a8      	mov	r8, r5
 80052d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80052d4:	6941      	ldr	r1, [r0, #20]
 80052d6:	6880      	ldr	r0, [r0, #8]
 80052d8:	f7fa ffa0 	bl	800021c <__divsi3>
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 80052dc:	4643      	mov	r3, r8
 80052de:	1a1b      	subs	r3, r3, r0
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80052e0:	0006      	movs	r6, r0
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 80052e2:	0018      	movs	r0, r3
 80052e4:	4699      	mov	r9, r3
 80052e6:	f7ff ffc7 	bl	8005278 <getScalingFactor>
 80052ea:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 80052ec:	0030      	movs	r0, r6
 80052ee:	f7ff ffc3 	bl	8005278 <getScalingFactor>
 80052f2:	0005      	movs	r5, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 80052f4:	4640      	mov	r0, r8
 80052f6:	f7ff ffbf 	bl	8005278 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 80052fa:	45aa      	cmp	sl, r5
 80052fc:	d215      	bcs.n	800532a <REMNG_ExecRamp+0x86>
        if (wScalingFactor < wScalingFactor3)
 80052fe:	4655      	mov	r5, sl
 8005300:	4285      	cmp	r5, r0
 8005302:	d814      	bhi.n	800532e <REMNG_ExecRamp+0x8a>
      pHandle->TargetFinal = TargetFinal;
 8005304:	4643      	mov	r3, r8
      aux /= 1000U;
 8005306:	21fa      	movs	r1, #250	; 0xfa
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005308:	436e      	muls	r6, r5
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800530a:	6820      	ldr	r0, [r4, #0]
      pHandle->TargetFinal = TargetFinal;
 800530c:	6063      	str	r3, [r4, #4]
      aux /= 1000U;
 800530e:	0089      	lsls	r1, r1, #2
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8005310:	4378      	muls	r0, r7
      pHandle->ScalingFactor = wScalingFactorMin;
 8005312:	6165      	str	r5, [r4, #20]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8005314:	60a6      	str	r6, [r4, #8]
      aux /= 1000U;
 8005316:	f7fa fef7 	bl	8000108 <__udivsi3>
      pHandle->RampRemainingStep++;
 800531a:	1c41      	adds	r1, r0, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800531c:	4648      	mov	r0, r9
      pHandle->RampRemainingStep++;
 800531e:	60e1      	str	r1, [r4, #12]
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8005320:	4368      	muls	r0, r5
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005322:	f7fa ff7b 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = aux1;
 8005326:	6120      	str	r0, [r4, #16]
 8005328:	e7ce      	b.n	80052c8 <REMNG_ExecRamp+0x24>
        if (wScalingFactor2 < wScalingFactor3)
 800532a:	4285      	cmp	r5, r0
 800532c:	d9ea      	bls.n	8005304 <REMNG_ExecRamp+0x60>
 800532e:	0005      	movs	r5, r0
 8005330:	e7e8      	b.n	8005304 <REMNG_ExecRamp+0x60>
 8005332:	46c0      	nop			; (mov r8, r8)

08005334 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8005334:	b510      	push	{r4, lr}
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pSNSL = pSNSL;
 8005336:	6703      	str	r3, [r0, #112]	; 0x70
    pHandle->pPWM = pPWM;
 8005338:	9b02      	ldr	r3, [sp, #8]
    pHandle->pVSS = pVSS;
 800533a:	66c2      	str	r2, [r0, #108]	; 0x6c
    pHandle->pPWM = pPWM;
 800533c:	6743      	str	r3, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 800533e:	2200      	movs	r2, #0
 8005340:	2354      	movs	r3, #84	; 0x54
    pHandle->pSTC = pSTC;
 8005342:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->OTFSCLowside = false;
 8005344:	52c2      	strh	r2, [r0, r3]
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005346:	6943      	ldr	r3, [r0, #20]
{
 8005348:	0004      	movs	r4, r0
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01f      	beq.n	800538e <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800534e:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01f      	beq.n	8005394 <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005354:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01f      	beq.n	800539a <RUC_Init+0x66>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800535a:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01f      	beq.n	80053a0 <RUC_Init+0x6c>
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2105      	movs	r1, #5
 8005364:	3204      	adds	r2, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <RUC_Init+0x5c>
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800536a:	0053      	lsls	r3, r2, #1
 800536c:	189b      	adds	r3, r3, r2
 800536e:	2200      	movs	r2, #0
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	18e3      	adds	r3, r4, r3
 8005374:	615a      	str	r2, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 8005376:	2348      	movs	r3, #72	; 0x48

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8005378:	2064      	movs	r0, #100	; 0x64
      pHandle->bPhaseNbr = bPhase;
 800537a:	54e1      	strb	r1, [r4, r3]
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800537c:	21fa      	movs	r1, #250	; 0xfa
 800537e:	8823      	ldrh	r3, [r4, #0]
 8005380:	0089      	lsls	r1, r1, #2
 8005382:	4358      	muls	r0, r3
 8005384:	f7fa fec0 	bl	8000108 <__udivsi3>
 8005388:	2356      	movs	r3, #86	; 0x56
 800538a:	54e0      	strb	r0, [r4, r3]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800538c:	bd10      	pop	{r4, pc}
      bPhase++;
 800538e:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005390:	1e4a      	subs	r2, r1, #1
 8005392:	e7ea      	b.n	800536a <RUC_Init+0x36>
      bPhase++;
 8005394:	2102      	movs	r1, #2
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8005396:	1e4a      	subs	r2, r1, #1
 8005398:	e7e7      	b.n	800536a <RUC_Init+0x36>
      bPhase++;
 800539a:	2103      	movs	r1, #3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800539c:	1e4a      	subs	r2, r1, #1
 800539e:	e7e4      	b.n	800536a <RUC_Init+0x36>
      bPhase++;
 80053a0:	2104      	movs	r1, #4
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80053a2:	1e4a      	subs	r2, r1, #1
 80053a4:	e7e1      	b.n	800536a <RUC_Init+0x36>
 80053a6:	46c0      	nop			; (mov r8, r8)

080053a8 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 80053aa:	2258      	movs	r2, #88	; 0x58
 80053ac:	2300      	movs	r3, #0
{
 80053ae:	0004      	movs	r4, r0
 80053b0:	000d      	movs	r5, r1
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 80053b2:	6e87      	ldr	r7, [r0, #104]	; 0x68
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 80053b4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
    pHandle->hDirection = hMotorDirection;
 80053b6:	80c1      	strh	r1, [r0, #6]
    pHandle->bStageCnt = 0U;
 80053b8:	5483      	strb	r3, [r0, r2]
    pHandle->bOTFRelCounter = 0U;
 80053ba:	3a05      	subs	r2, #5
 80053bc:	5483      	strb	r3, [r0, r2]
    pHandle->OTFSCLowside = false;
 80053be:	3201      	adds	r2, #1
 80053c0:	5283      	strh	r3, [r0, r2]

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 80053c2:	0030      	movs	r0, r6
 80053c4:	f000 fcae 	bl	8005d24 <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 80053c8:	0038      	movs	r0, r7
 80053ca:	2104      	movs	r1, #4
 80053cc:	f000 f8fa 	bl	80055c4 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80053d0:	8861      	ldrh	r1, [r4, #2]
 80053d2:	b2ad      	uxth	r5, r5
 80053d4:	4369      	muls	r1, r5
 80053d6:	0030      	movs	r0, r6
 80053d8:	b209      	sxth	r1, r1
 80053da:	f000 fd51 	bl	8005e80 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 80053de:	0038      	movs	r0, r7
 80053e0:	2200      	movs	r2, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	f000 f8f2 	bl	80055cc <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 80053e8:	8a21      	ldrh	r1, [r4, #16]
 80053ea:	0038      	movs	r0, r7
 80053ec:	4369      	muls	r1, r5
 80053ee:	89a2      	ldrh	r2, [r4, #12]
 80053f0:	b209      	sxth	r1, r1
 80053f2:	f000 f8eb 	bl	80055cc <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80053f6:	89e1      	ldrh	r1, [r4, #14]
 80053f8:	0030      	movs	r0, r6
 80053fa:	4369      	muls	r1, r5
 80053fc:	89a2      	ldrh	r2, [r4, #12]
 80053fe:	b209      	sxth	r1, r1
 8005400:	f000 fd4a 	bl	8005e98 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
                                              / 1000U );
 8005404:	21fa      	movs	r1, #250	; 0xfa
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8005406:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8005408:	8820      	ldrh	r0, [r4, #0]
                                              / 1000U );
 800540a:	0089      	lsls	r1, r1, #2
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800540c:	4358      	muls	r0, r3
                                              / 1000U );
 800540e:	f7fa fe7b 	bl	8000108 <__udivsi3>

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005412:	6963      	ldr	r3, [r4, #20]

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8005414:	2200      	movs	r2, #0
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8005416:	60a3      	str	r3, [r4, #8]
    pHandle->bResetPLLCnt = 0U;
 8005418:	2357      	movs	r3, #87	; 0x57
    pHandle->hPhaseRemainingTicks++;
 800541a:	3001      	adds	r0, #1
 800541c:	80a0      	strh	r0, [r4, #4]
    pHandle->bResetPLLCnt = 0U;
 800541e:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)

08005424 <RUC_Exec>:
  * @brief  FOC Main Rev-Up controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire Rev-Up phases have been completed.
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
 8005424:	b570      	push	{r4, r5, r6, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8005426:	8883      	ldrh	r3, [r0, #4]
{
 8005428:	0004      	movs	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800542a:	2b00      	cmp	r3, #0
 800542c:	d126      	bne.n	800547c <RUC_Exec+0x58>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800542e:	68a3      	ldr	r3, [r4, #8]
        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
      }
      else
      {
        retVal = false;
 8005430:	2000      	movs	r0, #0
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8005432:	2b00      	cmp	r3, #0
 8005434:	d021      	beq.n	800547a <RUC_Exec+0x56>
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	8899      	ldrh	r1, [r3, #4]
 800543a:	88e3      	ldrh	r3, [r4, #6]
 800543c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800543e:	4359      	muls	r1, r3
 8005440:	b209      	sxth	r1, r1
 8005442:	f000 f8c3 	bl	80055cc <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8005446:	68a3      	ldr	r3, [r4, #8]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005448:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800544a:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800544c:	8859      	ldrh	r1, [r3, #2]
 800544e:	88e3      	ldrh	r3, [r4, #6]
 8005450:	4359      	muls	r1, r3
        VSS_SetMecAcceleration(pHandle->pVSS,
 8005452:	b209      	sxth	r1, r1
 8005454:	f000 fd20 	bl	8005e98 <VSS_SetMecAcceleration>
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005458:	21fa      	movs	r1, #250	; 0xfa
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800545a:	68a5      	ldr	r5, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800545c:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800545e:	882b      	ldrh	r3, [r5, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8005460:	0089      	lsls	r1, r1, #2
 8005462:	4358      	muls	r0, r3
 8005464:	f7fa fe50 	bl	8000108 <__udivsi3>
        pHandle->bStageCnt++;
 8005468:	2258      	movs	r2, #88	; 0x58
        pHandle->hPhaseRemainingTicks++;
 800546a:	3001      	adds	r0, #1
 800546c:	80a0      	strh	r0, [r4, #4]
  bool retVal = true;
 800546e:	2001      	movs	r0, #1
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8005470:	68ab      	ldr	r3, [r5, #8]
 8005472:	60a3      	str	r3, [r4, #8]
        pHandle->bStageCnt++;
 8005474:	5ca3      	ldrb	r3, [r4, r2]
 8005476:	3301      	adds	r3, #1
 8005478:	54a3      	strb	r3, [r4, r2]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800547a:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->hPhaseRemainingTicks--;
 800547c:	3b01      	subs	r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0d3      	beq.n	800542e <RUC_Exec+0xa>
  bool retVal = true;
 8005486:	2001      	movs	r0, #1
 8005488:	e7f7      	b.n	800547a <RUC_Exec+0x56>
 800548a:	46c0      	nop			; (mov r8, r8)

0800548c <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800548c:	2358      	movs	r3, #88	; 0x58
 800548e:	5cc2      	ldrb	r2, [r0, r3]
 8005490:	3b0f      	subs	r3, #15
 8005492:	5cc3      	ldrb	r3, [r0, r3]
 8005494:	2000      	movs	r0, #0
 8005496:	429a      	cmp	r2, r3
 8005498:	4140      	adcs	r0, r0
      retVal = true;
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
 800549a:	b2c0      	uxtb	r0, r0
}
 800549c:	4770      	bx	lr
 800549e:	46c0      	nop			; (mov r8, r8)

080054a0 <RUC_SetPhase>:
  *         		This parameter must be a number between 0 and 6.
  *        		- New duration value required for associated phase in ms unit.
  *  @retval Boolean set to true
  */
__weak bool RUC_SetPhase(RevUpCtrl_Handle_t *pHandle, uint8_t phaseNumber, RevUpCtrl_PhaseParams_t *phaseData)
{
 80054a0:	b510      	push	{r4, lr}
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80054a2:	2304      	movs	r3, #4
 80054a4:	5ed4      	ldrsh	r4, [r2, r3]
 80054a6:	004b      	lsls	r3, r1, #1
 80054a8:	185b      	adds	r3, r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	18c0      	adds	r0, r0, r3
 80054ae:	8204      	strh	r4, [r0, #16]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80054b0:	2102      	movs	r1, #2
 80054b2:	5e53      	ldrsh	r3, [r2, r1]
 80054b4:	81c3      	strh	r3, [r0, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80054b6:	8813      	ldrh	r3, [r2, #0]
 80054b8:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80054ba:	2001      	movs	r0, #1
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	46c0      	nop			; (mov r8, r8)

080054c0 <RUC_GetNumberOfPhases>:
__weak uint8_t RUC_GetNumberOfPhases(RevUpCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
 80054c0:	2348      	movs	r3, #72	; 0x48
 80054c2:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80054c4:	4770      	bx	lr
 80054c6:	46c0      	nop			; (mov r8, r8)

080054c8 <RUC_GetPhase>:
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80054c8:	004b      	lsls	r3, r1, #1
 80054ca:	185b      	adds	r3, r3, r1
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	18c0      	adds	r0, r0, r3
 80054d0:	2110      	movs	r1, #16
 80054d2:	5e43      	ldrsh	r3, [r0, r1]
 80054d4:	8093      	strh	r3, [r2, #4]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 80054d6:	210e      	movs	r1, #14
 80054d8:	5e43      	ldrsh	r3, [r0, r1]
 80054da:	8053      	strh	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80054dc:	8983      	ldrh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80054de:	2001      	movs	r0, #1
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80054e0:	8013      	strh	r3, [r2, #0]
}
 80054e2:	4770      	bx	lr

080054e4 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 80054e4:	2304      	movs	r3, #4
 80054e6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80054e8:	4770      	bx	lr
 80054ea:	46c0      	nop			; (mov r8, r8)

080054ec <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 80054ec:	230c      	movs	r3, #12
 80054ee:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80054f0:	4770      	bx	lr
 80054f2:	46c0      	nop			; (mov r8, r8)

080054f4 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 80054f4:	2310      	movs	r3, #16
 80054f6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80054f8:	4770      	bx	lr
 80054fa:	46c0      	nop			; (mov r8, r8)

080054fc <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 80054fc:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 80054fe:	2200      	movs	r2, #0
 8005500:	5e8a      	ldrsh	r2, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005502:	78c5      	ldrb	r5, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005504:	7803      	ldrb	r3, [r0, #0]
    if (*pMecSpeedUnit < 0)
 8005506:	2a00      	cmp	r2, #0
 8005508:	db24      	blt.n	8005554 <SPD_IsMecSpeedReliable+0x58>
      hAux = -(*pMecSpeedUnit);
      hAbsMecSpeedUnit = (uint16_t)hAux;
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 800550a:	b292      	uxth	r2, r2
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800550c:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 800550e:	2401      	movs	r4, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005510:	8a81      	ldrh	r1, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005512:	4296      	cmp	r6, r2
 8005514:	d802      	bhi.n	800551c <SPD_IsMecSpeedReliable+0x20>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005516:	4291      	cmp	r1, r2
 8005518:	4192      	sbcs	r2, r2
 800551a:	4254      	negs	r4, r2
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800551c:	2212      	movs	r2, #18
 800551e:	5e81      	ldrsh	r1, [r0, r2]
 8005520:	2900      	cmp	r1, #0
 8005522:	db14      	blt.n	800554e <SPD_IsMecSpeedReliable+0x52>
      hAux = -(pHandle->hMecAccelUnitP);
      hAbsMecAccelUnitP = (uint16_t)hAux;
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8005524:	b289      	uxth	r1, r1
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005526:	8b02      	ldrh	r2, [r0, #24]
 8005528:	428a      	cmp	r2, r1
 800552a:	d301      	bcc.n	8005530 <SPD_IsMecSpeedReliable+0x34>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 800552c:	2c00      	cmp	r4, #0
 800552e:	d009      	beq.n	8005544 <SPD_IsMecSpeedReliable+0x48>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005530:	429d      	cmp	r5, r3
 8005532:	d901      	bls.n	8005538 <SPD_IsMecSpeedReliable+0x3c>
      {
        bSpeedErrorNumber++;
 8005534:	3301      	adds	r3, #1
 8005536:	b2db      	uxtb	r3, r3
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005538:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800553a:	1b58      	subs	r0, r3, r5
 800553c:	1e42      	subs	r2, r0, #1
 800553e:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 8005540:	b2c0      	uxtb	r0, r0
}
 8005542:	bd70      	pop	{r4, r5, r6, pc}
        bSpeedErrorNumber = 0u;
 8005544:	42ab      	cmp	r3, r5
 8005546:	4164      	adcs	r4, r4
 8005548:	4264      	negs	r4, r4
 800554a:	4023      	ands	r3, r4
 800554c:	e7f4      	b.n	8005538 <SPD_IsMecSpeedReliable+0x3c>
      hAux = -(pHandle->hMecAccelUnitP);
 800554e:	4249      	negs	r1, r1
 8005550:	b289      	uxth	r1, r1
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8005552:	e7e8      	b.n	8005526 <SPD_IsMecSpeedReliable+0x2a>
      hAux = -(*pMecSpeedUnit);
 8005554:	4252      	negs	r2, r2
 8005556:	b292      	uxth	r2, r2
      hAbsMecSpeedUnit = (uint16_t)hAux;
 8005558:	e7d8      	b.n	800550c <SPD_IsMecSpeedReliable+0x10>
 800555a:	46c0      	nop			; (mov r8, r8)

0800555c <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 800555c:	0003      	movs	r3, r0
 800555e:	b510      	push	{r4, lr}
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 8005560:	210c      	movs	r1, #12
 8005562:	5e42      	ldrsh	r2, [r0, r1]
    wAux *= INT16_MAX;
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005564:	2114      	movs	r1, #20
 8005566:	5e59      	ldrsh	r1, [r3, r1]
    wAux *= INT16_MAX;
 8005568:	03d0      	lsls	r0, r2, #15
 800556a:	1a80      	subs	r0, r0, r2
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800556c:	f7fa fe56 	bl	800021c <__divsi3>
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
 8005570:	b200      	sxth	r0, r0
}
 8005572:	bd10      	pop	{r4, pc}

08005574 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005574:	232a      	movs	r3, #42	; 0x2a
    pHandle->SPD = SPD_Handle;
 8005576:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005578:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 800557a:	5cc3      	ldrb	r3, [r0, r3]
 800557c:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800557e:	222c      	movs	r2, #44	; 0x2c
 8005580:	5e83      	ldrsh	r3, [r0, r2]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005586:	222e      	movs	r2, #46	; 0x2e
 8005588:	5e83      	ldrsh	r3, [r0, r2]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005592:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005594:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005596:	4770      	bx	lr

08005598 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005598:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800559a:	4770      	bx	lr

0800559c <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 800559c:	6940      	ldr	r0, [r0, #20]
#endif
}
 800559e:	4770      	bx	lr

080055a0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80055a0:	7803      	ldrb	r3, [r0, #0]
{
 80055a2:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d000      	beq.n	80055aa <STC_Clear+0xa>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80055a8:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80055aa:	2100      	movs	r1, #0
 80055ac:	6900      	ldr	r0, [r0, #16]
 80055ae:	f7ff f901 	bl	80047b4 <PID_SetIntegralTerm>
}
 80055b2:	e7f9      	b.n	80055a8 <STC_Clear+0x8>

080055b4 <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 80055b4:	2306      	movs	r3, #6
 80055b6:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80055b8:	4770      	bx	lr
 80055ba:	46c0      	nop			; (mov r8, r8)

080055bc <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80055bc:	230a      	movs	r3, #10
 80055be:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80055c0:	4770      	bx	lr
 80055c2:	46c0      	nop			; (mov r8, r8)

080055c4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80055c4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80055c6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80055c8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80055ca:	4770      	bx	lr

080055cc <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80055ce:	7803      	ldrb	r3, [r0, #0]
{
 80055d0:	0004      	movs	r4, r0
 80055d2:	000d      	movs	r5, r1
 80055d4:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d012      	beq.n	8005600 <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80055da:	2306      	movs	r3, #6
 80055dc:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80055de:	8bc3      	ldrh	r3, [r0, #30]
 80055e0:	4299      	cmp	r1, r3
 80055e2:	dd01      	ble.n	80055e8 <STC_ExecRamp+0x1c>
        allowedRange = false;
 80055e4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80055e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80055e8:	2224      	movs	r2, #36	; 0x24
 80055ea:	5e83      	ldrsh	r3, [r0, r2]
 80055ec:	428b      	cmp	r3, r1
 80055ee:	dcf9      	bgt.n	80055e4 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80055f0:	8c03      	ldrh	r3, [r0, #32]
 80055f2:	4299      	cmp	r1, r3
 80055f4:	da0e      	bge.n	8005614 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80055f6:	2222      	movs	r2, #34	; 0x22
 80055f8:	5e83      	ldrsh	r3, [r0, r2]
 80055fa:	428b      	cmp	r3, r1
 80055fc:	dbf2      	blt.n	80055e4 <STC_ExecRamp+0x18>
 80055fe:	e009      	b.n	8005614 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005600:	f7ff ffdc 	bl	80055bc <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005604:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005606:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005608:	429d      	cmp	r5, r3
 800560a:	dceb      	bgt.n	80055e4 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800560c:	2228      	movs	r2, #40	; 0x28
 800560e:	5ea3      	ldrsh	r3, [r4, r2]
 8005610:	42ab      	cmp	r3, r5
 8005612:	dce7      	bgt.n	80055e4 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8005614:	2e00      	cmp	r6, #0
 8005616:	d109      	bne.n	800562c <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005618:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800561a:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800561c:	2b03      	cmp	r3, #3
 800561e:	d015      	beq.n	800564c <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005620:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	2001      	movs	r0, #1
 8005626:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005628:	61a3      	str	r3, [r4, #24]
 800562a:	e7dc      	b.n	80055e6 <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 800562c:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800562e:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005630:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8005632:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005634:	4370      	muls	r0, r6
        wAux /= 1000U;
 8005636:	f7fa fd67 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800563a:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 800563c:	1c41      	adds	r1, r0, #1
 800563e:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005640:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005642:	f7fa fdeb 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8005646:	61a0      	str	r0, [r4, #24]
 8005648:	2001      	movs	r0, #1
 800564a:	e7cc      	b.n	80055e6 <STC_ExecRamp+0x1a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800564c:	6065      	str	r5, [r4, #4]
 800564e:	e7e8      	b.n	8005622 <STC_ExecRamp+0x56>

08005650 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005654:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005656:	4770      	bx	lr

08005658 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005658:	7802      	ldrb	r2, [r0, #0]
{
 800565a:	b570      	push	{r4, r5, r6, lr}
 800565c:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800565e:	2a04      	cmp	r2, #4
 8005660:	d023      	beq.n	80056aa <STC_CalcTorqueReference+0x52>
    {
      wCurrentReference = pHandle->TorqueRef;
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005662:	6845      	ldr	r5, [r0, #4]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8005664:	68e3      	ldr	r3, [r4, #12]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d909      	bls.n	800567e <STC_CalcTorqueReference+0x26>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 800566a:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800566c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800566e:	468c      	mov	ip, r1
      pHandle->RampRemainingStep--;
 8005670:	60e3      	str	r3, [r4, #12]
      wCurrentReference += pHandle->IncDecAmount;
 8005672:	4465      	add	r5, ip
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8005674:	2a03      	cmp	r2, #3
 8005676:	d00b      	beq.n	8005690 <STC_CalcTorqueReference+0x38>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8005678:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800567a:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800567c:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 800567e:	2b01      	cmp	r3, #1
 8005680:	d1f8      	bne.n	8005674 <STC_CalcTorqueReference+0x1c>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005682:	2302      	movs	r3, #2
 8005684:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 8005686:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005688:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800568a:	60e3      	str	r3, [r4, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800568c:	2a03      	cmp	r2, #3
 800568e:	d1f3      	bne.n	8005678 <STC_CalcTorqueReference+0x20>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005690:	6960      	ldr	r0, [r4, #20]
 8005692:	f7ff ff2b 	bl	80054ec <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8005696:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005698:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800569a:	b209      	sxth	r1, r1
 800569c:	6920      	ldr	r0, [r4, #16]
 800569e:	f7ff f8bf 	bl	8004820 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80056a2:	0403      	lsls	r3, r0, #16
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80056a4:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	e7e8      	b.n	800567c <STC_CalcTorqueReference+0x24>
      wCurrentReference = pHandle->TorqueRef;
 80056aa:	6885      	ldr	r5, [r0, #8]
 80056ac:	e7da      	b.n	8005664 <STC_CalcTorqueReference+0xc>
 80056ae:	46c0      	nop			; (mov r8, r8)

080056b0 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 80056b0:	232c      	movs	r3, #44	; 0x2c
 80056b2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80056b4:	4770      	bx	lr
 80056b6:	46c0      	nop			; (mov r8, r8)

080056b8 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80056b8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80056ba:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 80056bc:	041b      	lsls	r3, r3, #16
{
 80056be:	b082      	sub	sp, #8
  return (IqdRefDefault);
 80056c0:	4318      	orrs	r0, r3
}
 80056c2:	b002      	add	sp, #8
 80056c4:	4770      	bx	lr
 80056c6:	46c0      	nop			; (mov r8, r8)

080056c8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80056c8:	b510      	push	{r4, lr}
 80056ca:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80056cc:	6940      	ldr	r0, [r0, #20]
 80056ce:	f7ff ff0d 	bl	80054ec <SPD_GetAvrgMecSpeedUnit>
 80056d2:	0400      	lsls	r0, r0, #16
 80056d4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	46de      	mov	lr, fp
 80056dc:	4657      	mov	r7, sl
 80056de:	464e      	mov	r6, r9
 80056e0:	4645      	mov	r5, r8
 80056e2:	b5e0      	push	{r5, r6, r7, lr}
 80056e4:	0004      	movs	r4, r0
 80056e6:	b08f      	sub	sp, #60	; 0x3c
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d100      	bne.n	80056ee <STO_PLL_CalcElAngle+0x16>
 80056ec:	e0e3      	b.n	80058b6 <STO_PLL_CalcElAngle+0x1de>
 80056ee:	2900      	cmp	r1, #0
 80056f0:	d100      	bne.n	80056f4 <STO_PLL_CalcElAngle+0x1c>
 80056f2:	e0e0      	b.n	80058b6 <STO_PLL_CalcElAngle+0x1de>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 80056f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80056f6:	4698      	mov	r8, r3
 80056f8:	222e      	movs	r2, #46	; 0x2e
 80056fa:	5e83      	ldrsh	r3, [r0, r2]
 80056fc:	03dd      	lsls	r5, r3, #15
 80056fe:	1aea      	subs	r2, r5, r3
 8005700:	4590      	cmp	r8, r2
 8005702:	dc00      	bgt.n	8005706 <STO_PLL_CalcElAngle+0x2e>
 8005704:	e0df      	b.n	80058c6 <STO_PLL_CalcElAngle+0x1ee>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8005706:	4690      	mov	r8, r2
 8005708:	6682      	str	r2, [r0, #104]	; 0x68
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800570a:	208f      	movs	r0, #143	; 0x8f
 800570c:	4646      	mov	r6, r8
 800570e:	0040      	lsls	r0, r0, #1
 8005710:	5a20      	ldrh	r0, [r4, r0]
 8005712:	4106      	asrs	r6, r0
 8005714:	9603      	str	r6, [sp, #12]
 8005716:	b236      	sxth	r6, r6
 8005718:	46b3      	mov	fp, r6
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800571a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800571c:	9601      	str	r6, [sp, #4]
 800571e:	42b2      	cmp	r2, r6
 8005720:	db00      	blt.n	8005724 <STO_PLL_CalcElAngle+0x4c>
 8005722:	e0e8      	b.n	80058f6 <STO_PLL_CalcElAngle+0x21e>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8005724:	66e2      	str	r2, [r4, #108]	; 0x6c
 8005726:	9201      	str	r2, [sp, #4]
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8005728:	9b01      	ldr	r3, [sp, #4]
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800572a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800572c:	4103      	asrs	r3, r0
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	b21b      	sxth	r3, r3
 8005732:	469a      	mov	sl, r3
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005734:	202c      	movs	r0, #44	; 0x2c
 8005736:	5e23      	ldrsh	r3, [r4, r0]
 8005738:	03dd      	lsls	r5, r3, #15
 800573a:	1ae8      	subs	r0, r5, r3
 800573c:	4282      	cmp	r2, r0
 800573e:	dc00      	bgt.n	8005742 <STO_PLL_CalcElAngle+0x6a>
 8005740:	e0d2      	b.n	80058e8 <STO_PLL_CalcElAngle+0x210>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8005742:	0002      	movs	r2, r0
 8005744:	6620      	str	r0, [r4, #96]	; 0x60
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8005746:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8005748:	9602      	str	r6, [sp, #8]
 800574a:	42b0      	cmp	r0, r6
 800574c:	db00      	blt.n	8005750 <STO_PLL_CalcElAngle+0x78>
 800574e:	e0c4      	b.n	80058da <STO_PLL_CalcElAngle+0x202>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8005750:	6660      	str	r0, [r4, #100]	; 0x64
 8005752:	9002      	str	r0, [sp, #8]
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005754:	238e      	movs	r3, #142	; 0x8e
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	5ae0      	ldrh	r0, [r4, r3]
 800575a:	0013      	movs	r3, r2

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800575c:	9f02      	ldr	r7, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800575e:	4103      	asrs	r3, r0
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005760:	4107      	asrs	r7, r0
 8005762:	9705      	str	r7, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005764:	2602      	movs	r6, #2
 8005766:	5f8f      	ldrsh	r7, [r1, r6]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8005768:	8908      	ldrh	r0, [r1, #8]
 800576a:	2600      	movs	r6, #0
 800576c:	5f8d      	ldrsh	r5, [r1, r6]
 800576e:	4345      	muls	r5, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8005770:	4378      	muls	r0, r7

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005772:	1400      	asrs	r0, r0, #16
 8005774:	9006      	str	r0, [sp, #24]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8005776:	2620      	movs	r6, #32
 8005778:	5fa0      	ldrsh	r0, [r4, r6]
 800577a:	b21f      	sxth	r7, r3
 800577c:	4347      	muls	r7, r0
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800577e:	1bd2      	subs	r2, r2, r7

    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005780:	2622      	movs	r6, #34	; 0x22
 8005782:	5fa7      	ldrsh	r7, [r4, r6]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005784:	142d      	asrs	r5, r5, #16
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8005786:	003e      	movs	r6, r7
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005788:	888f      	ldrh	r7, [r1, #4]
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800578a:	9607      	str	r6, [sp, #28]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800578c:	1bdb      	subs	r3, r3, r7
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800578e:	0037      	movs	r7, r6
 8005790:	b21b      	sxth	r3, r3
 8005792:	435f      	muls	r7, r3
 8005794:	46bc      	mov	ip, r7
    wIalfa_est_Next += wAux;
 8005796:	4494      	add	ip, r2

    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8005798:	2628      	movs	r6, #40	; 0x28
 800579a:	5fa2      	ldrsh	r2, [r4, r6]
    wIalfa_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800579c:	2624      	movs	r6, #36	; 0x24
 800579e:	5fa7      	ldrsh	r7, [r4, r6]
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 80057a0:	4355      	muls	r5, r2
    wIalfa_est_Next += wAux;
 80057a2:	4465      	add	r5, ip
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 80057a4:	46bc      	mov	ip, r7
 80057a6:	465f      	mov	r7, fp
 80057a8:	4666      	mov	r6, ip
 80057aa:	4377      	muls	r7, r6
    wIalfa_est_Next -= wAux;
 80057ac:	1bed      	subs	r5, r5, r7
 80057ae:	950a      	str	r5, [sp, #40]	; 0x28

    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 80057b0:	2626      	movs	r6, #38	; 0x26
 80057b2:	5fa5      	ldrsh	r5, [r4, r6]
 80057b4:	9508      	str	r5, [sp, #32]
 80057b6:	436b      	muls	r3, r5
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80057b8:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80057ba:	4443      	add	r3, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80057bc:	002f      	movs	r7, r5
 80057be:	4655      	mov	r5, sl
 80057c0:	413d      	asrs	r5, r7
 80057c2:	9709      	str	r7, [sp, #36]	; 0x24
#else
    wAux = ((int32_t)hAux_Beta) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 80057c4:	272a      	movs	r7, #42	; 0x2a
 80057c6:	5fe6      	ldrsh	r6, [r4, r7]
 80057c8:	4375      	muls	r5, r6
 80057ca:	46b1      	mov	r9, r6
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057cc:	270e      	movs	r7, #14
 80057ce:	5fe6      	ldrsh	r6, [r4, r7]
 80057d0:	4375      	muls	r5, r6
    wBemf_alfa_est_Next += wAux;
 80057d2:	18eb      	adds	r3, r5, r3
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 80057d4:	9d05      	ldr	r5, [sp, #20]
    wBemf_alfa_est_Next += wAux;
 80057d6:	930b      	str	r3, [sp, #44]	; 0x2c
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80057d8:	b22b      	sxth	r3, r5
 80057da:	4343      	muls	r3, r0
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80057dc:	88c9      	ldrh	r1, [r1, #6]
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80057de:	9802      	ldr	r0, [sp, #8]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80057e0:	1a69      	subs	r1, r5, r1
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80057e2:	1ac7      	subs	r7, r0, r3

    wAux = ((int32_t)pHandle->hC2) * hIbeta_err;
 80057e4:	9b07      	ldr	r3, [sp, #28]
 80057e6:	b209      	sxth	r1, r1
 80057e8:	434b      	muls	r3, r1
    wIbeta_est_Next += wAux;
 80057ea:	19df      	adds	r7, r3, r7
    wIbeta_est_Next += wAux;

    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
    wIbeta_est_Next -= wAux;

    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 80057ec:	9b08      	ldr	r3, [sp, #32]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057ee:	46b0      	mov	r8, r6
    wAux = ((int32_t)pHandle->hC4) * hIbeta_err;
 80057f0:	4359      	muls	r1, r3
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80057f2:	9b01      	ldr	r3, [sp, #4]
    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 80057f4:	9806      	ldr	r0, [sp, #24]
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80057f6:	18ce      	adds	r6, r1, r3

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80057f8:	4659      	mov	r1, fp
 80057fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    wAux = ((int32_t)pHandle->hC5) * hVbeta;
 80057fc:	4342      	muls	r2, r0
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80057fe:	4119      	asrs	r1, r3
#else
    wAux = ((int32_t)hAux_Alfa) / pHandle->hF3;
#endif

    wAux = wAux * pHandle->hC6;
 8005800:	464b      	mov	r3, r9
    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005802:	4650      	mov	r0, sl
    wIbeta_est_Next += wAux;
 8005804:	19d7      	adds	r7, r2, r7
    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 8005806:	4662      	mov	r2, ip
    wAux = wAux * pHandle->hC6;
 8005808:	4359      	muls	r1, r3
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800580a:	4643      	mov	r3, r8
    wAux = ((int32_t)pHandle->hC3) * hAux_Beta;
 800580c:	4342      	muls	r2, r0
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800580e:	4359      	muls	r1, r3
    wIbeta_est_Next -= wAux;
 8005810:	1abf      	subs	r7, r7, r2
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8005812:	2370      	movs	r3, #112	; 0x70
 8005814:	465a      	mov	r2, fp
 8005816:	52e2      	strh	r2, [r4, r3]
    pHandle->hBemf_beta_est = hAux_Beta;
 8005818:	3302      	adds	r3, #2
 800581a:	52e0      	strh	r0, [r4, r3]

    if (0 == pHandle->hForcedDirection)
 800581c:	33b2      	adds	r3, #178	; 0xb2
 800581e:	56e3      	ldrsb	r3, [r4, r3]
    wBemf_beta_est_Next -= wAux;
 8005820:	1a76      	subs	r6, r6, r1
    if (0 == pHandle->hForcedDirection)
 8005822:	2b00      	cmp	r3, #0
 8005824:	d156      	bne.n	80058d4 <STO_PLL_CalcElAngle+0x1fc>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8005826:	4643      	mov	r3, r8
 8005828:	43db      	mvns	r3, r3
 800582a:	17db      	asrs	r3, r3, #31
 800582c:	4698      	mov	r8, r3
 800582e:	4642      	mov	r2, r8
 8005830:	4b36      	ldr	r3, [pc, #216]	; (800590c <STO_PLL_CalcElAngle+0x234>)
 8005832:	4013      	ands	r3, r2
 8005834:	4a36      	ldr	r2, [pc, #216]	; (8005910 <STO_PLL_CalcElAngle+0x238>)
 8005836:	4690      	mov	r8, r2
 8005838:	4498      	add	r8, r3
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800583a:	2304      	movs	r3, #4
 800583c:	5ee0      	ldrsh	r0, [r4, r3]
 800583e:	f7fc f8c3 	bl	80019c8 <MCM_Trig_Functions>
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005842:	4643      	mov	r3, r8
 8005844:	9904      	ldr	r1, [sp, #16]
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005846:	9a03      	ldr	r2, [sp, #12]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8005848:	4359      	muls	r1, r3
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800584a:	4249      	negs	r1, r1

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800584c:	b209      	sxth	r1, r1
 800584e:	b203      	sxth	r3, r0
 8005850:	434b      	muls	r3, r1
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8005852:	4641      	mov	r1, r8
 8005854:	434a      	muls	r2, r1
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8005856:	1401      	asrs	r1, r0, #16
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8005858:	0020      	movs	r0, r4
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800585a:	b212      	sxth	r2, r2
 800585c:	4351      	muls	r1, r2
  hAux1 = (int16_t)(wBeta_Cos_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800585e:	13db      	asrs	r3, r3, #15
  hAux2 = (int16_t)(wAlfa_Sin_tmp >> 15); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8005860:	13c9      	asrs	r1, r1, #15
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8005862:	b21b      	sxth	r3, r3
 8005864:	b209      	sxth	r1, r1
 8005866:	1a59      	subs	r1, r3, r1
 8005868:	3034      	adds	r0, #52	; 0x34
 800586a:	f7fe ffd9 	bl	8004820 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800586e:	23f4      	movs	r3, #244	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005870:	2287      	movs	r2, #135	; 0x87
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8005872:	8220      	strh	r0, [r4, #16]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005874:	5ce3      	ldrb	r3, [r4, r3]
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8005876:	0052      	lsls	r2, r2, #1
  bBuffer_index++;
 8005878:	3301      	adds	r3, #1
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800587a:	5ca2      	ldrb	r2, [r4, r2]
  bBuffer_index++;
 800587c:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800587e:	429a      	cmp	r2, r3
 8005880:	d040      	beq.n	8005904 <STO_PLL_CalcElAngle+0x22c>
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8005882:	001a      	movs	r2, r3
 8005884:	2174      	movs	r1, #116	; 0x74
 8005886:	0052      	lsls	r2, r2, #1
 8005888:	18a2      	adds	r2, r4, r2
 800588a:	4689      	mov	r9, r1
 800588c:	5e55      	ldrsh	r5, [r2, r1]
 800588e:	46a8      	mov	r8, r5
 8005890:	2586      	movs	r5, #134	; 0x86
 8005892:	4641      	mov	r1, r8
 8005894:	006d      	lsls	r5, r5, #1
 8005896:	5361      	strh	r1, [r4, r5]
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8005898:	4649      	mov	r1, r9
 800589a:	5250      	strh	r0, [r2, r1]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800589c:	22f4      	movs	r2, #244	; 0xf4
 800589e:	54a3      	strb	r3, [r4, r2]
    pHandle->_Super.hElAngle += hRotor_Speed;
 80058a0:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ibeta_est = wIbeta_est_Next;
 80058a2:	6667      	str	r7, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 80058a4:	18c0      	adds	r0, r0, r3
    pHandle->Ialfa_est = wIalfa_est_Next;
 80058a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    pHandle->_Super.hElAngle += hRotor_Speed;
 80058a8:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 80058aa:	6623      	str	r3, [r4, #96]	; 0x60
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 80058ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    pHandle->_Super.hElAngle += hRotor_Speed;
 80058ae:	80a0      	strh	r0, [r4, #4]
    pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 80058b0:	66a3      	str	r3, [r4, #104]	; 0x68
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80058b2:	66e6      	str	r6, [r4, #108]	; 0x6c
    retValue = pHandle->_Super.hElAngle;
 80058b4:	e000      	b.n	80058b8 <STO_PLL_CalcElAngle+0x1e0>
    retValue = 0;
 80058b6:	2000      	movs	r0, #0
}
 80058b8:	b00f      	add	sp, #60	; 0x3c
 80058ba:	bcf0      	pop	{r4, r5, r6, r7}
 80058bc:	46bb      	mov	fp, r7
 80058be:	46b2      	mov	sl, r6
 80058c0:	46a9      	mov	r9, r5
 80058c2:	46a0      	mov	r8, r4
 80058c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80058c6:	1b58      	subs	r0, r3, r5
 80058c8:	4580      	cmp	r8, r0
 80058ca:	dd00      	ble.n	80058ce <STO_PLL_CalcElAngle+0x1f6>
 80058cc:	e71d      	b.n	800570a <STO_PLL_CalcElAngle+0x32>
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 80058ce:	4680      	mov	r8, r0
 80058d0:	66a0      	str	r0, [r4, #104]	; 0x68
 80058d2:	e71a      	b.n	800570a <STO_PLL_CalcElAngle+0x32>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4698      	mov	r8, r3
 80058d8:	e7af      	b.n	800583a <STO_PLL_CalcElAngle+0x162>
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80058da:	1b5b      	subs	r3, r3, r5
 80058dc:	429e      	cmp	r6, r3
 80058de:	dd00      	ble.n	80058e2 <STO_PLL_CalcElAngle+0x20a>
 80058e0:	e738      	b.n	8005754 <STO_PLL_CalcElAngle+0x7c>
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80058e2:	6663      	str	r3, [r4, #100]	; 0x64
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	e735      	b.n	8005754 <STO_PLL_CalcElAngle+0x7c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80058e8:	1b5f      	subs	r7, r3, r5
 80058ea:	42ba      	cmp	r2, r7
 80058ec:	dd00      	ble.n	80058f0 <STO_PLL_CalcElAngle+0x218>
 80058ee:	e72a      	b.n	8005746 <STO_PLL_CalcElAngle+0x6e>
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80058f0:	003a      	movs	r2, r7
 80058f2:	6627      	str	r7, [r4, #96]	; 0x60
 80058f4:	e727      	b.n	8005746 <STO_PLL_CalcElAngle+0x6e>
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80058f6:	1b5b      	subs	r3, r3, r5
 80058f8:	429e      	cmp	r6, r3
 80058fa:	dd00      	ble.n	80058fe <STO_PLL_CalcElAngle+0x226>
 80058fc:	e714      	b.n	8005728 <STO_PLL_CalcElAngle+0x50>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 80058fe:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	e711      	b.n	8005728 <STO_PLL_CalcElAngle+0x50>
 8005904:	2200      	movs	r2, #0
    bBuffer_index = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	e7bc      	b.n	8005884 <STO_PLL_CalcElAngle+0x1ac>
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	ffff0002 	.word	0xffff0002
 8005910:	0000ffff 	.word	0x0000ffff

08005914 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	4647      	mov	r7, r8
 8005918:	46ce      	mov	lr, r9
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800591a:	2387      	movs	r3, #135	; 0x87
{
 800591c:	b580      	push	{r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	5cc6      	ldrb	r6, [r0, r3]
{
 8005922:	0005      	movs	r5, r0
 8005924:	4688      	mov	r8, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8005926:	2e00      	cmp	r6, #0
 8005928:	d100      	bne.n	800592c <STO_PLL_CalcAvrgMecSpeedUnit+0x18>
 800592a:	e0ac      	b.n	8005a86 <STO_PLL_CalcAvrgMecSpeedUnit+0x172>
 800592c:	0004      	movs	r4, r0
 800592e:	3474      	adds	r4, #116	; 0x74
 8005930:	0022      	movs	r2, r4
 8005932:	2300      	movs	r3, #0
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8005934:	2000      	movs	r0, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8005936:	2700      	movs	r7, #0
 8005938:	5fd1      	ldrsh	r1, [r2, r7]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800593a:	3301      	adds	r3, #1
 800593c:	b2db      	uxtb	r3, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800593e:	1840      	adds	r0, r0, r1
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8005940:	3202      	adds	r2, #2
 8005942:	429e      	cmp	r6, r3
 8005944:	d1f7      	bne.n	8005936 <STO_PLL_CalcAvrgMecSpeedUnit+0x22>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8005946:	0031      	movs	r1, r6
 8005948:	f7fa fc68 	bl	800021c <__divsi3>
 800594c:	2200      	movs	r2, #0
 800594e:	0007      	movs	r7, r0
 8005950:	2000      	movs	r0, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8005952:	2100      	movs	r1, #0
 8005954:	5e63      	ldrsh	r3, [r4, r1]
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8005956:	3201      	adds	r2, #1
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8005958:	1bdb      	subs	r3, r3, r7
      wError = (wError * wError);
 800595a:	435b      	muls	r3, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800595c:	b2d2      	uxtb	r2, r2
      wAvrQuadraticError += wError;
 800595e:	18c0      	adds	r0, r0, r3
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8005960:	3402      	adds	r4, #2
 8005962:	4296      	cmp	r6, r2
 8005964:	d1f5      	bne.n	8005952 <STO_PLL_CalcAvrgMecSpeedUnit+0x3e>
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8005966:	003c      	movs	r4, r7
 8005968:	437c      	muls	r4, r7
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800596a:	0031      	movs	r1, r6
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800596c:	17e3      	asrs	r3, r4, #31
 800596e:	4699      	mov	r9, r3
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8005970:	f7fa fc54 	bl	800021c <__divsi3>
 8005974:	0006      	movs	r6, r0
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8005976:	2388      	movs	r3, #136	; 0x88
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	0022      	movs	r2, r4
 800597c:	5ae8      	ldrh	r0, [r5, r3]
 800597e:	2100      	movs	r1, #0
 8005980:	464b      	mov	r3, r9
 8005982:	f7fa fd37 	bl	80003f4 <__aeabi_lmul>
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8005986:	064c      	lsls	r4, r1, #25
 8005988:	09c0      	lsrs	r0, r0, #7
 800598a:	4304      	orrs	r4, r0
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800598c:	8b68      	ldrh	r0, [r5, #26]
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800598e:	69e9      	ldr	r1, [r5, #28]
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005990:	4378      	muls	r0, r7
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8005992:	78af      	ldrb	r7, [r5, #2]
 8005994:	4378      	muls	r0, r7
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8005996:	f7fa fc41 	bl	800021c <__divsi3>
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800599a:	7869      	ldrb	r1, [r5, #1]
 800599c:	f7fa fc3e 	bl	800021c <__divsi3>
    *pMecSpeedUnit = (int16_t)wAux;
 80059a0:	4642      	mov	r2, r8
 80059a2:	b203      	sxth	r3, r0
 80059a4:	8013      	strh	r3, [r2, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 80059a6:	81ab      	strh	r3, [r5, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80059a8:	2301      	movs	r3, #1
 80059aa:	42b4      	cmp	r4, r6
 80059ac:	dc00      	bgt.n	80059b0 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 80059ae:	2300      	movs	r3, #0
    pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 80059b0:	22f5      	movs	r2, #245	; 0xf5
 80059b2:	54ab      	strb	r3, [r5, r2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 80059b4:	2382      	movs	r3, #130	; 0x82
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	5ceb      	ldrb	r3, [r5, r3]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d115      	bne.n	80059ea <STO_PLL_CalcAvrgMecSpeedUnit+0xd6>
    if (false == pHandle->IsAlgorithmConverged)
 80059be:	33f8      	adds	r3, #248	; 0xf8
 80059c0:	5ceb      	ldrb	r3, [r5, r3]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02d      	beq.n	8005a22 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80059c6:	42b4      	cmp	r4, r6
 80059c8:	dc28      	bgt.n	8005a1c <STO_PLL_CalcAvrgMecSpeedUnit+0x108>
        pHandle->ReliabilityCounter++;
 80059ca:	22f7      	movs	r2, #247	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80059cc:	2118      	movs	r1, #24
        pHandle->ReliabilityCounter++;
 80059ce:	5cab      	ldrb	r3, [r5, r2]
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80059d0:	31ff      	adds	r1, #255	; 0xff
        pHandle->ReliabilityCounter++;
 80059d2:	3301      	adds	r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	54ab      	strb	r3, [r5, r2]
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80059d8:	5c69      	ldrb	r1, [r5, r1]
 80059da:	4299      	cmp	r1, r3
 80059dc:	d821      	bhi.n	8005a22 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
          pHandle->ReliabilityCounter = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	54ab      	strb	r3, [r5, r2]
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80059e2:	78eb      	ldrb	r3, [r5, #3]
          bAux = false;
 80059e4:	2000      	movs	r0, #0
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80059e6:	702b      	strb	r3, [r5, #0]
          bAux = false;
 80059e8:	e01f      	b.n	8005a2a <STO_PLL_CalcAvrgMecSpeedUnit+0x116>
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80059ea:	17c3      	asrs	r3, r0, #31
 80059ec:	18c0      	adds	r0, r0, r3
 80059ee:	4058      	eors	r0, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80059f0:	238d      	movs	r3, #141	; 0x8d
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	5aeb      	ldrh	r3, [r5, r3]
 80059f6:	4283      	cmp	r3, r0
 80059f8:	dc1b      	bgt.n	8005a32 <STO_PLL_CalcAvrgMecSpeedUnit+0x11e>
    bool bIs_Bemf_Consistent = false;
 80059fa:	2300      	movs	r3, #0
    int32_t wEstBemfSq = 0;
 80059fc:	2000      	movs	r0, #0
    int32_t wObsBemfSq = 0;
 80059fe:	2700      	movs	r7, #0
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8005a00:	22f9      	movs	r2, #249	; 0xf9
 8005a02:	54ab      	strb	r3, [r5, r2]
      pHandle->Obs_Bemf_Level = wObsBemfSq;
 8005a04:	3203      	adds	r2, #3
 8005a06:	50af      	str	r7, [r5, r2]
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8005a08:	3204      	adds	r2, #4
 8005a0a:	50a8      	str	r0, [r5, r2]
    if (false == pHandle->IsAlgorithmConverged)
 8005a0c:	3a08      	subs	r2, #8
 8005a0e:	5caa      	ldrb	r2, [r5, r2]
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d006      	beq.n	8005a22 <STO_PLL_CalcAvrgMecSpeedUnit+0x10e>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8005a14:	42b4      	cmp	r4, r6
 8005a16:	ddd8      	ble.n	80059ca <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0d6      	beq.n	80059ca <STO_PLL_CalcAvrgMecSpeedUnit+0xb6>
        pHandle->ReliabilityCounter = 0U;
 8005a1c:	23f7      	movs	r3, #247	; 0xf7
 8005a1e:	2200      	movs	r2, #0
 8005a20:	54ea      	strb	r2, [r5, r3]
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8005a22:	4641      	mov	r1, r8
 8005a24:	0028      	movs	r0, r5
 8005a26:	f7ff fd69 	bl	80054fc <SPD_IsMecSpeedReliable>
}
 8005a2a:	bcc0      	pop	{r6, r7}
 8005a2c:	46b9      	mov	r9, r7
 8005a2e:	46b0      	mov	r8, r6
 8005a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8005a32:	2370      	movs	r3, #112	; 0x70
 8005a34:	5eef      	ldrsh	r7, [r5, r3]
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8005a36:	2372      	movs	r3, #114	; 0x72
 8005a38:	5eeb      	ldrsh	r3, [r5, r3]
        wObsBemfSq = wObsBemf * wObsBemf;
 8005a3a:	437f      	muls	r7, r7
        wObsBemfSq += wObsBemf * wObsBemf;
 8005a3c:	435b      	muls	r3, r3
 8005a3e:	19df      	adds	r7, r3, r7
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8005a40:	03c3      	lsls	r3, r0, #15
 8005a42:	1a18      	subs	r0, r3, r0
 8005a44:	2314      	movs	r3, #20
 8005a46:	5ee9      	ldrsh	r1, [r5, r3]
 8005a48:	f7fa fbe8 	bl	800021c <__divsi3>
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8005a4c:	231a      	movs	r3, #26
 8005a4e:	33ff      	adds	r3, #255	; 0xff
 8005a50:	5cea      	ldrb	r2, [r5, r3]
 8005a52:	233f      	movs	r3, #63	; 0x3f
 8005a54:	4342      	muls	r2, r0
 8005a56:	4694      	mov	ip, r2
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8005a58:	0001      	movs	r1, r0
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8005a5a:	17d0      	asrs	r0, r2, #31
 8005a5c:	4018      	ands	r0, r3
 8005a5e:	4460      	add	r0, ip
 8005a60:	1180      	asrs	r0, r0, #6
        wEstBemfSq *= wEstBemf;
 8005a62:	4348      	muls	r0, r1
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8005a64:	17c2      	asrs	r2, r0, #31
 8005a66:	4013      	ands	r3, r2
 8005a68:	228c      	movs	r2, #140	; 0x8c
 8005a6a:	0052      	lsls	r2, r2, #1
 8005a6c:	5caa      	ldrb	r2, [r5, r2]
 8005a6e:	181b      	adds	r3, r3, r0
 8005a70:	119b      	asrs	r3, r3, #6
 8005a72:	435a      	muls	r2, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8005a74:	2301      	movs	r3, #1
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8005a76:	1a82      	subs	r2, r0, r2
        if (wObsBemfSq > wEstBemfSqLo)
 8005a78:	4297      	cmp	r7, r2
 8005a7a:	dd01      	ble.n	8005a80 <STO_PLL_CalcAvrgMecSpeedUnit+0x16c>
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e7bf      	b.n	8005a00 <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
 8005a80:	2300      	movs	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e7bc      	b.n	8005a00 <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	2600      	movs	r6, #0
 8005a8a:	2400      	movs	r4, #0
 8005a8c:	4699      	mov	r9, r3
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8005a8e:	2700      	movs	r7, #0
 8005a90:	e771      	b.n	8005976 <STO_PLL_CalcAvrgMecSpeedUnit+0x62>
 8005a92:	46c0      	nop			; (mov r8, r8)

08005a94 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8005a94:	23f4      	movs	r3, #244	; 0xf4
 8005a96:	5cc2      	ldrb	r2, [r0, r3]
    int32_t wSum = pHandle->DppBufferSum;
 8005a98:	3314      	adds	r3, #20
{
 8005a9a:	b570      	push	{r4, r5, r6, lr}
    int32_t wSum = pHandle->DppBufferSum;
 8005a9c:	58c4      	ldr	r4, [r0, r3]
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8005a9e:	3306      	adds	r3, #6
 8005aa0:	5cc5      	ldrb	r5, [r0, r3]
    int16_t hSpeedBufferSizedpp = (int16_t)pHandle->SpeedBufferSizeDpp;
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	33ff      	adds	r3, #255	; 0xff
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8005aa6:	5cc3      	ldrb	r3, [r0, r3]
 8005aa8:	1aeb      	subs	r3, r5, r3
 8005aaa:	b29b      	uxth	r3, r3
    if (0 == hBufferSizeDiff)
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d113      	bne.n	8005ad8 <STO_PLL_CalcAvrgElSpeedDpp+0x44>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8005ab0:	3238      	adds	r2, #56	; 0x38
 8005ab2:	0052      	lsls	r2, r2, #1
 8005ab4:	1882      	adds	r2, r0, r2
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	5ed2      	ldrsh	r2, [r2, r3]
 8005aba:	2386      	movs	r3, #134	; 0x86
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	5ec3      	ldrsh	r3, [r0, r3]
 8005ac0:	1912      	adds	r2, r2, r4
 8005ac2:	1ad3      	subs	r3, r2, r3
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8005ac4:	2290      	movs	r2, #144	; 0x90
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	0052      	lsls	r2, r2, #1
 8005aca:	5a82      	ldrh	r2, [r0, r2]
 8005acc:	4111      	asrs	r1, r2
    pHandle->DppBufferSum = wSum;
 8005ace:	2284      	movs	r2, #132	; 0x84
 8005ad0:	0052      	lsls	r2, r2, #1
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8005ad2:	81c1      	strh	r1, [r0, #14]
    pHandle->DppBufferSum = wSum;
 8005ad4:	5083      	str	r3, [r0, r2]
}
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8005ad8:	189b      	adds	r3, r3, r2
 8005ada:	b29e      	uxth	r6, r3
 8005adc:	b21b      	sxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8005ade:	429d      	cmp	r5, r3
 8005ae0:	dc01      	bgt.n	8005ae6 <STO_PLL_CalcAvrgElSpeedDpp+0x52>
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8005ae2:	1b73      	subs	r3, r6, r5
 8005ae4:	b21b      	sxth	r3, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8005ae6:	3238      	adds	r2, #56	; 0x38
 8005ae8:	0051      	lsls	r1, r2, #1
 8005aea:	3338      	adds	r3, #56	; 0x38
 8005aec:	1841      	adds	r1, r0, r1
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2204      	movs	r2, #4
 8005af2:	5e8a      	ldrsh	r2, [r1, r2]
 8005af4:	18c3      	adds	r3, r0, r3
 8005af6:	2104      	movs	r1, #4
 8005af8:	5e5b      	ldrsh	r3, [r3, r1]
 8005afa:	1912      	adds	r2, r2, r4
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	e7e1      	b.n	8005ac4 <STO_PLL_CalcAvrgElSpeedDpp+0x30>

08005b00 <STO_PLL_Clear>:
    pHandle->Ialfa_est = (int32_t)0;
 8005b00:	2300      	movs	r3, #0
    pHandle->ConsistencyCounter = 0u;
 8005b02:	22f6      	movs	r2, #246	; 0xf6
{
 8005b04:	b510      	push	{r4, lr}
    pHandle->Ialfa_est = (int32_t)0;
 8005b06:	6603      	str	r3, [r0, #96]	; 0x60
    pHandle->Ibeta_est = (int32_t)0;
 8005b08:	6643      	str	r3, [r0, #100]	; 0x64
    pHandle->wBemf_alfa_est = (int32_t)0;
 8005b0a:	6683      	str	r3, [r0, #104]	; 0x68
    pHandle->wBemf_beta_est = (int32_t)0;
 8005b0c:	66c3      	str	r3, [r0, #108]	; 0x6c
    pHandle->_Super.hElAngle = (int16_t)0;
 8005b0e:	8083      	strh	r3, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 8005b10:	81c3      	strh	r3, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 8005b12:	5283      	strh	r3, [r0, r2]
    pHandle->IsAlgorithmConverged = false;
 8005b14:	3202      	adds	r2, #2
 8005b16:	5283      	strh	r3, [r0, r2]
    pHandle->Obs_Bemf_Level = (int32_t)0;
 8005b18:	3204      	adds	r2, #4
 8005b1a:	5083      	str	r3, [r0, r2]
    pHandle->Est_Bemf_Level = (int32_t)0;
 8005b1c:	3204      	adds	r2, #4
 8005b1e:	5083      	str	r3, [r0, r2]
    pHandle->DppBufferSum = (int32_t)0;
 8005b20:	3208      	adds	r2, #8
 8005b22:	5083      	str	r3, [r0, r2]
    pHandle->ForceConvergency = false;
 8005b24:	321a      	adds	r2, #26
 8005b26:	5283      	strh	r3, [r0, r2]
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8005b28:	330f      	adds	r3, #15
 8005b2a:	33ff      	adds	r3, #255	; 0xff
 8005b2c:	5cc2      	ldrb	r2, [r0, r3]
{
 8005b2e:	0004      	movs	r4, r0

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d004      	beq.n	8005b3e <STO_PLL_Clear+0x3e>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8005b34:	2100      	movs	r1, #0
 8005b36:	0052      	lsls	r2, r2, #1
 8005b38:	3074      	adds	r0, #116	; 0x74
 8005b3a:	f000 fa3c 	bl	8005fb6 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	22f4      	movs	r2, #244	; 0xf4
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8005b42:	0020      	movs	r0, r4
  pHandle->Speed_Buffer_Index = 0U;
 8005b44:	54a3      	strb	r3, [r4, r2]
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8005b46:	3218      	adds	r2, #24
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8005b48:	2100      	movs	r1, #0
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8005b4a:	52a3      	strh	r3, [r4, r2]
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8005b4c:	3034      	adds	r0, #52	; 0x34
 8005b4e:	f7fe fe31 	bl	80047b4 <PID_SetIntegralTerm>
}
 8005b52:	bd10      	pop	{r4, pc}

08005b54 <STO_PLL_Init>:
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8005b54:	238b      	movs	r3, #139	; 0x8b
{
 8005b56:	b570      	push	{r4, r5, r6, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	5cc2      	ldrb	r2, [r0, r3]
 8005b5c:	3b20      	subs	r3, #32
 8005b5e:	54c2      	strb	r2, [r0, r3]
    pHandle->EnableDualCheck = true;
 8005b60:	2201      	movs	r2, #1
 8005b62:	330e      	adds	r3, #14
 8005b64:	54c2      	strb	r2, [r0, r3]
    pHandle->F3POW2 = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	8643      	strh	r3, [r0, #50]	; 0x32
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8005b6a:	232e      	movs	r3, #46	; 0x2e
 8005b6c:	5ec5      	ldrsh	r5, [r0, r3]
{
 8005b6e:	0004      	movs	r4, r0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8005b70:	0029      	movs	r1, r5
 8005b72:	4813      	ldr	r0, [pc, #76]	; (8005bc0 <STO_PLL_Init+0x6c>)
 8005b74:	f7fa fb52 	bl	800021c <__divsi3>
 8005b78:	b203      	sxth	r3, r0
    while (htempk != 0)
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01d      	beq.n	8005bba <STO_PLL_Init+0x66>
 8005b7e:	2201      	movs	r2, #1
    wAux = ((int32_t)1);
 8005b80:	2101      	movs	r1, #1
      htempk /= ((int16_t)2);
 8005b82:	0fd8      	lsrs	r0, r3, #31
 8005b84:	18c3      	adds	r3, r0, r3
 8005b86:	0010      	movs	r0, r2
    while (htempk != 0)
 8005b88:	3201      	adds	r2, #1
      htempk /= ((int16_t)2);
 8005b8a:	105b      	asrs	r3, r3, #1
      wAux *= ((int32_t)2);
 8005b8c:	0049      	lsls	r1, r1, #1
    while (htempk != 0)
 8005b8e:	b292      	uxth	r2, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f6      	bne.n	8005b82 <STO_PLL_Init+0x2e>
    pHandle->hF3 = (int16_t)wAux;
 8005b94:	b209      	sxth	r1, r1
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8005b96:	434d      	muls	r5, r1
 8005b98:	8660      	strh	r0, [r4, #50]	; 0x32
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8005b9a:	0028      	movs	r0, r5
    pHandle->hF3 = (int16_t)wAux;
 8005b9c:	8621      	strh	r1, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8005b9e:	4909      	ldr	r1, [pc, #36]	; (8005bc4 <STO_PLL_Init+0x70>)
 8005ba0:	f7fa fb3c 	bl	800021c <__divsi3>
 8005ba4:	8560      	strh	r0, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f7ff ffaa 	bl	8005b00 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8005bac:	0020      	movs	r0, r4
 8005bae:	3034      	adds	r0, #52	; 0x34
 8005bb0:	f7fe fdec 	bl	800478c <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	8263      	strh	r3, [r4, #18]
}
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
    while (htempk != 0)
 8005bba:	2101      	movs	r1, #1
 8005bbc:	e7ed      	b.n	8005b9a <STO_PLL_Init+0x46>
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	000fea5e 	.word	0x000fea5e
 8005bc4:	000028be 	.word	0x000028be

08005bc8 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8005bc8:	2224      	movs	r2, #36	; 0x24
{
 8005bca:	b570      	push	{r4, r5, r6, lr}
    if (true == pHandle->ForceConvergency2)
 8005bcc:	32ff      	adds	r2, #255	; 0xff
 8005bce:	5c82      	ldrb	r2, [r0, r2]
{
 8005bd0:	0003      	movs	r3, r0
    if (true == pHandle->ForceConvergency2)
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d002      	beq.n	8005bdc <STO_PLL_IsObserverConverged+0x14>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005bd6:	200c      	movs	r0, #12
 8005bd8:	5e1a      	ldrsh	r2, [r3, r0]
 8005bda:	800a      	strh	r2, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8005bdc:	2291      	movs	r2, #145	; 0x91
 8005bde:	0052      	lsls	r2, r2, #1
 8005be0:	5c98      	ldrb	r0, [r3, r2]
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d006      	beq.n	8005bf4 <STO_PLL_IsObserverConverged+0x2c>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8005be6:	22f8      	movs	r2, #248	; 0xf8
 8005be8:	2101      	movs	r1, #1
 8005bea:	5499      	strb	r1, [r3, r2]
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8005bec:	2200      	movs	r2, #0
      bAux = true;
 8005bee:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8005bf0:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005bf4:	220c      	movs	r2, #12
 8005bf6:	5e9c      	ldrsh	r4, [r3, r2]
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8005bf8:	2500      	movs	r5, #0
 8005bfa:	5f4a      	ldrsh	r2, [r1, r5]
 8005bfc:	0015      	movs	r5, r2
 8005bfe:	4365      	muls	r5, r4
 8005c00:	0016      	movs	r6, r2
      if (wtemp > 0)
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	ddf5      	ble.n	8005bf2 <STO_PLL_IsObserverConverged+0x2a>
        if (hEstimatedSpeedUnit < 0)
 8005c06:	2c00      	cmp	r4, #0
 8005c08:	db38      	blt.n	8005c7c <STO_PLL_IsObserverConverged+0xb4>
        if (*phForcedMecSpeedUnit < 0)
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	db2e      	blt.n	8005c6c <STO_PLL_IsObserverConverged+0xa4>
        if (true == pHandle->IsSpeedReliable)
 8005c0e:	22f5      	movs	r2, #245	; 0xf5
 8005c10:	5c9a      	ldrb	r2, [r3, r2]
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d026      	beq.n	8005c64 <STO_PLL_IsObserverConverged+0x9c>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 8005c16:	228a      	movs	r2, #138	; 0x8a
 8005c18:	0052      	lsls	r2, r2, #1
 8005c1a:	5a99      	ldrh	r1, [r3, r2]
 8005c1c:	b2a2      	uxth	r2, r4
 8005c1e:	4291      	cmp	r1, r2
 8005c20:	d220      	bcs.n	8005c64 <STO_PLL_IsObserverConverged+0x9c>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8005c22:	2214      	movs	r2, #20
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8005c24:	250f      	movs	r5, #15
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8005c26:	32ff      	adds	r2, #255	; 0xff
 8005c28:	5c9a      	ldrb	r2, [r3, r2]
 8005c2a:	4372      	muls	r2, r6
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 8005c2c:	17d1      	asrs	r1, r2, #31
 8005c2e:	4029      	ands	r1, r5
 8005c30:	1889      	adds	r1, r1, r2
 8005c32:	1109      	asrs	r1, r1, #4
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8005c34:	b209      	sxth	r1, r1
 8005c36:	428c      	cmp	r4, r1
 8005c38:	db14      	blt.n	8005c64 <STO_PLL_IsObserverConverged+0x9c>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8005c3a:	2289      	movs	r2, #137	; 0x89
 8005c3c:	0052      	lsls	r2, r2, #1
 8005c3e:	5c9a      	ldrb	r2, [r3, r2]
 8005c40:	4372      	muls	r2, r6
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8005c42:	17d6      	asrs	r6, r2, #31
 8005c44:	4035      	ands	r5, r6
 8005c46:	18aa      	adds	r2, r5, r2
 8005c48:	1112      	asrs	r2, r2, #4
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8005c4a:	b212      	sxth	r2, r2
 8005c4c:	4294      	cmp	r4, r2
 8005c4e:	dc09      	bgt.n	8005c64 <STO_PLL_IsObserverConverged+0x9c>
                pHandle->ConsistencyCounter++;
 8005c50:	21f6      	movs	r1, #246	; 0xf6
 8005c52:	5c5a      	ldrb	r2, [r3, r1]
 8005c54:	3201      	adds	r2, #1
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	545a      	strb	r2, [r3, r1]
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8005c5a:	3120      	adds	r1, #32
 8005c5c:	5c59      	ldrb	r1, [r3, r1]
 8005c5e:	4291      	cmp	r1, r2
 8005c60:	d9c1      	bls.n	8005be6 <STO_PLL_IsObserverConverged+0x1e>
 8005c62:	e7c6      	b.n	8005bf2 <STO_PLL_IsObserverConverged+0x2a>
                pHandle->ConsistencyCounter = 0U;
 8005c64:	22f6      	movs	r2, #246	; 0xf6
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]
 8005c6a:	e7c2      	b.n	8005bf2 <STO_PLL_IsObserverConverged+0x2a>
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8005c6c:	4252      	negs	r2, r2
 8005c6e:	b216      	sxth	r6, r2
        if (true == pHandle->IsSpeedReliable)
 8005c70:	22f5      	movs	r2, #245	; 0xf5
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8005c72:	800e      	strh	r6, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 8005c74:	5c9a      	ldrb	r2, [r3, r2]
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d0f4      	beq.n	8005c64 <STO_PLL_IsObserverConverged+0x9c>
 8005c7a:	e7cc      	b.n	8005c16 <STO_PLL_IsObserverConverged+0x4e>
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8005c7c:	4264      	negs	r4, r4
 8005c7e:	b224      	sxth	r4, r4
        if (*phForcedMecSpeedUnit < 0)
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	dac4      	bge.n	8005c0e <STO_PLL_IsObserverConverged+0x46>
 8005c84:	e7f2      	b.n	8005c6c <STO_PLL_IsObserverConverged+0xa4>
 8005c86:	46c0      	nop			; (mov r8, r8)

08005c88 <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 8005c88:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 8005c8a:	b082      	sub	sp, #8
  return (vaux);
 8005c8c:	0c1a      	lsrs	r2, r3, #16
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	0412      	lsls	r2, r2, #16
 8005c92:	0c18      	lsrs	r0, r3, #16
 8005c94:	4310      	orrs	r0, r2
}
 8005c96:	b002      	add	sp, #8
 8005c98:	4770      	bx	lr
 8005c9a:	46c0      	nop			; (mov r8, r8)

08005c9c <STO_PLL_GetEstimatedCurrent>:
  else
  {
#endif
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005c9c:	238e      	movs	r3, #142	; 0x8e
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	5ac2      	ldrh	r2, [r0, r3]
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8005ca2:	6e43      	ldr	r3, [r0, #100]	; 0x64
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8005ca4:	6e00      	ldr	r0, [r0, #96]	; 0x60
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8005ca6:	4113      	asrs	r3, r2
 8005ca8:	4110      	asrs	r0, r2
 8005caa:	0400      	lsls	r0, r0, #16
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	0c00      	lsrs	r0, r0, #16
{
 8005cb0:	b082      	sub	sp, #8
  return (iaux);
 8005cb2:	4318      	orrs	r0, r3
}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	4770      	bx	lr

08005cb8 <STO_PLL_GetObserverGains>:
/**
  * @brief  Exports current observer gains from @p pHandle and to parameters @p phC2 and @p phC4.
  * 
  */
__weak void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4)
{
 8005cb8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 8005cba:	2422      	movs	r4, #34	; 0x22
 8005cbc:	5f03      	ldrsh	r3, [r0, r4]
 8005cbe:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8005cc0:	2126      	movs	r1, #38	; 0x26
 8005cc2:	5e43      	ldrsh	r3, [r0, r1]
 8005cc4:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 8005cc8:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 8005cca:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005ccc:	4770      	bx	lr
 8005cce:	46c0      	nop			; (mov r8, r8)

08005cd0 <STO_OTF_ResetPLL>:
  * @brief  Resets the PLL integral term during on-the-fly startup.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_OTF_ResetPLL(STO_Handle_t * pHandle)
{
 8005cd0:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8005cd2:	6800      	ldr	r0, [r0, #0]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	3034      	adds	r0, #52	; 0x34
 8005cd8:	f7fe fd6c 	bl	80047b4 <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)

08005ce0 <STO_ResetPLL>:
  * @brief  Resets the PLL integral term.
  * 
  * @param  pHandle: Handler of the current instance of the STO component.
  */
__weak void STO_ResetPLL(STO_PLL_Handle_t *pHandle)
{
 8005ce0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	3034      	adds	r0, #52	; 0x34
 8005ce6:	f7fe fd65 	bl	80047b4 <PID_SetIntegralTerm>
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005cea:	bd10      	pop	{r4, pc}

08005cec <STO_PLL_GetEstimatedBemfLevel>:
__weak int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	58c0      	ldr	r0, [r0, r3]
#endif
}
 8005cf2:	4770      	bx	lr

08005cf4 <STO_PLL_GetObservedBemfLevel>:
__weak int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8005cf4:	23fc      	movs	r3, #252	; 0xfc
 8005cf6:	58c0      	ldr	r0, [r0, r3]
#endif
}
 8005cf8:	4770      	bx	lr
 8005cfa:	46c0      	nop			; (mov r8, r8)

08005cfc <STO_PLL_IsVarianceTight>:
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
 8005cfc:	23f5      	movs	r3, #245	; 0xf5
    tempStatus = pHdl->IsSpeedReliable;
 8005cfe:	6802      	ldr	r2, [r0, #0]
  return (tempStatus);
 8005d00:	5cd0      	ldrb	r0, [r2, r3]
}
 8005d02:	4770      	bx	lr

08005d04 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8005d04:	2391      	movs	r3, #145	; 0x91
 8005d06:	2101      	movs	r1, #1
 8005d08:	6802      	ldr	r2, [r0, #0]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005d0e:	4770      	bx	lr

08005d10 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8005d10:	2324      	movs	r3, #36	; 0x24
 8005d12:	2101      	movs	r1, #1
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	33ff      	adds	r3, #255	; 0xff
 8005d18:	54d1      	strb	r1, [r2, r3]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005d1a:	4770      	bx	lr

08005d1c <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8005d1c:	2392      	movs	r3, #146	; 0x92
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	54c1      	strb	r1, [r0, r3]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8005d22:	4770      	bx	lr

08005d24 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8005d24:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005d26:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8005d28:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 8005d2a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8005d2c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8005d2e:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 8005d30:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 8005d32:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 8005d34:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8005d36:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005d38:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8005d3a:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8005d3c:	4770      	bx	lr
 8005d3e:	46c0      	nop			; (mov r8, r8)

08005d40 <VSS_Init>:
{
 8005d40:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 8005d42:	f7ff ffef 	bl	8005d24 <VSS_Clear>
}
 8005d46:	bd10      	pop	{r4, pc}

08005d48 <VSS_CalcElAngle>:
  * @retval int16_t Measured electrical angle in s16degree format.
  *
  * - Systematically called after #SPD_GetElAngle that retrieves last computed rotor electrical angle.
  */
__weak int16_t VSS_CalcElAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t *pInputVars_str)
{
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	46c6      	mov	lr, r8
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8005d4c:	2333      	movs	r3, #51	; 0x33
{
 8005d4e:	b500      	push	{lr}
    if (true == pHandle->bCopyObserver)
 8005d50:	5cc3      	ldrb	r3, [r0, r3]
{
 8005d52:	0004      	movs	r4, r0
 8005d54:	000e      	movs	r6, r1
    if (true == pHandle->bCopyObserver)
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d006      	beq.n	8005d68 <VSS_CalcElAngle+0x20>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	5ecd      	ldrsh	r5, [r1, r3]
    pHandle->_Super.hElAngle = hRetAngle;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8005d5e:	0028      	movs	r0, r5
    pHandle->_Super.hElAngle = hRetAngle;
 8005d60:	80a5      	strh	r5, [r4, #4]
}
 8005d62:	bc80      	pop	{r7}
 8005d64:	46b8      	mov	r8, r7
 8005d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005d68:	230e      	movs	r3, #14
 8005d6a:	5ec7      	ldrsh	r7, [r0, r3]
 8005d6c:	8e05      	ldrh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005d6e:	7841      	ldrb	r1, [r0, #1]
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005d70:	19ed      	adds	r5, r5, r7
 8005d72:	b2ab      	uxth	r3, r5
 8005d74:	b22d      	sxth	r5, r5
 8005d76:	8605      	strh	r5, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005d78:	0038      	movs	r0, r7
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005d7a:	4698      	mov	r8, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005d7c:	f7fa fa4e 	bl	800021c <__divsi3>
 8005d80:	88e3      	ldrh	r3, [r4, #6]
 8005d82:	18c0      	adds	r0, r0, r3
      if (true == pHandle->bTransitionStarted)
 8005d84:	232c      	movs	r3, #44	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8005d86:	80e0      	strh	r0, [r4, #6]
      if (true == pHandle->bTransitionStarted)
 8005d88:	5ce3      	ldrb	r3, [r4, r3]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0e7      	beq.n	8005d5e <VSS_CalcElAngle+0x16>
        if (0 == pHandle->hTransitionRemainingSteps)
 8005d8e:	232e      	movs	r3, #46	; 0x2e
 8005d90:	5ee0      	ldrsh	r0, [r4, r3]
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d01a      	beq.n	8005dcc <VSS_CalcElAngle+0x84>
          pHandle->hTransitionRemainingSteps--;
 8005d96:	3801      	subs	r0, #1
 8005d98:	b200      	sxth	r0, r0
 8005d9a:	85e0      	strh	r0, [r4, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8005d9c:	2f00      	cmp	r7, #0
 8005d9e:	db22      	blt.n	8005de6 <VSS_CalcElAngle+0x9e>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8005da0:	4643      	mov	r3, r8
 8005da2:	8837      	ldrh	r7, [r6, #0]
 8005da4:	1afe      	subs	r6, r7, r3
 8005da6:	2301      	movs	r3, #1
 8005da8:	4698      	mov	r8, r3
 8005daa:	b236      	sxth	r6, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8005dac:	2336      	movs	r3, #54	; 0x36
 8005dae:	5ee1      	ldrsh	r1, [r4, r3]
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8005db0:	4370      	muls	r0, r6
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8005db2:	f7fa fa33 	bl	800021c <__divsi3>
          hAngleCorr *= hSignCorr;
 8005db6:	4643      	mov	r3, r8
 8005db8:	4358      	muls	r0, r3
            pHandle->bTransitionLocked = true;
 8005dba:	2332      	movs	r3, #50	; 0x32
          hAngleCorr *= hSignCorr;
 8005dbc:	b280      	uxth	r0, r0
          if (hAngleDiff >= 0)
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	db0b      	blt.n	8005dda <VSS_CalcElAngle+0x92>
            pHandle->bTransitionLocked = true;
 8005dc2:	2201      	movs	r2, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8005dc4:	1a38      	subs	r0, r7, r0
            pHandle->bTransitionLocked = true;
 8005dc6:	54e2      	strb	r2, [r4, r3]
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8005dc8:	b205      	sxth	r5, r0
 8005dca:	e7c8      	b.n	8005d5e <VSS_CalcElAngle+0x16>
          hRetAngle = *(int16_t *)pInputVars_str;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	5ef5      	ldrsh	r5, [r6, r3]
          pHandle->bTransitionEnded = true;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	232d      	movs	r3, #45	; 0x2d
 8005dd4:	54e2      	strb	r2, [r4, r3]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8005dd6:	7020      	strb	r0, [r4, #0]
 8005dd8:	e7c1      	b.n	8005d5e <VSS_CalcElAngle+0x16>
            if (false == pHandle->bTransitionLocked)
 8005dda:	5ce3      	ldrb	r3, [r4, r3]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0be      	beq.n	8005d5e <VSS_CalcElAngle+0x16>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8005de0:	19c0      	adds	r0, r0, r7
 8005de2:	b205      	sxth	r5, r0
 8005de4:	e7bb      	b.n	8005d5e <VSS_CalcElAngle+0x16>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8005de6:	4643      	mov	r3, r8
 8005de8:	8837      	ldrh	r7, [r6, #0]
 8005dea:	1bde      	subs	r6, r3, r7
 8005dec:	4b01      	ldr	r3, [pc, #4]	; (8005df4 <VSS_CalcElAngle+0xac>)
 8005dee:	b236      	sxth	r6, r6
 8005df0:	4698      	mov	r8, r3
 8005df2:	e7db      	b.n	8005dac <VSS_CalcElAngle+0x64>
 8005df4:	0000ffff 	.word	0x0000ffff

08005df8 <VSS_CalcAvrgMecSpeedUnit>:
  * - Returns the reliability state of the sensor (always true).
  * - Called with the same periodicity on which speed control is executed, precisely during START and SWITCH_OVER states
  * of the MC tasks state machine or in its RUM state in @ref OpenLoop "Open Loop Control" configuration into TSK_MediumFrequencyTask.
  */
__weak bool VSS_CalcAvrgMecSpeedUnit(VirtualSpeedSensor_Handle_t *pHandle, int16_t *hMecSpeedUnit)
{
 8005df8:	b570      	push	{r4, r5, r6, lr}
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8005dfa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8005dfc:	0004      	movs	r4, r0
 8005dfe:	000d      	movs	r5, r1
    if (pHandle->hRemainingStep > 1u)
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d91d      	bls.n	8005e40 <VSS_CalcAvrgMecSpeedUnit+0x48>
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005e04:	6a23      	ldr	r3, [r4, #32]
 8005e06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005e08:	469c      	mov	ip, r3
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005e0a:	8b63      	ldrh	r3, [r4, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8005e0c:	4460      	add	r0, ip
 8005e0e:	6260      	str	r0, [r4, #36]	; 0x24
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8005e10:	1400      	asrs	r0, r0, #16
 8005e12:	81e0      	strh	r0, [r4, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005e14:	4358      	muls	r0, r3
 8005e16:	0083      	lsls	r3, r0, #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005e18:	7861      	ldrb	r1, [r4, #1]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005e1a:	1818      	adds	r0, r3, r0
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005e1c:	69e3      	ldr	r3, [r4, #28]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8005e1e:	0040      	lsls	r0, r0, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8005e20:	4359      	muls	r1, r3
 8005e22:	f7fa f9fb 	bl	800021c <__divsi3>
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8005e26:	b200      	sxth	r0, r0
 8005e28:	8028      	strh	r0, [r5, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8005e2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005e2c:	81a0      	strh	r0, [r4, #12]
      pHandle->hRemainingStep--;
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	8523      	strh	r3, [r4, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8005e32:	232d      	movs	r3, #45	; 0x2d
 8005e34:	5ce0      	ldrb	r0, [r4, r3]
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d10b      	bne.n	8005e52 <VSS_CalcAvrgMecSpeedUnit+0x5a>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005e3a:	78e3      	ldrb	r3, [r4, #3]
 8005e3c:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->hRemainingStep)
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d00b      	beq.n	8005e5c <VSS_CalcAvrgMecSpeedUnit+0x64>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005e44:	220c      	movs	r2, #12
 8005e46:	5e83      	ldrsh	r3, [r0, r2]
 8005e48:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8005e4a:	232d      	movs	r3, #45	; 0x2d
 8005e4c:	5ce0      	ldrb	r0, [r4, r3]
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0f3      	beq.n	8005e3a <VSS_CalcAvrgMecSpeedUnit+0x42>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8005e52:	0029      	movs	r1, r5
 8005e54:	0020      	movs	r0, r4
 8005e56:	f7ff fb51 	bl	80054fc <SPD_IsMecSpeedReliable>
 8005e5a:	e7f0      	b.n	8005e3e <VSS_CalcAvrgMecSpeedUnit+0x46>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8005e5c:	232a      	movs	r3, #42	; 0x2a
 8005e5e:	5ec0      	ldrsh	r0, [r0, r3]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005e60:	69e3      	ldr	r3, [r4, #28]
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8005e62:	8008      	strh	r0, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005e64:	81a0      	strh	r0, [r4, #12]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005e66:	4358      	muls	r0, r3
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005e68:	8b63      	ldrh	r3, [r4, #26]
 8005e6a:	0099      	lsls	r1, r3, #2
 8005e6c:	18c9      	adds	r1, r1, r3
 8005e6e:	0049      	lsls	r1, r1, #1
 8005e70:	f7fa f9d4 	bl	800021c <__divsi3>
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005e74:	7863      	ldrb	r3, [r4, #1]
 8005e76:	4343      	muls	r3, r0
 8005e78:	81e3      	strh	r3, [r4, #14]
      pHandle->hRemainingStep = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	8523      	strh	r3, [r4, #40]	; 0x28
 8005e7e:	e7d8      	b.n	8005e32 <VSS_CalcAvrgMecSpeedUnit+0x3a>

08005e80 <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	000d      	movs	r5, r1
 8005e84:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 8005e86:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005e88:	7841      	ldrb	r1, [r0, #1]
 8005e8a:	0028      	movs	r0, r5
 8005e8c:	f7fa f9c6 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8005e90:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005e92:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8005e94:	bd70      	pop	{r4, r5, r6, pc}
 8005e96:	46c0      	nop			; (mov r8, r8)

08005e98 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	46ce      	mov	lr, r9
 8005e9c:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8005e9e:	232c      	movs	r3, #44	; 0x2c
{
 8005ea0:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8005ea2:	5cc3      	ldrb	r3, [r0, r3]
{
 8005ea4:	0004      	movs	r4, r0
 8005ea6:	000e      	movs	r6, r1
 8005ea8:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <VSS_SetMecAcceleration+0x36>
    {
      if (0U == hDurationms)
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d111      	bne.n	8005ed6 <VSS_SetMecAcceleration+0x3e>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8005eb2:	8181      	strh	r1, [r0, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005eb4:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005eb6:	69c0      	ldr	r0, [r0, #28]
 8005eb8:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005eba:	0099      	lsls	r1, r3, #2
 8005ebc:	18c9      	adds	r1, r1, r3
 8005ebe:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 8005ec0:	f7fa f9ac 	bl	800021c <__divsi3>

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005ec4:	7863      	ldrb	r3, [r4, #1]

        pHandle->hRemainingStep = 0U;
 8005ec6:	8525      	strh	r5, [r4, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005ec8:	4343      	muls	r3, r0

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005eca:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005ecc:	81e3      	strh	r3, [r4, #14]
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8005ece:	bcc0      	pop	{r6, r7}
 8005ed0:	46b9      	mov	r9, r7
 8005ed2:	46b0      	mov	r8, r6
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8005ed6:	21fa      	movs	r1, #250	; 0xfa
 8005ed8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005eda:	0089      	lsls	r1, r1, #2
 8005edc:	4350      	muls	r0, r2
 8005ede:	f7fa f913 	bl	8000108 <__udivsi3>
        hNbrStep++;
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005ee6:	230e      	movs	r3, #14
 8005ee8:	5ee7      	ldrsh	r7, [r4, r3]
        pHandle->hRemainingStep = hNbrStep;
 8005eea:	8525      	strh	r5, [r4, #40]	; 0x28
        if (0U == hNbrStep)
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d103      	bne.n	8005ef8 <VSS_SetMecAcceleration+0x60>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005ef0:	043f      	lsls	r7, r7, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005ef2:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005ef4:	6267      	str	r7, [r4, #36]	; 0x24
}
 8005ef6:	e7ea      	b.n	8005ece <VSS_SetMecAcceleration+0x36>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005ef8:	7863      	ldrb	r3, [r4, #1]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005efa:	69e0      	ldr	r0, [r4, #28]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005efc:	4699      	mov	r9, r3
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005efe:	8b63      	ldrh	r3, [r4, #26]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005f00:	4370      	muls	r0, r6
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005f02:	0099      	lsls	r1, r3, #2
 8005f04:	18c9      	adds	r1, r1, r3
 8005f06:	0049      	lsls	r1, r1, #1
 8005f08:	f7fa f988 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005f0c:	b203      	sxth	r3, r0
 8005f0e:	4698      	mov	r8, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005f10:	4649      	mov	r1, r9
 8005f12:	0038      	movs	r0, r7
 8005f14:	f7fa f982 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005f18:	4643      	mov	r3, r8
 8005f1a:	1a18      	subs	r0, r3, r0
 8005f1c:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8005f1e:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005f20:	f7fa f97c 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8005f24:	464b      	mov	r3, r9
 8005f26:	4358      	muls	r0, r3
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005f28:	043f      	lsls	r7, r7, #16
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8005f2a:	6220      	str	r0, [r4, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005f2c:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005f2e:	6267      	str	r7, [r4, #36]	; 0x24
 8005f30:	e7cd      	b.n	8005ece <VSS_SetMecAcceleration+0x36>
 8005f32:	46c0      	nop			; (mov r8, r8)

08005f34 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d006      	beq.n	8005f46 <VSS_SetStartTransition+0x12>
    {
      pHandle->bTransitionStarted = true;
 8005f38:	232c      	movs	r3, #44	; 0x2c
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	54c2      	strb	r2, [r0, r3]

      if (0 == pHandle->hTransitionSteps)
 8005f3e:	2136      	movs	r1, #54	; 0x36
 8005f40:	5e43      	ldrsh	r3, [r0, r1]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <VSS_SetStartTransition+0x16>
  bool bAux = true;
 8005f46:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8005f48:	4770      	bx	lr
        pHandle->bTransitionEnded = true;
 8005f4a:	212d      	movs	r1, #45	; 0x2d
 8005f4c:	5442      	strb	r2, [r0, r1]
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8005f4e:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8005f50:	2000      	movs	r0, #0
 8005f52:	e7f9      	b.n	8005f48 <VSS_SetStartTransition+0x14>

08005f54 <VSS_TransitionEnded>:
__weak bool VSS_TransitionEnded(VirtualSpeedSensor_Handle_t *pHandle)
{
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
 8005f54:	232d      	movs	r3, #45	; 0x2d
 8005f56:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 8005f58:	4770      	bx	lr
 8005f5a:	46c0      	nop			; (mov r8, r8)

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	2600      	movs	r6, #0
 8005f60:	4d0c      	ldr	r5, [pc, #48]	; (8005f94 <__libc_init_array+0x38>)
 8005f62:	4c0d      	ldr	r4, [pc, #52]	; (8005f98 <__libc_init_array+0x3c>)
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	f000 f82b 	bl	8005fc8 <_init>
 8005f72:	4d0a      	ldr	r5, [pc, #40]	; (8005f9c <__libc_init_array+0x40>)
 8005f74:	4c0a      	ldr	r4, [pc, #40]	; (8005fa0 <__libc_init_array+0x44>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	00b3      	lsls	r3, r6, #2
 8005f82:	58eb      	ldr	r3, [r5, r3]
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	00b3      	lsls	r3, r6, #2
 8005f8c:	58eb      	ldr	r3, [r5, r3]
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	08006ea8 	.word	0x08006ea8
 8005f98:	08006ea8 	.word	0x08006ea8
 8005f9c:	08006ea8 	.word	0x08006ea8
 8005fa0:	08006eac 	.word	0x08006eac

08005fa4 <memcpy>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d100      	bne.n	8005fae <memcpy+0xa>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	5ccc      	ldrb	r4, [r1, r3]
 8005fb0:	54c4      	strb	r4, [r0, r3]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	e7f8      	b.n	8005fa8 <memcpy+0x4>

08005fb6 <memset>:
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	1882      	adds	r2, r0, r2
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d100      	bne.n	8005fc0 <memset+0xa>
 8005fbe:	4770      	bx	lr
 8005fc0:	7019      	strb	r1, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	e7f9      	b.n	8005fba <memset+0x4>
	...

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr
