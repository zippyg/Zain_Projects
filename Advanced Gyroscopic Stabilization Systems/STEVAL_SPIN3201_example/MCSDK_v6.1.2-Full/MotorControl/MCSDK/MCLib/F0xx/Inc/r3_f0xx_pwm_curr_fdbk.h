/**
  ******************************************************************************
  * @file    r3_f0xx_pwm_curr_fdbk.h
  * @author  Motor Control SDK Team, ST Microelectronics
  * @brief   This file contains all definitions and functions prototypes for the
  *          R3_f0XX_pwm_curr_fdbk component of the Motor Control SDK.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  * @ingroup R3_F0XX_pwm_curr_fdbk
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __R3_F0XX_PWMNCURRFDBK_H
#define __R3_F0XX_PWMNCURRFDBK_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* Includes ------------------------------------------------------------------*/
#include "pwm_curr_fdbk.h"

/**
 * @addtogroup MCSDK
 * @{
 */

/**
 * @addtogroup pwm_curr_fdbk
 * @{
 */

/** 
 * @addtogroup R3_1_pwm_curr_fdbk
 * @{
 */

/* Exported constants --------------------------------------------------------*/


/* Exported types ------------------------------------------------------------*/

/*
  * @brief  R3_F0XX parameters definition
  */

 
typedef struct
{
  TIM_TypeDef * TIMx;                  /* Timer used for PWM generation. */
  GPIO_TypeDef * pwm_en_u_port;        /* Phase u enable driver signal GPIO port. */
  GPIO_TypeDef * pwm_en_v_port;        /* Phase v enable driver signal GPIO port. */
  GPIO_TypeDef * pwm_en_w_port;        /* Phase w enable driver signal GPIO port. */

  uint32_t      pwm_en_u_pin;          /* Phase u enable driver signal pin. */
  uint32_t      pwm_en_v_pin;          /* Phase v enable driver signal pin. */
  uint32_t      pwm_en_w_pin;          /* Phase w enable driver signal pin. */

  uint32_t ADCConfig[6];               /* Stores ADC sequence for the 6 sectors. */

  volatile uint16_t *ADCDataReg1[6];   /* Stores ADC read value's address for the 6 sectors. */
  volatile uint16_t *ADCDataReg2[6];   /* Stores ADC read value's address for the 6 sectors. */ 
  uint16_t hDeadTime;                  /* Dead time in number of TIM clock
                                            cycles. If CHxN are enabled, it must
                                            contain the dead time to be generated
                                            by the microcontroller, otherwise it
                                            expresses the maximum dead time
                                            generated by driving network. */
  uint16_t hTafter;                    /* Sum of dead time plus max
                                            value between rise time and noise time
                                            express in number of TIM clocks.*/
  uint16_t hTbefore;                   /* Sampling time express in
                                            number of TIM clocks.*/
  uint16_t Tsampling;                  /* Sampling time express in
                                            number of TIM clocks.*/
  uint16_t Tcase2;                     /* Sampling time express in
                                            number of TIM clocks.*/
  uint16_t Tcase3;                     /* Sampling time express in
                                            number of TIM clocks.*/											
  uint8_t b_ISamplingTime;             /*!< Sampling time used to convert hI[a|b|c]Channel.
                                            It must be equal to ADC_SampleTime_xCycles5
                                            x= 1, 7, ... Specific to F0XX. */
  uint8_t  RepetitionCounter;          /* Expresses the number of PWM
                                            periods to be elapsed before compare
                                            registers are updated again. In
                                            particular:
                                            RepetitionCounter= (2* #PWM periods)-1*/
  uint8_t  ADCScandir[6];              /* Stores ADC scan direction for the 6 sectors. */
  /* PWM Driving signals initialization ----------------------------------------*/
  LowSideOutputsFunction_t LowSideOutputs; /* Low side or enabling signals
                                                generation method are defined
                                                here. */

} R3_1_Params_t;

/*
  * Handle structure of the r1_f0xx_pwm_curr_fdbk Component
  */
typedef struct
{
  PWMC_Handle_t _Super;        /* Offset of current sensing network. */
  uint32_t PhaseAOffset;       /* Offset of Phase A current sensing network. */
  uint32_t PhaseBOffset;       /* Offset of Phase B current sensing network. */
  uint32_t PhaseCOffset;       /* Offset of Phase C current sensing network. */
  volatile uint32_t ADCTriggerEdge; /* External ADC trigger edge. */
  uint16_t Half_PWMPeriod;      /* Half PWM Period in timer clock counts. */
  volatile uint16_t ADC1_DMA_converted[2]; /*!< Buffer used for DMA data transfer after the ADC conversion. */
  volatile uint8_t PolarizationCounter;   /* Number of conversions performed during the calibration phase. */
  uint8_t  CalibSector;         /*!< Sector selected during calibration phase. Replaced by PolarizationSector in F30X.*/
  bool OverCurrentFlag;         /* This flag is set when an overcurrent occurs. */
  bool OverVoltageFlag;         /* This flag is set when an overvoltage occurs. */
  bool BrakeActionLock;         /* This flag is set to avoid that brake action is interrupted. */
  bool ADCRegularLocked;        /* This flag is set when regular conversions are locked. */
  R3_1_Params_t const * pParams_str;

} PWMC_R3_1_Handle_t;


/* Exported functions ------------------------------------------------------- */


/*
  * Initializes TIM1, ADC1, GPIO, DMA1 and NVIC for three shunt current
  * reading configuration using STM32F0x.
  */
void R3_1_Init( PWMC_R3_1_Handle_t * pHandle );

/*
  * Stores into the handler the voltage present on the
  * current feedback analog channel when no current is flowing into the
  * motor.
  */
void R3_1_CurrentReadingCalibration( PWMC_Handle_t * pHdl );

/*
 * Computes and returns latest converted motor phase currents.
 */
void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents );

/*
  * Computes and returns latest converted motor phase currents.
  */
void R3_1_GetPhaseCurrents_OVM( PWMC_Handle_t * pHdl, ab_t * Iab );

/*
  * Configures the ADC for the current sampling related to sector X.
  */
uint16_t R3_1_SetADCSampPointSectX(PWMC_Handle_t * pHdl );

/*
  * Configures the ADC for the current sampling.
  */
uint16_t R3_1_SetADCSampPointSectX_OVM( PWMC_Handle_t * pHdl );


/*
  * Configures the ADC for the current sampling during calibration.
  */
uint16_t R3_1_SetADCSampPointCalibration( PWMC_Handle_t * pHdl );

/*
  * Turns on low sides switches.
  */
void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl, uint32_t ticks);

/*
  * Enables the PWM outputs.
  */
void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl );

/*
  * Disables PWM generation on the proper Timer peripheral acting on
  * MOE bit and reset the TIM status.
  */
void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl );

/*
  * Checks if an overcurrent occurred since last call.
  */
uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl );

/*
  * Contains the TIMx Update event interrupt.
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle );

/*
 * Contains the Break event interrupt.
 */
void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHdl );

/*
  * Sets the calibrated offset.
  */
void R3_1_SetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets);

/*
  * Reads the calibrated offsets.
  */
void R3_1_GetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets);

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cpluplus */

#endif /*__R3_F0XX_PWMNCURRFDBK_H*/

/************************ (C) COPYRIGHT 2022 STMicroelectronics *****END OF FILE****/
