
Self_balancing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  00020420  2**0
                  CONTENTS
  4 .ARM          00000000  08006fb0  08006fb0  00020420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fb0  08006fb0  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08006fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000420  080073d8  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000480  20000610  080073d8  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_line   00026161  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000281e2  00000000  00000000  000465a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006498  00000000  00000000  0006e78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00074c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000785a9  00000000  00000000  00075cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004368  00000000  00000000  000ee270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00014f9c  00000000  00000000  000f25d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000190b7  00000000  00000000  00107574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012062b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026a8  00000000  00000000  0012067c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060a0 	.word	0x080060a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	080060a0 	.word	0x080060a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a64      	lsrs	r4, r4, #9
 8000404:	1c0f      	adds	r7, r1, #0
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2d00      	cmp	r5, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e08d      	b.n	800052c <__aeabi_fmul+0x138>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x22>
 8000414:	e092      	b.n	800053c <__aeabi_fmul+0x148>
 8000416:	2300      	movs	r3, #0
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00e4      	lsls	r4, r4, #3
 8000420:	04c0      	lsls	r0, r0, #19
 8000422:	4304      	orrs	r4, r0
 8000424:	3d7f      	subs	r5, #127	; 0x7f
 8000426:	0278      	lsls	r0, r7, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	007b      	lsls	r3, r7, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x44>
 8000436:	e070      	b.n	800051a <__aeabi_fmul+0x126>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x4a>
 800043c:	e086      	b.n	800054c <__aeabi_fmul+0x158>
 800043e:	4642      	mov	r2, r8
 8000440:	00d0      	lsls	r0, r2, #3
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	3b7f      	subs	r3, #127	; 0x7f
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	2300      	movs	r3, #0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	4302      	orrs	r2, r0
 800044e:	4690      	mov	r8, r2
 8000450:	469c      	mov	ip, r3
 8000452:	0031      	movs	r1, r6
 8000454:	464b      	mov	r3, r9
 8000456:	4079      	eors	r1, r7
 8000458:	1c68      	adds	r0, r5, #1
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81c      	bhi.n	8000498 <__aeabi_fmul+0xa4>
 800045e:	4a76      	ldr	r2, [pc, #472]	; (8000638 <__aeabi_fmul+0x244>)
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	469f      	mov	pc, r3
 8000466:	0039      	movs	r1, r7
 8000468:	4644      	mov	r4, r8
 800046a:	46e2      	mov	sl, ip
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <__aeabi_fmul+0x9e>
 8000472:	2b03      	cmp	r3, #3
 8000474:	d100      	bne.n	8000478 <__aeabi_fmul+0x84>
 8000476:	e0d7      	b.n	8000628 <__aeabi_fmul+0x234>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d137      	bne.n	80004ec <__aeabi_fmul+0xf8>
 800047c:	2000      	movs	r0, #0
 800047e:	2400      	movs	r4, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4320      	orrs	r0, r4
 8000484:	07c9      	lsls	r1, r1, #31
 8000486:	4308      	orrs	r0, r1
 8000488:	bce0      	pop	{r5, r6, r7}
 800048a:	46ba      	mov	sl, r7
 800048c:	46b1      	mov	r9, r6
 800048e:	46a8      	mov	r8, r5
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	2400      	movs	r4, #0
 8000496:	e7f3      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000498:	0c26      	lsrs	r6, r4, #16
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c22      	lsrs	r2, r4, #16
 800049e:	4644      	mov	r4, r8
 80004a0:	0424      	lsls	r4, r4, #16
 80004a2:	0c24      	lsrs	r4, r4, #16
 80004a4:	4643      	mov	r3, r8
 80004a6:	0027      	movs	r7, r4
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	4357      	muls	r7, r2
 80004ac:	4374      	muls	r4, r6
 80004ae:	435a      	muls	r2, r3
 80004b0:	435e      	muls	r6, r3
 80004b2:	1912      	adds	r2, r2, r4
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d903      	bls.n	80004c4 <__aeabi_fmul+0xd0>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	4694      	mov	ip, r2
 80004c2:	4466      	add	r6, ip
 80004c4:	043f      	lsls	r7, r7, #16
 80004c6:	041a      	lsls	r2, r3, #16
 80004c8:	0c3f      	lsrs	r7, r7, #16
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	0194      	lsls	r4, r2, #6
 80004ce:	1e67      	subs	r7, r4, #1
 80004d0:	41bc      	sbcs	r4, r7
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	0e92      	lsrs	r2, r2, #26
 80004d6:	199b      	adds	r3, r3, r6
 80004d8:	4314      	orrs	r4, r2
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	431c      	orrs	r4, r3
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	d400      	bmi.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	e09b      	b.n	800061c <__aeabi_fmul+0x228>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0862      	lsrs	r2, r4, #1
 80004e8:	401c      	ands	r4, r3
 80004ea:	4314      	orrs	r4, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	327f      	adds	r2, #127	; 0x7f
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dd64      	ble.n	80005be <__aeabi_fmul+0x1ca>
 80004f4:	0763      	lsls	r3, r4, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fmul+0x10e>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4023      	ands	r3, r4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x10e>
 8000500:	3404      	adds	r4, #4
 8000502:	0123      	lsls	r3, r4, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fmul+0x11a>
 8000506:	0002      	movs	r2, r0
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <__aeabi_fmul+0x248>)
 800050a:	3280      	adds	r2, #128	; 0x80
 800050c:	401c      	ands	r4, r3
 800050e:	2afe      	cmp	r2, #254	; 0xfe
 8000510:	dcbf      	bgt.n	8000492 <__aeabi_fmul+0x9e>
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2d0      	uxtb	r0, r2
 8000518:	e7b2      	b.n	8000480 <__aeabi_fmul+0x8c>
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13d      	bne.n	800059c <__aeabi_fmul+0x1a8>
 8000520:	464a      	mov	r2, r9
 8000522:	3301      	adds	r3, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4691      	mov	r9, r2
 8000528:	469c      	mov	ip, r3
 800052a:	e792      	b.n	8000452 <__aeabi_fmul+0x5e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d129      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2500      	movs	r5, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e774      	b.n	8000426 <__aeabi_fmul+0x32>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fmul+0x184>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	25ff      	movs	r5, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e76c      	b.n	8000426 <__aeabi_fmul+0x32>
 800054c:	4643      	mov	r3, r8
 800054e:	35ff      	adds	r5, #255	; 0xff
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <__aeabi_fmul+0x178>
 8000554:	2302      	movs	r3, #2
 8000556:	464a      	mov	r2, r9
 8000558:	431a      	orrs	r2, r3
 800055a:	4691      	mov	r9, r2
 800055c:	469c      	mov	ip, r3
 800055e:	e778      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000560:	4653      	mov	r3, sl
 8000562:	0031      	movs	r1, r6
 8000564:	2b02      	cmp	r3, #2
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x176>
 8000568:	e783      	b.n	8000472 <__aeabi_fmul+0x7e>
 800056a:	e792      	b.n	8000492 <__aeabi_fmul+0x9e>
 800056c:	2303      	movs	r3, #3
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4691      	mov	r9, r2
 8000574:	469c      	mov	ip, r3
 8000576:	e76c      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	25ff      	movs	r5, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e750      	b.n	8000426 <__aeabi_fmul+0x32>
 8000584:	0020      	movs	r0, r4
 8000586:	f000 f8a9 	bl	80006dc <__clzsi2>
 800058a:	2576      	movs	r5, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	426d      	negs	r5, r5
 8000594:	4699      	mov	r9, r3
 8000596:	469a      	mov	sl, r3
 8000598:	1a2d      	subs	r5, r5, r0
 800059a:	e744      	b.n	8000426 <__aeabi_fmul+0x32>
 800059c:	4640      	mov	r0, r8
 800059e:	f000 f89d 	bl	80006dc <__clzsi2>
 80005a2:	4642      	mov	r2, r8
 80005a4:	1f43      	subs	r3, r0, #5
 80005a6:	409a      	lsls	r2, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	469c      	mov	ip, r3
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e74e      	b.n	8000452 <__aeabi_fmul+0x5e>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03e4      	lsls	r4, r4, #15
 80005bc:	e760      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005be:	2301      	movs	r3, #1
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2b1b      	cmp	r3, #27
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fmul+0x1d4>
 80005c6:	e759      	b.n	800047c <__aeabi_fmul+0x88>
 80005c8:	0022      	movs	r2, r4
 80005ca:	309e      	adds	r0, #158	; 0x9e
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4084      	lsls	r4, r0
 80005d0:	0013      	movs	r3, r2
 80005d2:	1e62      	subs	r2, r4, #1
 80005d4:	4194      	sbcs	r4, r2
 80005d6:	431c      	orrs	r4, r3
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005e4:	3404      	adds	r4, #4
 80005e6:	0163      	lsls	r3, r4, #5
 80005e8:	d51a      	bpl.n	8000620 <__aeabi_fmul+0x22c>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2400      	movs	r4, #0
 80005ee:	e747      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	03c0      	lsls	r0, r0, #15
 80005f4:	4204      	tst	r4, r0
 80005f6:	d009      	beq.n	800060c <__aeabi_fmul+0x218>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4203      	tst	r3, r0
 80005fc:	d106      	bne.n	800060c <__aeabi_fmul+0x218>
 80005fe:	4644      	mov	r4, r8
 8000600:	4304      	orrs	r4, r0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	0039      	movs	r1, r7
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	e739      	b.n	8000480 <__aeabi_fmul+0x8c>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4304      	orrs	r4, r0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	0031      	movs	r1, r6
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	e731      	b.n	8000480 <__aeabi_fmul+0x8c>
 800061c:	0028      	movs	r0, r5
 800061e:	e765      	b.n	80004ec <__aeabi_fmul+0xf8>
 8000620:	01a4      	lsls	r4, r4, #6
 8000622:	2000      	movs	r0, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	e72b      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4304      	orrs	r4, r0
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e724      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	080060b8 	.word	0x080060b8
 800063c:	f7ffffff 	.word	0xf7ffffff

08000640 <__aeabi_i2f>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	2800      	cmp	r0, #0
 8000644:	d013      	beq.n	800066e <__aeabi_i2f+0x2e>
 8000646:	17c3      	asrs	r3, r0, #31
 8000648:	18c6      	adds	r6, r0, r3
 800064a:	405e      	eors	r6, r3
 800064c:	0fc4      	lsrs	r4, r0, #31
 800064e:	0030      	movs	r0, r6
 8000650:	f000 f844 	bl	80006dc <__clzsi2>
 8000654:	239e      	movs	r3, #158	; 0x9e
 8000656:	0005      	movs	r5, r0
 8000658:	1a1b      	subs	r3, r3, r0
 800065a:	2b96      	cmp	r3, #150	; 0x96
 800065c:	dc0f      	bgt.n	800067e <__aeabi_i2f+0x3e>
 800065e:	2808      	cmp	r0, #8
 8000660:	dd01      	ble.n	8000666 <__aeabi_i2f+0x26>
 8000662:	3d08      	subs	r5, #8
 8000664:	40ae      	lsls	r6, r5
 8000666:	0276      	lsls	r6, r6, #9
 8000668:	0a76      	lsrs	r6, r6, #9
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	e002      	b.n	8000674 <__aeabi_i2f+0x34>
 800066e:	2400      	movs	r4, #0
 8000670:	2000      	movs	r0, #0
 8000672:	2600      	movs	r6, #0
 8000674:	05c0      	lsls	r0, r0, #23
 8000676:	4330      	orrs	r0, r6
 8000678:	07e4      	lsls	r4, r4, #31
 800067a:	4320      	orrs	r0, r4
 800067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800067e:	2b99      	cmp	r3, #153	; 0x99
 8000680:	dd0c      	ble.n	800069c <__aeabi_i2f+0x5c>
 8000682:	2205      	movs	r2, #5
 8000684:	0031      	movs	r1, r6
 8000686:	1a12      	subs	r2, r2, r0
 8000688:	40d1      	lsrs	r1, r2
 800068a:	000a      	movs	r2, r1
 800068c:	0001      	movs	r1, r0
 800068e:	0030      	movs	r0, r6
 8000690:	311b      	adds	r1, #27
 8000692:	4088      	lsls	r0, r1
 8000694:	1e41      	subs	r1, r0, #1
 8000696:	4188      	sbcs	r0, r1
 8000698:	4302      	orrs	r2, r0
 800069a:	0016      	movs	r6, r2
 800069c:	2d05      	cmp	r5, #5
 800069e:	dc12      	bgt.n	80006c6 <__aeabi_i2f+0x86>
 80006a0:	0031      	movs	r1, r6
 80006a2:	4f0d      	ldr	r7, [pc, #52]	; (80006d8 <__aeabi_i2f+0x98>)
 80006a4:	4039      	ands	r1, r7
 80006a6:	0772      	lsls	r2, r6, #29
 80006a8:	d009      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006aa:	200f      	movs	r0, #15
 80006ac:	4030      	ands	r0, r6
 80006ae:	2804      	cmp	r0, #4
 80006b0:	d005      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006b2:	3104      	adds	r1, #4
 80006b4:	014a      	lsls	r2, r1, #5
 80006b6:	d502      	bpl.n	80006be <__aeabi_i2f+0x7e>
 80006b8:	239f      	movs	r3, #159	; 0x9f
 80006ba:	4039      	ands	r1, r7
 80006bc:	1b5b      	subs	r3, r3, r5
 80006be:	0189      	lsls	r1, r1, #6
 80006c0:	0a4e      	lsrs	r6, r1, #9
 80006c2:	b2d8      	uxtb	r0, r3
 80006c4:	e7d6      	b.n	8000674 <__aeabi_i2f+0x34>
 80006c6:	1f6a      	subs	r2, r5, #5
 80006c8:	4096      	lsls	r6, r2
 80006ca:	0031      	movs	r1, r6
 80006cc:	4f02      	ldr	r7, [pc, #8]	; (80006d8 <__aeabi_i2f+0x98>)
 80006ce:	4039      	ands	r1, r7
 80006d0:	0772      	lsls	r2, r6, #29
 80006d2:	d0f4      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006d4:	e7e9      	b.n	80006aa <__aeabi_i2f+0x6a>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	fbffffff 	.word	0xfbffffff

080006dc <__clzsi2>:
 80006dc:	211c      	movs	r1, #28
 80006de:	2301      	movs	r3, #1
 80006e0:	041b      	lsls	r3, r3, #16
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d301      	bcc.n	80006ea <__clzsi2+0xe>
 80006e6:	0c00      	lsrs	r0, r0, #16
 80006e8:	3910      	subs	r1, #16
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	4298      	cmp	r0, r3
 80006ee:	d301      	bcc.n	80006f4 <__clzsi2+0x18>
 80006f0:	0a00      	lsrs	r0, r0, #8
 80006f2:	3908      	subs	r1, #8
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	4298      	cmp	r0, r3
 80006f8:	d301      	bcc.n	80006fe <__clzsi2+0x22>
 80006fa:	0900      	lsrs	r0, r0, #4
 80006fc:	3904      	subs	r1, #4
 80006fe:	a202      	add	r2, pc, #8	; (adr r2, 8000708 <__clzsi2+0x2c>)
 8000700:	5c10      	ldrb	r0, [r2, r0]
 8000702:	1840      	adds	r0, r0, r1
 8000704:	4770      	bx	lr
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	02020304 	.word	0x02020304
 800070c:	01010101 	.word	0x01010101
	...

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f004 fd20 	bl	8005160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f005 fc75 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f000 ffad 	bl	80016a8 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800075c:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 8000760:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000764:	20000610 	.word	0x20000610

08000768 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800076c:	b510      	push	{r4, lr}
 800076e:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000772:	6940      	ldr	r0, [r0, #20]
 8000774:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000776:	2200      	movs	r2, #0
 8000778:	234c      	movs	r3, #76	; 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800077a:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 800077c:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800077e:	3b04      	subs	r3, #4
 8000780:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000782:	6960      	ldr	r0, [r4, #20]
 8000784:	2204      	movs	r2, #4
 8000786:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000788:	311c      	adds	r1, #28
 800078a:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 800078c:	bd10      	pop	{r4, pc}
 800078e:	46c0      	nop			; (mov r8, r8)

08000790 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000792:	780a      	ldrb	r2, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000794:	790b      	ldrb	r3, [r1, #4]
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000796:	01d2      	lsls	r2, r2, #7
               | (((uint32_t)capabilities->version) << 4U)
 8000798:	011b      	lsls	r3, r3, #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800079a:	4313      	orrs	r3, r2
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800079c:	784a      	ldrb	r2, [r1, #1]
  header &= 0x0fffffffU;
 800079e:	2505      	movs	r5, #5
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80007a0:	0212      	lsls	r2, r2, #8
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007a2:	4313      	orrs	r3, r2
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80007a4:	788a      	ldrb	r2, [r1, #2]
{
 80007a6:	0004      	movs	r4, r0
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80007a8:	0392      	lsls	r2, r2, #14
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007aa:	4313      	orrs	r3, r2
 80007ac:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80007ae:	21ff      	movs	r1, #255	; 0xff
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80007b0:	0552      	lsls	r2, r2, #21
 80007b2:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80007b4:	4e16      	ldr	r6, [pc, #88]	; (8000810 <ASPEP_sendBeacon+0x80>)
 80007b6:	4019      	ands	r1, r3
 80007b8:	4329      	orrs	r1, r5
  header &= 0x0fffffffU;
 80007ba:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80007bc:	5c70      	ldrb	r0, [r6, r1]
 80007be:	0b17      	lsrs	r7, r2, #12
 80007c0:	4078      	eors	r0, r7
 80007c2:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80007c4:	5c31      	ldrb	r1, [r6, r0]
 80007c6:	0d17      	lsrs	r7, r2, #20
 80007c8:	4079      	eors	r1, r7
 80007ca:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80007cc:	5c71      	ldrb	r1, [r6, r1]
 80007ce:	0f12      	lsrs	r2, r2, #28
 80007d0:	404a      	eors	r2, r1
 80007d2:	4910      	ldr	r1, [pc, #64]	; (8000814 <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 80007d4:	5c8a      	ldrb	r2, [r1, r2]
 80007d6:	0712      	lsls	r2, r2, #28
 80007d8:	4313      	orrs	r3, r2
 80007da:	432b      	orrs	r3, r5
 80007dc:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007de:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80007e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80007e6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80007e8:	2324      	movs	r3, #36	; 0x24
 80007ea:	5ce2      	ldrb	r2, [r4, r3]
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d101      	bne.n	80007f4 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80007f0:	3202      	adds	r2, #2
 80007f2:	54e2      	strb	r2, [r4, r3]
}
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80007f6:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 80007f8:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80007fa:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80007fc:	3324      	adds	r3, #36	; 0x24
 80007fe:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000800:	6321      	str	r1, [r4, #48]	; 0x30
 8000802:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000804:	6960      	ldr	r0, [r4, #20]
 8000806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000808:	3201      	adds	r2, #1
 800080a:	4798      	blx	r3
 800080c:	e7f2      	b.n	80007f4 <ASPEP_sendBeacon+0x64>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	08006108 	.word	0x08006108
 8000814:	080060f8 	.word	0x080060f8

08000818 <ASPEP_sendPing>:
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	000c      	movs	r4, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 800081c:	2148      	movs	r1, #72	; 0x48
{
 800081e:	0003      	movs	r3, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000820:	5c41      	ldrb	r1, [r0, r1]
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000822:	2001      	movs	r0, #1
 8000824:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000826:	0121      	lsls	r1, r4, #4
              | (uint32_t)((uint32_t)cBit << 5U)
 8000828:	0164      	lsls	r4, r4, #5
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800082a:	4321      	orrs	r1, r4
 800082c:	0312      	lsls	r2, r2, #12
 800082e:	430a      	orrs	r2, r1
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000830:	0181      	lsls	r1, r0, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000832:	430a      	orrs	r2, r1
    uint8_t ipID = pHandle->liid & 0xFU;
 8000834:	214b      	movs	r1, #75	; 0x4b
              | (uint32_t)((uint32_t)Nbit << 7U)
 8000836:	01c0      	lsls	r0, r0, #7
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000838:	4302      	orrs	r2, r0
    uint8_t ipID = pHandle->liid & 0xFU;
 800083a:	5c58      	ldrb	r0, [r3, r1]
              | (uint32_t)((uint32_t)ipID << 8U)
 800083c:	393c      	subs	r1, #60	; 0x3c
 800083e:	4001      	ands	r1, r0
 8000840:	0209      	lsls	r1, r1, #8
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000842:	430a      	orrs	r2, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000844:	21ff      	movs	r1, #255	; 0xff
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000846:	2006      	movs	r0, #6
 8000848:	0014      	movs	r4, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800084a:	4d16      	ldr	r5, [pc, #88]	; (80008a4 <ASPEP_sendPing+0x8c>)
 800084c:	4011      	ands	r1, r2
 800084e:	4301      	orrs	r1, r0
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000850:	4304      	orrs	r4, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000852:	5c68      	ldrb	r0, [r5, r1]
 8000854:	0a16      	lsrs	r6, r2, #8
 8000856:	4070      	eors	r0, r6
 8000858:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800085a:	5c29      	ldrb	r1, [r5, r0]
 800085c:	0c16      	lsrs	r6, r2, #16
 800085e:	4071      	eors	r1, r6
 8000860:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000862:	5c69      	ldrb	r1, [r5, r1]
 8000864:	0e12      	lsrs	r2, r2, #24
 8000866:	404a      	eors	r2, r1
 8000868:	490f      	ldr	r1, [pc, #60]	; (80008a8 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 800086a:	5c8a      	ldrb	r2, [r1, r2]
 800086c:	0712      	lsls	r2, r2, #28
 800086e:	4322      	orrs	r2, r4
 8000870:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000876:	2a00      	cmp	r2, #0
 8000878:	d007      	beq.n	800088a <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 800087a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800087c:	2224      	movs	r2, #36	; 0x24
 800087e:	5c99      	ldrb	r1, [r3, r2]
 8000880:	2900      	cmp	r1, #0
 8000882:	d101      	bne.n	8000888 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 8000884:	3102      	adds	r1, #2
 8000886:	5499      	strb	r1, [r3, r2]
}
 8000888:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800088a:	0019      	movs	r1, r3
        pHandle->ctrlBuffer.state = readLock;
 800088c:	2003      	movs	r0, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800088e:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000890:	3224      	adds	r2, #36	; 0x24
 8000892:	5498      	strb	r0, [r3, r2]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000894:	6319      	str	r1, [r3, #48]	; 0x30
 8000896:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000898:	6958      	ldr	r0, [r3, #20]
 800089a:	3a20      	subs	r2, #32
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4798      	blx	r3
 80008a0:	e7f2      	b.n	8000888 <ASPEP_sendPing+0x70>
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	08006108 	.word	0x08006108
 80008a8:	080060f8 	.word	0x080060f8

080008ac <ASPEP_getBuffer>:
{
 80008ac:	0003      	movs	r3, r0
 80008ae:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 80008b0:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 80008b2:	2a0a      	cmp	r2, #10
 80008b4:	d000      	beq.n	80008b8 <ASPEP_getBuffer+0xc>
}
 80008b6:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80008b8:	3224      	adds	r2, #36	; 0x24
 80008ba:	5c9c      	ldrb	r4, [r3, r2]
 80008bc:	2c01      	cmp	r4, #1
 80008be:	d8fa      	bhi.n	80008b6 <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80008c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80008c2:	3004      	adds	r0, #4
 80008c4:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80008c6:	2101      	movs	r1, #1
  bool result = true;
 80008c8:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 80008ca:	5499      	strb	r1, [r3, r2]
 80008cc:	e7f3      	b.n	80008b6 <ASPEP_getBuffer+0xa>
 80008ce:	46c0      	nop			; (mov r8, r8)

080008d0 <ASPEP_sendPacket>:
{
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80008d4:	204c      	movs	r0, #76	; 0x4c
{
 80008d6:	46c6      	mov	lr, r8
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80008d8:	5c25      	ldrb	r5, [r4, r0]
{
 80008da:	b500      	push	{lr}
      result = ASPEP_NOT_CONNECTED;
 80008dc:	384a      	subs	r0, #74	; 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80008de:	2d02      	cmp	r5, #2
 80008e0:	d002      	beq.n	80008e8 <ASPEP_sendPacket+0x18>
}
 80008e2:	bc80      	pop	{r7}
 80008e4:	46b8      	mov	r8, r7
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80008e8:	0110      	lsls	r0, r2, #4
 80008ea:	4318      	orrs	r0, r3
      *header = tmpHeader;
 80008ec:	1f0e      	subs	r6, r1, #4
 80008ee:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80008f0:	2054      	movs	r0, #84	; 0x54
 80008f2:	5c20      	ldrb	r0, [r4, r0]
 80008f4:	2801      	cmp	r0, #1
 80008f6:	d106      	bne.n	8000906 <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80008f8:	30c9      	adds	r0, #201	; 0xc9
 80008fa:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80008fc:	1889      	adds	r1, r1, r2
 80008fe:	3034      	adds	r0, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000900:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 8000902:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000904:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d105      	bne.n	8000916 <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 800090a:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 800090c:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 800090e:	2900      	cmp	r1, #0
 8000910:	d0e7      	beq.n	80008e2 <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000912:	2100      	movs	r1, #0
 8000914:	7421      	strb	r1, [r4, #16]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000916:	20ff      	movs	r0, #255	; 0xff
  header &= 0x0fffffffU;
 8000918:	6831      	ldr	r1, [r6, #0]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800091a:	6837      	ldr	r7, [r6, #0]
  header &= 0x0fffffffU;
 800091c:	010d      	lsls	r5, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800091e:	4038      	ands	r0, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000920:	0b2f      	lsrs	r7, r5, #12
 8000922:	46b8      	mov	r8, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000924:	4923      	ldr	r1, [pc, #140]	; (80009b4 <ASPEP_sendPacket+0xe4>)
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000926:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000928:	5c0f      	ldrb	r7, [r1, r0]
 800092a:	4640      	mov	r0, r8
 800092c:	4047      	eors	r7, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800092e:	0d28      	lsrs	r0, r5, #20
 8000930:	4680      	mov	r8, r0
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000932:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000934:	5dc8      	ldrb	r0, [r1, r7]
 8000936:	4647      	mov	r7, r8
 8000938:	4078      	eors	r0, r7
 800093a:	b2c0      	uxtb	r0, r0
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800093c:	5c08      	ldrb	r0, [r1, r0]
 800093e:	0f2d      	lsrs	r5, r5, #28
 8000940:	4045      	eors	r5, r0
 8000942:	481d      	ldr	r0, [pc, #116]	; (80009b8 <ASPEP_sendPacket+0xe8>)
  *headerPtr |= (uint32_t)crc << 28;
 8000944:	6831      	ldr	r1, [r6, #0]
 8000946:	5d40      	ldrb	r0, [r0, r5]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000948:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 800094a:	0700      	lsls	r0, r0, #28
 800094c:	4308      	orrs	r0, r1
 800094e:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000954:	2900      	cmp	r1, #0
 8000956:	d016      	beq.n	8000986 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000958:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 800095a:	2b0a      	cmp	r3, #10
 800095c:	d009      	beq.n	8000972 <ASPEP_sendPacket+0xa2>
  uint8_t result = ASPEP_OK;
 800095e:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1be      	bne.n	80008e2 <ASPEP_sendPacket+0x12>
        if (pHandle->ctrlBuffer.state != available)
 8000964:	3324      	adds	r3, #36	; 0x24
 8000966:	5ce0      	ldrb	r0, [r4, r3]
 8000968:	2800      	cmp	r0, #0
 800096a:	d121      	bne.n	80009b0 <ASPEP_sendPacket+0xe0>
          pHandle->ctrlBuffer.state = pending;
 800096c:	2202      	movs	r2, #2
 800096e:	54e2      	strb	r2, [r4, r3]
 8000970:	e7b7      	b.n	80008e2 <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 8000972:	3324      	adds	r3, #36	; 0x24
 8000974:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000976:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000978:	2901      	cmp	r1, #1
 800097a:	d1b2      	bne.n	80008e2 <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 800097c:	3101      	adds	r1, #1
 800097e:	54e1      	strb	r1, [r4, r3]
  uint8_t result = ASPEP_OK;
 8000980:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000982:	85a2      	strh	r2, [r4, #44]	; 0x2c
 8000984:	e7ad      	b.n	80008e2 <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d00c      	beq.n	80009a4 <ASPEP_sendPacket+0xd4>
        pHandle->ctrlBuffer.state = readLock;
 800098a:	2324      	movs	r3, #36	; 0x24
 800098c:	2103      	movs	r1, #3
 800098e:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000990:	0023      	movs	r3, r4
 8000992:	3320      	adds	r3, #32
 8000994:	6323      	str	r3, [r4, #48]	; 0x30
 8000996:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000998:	0031      	movs	r1, r6
 800099a:	6960      	ldr	r0, [r4, #20]
 800099c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800099e:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 80009a0:	2000      	movs	r0, #0
 80009a2:	e79e      	b.n	80008e2 <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 80009a4:	3324      	adds	r3, #36	; 0x24
 80009a6:	3103      	adds	r1, #3
 80009a8:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80009aa:	0023      	movs	r3, r4
 80009ac:	3328      	adds	r3, #40	; 0x28
 80009ae:	e7f1      	b.n	8000994 <ASPEP_sendPacket+0xc4>
          result = ASPEP_BUFFER_ERROR;
 80009b0:	2003      	movs	r0, #3
 80009b2:	e796      	b.n	80008e2 <ASPEP_sendPacket+0x12>
 80009b4:	08006108 	.word	0x08006108
 80009b8:	080060f8 	.word	0x080060f8

080009bc <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80009be:	2524      	movs	r5, #36	; 0x24
 80009c0:	5d43      	ldrb	r3, [r0, r5]
{
 80009c2:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d012      	beq.n	80009ee <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 80009c8:	2200      	movs	r2, #0
 80009ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80009cc:	718a      	strb	r2, [r1, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80009ce:	322e      	adds	r2, #46	; 0x2e
 80009d0:	5c82      	ldrb	r2, [r0, r2]
 80009d2:	2a02      	cmp	r2, #2
 80009d4:	d011      	beq.n	80009fa <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d11b      	bne.n	8000a12 <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80009da:	0001      	movs	r1, r0
 80009dc:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80009de:	6c23      	ldr	r3, [r4, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80009e0:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80009e2:	2204      	movs	r2, #4
 80009e4:	6940      	ldr	r0, [r0, #20]
 80009e6:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 80009e8:	2303      	movs	r3, #3
 80009ea:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 80009ee:	2300      	movs	r3, #0
 80009f0:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 80009f2:	332e      	adds	r3, #46	; 0x2e
 80009f4:	5cc3      	ldrb	r3, [r0, r3]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d10b      	bne.n	8000a12 <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80009fa:	0023      	movs	r3, r4
 80009fc:	3328      	adds	r3, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80009fe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a00:	6323      	str	r3, [r4, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000a02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000a04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a06:	6960      	ldr	r0, [r4, #20]
 8000a08:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000a0a:	232e      	movs	r3, #46	; 0x2e
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	54e2      	strb	r2, [r4, r3]
 8000a10:	e7ec      	b.n	80009ec <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000a16:	e7e9      	b.n	80009ec <ASPEP_HWDataTransmittedIT+0x30>

08000a18 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	46de      	mov	lr, fp
 8000a1c:	4657      	mov	r7, sl
 8000a1e:	464e      	mov	r6, r9
 8000a20:	4645      	mov	r5, r8
    ASPEP_Handle_t *pHandle = (ASPEP_Handle_t *)pSupHandle; //cstat !MISRAC2012-Rule-11.3
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
 8000a22:	2200      	movs	r2, #0
{
 8000a24:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000a26:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000a28:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000a2a:	3249      	adds	r2, #73	; 0x49
{
 8000a2c:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000a2e:	5c80      	ldrb	r0, [r0, r2]
{
 8000a30:	b083      	sub	sp, #12
    if (pHandle->NewPacketAvailable)
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d018      	beq.n	8000a68 <ASPEP_RXframeProcess+0x50>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000a36:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000a38:	264c      	movs	r6, #76	; 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000a3a:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000a3c:	5da2      	ldrb	r2, [r4, r6]
 8000a3e:	2a01      	cmp	r2, #1
 8000a40:	d05e      	beq.n	8000b00 <ASPEP_RXframeProcess+0xe8>
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	d047      	beq.n	8000ad6 <ASPEP_RXframeProcess+0xbe>
 8000a46:	2500      	movs	r5, #0
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d038      	beq.n	8000abe <ASPEP_RXframeProcess+0xa6>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	2204      	movs	r2, #4
 8000a50:	6960      	ldr	r0, [r4, #20]
 8000a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a54:	311c      	adds	r1, #28
 8000a56:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000a58:	0028      	movs	r0, r5
 8000a5a:	b003      	add	sp, #12
 8000a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5e:	46bb      	mov	fp, r7
 8000a60:	46b2      	mov	sl, r6
 8000a62:	46a9      	mov	r9, r5
 8000a64:	46a0      	mov	r8, r4
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000a68:	234a      	movs	r3, #74	; 0x4a
 8000a6a:	5ce3      	ldrb	r3, [r4, r3]
  uint8_t *result = NULL;
 8000a6c:	2500      	movs	r5, #0
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f2      	beq.n	8000a58 <ASPEP_RXframeProcess+0x40>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a72:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000a74:	210f      	movs	r1, #15
 8000a76:	021a      	lsls	r2, r3, #8
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a7c:	0a1a      	lsrs	r2, r3, #8
 8000a7e:	48a9      	ldr	r0, [pc, #676]	; (8000d24 <ASPEP_RXframeProcess+0x30c>)
 8000a80:	406a      	eors	r2, r5
 8000a82:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a84:	5c82      	ldrb	r2, [r0, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000a86:	4319      	orrs	r1, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a88:	0c1b      	lsrs	r3, r3, #16
 8000a8a:	4053      	eors	r3, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a8c:	5cc3      	ldrb	r3, [r0, r3]
 8000a8e:	4aa6      	ldr	r2, [pc, #664]	; (8000d28 <ASPEP_RXframeProcess+0x310>)
  *headerPtr |= (uint32_t)crc << 28;
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	071b      	lsls	r3, r3, #28
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d03e      	beq.n	8000b1e <ASPEP_RXframeProcess+0x106>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aa0:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000aa2:	2324      	movs	r3, #36	; 0x24
 8000aa4:	5ce2      	ldrb	r2, [r4, r3]
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d101      	bne.n	8000aae <ASPEP_RXframeProcess+0x96>
          pHandle->ctrlBuffer.state = pending;
 8000aaa:	3202      	adds	r2, #2
 8000aac:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000aae:	234a      	movs	r3, #74	; 0x4a
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000ab4:	6960      	ldr	r0, [r4, #20]
 8000ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ab8:	4798      	blx	r3
  uint8_t *result = NULL;
 8000aba:	2500      	movs	r5, #0
 8000abc:	e7cc      	b.n	8000a58 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000abe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ac0:	2a05      	cmp	r2, #5
 8000ac2:	d038      	beq.n	8000b36 <ASPEP_RXframeProcess+0x11e>
          else if (PING == pHandle->rxPacketType)
 8000ac4:	2a06      	cmp	r2, #6
 8000ac6:	d1c1      	bne.n	8000a4c <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000ac8:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000aca:	2100      	movs	r1, #0
 8000acc:	0020      	movs	r0, r4
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f7ff fea2 	bl	8000818 <ASPEP_sendPing>
 8000ad4:	e7ba      	b.n	8000a4c <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000ad6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000ad8:	2a05      	cmp	r2, #5
 8000ada:	d100      	bne.n	8000ade <ASPEP_RXframeProcess+0xc6>
 8000adc:	e0a0      	b.n	8000c20 <ASPEP_RXframeProcess+0x208>
          else if (PING == pHandle->rxPacketType)
 8000ade:	2a06      	cmp	r2, #6
 8000ae0:	d100      	bne.n	8000ae4 <ASPEP_RXframeProcess+0xcc>
 8000ae2:	e0d5      	b.n	8000c90 <ASPEP_RXframeProcess+0x278>
  uint8_t *result = NULL;
 8000ae4:	2500      	movs	r5, #0
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000ae6:	2a09      	cmp	r2, #9
 8000ae8:	d1b0      	bne.n	8000a4c <ASPEP_RXframeProcess+0x34>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000aea:	323f      	adds	r2, #63	; 0x3f
 8000aec:	5ca3      	ldrb	r3, [r4, r2]
 8000aee:	3301      	adds	r3, #1
 8000af0:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000af2:	2301      	movs	r3, #1
 8000af4:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000af6:	3343      	adds	r3, #67	; 0x43
 8000af8:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000afa:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 8000afc:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000afe:	e7a5      	b.n	8000a4c <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000b00:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b02:	2a05      	cmp	r2, #5
 8000b04:	d056      	beq.n	8000bb4 <ASPEP_RXframeProcess+0x19c>
  uint8_t *result = NULL;
 8000b06:	2500      	movs	r5, #0
          else if (PING == pHandle->rxPacketType)
 8000b08:	2a06      	cmp	r2, #6
 8000b0a:	d19f      	bne.n	8000a4c <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000b0c:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	2101      	movs	r1, #1
 8000b12:	0020      	movs	r0, r4
 8000b14:	f7ff fe80 	bl	8000818 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	55a3      	strb	r3, [r4, r6]
 8000b1c:	e796      	b.n	8000a4c <ASPEP_RXframeProcess+0x34>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b1e:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000b20:	2203      	movs	r2, #3
 8000b22:	3324      	adds	r3, #36	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b24:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b26:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b28:	6321      	str	r1, [r4, #48]	; 0x30
 8000b2a:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000b2c:	6960      	ldr	r0, [r4, #20]
 8000b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b30:	3201      	adds	r2, #1
 8000b32:	4798      	blx	r3
 8000b34:	e7bb      	b.n	8000aae <ASPEP_RXframeProcess+0x96>
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b36:	217f      	movs	r1, #127	; 0x7f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000b38:	7f62      	ldrb	r2, [r4, #29]
 8000b3a:	353f      	adds	r5, #63	; 0x3f
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000b3c:	0d5e      	lsrs	r6, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000b3e:	4015      	ands	r5, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b40:	0b9a      	lsrs	r2, r3, #14
 8000b42:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000b44:	4031      	ands	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b46:	2654      	movs	r6, #84	; 0x54
 8000b48:	5da6      	ldrb	r6, [r4, r6]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000b4a:	7f20      	ldrb	r0, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b4c:	46b4      	mov	ip, r6
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000b4e:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b50:	1c06      	adds	r6, r0, #0
 8000b52:	4560      	cmp	r0, ip
 8000b54:	d900      	bls.n	8000b58 <ASPEP_RXframeProcess+0x140>
 8000b56:	4666      	mov	r6, ip
 8000b58:	2754      	movs	r7, #84	; 0x54
 8000b5a:	55e6      	strb	r6, [r4, r7]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b5c:	2655      	movs	r6, #85	; 0x55
 8000b5e:	5da6      	ldrb	r6, [r4, r6]
 8000b60:	1c37      	adds	r7, r6, #0
 8000b62:	42ae      	cmp	r6, r5
 8000b64:	d900      	bls.n	8000b68 <ASPEP_RXframeProcess+0x150>
 8000b66:	1c2f      	adds	r7, r5, #0
 8000b68:	b2fe      	uxtb	r6, r7
 8000b6a:	9600      	str	r6, [sp, #0]
 8000b6c:	2655      	movs	r6, #85	; 0x55
 8000b6e:	55a7      	strb	r7, [r4, r6]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b70:	2756      	movs	r7, #86	; 0x56
 8000b72:	5de6      	ldrb	r6, [r4, r7]
 8000b74:	4690      	mov	r8, r2
 8000b76:	46b1      	mov	r9, r6
 8000b78:	42b2      	cmp	r2, r6
 8000b7a:	d900      	bls.n	8000b7e <ASPEP_RXframeProcess+0x166>
 8000b7c:	46b0      	mov	r8, r6
 8000b7e:	4646      	mov	r6, r8
 8000b80:	b2f6      	uxtb	r6, r6
 8000b82:	2756      	movs	r7, #86	; 0x56
 8000b84:	9601      	str	r6, [sp, #4]
 8000b86:	4646      	mov	r6, r8
 8000b88:	55e6      	strb	r6, [r4, r7]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b8a:	3701      	adds	r7, #1
 8000b8c:	5de6      	ldrb	r6, [r4, r7]
 8000b8e:	1c0f      	adds	r7, r1, #0
 8000b90:	46b2      	mov	sl, r6
 8000b92:	42b1      	cmp	r1, r6
 8000b94:	d900      	bls.n	8000b98 <ASPEP_RXframeProcess+0x180>
 8000b96:	1c37      	adds	r7, r6, #0
 8000b98:	b2fe      	uxtb	r6, r7
 8000b9a:	46b0      	mov	r8, r6
 8000b9c:	2657      	movs	r6, #87	; 0x57
 8000b9e:	55a7      	strb	r7, [r4, r6]
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ba0:	4560      	cmp	r0, ip
 8000ba2:	d800      	bhi.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
 8000ba4:	e09a      	b.n	8000cdc <ASPEP_RXframeProcess+0x2c4>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	0020      	movs	r0, r4
 8000baa:	3154      	adds	r1, #84	; 0x54
 8000bac:	f7ff fdf0 	bl	8000790 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	e74b      	b.n	8000a4c <ASPEP_RXframeProcess+0x34>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000bb4:	213f      	movs	r1, #63	; 0x3f
 8000bb6:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000bb8:	0d58      	lsrs	r0, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000bba:	4011      	ands	r1, r2
 8000bbc:	468c      	mov	ip, r1
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000bbe:	217f      	movs	r1, #127	; 0x7f
 8000bc0:	0b9a      	lsrs	r2, r3, #14
 8000bc2:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000bc4:	4001      	ands	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bc6:	2054      	movs	r0, #84	; 0x54
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000bc8:	7f27      	ldrb	r7, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bca:	5c20      	ldrb	r0, [r4, r0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000bcc:	09ff      	lsrs	r7, r7, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000bce:	1c3d      	adds	r5, r7, #0
 8000bd0:	4287      	cmp	r7, r0
 8000bd2:	d900      	bls.n	8000bd6 <ASPEP_RXframeProcess+0x1be>
 8000bd4:	1c05      	adds	r5, r0, #0
 8000bd6:	2654      	movs	r6, #84	; 0x54
 8000bd8:	55a5      	strb	r5, [r4, r6]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000bda:	2555      	movs	r5, #85	; 0x55
 8000bdc:	5d66      	ldrb	r6, [r4, r5]
 8000bde:	1c35      	adds	r5, r6, #0
 8000be0:	4566      	cmp	r6, ip
 8000be2:	d900      	bls.n	8000be6 <ASPEP_RXframeProcess+0x1ce>
 8000be4:	4665      	mov	r5, ip
 8000be6:	b2ee      	uxtb	r6, r5
 8000be8:	46b1      	mov	r9, r6
 8000bea:	2655      	movs	r6, #85	; 0x55
 8000bec:	55a5      	strb	r5, [r4, r6]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000bee:	2556      	movs	r5, #86	; 0x56
 8000bf0:	5d65      	ldrb	r5, [r4, r5]
 8000bf2:	1c16      	adds	r6, r2, #0
 8000bf4:	46ab      	mov	fp, r5
 8000bf6:	42aa      	cmp	r2, r5
 8000bf8:	d900      	bls.n	8000bfc <ASPEP_RXframeProcess+0x1e4>
 8000bfa:	1c2e      	adds	r6, r5, #0
 8000bfc:	2556      	movs	r5, #86	; 0x56
 8000bfe:	5566      	strb	r6, [r4, r5]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c00:	2657      	movs	r6, #87	; 0x57
 8000c02:	5da5      	ldrb	r5, [r4, r6]
 8000c04:	4688      	mov	r8, r1
 8000c06:	9500      	str	r5, [sp, #0]
 8000c08:	42a9      	cmp	r1, r5
 8000c0a:	d900      	bls.n	8000c0e <ASPEP_RXframeProcess+0x1f6>
 8000c0c:	46a8      	mov	r8, r5
 8000c0e:	2557      	movs	r5, #87	; 0x57
 8000c10:	4646      	mov	r6, r8
 8000c12:	5566      	strb	r6, [r4, r5]
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c14:	4287      	cmp	r7, r0
 8000c16:	d942      	bls.n	8000c9e <ASPEP_RXframeProcess+0x286>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000c18:	234c      	movs	r3, #76	; 0x4c
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	54e2      	strb	r2, [r4, r3]
 8000c1e:	e7c2      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c20:	273f      	movs	r7, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c22:	217f      	movs	r1, #127	; 0x7f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c24:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c26:	0d58      	lsrs	r0, r3, #21
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000c28:	4017      	ands	r7, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c2a:	0b9a      	lsrs	r2, r3, #14
 8000c2c:	400a      	ands	r2, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000c2e:	4001      	ands	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c30:	2054      	movs	r0, #84	; 0x54
 8000c32:	5c20      	ldrb	r0, [r4, r0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c34:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c36:	4684      	mov	ip, r0
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000c38:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c3a:	1c30      	adds	r0, r6, #0
 8000c3c:	4566      	cmp	r6, ip
 8000c3e:	d900      	bls.n	8000c42 <ASPEP_RXframeProcess+0x22a>
 8000c40:	4660      	mov	r0, ip
 8000c42:	2554      	movs	r5, #84	; 0x54
 8000c44:	5560      	strb	r0, [r4, r5]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c46:	2055      	movs	r0, #85	; 0x55
 8000c48:	5c25      	ldrb	r5, [r4, r0]
 8000c4a:	1c28      	adds	r0, r5, #0
 8000c4c:	42bd      	cmp	r5, r7
 8000c4e:	d900      	bls.n	8000c52 <ASPEP_RXframeProcess+0x23a>
 8000c50:	1c38      	adds	r0, r7, #0
 8000c52:	b2c5      	uxtb	r5, r0
 8000c54:	46a9      	mov	r9, r5
 8000c56:	2555      	movs	r5, #85	; 0x55
 8000c58:	5560      	strb	r0, [r4, r5]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c5a:	2056      	movs	r0, #86	; 0x56
 8000c5c:	5c20      	ldrb	r0, [r4, r0]
 8000c5e:	1c15      	adds	r5, r2, #0
 8000c60:	4683      	mov	fp, r0
 8000c62:	4282      	cmp	r2, r0
 8000c64:	d900      	bls.n	8000c68 <ASPEP_RXframeProcess+0x250>
 8000c66:	1c05      	adds	r5, r0, #0
 8000c68:	2056      	movs	r0, #86	; 0x56
 8000c6a:	5425      	strb	r5, [r4, r0]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c6c:	2557      	movs	r5, #87	; 0x57
 8000c6e:	5d60      	ldrb	r0, [r4, r5]
 8000c70:	4688      	mov	r8, r1
 8000c72:	9000      	str	r0, [sp, #0]
 8000c74:	4281      	cmp	r1, r0
 8000c76:	d900      	bls.n	8000c7a <ASPEP_RXframeProcess+0x262>
 8000c78:	4680      	mov	r8, r0
 8000c7a:	2057      	movs	r0, #87	; 0x57
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	5425      	strb	r5, [r4, r0]
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000c80:	2000      	movs	r0, #0
 8000c82:	4680      	mov	r8, r0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c84:	4566      	cmp	r6, ip
 8000c86:	d918      	bls.n	8000cba <ASPEP_RXframeProcess+0x2a2>
 8000c88:	234c      	movs	r3, #76	; 0x4c
 8000c8a:	4642      	mov	r2, r8
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000c8c:	54e2      	strb	r2, [r4, r3]
 8000c8e:	e78a      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000c90:	2101      	movs	r1, #1
 8000c92:	0020      	movs	r0, r4
 8000c94:	7f62      	ldrb	r2, [r4, #29]
 8000c96:	f7ff fdbf 	bl	8000818 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	e6d6      	b.n	8000a4c <ASPEP_RXframeProcess+0x34>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000c9e:	45cc      	cmp	ip, r9
 8000ca0:	d8ba      	bhi.n	8000c18 <ASPEP_RXframeProcess+0x200>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ca2:	455a      	cmp	r2, fp
 8000ca4:	d8b8      	bhi.n	8000c18 <ASPEP_RXframeProcess+0x200>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ca6:	9a00      	ldr	r2, [sp, #0]
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d8b5      	bhi.n	8000c18 <ASPEP_RXframeProcess+0x200>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cac:	2258      	movs	r2, #88	; 0x58
 8000cae:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000cb0:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cb2:	0f5b      	lsrs	r3, r3, #29
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d1af      	bne.n	8000c18 <ASPEP_RXframeProcess+0x200>
 8000cb8:	e775      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000cba:	454f      	cmp	r7, r9
 8000cbc:	d8e4      	bhi.n	8000c88 <ASPEP_RXframeProcess+0x270>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000cbe:	455a      	cmp	r2, fp
 8000cc0:	d8e2      	bhi.n	8000c88 <ASPEP_RXframeProcess+0x270>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000cc2:	9a00      	ldr	r2, [sp, #0]
 8000cc4:	4291      	cmp	r1, r2
 8000cc6:	d8df      	bhi.n	8000c88 <ASPEP_RXframeProcess+0x270>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cc8:	2258      	movs	r2, #88	; 0x58
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000cca:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ccc:	5ca2      	ldrb	r2, [r4, r2]
 8000cce:	0f5b      	lsrs	r3, r3, #29
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	425a      	negs	r2, r3
 8000cd4:	4153      	adcs	r3, r2
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4698      	mov	r8, r3
 8000cda:	e7d5      	b.n	8000c88 <ASPEP_RXframeProcess+0x270>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000cdc:	9800      	ldr	r0, [sp, #0]
 8000cde:	4285      	cmp	r5, r0
 8000ce0:	d900      	bls.n	8000ce4 <ASPEP_RXframeProcess+0x2cc>
 8000ce2:	e760      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ce4:	454a      	cmp	r2, r9
 8000ce6:	d900      	bls.n	8000cea <ASPEP_RXframeProcess+0x2d2>
 8000ce8:	e75d      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000cea:	4551      	cmp	r1, sl
 8000cec:	d900      	bls.n	8000cf0 <ASPEP_RXframeProcess+0x2d8>
 8000cee:	e75a      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cf0:	2258      	movs	r2, #88	; 0x58
 8000cf2:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version =  (uint8_t)((packetHeader &0x70U)>> 4U); /*Bits 4 to 6*/
 8000cf4:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000cf6:	0f5b      	lsrs	r3, r3, #29
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d000      	beq.n	8000cfe <ASPEP_RXframeProcess+0x2e6>
 8000cfc:	e753      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000cfe:	9f01      	ldr	r7, [sp, #4]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d00:	0006      	movs	r6, r0
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d02:	3701      	adds	r7, #1
 8000d04:	b2fb      	uxtb	r3, r7
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d0a:	4643      	mov	r3, r8
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d0c:	2246      	movs	r2, #70	; 0x46
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d0e:	019b      	lsls	r3, r3, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d10:	3601      	adds	r6, #1
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000d12:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000d14:	b2f3      	uxtb	r3, r6
 8000d16:	015b      	lsls	r3, r3, #5
 8000d18:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000d1a:	234c      	movs	r3, #76	; 0x4c
 8000d1c:	3a45      	subs	r2, #69	; 0x45
 8000d1e:	54e2      	strb	r2, [r4, r3]
 8000d20:	e741      	b.n	8000ba6 <ASPEP_RXframeProcess+0x18e>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	08006108 	.word	0x08006108
 8000d28:	080060f8 	.word	0x080060f8

08000d2c <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000d2e:	254d      	movs	r5, #77	; 0x4d
 8000d30:	5d43      	ldrb	r3, [r0, r5]
{
 8000d32:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <ASPEP_HWDataReceivedIT+0x1a>
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d103      	bne.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000d40:	3249      	adds	r2, #73	; 0x49
 8000d42:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <ASPEP_HWDataReceivedIT+0x98>)
 8000d48:	7f21      	ldrb	r1, [r4, #28]
 8000d4a:	69e3      	ldr	r3, [r4, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d4c:	5c41      	ldrb	r1, [r0, r1]
 8000d4e:	0a1a      	lsrs	r2, r3, #8
 8000d50:	4051      	eors	r1, r2
 8000d52:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d54:	5c42      	ldrb	r2, [r0, r1]
 8000d56:	0c1e      	lsrs	r6, r3, #16
 8000d58:	4072      	eors	r2, r6
 8000d5a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000d5c:	5c82      	ldrb	r2, [r0, r2]
 8000d5e:	0e1b      	lsrs	r3, r3, #24
 8000d60:	4053      	eors	r3, r2
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000d62:	5cc3      	ldrb	r3, [r0, r3]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10b      	bne.n	8000d80 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000d68:	7f22      	ldrb	r2, [r4, #28]
 8000d6a:	330f      	adds	r3, #15
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	6523      	str	r3, [r4, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d809      	bhi.n	8000d88 <ASPEP_HWDataReceivedIT+0x5c>
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d81d      	bhi.n	8000db4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000d78:	234a      	movs	r3, #74	; 0x4a
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	54e2      	strb	r2, [r4, r3]
              break;
 8000d7e:	e7e1      	b.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000d80:	234a      	movs	r3, #74	; 0x4a
 8000d82:	2204      	movs	r2, #4
 8000d84:	54e2      	strb	r2, [r4, r3]
 8000d86:	e7dd      	b.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d1f5      	bne.n	8000d78 <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000d8c:	8ba2      	ldrh	r2, [r4, #28]
 8000d8e:	333b      	adds	r3, #59	; 0x3b
 8000d90:	0912      	lsrs	r2, r2, #4
 8000d92:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000d94:	d00e      	beq.n	8000db4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000d96:	2346      	movs	r3, #70	; 0x46
 8000d98:	5ae3      	ldrh	r3, [r4, r3]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d30e      	bcc.n	8000dbc <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000d9e:	2354      	movs	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000da0:	5ce3      	ldrb	r3, [r4, r3]
 8000da2:	69a1      	ldr	r1, [r4, #24]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	18d2      	adds	r2, r2, r3
 8000da8:	6960      	ldr	r0, [r4, #20]
 8000daa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dac:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000dae:	2301      	movs	r3, #1
 8000db0:	5563      	strb	r3, [r4, r5]
 8000db2:	e7c7      	b.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000db4:	2349      	movs	r3, #73	; 0x49
 8000db6:	2201      	movs	r2, #1
 8000db8:	54e2      	strb	r2, [r4, r3]
              break;
 8000dba:	e7c3      	b.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000dbc:	234a      	movs	r3, #74	; 0x4a
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	54e2      	strb	r2, [r4, r3]
 8000dc2:	e7bf      	b.n	8000d44 <ASPEP_HWDataReceivedIT+0x18>
 8000dc4:	08006108 	.word	0x08006108

08000dc8 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000dc8:	224d      	movs	r2, #77	; 0x4d
 8000dca:	2100      	movs	r1, #0
{
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000dd0:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	6940      	ldr	r0, [r0, #20]
 8000dd8:	311c      	adds	r1, #28
 8000dda:	3a49      	subs	r2, #73	; 0x49
 8000ddc:	4798      	blx	r3
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init(HALL_Handle_t *pHandle)
{
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	4647      	mov	r7, r8
 8000de4:	46ce      	mov	lr, r9
 8000de6:	b580      	push	{r7, lr}

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000de8:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000dea:	7842      	ldrb	r2, [r0, #1]
 8000dec:	8ac3      	ldrh	r3, [r0, #22]
    hMaxReliableElSpeedUnit *= 2U;
 8000dee:	8a86      	ldrh	r6, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000df0:	4353      	muls	r3, r2
    hMaxReliableElSpeedUnit *= 2U;
 8000df2:	4356      	muls	r6, r2
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000df4:	0c3a      	lsrs	r2, r7, #16
 8000df6:	4690      	mov	r8, r2
 8000df8:	22c2      	movs	r2, #194	; 0xc2
 8000dfa:	4641      	mov	r1, r8
    hMaxReliableElSpeedUnit *= 2U;
 8000dfc:	0076      	lsls	r6, r6, #1
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000dfe:	b29b      	uxth	r3, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000e00:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
 8000e02:	0004      	movs	r4, r0
    hMaxReliableElSpeedUnit *= 2U;
 8000e04:	b2b6      	uxth	r6, r6
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000e06:	5281      	strh	r1, [r0, r2]

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d800      	bhi.n	8000e0e <HALL_Init+0x2e>
 8000e0c:	e070      	b.n	8000ef0 <HALL_Init+0x110>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000e0e:	0899      	lsrs	r1, r3, #2
 8000e10:	004b      	lsls	r3, r1, #1
 8000e12:	1859      	adds	r1, r3, r1
 8000e14:	4838      	ldr	r0, [pc, #224]	; (8000ef8 <HALL_Init+0x118>)
 8000e16:	0049      	lsls	r1, r1, #1
 8000e18:	f7ff f976 	bl	8000108 <__udivsi3>
 8000e1c:	b282      	uxth	r2, r0
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000e20:	21fa      	movs	r1, #250	; 0xfa
 8000e22:	52e2      	strh	r2, [r4, r3]
 8000e24:	4643      	mov	r3, r8
 8000e26:	0089      	lsls	r1, r1, #2
 8000e28:	4358      	muls	r0, r3
 8000e2a:	f7ff f96d 	bl	8000108 <__udivsi3>
 8000e2e:	23ae      	movs	r3, #174	; 0xae
 8000e30:	52e0      	strh	r0, [r4, r3]

    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000e32:	0400      	lsls	r0, r0, #16
 8000e34:	0c03      	lsrs	r3, r0, #16
 8000e36:	4698      	mov	r8, r3
 8000e38:	23b8      	movs	r3, #184	; 0xb8
 8000e3a:	50e0      	str	r0, [r4, r3]

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000e3c:	3b08      	subs	r3, #8

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e3e:	2106      	movs	r1, #6
 8000e40:	0038      	movs	r0, r7
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000e42:	52e6      	strh	r6, [r4, r3]
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e44:	f7ff f960 	bl	8000108 <__udivsi3>
 8000e48:	8b63      	ldrh	r3, [r4, #26]
 8000e4a:	0007      	movs	r7, r0
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	4699      	mov	r9, r3
 8000e50:	f7ff f95a 	bl	8000108 <__udivsi3>
                              * pHandle->_Super.DPPConvFactor;
 8000e54:	69e3      	ldr	r3, [r4, #28]
 8000e56:	4358      	muls	r0, r3
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000e58:	23b4      	movs	r3, #180	; 0xb4
 8000e5a:	50e0      	str	r0, [r4, r3]

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000e5c:	00b8      	lsls	r0, r7, #2
 8000e5e:	19c0      	adds	r0, r0, r7
 8000e60:	0040      	lsls	r0, r0, #1
    if (0U == hMaxReliableElSpeedUnit)
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d002      	beq.n	8000e6c <HALL_Init+0x8c>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8000e66:	0031      	movs	r1, r6
 8000e68:	f7ff f94e 	bl	8000108 <__udivsi3>
 8000e6c:	23bc      	movs	r3, #188	; 0xbc
 8000e6e:	50e0      	str	r0, [r4, r3]
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e70:	330a      	adds	r3, #10
 8000e72:	5ce0      	ldrb	r0, [r4, r3]
 8000e74:	464b      	mov	r3, r9
 8000e76:	4343      	muls	r3, r0
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000e78:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff f9ce 	bl	800021c <__divsi3>
 8000e80:	23c4      	movs	r3, #196	; 0xc4

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 8000e82:	2249      	movs	r2, #73	; 0x49
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000e84:	21f0      	movs	r1, #240	; 0xf0
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000e86:	3801      	subs	r0, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000e88:	52e0      	strh	r0, [r4, r3]
    pHandle->SensorIsReliable = true;
 8000e8a:	3bc3      	subs	r3, #195	; 0xc3
 8000e8c:	54a3      	strb	r3, [r4, r2]

    /* Set IC filter for Channel 1 (ICF1) */
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, (uint32_t)(pHandle->ICx_Filter) << 20U);
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	69a8      	ldr	r0, [r5, #24]
 8000e92:	5ca2      	ldrb	r2, [r4, r2]
 8000e94:	4388      	bics	r0, r1
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	4302      	orrs	r2, r0
 8000e9a:	61aa      	str	r2, [r5, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e9c:	4642      	mov	r2, r8
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 8000e9e:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000ea0:	2004      	movs	r0, #4
  WRITE_REG(TIMx->PSC, Prescaler);
 8000ea2:	62aa      	str	r2, [r5, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ea4:	696a      	ldr	r2, [r5, #20]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	616a      	str	r2, [r5, #20]
 8000eaa:	6129      	str	r1, [r5, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000eac:	682a      	ldr	r2, [r5, #0]
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	602a      	str	r2, [r5, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000eb2:	68ea      	ldr	r2, [r5, #12]
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4302      	orrs	r2, r0
 8000eb8:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000eba:	68ea      	ldr	r2, [r5, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	60ea      	str	r2, [r5, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000ec0:	6269      	str	r1, [r5, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000ec2:	6a2a      	ldr	r2, [r5, #32]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	622a      	str	r2, [r5, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ec8:	682a      	ldr	r2, [r5, #0]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	602b      	str	r3, [r5, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000ece:	2326      	movs	r3, #38	; 0x26
 8000ed0:	5ce2      	ldrb	r2, [r4, r3]

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d008      	beq.n	8000ee8 <HALL_Init+0x108>
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000ed6:	3392      	adds	r3, #146	; 0x92
 8000ed8:	58e1      	ldr	r1, [r4, r3]
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	3450      	adds	r4, #80	; 0x50
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000ee2:	c402      	stmia	r4!, {r1}
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d1fa      	bne.n	8000ede <HALL_Init+0xfe>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 8000ee8:	bcc0      	pop	{r6, r7}
 8000eea:	46b9      	mov	r9, r7
 8000eec:	46b0      	mov	r8, r6
 8000eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef0:	2096      	movs	r0, #150	; 0x96
      pHandle->HallTimeout = 150U;
 8000ef2:	2296      	movs	r2, #150	; 0x96
 8000ef4:	e793      	b.n	8000e1e <HALL_Init+0x3e>
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	00002710 	.word	0x00002710

08000efc <HALL_Clear>:
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
  * @retval none
  */
__weak void HALL_Clear(HALL_Handle_t *pHandle)
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000efe:	2502      	movs	r5, #2
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 8000f02:	2200      	movs	r2, #0
 8000f04:	68d9      	ldr	r1, [r3, #12]
    pHandle->RatioInc = false;

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 8000f06:	2401      	movs	r4, #1
 8000f08:	43a9      	bics	r1, r5
 8000f0a:	60d9      	str	r1, [r3, #12]
    pHandle->RatioDec = false;
 8000f0c:	214a      	movs	r1, #74	; 0x4a
 8000f0e:	5442      	strb	r2, [r0, r1]
    pHandle->RatioInc = false;
 8000f10:	3101      	adds	r1, #1
 8000f12:	5442      	strb	r2, [r0, r1]
    pHandle->SensorIsReliable = true;
 8000f14:	3902      	subs	r1, #2
 8000f16:	5444      	strb	r4, [r0, r1]

    /* Acceleration measurement not implemented.*/
    pHandle->_Super.hMecAccelUnitP = 0;

    pHandle->FirstCapt = 0U;
 8000f18:	264c      	movs	r6, #76	; 0x4c
    pHandle->_Super.hMecAccelUnitP = 0;
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	8242      	strh	r2, [r0, #18]
    pHandle->FirstCapt = 0U;
 8000f1e:	5581      	strb	r1, [r0, r6]
    pHandle->BufferFilled = 0U;
 8000f20:	3601      	adds	r6, #1
 8000f22:	5581      	strb	r1, [r0, r6]
    pHandle->OVFCounter = 0U;
 8000f24:	3601      	adds	r6, #1
 8000f26:	5581      	strb	r1, [r0, r6]

    pHandle->CompSpeed = 0;
 8000f28:	365e      	adds	r6, #94	; 0x5e
 8000f2a:	5382      	strh	r2, [r0, r6]

    pHandle->Direction = POSITIVE;
 8000f2c:	3e0a      	subs	r6, #10
 8000f2e:	5584      	strb	r4, [r0, r6]

    /* Initialize speed buffer index */
    pHandle->SpeedFIFOIdx = 0U;
 8000f30:	3e0a      	subs	r6, #10
 8000f32:	5581      	strb	r1, [r0, r6]

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;
 8000f34:	7001      	strb	r1, [r0, #0]

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8000f36:	21ae      	movs	r1, #174	; 0xae
 8000f38:	5a41      	ldrh	r1, [r0, r1]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f3a:	6299      	str	r1, [r3, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f3e:	6819      	ldr	r1, [r3, #0]
 8000f40:	4321      	orrs	r1, r4
 8000f42:	6019      	str	r1, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	432a      	orrs	r2, r5
 8000f48:	60da      	str	r2, [r3, #12]
    /* Nothing to do */
  }
  else
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	5cc3      	ldrb	r3, [r0, r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d120      	bne.n	8000f94 <HALL_Clear+0x98>
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000f52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f54:	6c46      	ldr	r6, [r0, #68]	; 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f56:	691a      	ldr	r2, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000f5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000f5c:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000f62:	4032      	ands	r2, r6
 8000f64:	4025      	ands	r5, r4
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	1b92      	subs	r2, r2, r6
 8000f6a:	1b2c      	subs	r4, r5, r4
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	4256      	negs	r6, r2
 8000f70:	4172      	adcs	r2, r6
 8000f72:	4265      	negs	r5, r4
 8000f74:	416c      	adcs	r4, r5
 8000f76:	1a5b      	subs	r3, r3, r1
 8000f78:	4259      	negs	r1, r3
 8000f7a:	414b      	adcs	r3, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000f7c:	0092      	lsls	r2, r2, #2
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000f7e:	0064      	lsls	r4, r4, #1
 8000f80:	4322      	orrs	r2, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	22a6      	movs	r2, #166	; 0xa6
 8000f86:	5483      	strb	r3, [r0, r2]
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d84c      	bhi.n	8001026 <HALL_Clear+0x12a>
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <HALL_Clear+0x138>)
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	58d3      	ldr	r3, [r2, r3]
 8000f92:	469f      	mov	pc, r3
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000f94:	6b83      	ldr	r3, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000f96:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000f98:	691c      	ldr	r4, [r3, #16]
 8000f9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f9c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	6912      	ldr	r2, [r2, #16]
 8000fa2:	402b      	ands	r3, r5
 8000fa4:	1b5b      	subs	r3, r3, r5
 8000fa6:	425d      	negs	r5, r3
 8000fa8:	416b      	adcs	r3, r5
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000faa:	005d      	lsls	r5, r3, #1
 8000fac:	6b43      	ldr	r3, [r0, #52]	; 0x34
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000fae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	400c      	ands	r4, r1
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	425a      	negs	r2, r3
 8000fb8:	4153      	adcs	r3, r2
 8000fba:	1a62      	subs	r2, r4, r1
 8000fbc:	4251      	negs	r1, r2
 8000fbe:	414a      	adcs	r2, r1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	432b      	orrs	r3, r5
 8000fc6:	404a      	eors	r2, r1
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	e7da      	b.n	8000f84 <HALL_Clear+0x88>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HALL_Clear+0x13c>)
 8000fd0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	4463      	add	r3, ip
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	8083      	strh	r3, [r0, #4]
        break;
      }
    }

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000fda:	22aa      	movs	r2, #170	; 0xaa
 8000fdc:	5283      	strh	r3, [r0, r2]
}
 8000fde:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000fe0:	4a16      	ldr	r2, [pc, #88]	; (800103c <HALL_Clear+0x140>)
 8000fe2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000fe4:	4694      	mov	ip, r2
 8000fe6:	4463      	add	r3, ip
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	8083      	strh	r3, [r0, #4]
        break;
 8000fec:	e7f5      	b.n	8000fda <HALL_Clear+0xde>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HALL_Clear+0x144>)
 8000ff0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	4463      	add	r3, ip
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	8083      	strh	r3, [r0, #4]
        break;
 8000ffa:	e7ee      	b.n	8000fda <HALL_Clear+0xde>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <HALL_Clear+0x148>)
 8000ffe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001000:	4694      	mov	ip, r2
 8001002:	4463      	add	r3, ip
 8001004:	b21b      	sxth	r3, r3
 8001006:	8083      	strh	r3, [r0, #4]
        break;
 8001008:	e7e7      	b.n	8000fda <HALL_Clear+0xde>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HALL_Clear+0x14c>)
 800100c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800100e:	4694      	mov	ip, r2
 8001010:	4463      	add	r3, ip
 8001012:	b21b      	sxth	r3, r3
 8001014:	8083      	strh	r3, [r0, #4]
        break;
 8001016:	e7e0      	b.n	8000fda <HALL_Clear+0xde>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HALL_Clear+0x150>)
 800101a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800101c:	4694      	mov	ip, r2
 800101e:	4463      	add	r3, ip
 8001020:	b21b      	sxth	r3, r3
 8001022:	8083      	strh	r3, [r0, #4]
        break;
 8001024:	e7d9      	b.n	8000fda <HALL_Clear+0xde>
        pHandle->SensorIsReliable = false;
 8001026:	2349      	movs	r3, #73	; 0x49
 8001028:	2200      	movs	r2, #0
 800102a:	54c2      	strb	r2, [r0, r3]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800102c:	2204      	movs	r2, #4
 800102e:	5e83      	ldrsh	r3, [r0, r2]
        break;
 8001030:	e7d3      	b.n	8000fda <HALL_Clear+0xde>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	08006208 	.word	0x08006208
 8001038:	ffffc001 	.word	0xffffc001
 800103c:	00003fff 	.word	0x00003fff
 8001040:	ffff9556 	.word	0xffff9556
 8001044:	00006aaa 	.word	0x00006aaa
 8001048:	ffffeaab 	.word	0xffffeaab
 800104c:	00001555 	.word	0x00001555

08001050 <HALL_CalcElAngle>:
{
 8001050:	b510      	push	{r4, lr}
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001052:	230e      	movs	r3, #14
 8001054:	5ec1      	ldrsh	r1, [r0, r3]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HALL_CalcElAngle+0x38>)
{
 8001058:	0002      	movs	r2, r0
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 800105a:	4299      	cmp	r1, r3
 800105c:	d00e      	beq.n	800107c <HALL_CalcElAngle+0x2c>
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800105e:	24aa      	movs	r4, #170	; 0xaa
 8001060:	5b00      	ldrh	r0, [r0, r4]
 8001062:	b28b      	uxth	r3, r1
 8001064:	1818      	adds	r0, r3, r0
 8001066:	5310      	strh	r0, [r2, r4]
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8001068:	8890      	ldrh	r0, [r2, #4]
 800106a:	181b      	adds	r3, r3, r0
 800106c:	20ac      	movs	r0, #172	; 0xac
 800106e:	5a10      	ldrh	r0, [r2, r0]
 8001070:	1818      	adds	r0, r3, r0
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8001072:	23a0      	movs	r3, #160	; 0xa0
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8001074:	b200      	sxth	r0, r0
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8001076:	52d1      	strh	r1, [r2, r3]
 8001078:	8090      	strh	r0, [r2, #4]
}
 800107a:	bd10      	pop	{r4, pc}
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800107c:	21a0      	movs	r1, #160	; 0xa0
 800107e:	8883      	ldrh	r3, [r0, #4]
 8001080:	5a40      	ldrh	r0, [r0, r1]
 8001082:	1818      	adds	r0, r3, r0
 8001084:	b200      	sxth	r0, r0
 8001086:	e7f7      	b.n	8001078 <HALL_CalcElAngle+0x28>
 8001088:	00007fff 	.word	0x00007fff

0800108c <HALL_CalcAvrgMecSpeedUnit>:
    if (pHandle->SensorIsReliable)
 800108c:	2349      	movs	r3, #73	; 0x49
{
 800108e:	b570      	push	{r4, r5, r6, lr}
 8001090:	0004      	movs	r4, r0
    if (pHandle->SensorIsReliable)
 8001092:	5cc0      	ldrb	r0, [r0, r3]
{
 8001094:	000d      	movs	r5, r1
    if (pHandle->SensorIsReliable)
 8001096:	2800      	cmp	r0, #0
 8001098:	d00f      	beq.n	80010ba <HALL_CalcAvrgMecSpeedUnit+0x2e>
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 800109a:	22ae      	movs	r2, #174	; 0xae
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800109c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 800109e:	5aa2      	ldrh	r2, [r4, r2]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d810      	bhi.n	80010c8 <HALL_CalcAvrgMecSpeedUnit+0x3c>
        pHandle->_Super.hElSpeedDpp = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	81e3      	strh	r3, [r4, #14]
        *hMecSpeedUnit = 0;
 80010aa:	800b      	strh	r3, [r1, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80010ac:	0029      	movs	r1, r5
 80010ae:	0020      	movs	r0, r4
 80010b0:	f004 fed4 	bl	8005e5c <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80010b4:	2200      	movs	r2, #0
 80010b6:	5eab      	ldrsh	r3, [r5, r2]
 80010b8:	e004      	b.n	80010c4 <HALL_CalcAvrgMecSpeedUnit+0x38>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80010ba:	78e3      	ldrb	r3, [r4, #3]
      pHandle->_Super.hElSpeedDpp = 0;
 80010bc:	81e0      	strh	r0, [r4, #14]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80010be:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80010c4:	81a3      	strh	r3, [r4, #12]
}
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80010c8:	23a4      	movs	r3, #164	; 0xa4
 80010ca:	5ee6      	ldrsh	r6, [r4, r3]
 80010cc:	81e6      	strh	r6, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d015      	beq.n	80010fe <HALL_CalcAvrgMecSpeedUnit+0x72>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HALL_CalcAvrgMecSpeedUnit+0x98>)
 80010d4:	429e      	cmp	r6, r3
 80010d6:	d021      	beq.n	800111c <HALL_CalcAvrgMecSpeedUnit+0x90>
            if (true == pHandle->HallMtpa)
 80010d8:	23c7      	movs	r3, #199	; 0xc7
 80010da:	5ce3      	ldrb	r3, [r4, r3]
              pHandle->CompSpeed = 0;
 80010dc:	2000      	movs	r0, #0
            if (true == pHandle->HallMtpa)
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00f      	beq.n	8001102 <HALL_CalcAvrgMecSpeedUnit+0x76>
 80010e2:	23ac      	movs	r3, #172	; 0xac
 80010e4:	52e0      	strh	r0, [r4, r3]
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80010e6:	8b60      	ldrh	r0, [r4, #26]
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80010e8:	69e3      	ldr	r3, [r4, #28]
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80010ea:	4346      	muls	r6, r0
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80010ec:	7861      	ldrb	r1, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 80010ee:	00b0      	lsls	r0, r6, #2
 80010f0:	1980      	adds	r0, r0, r6
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80010f2:	4359      	muls	r1, r3
                        * (int32_t)SPEED_UNIT )
 80010f4:	0040      	lsls	r0, r0, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 80010f6:	f7ff f891 	bl	800021c <__divsi3>
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80010fa:	8028      	strh	r0, [r5, #0]
 80010fc:	e7d6      	b.n	80010ac <HALL_CalcAvrgMecSpeedUnit+0x20>
          *hMecSpeedUnit = 0;
 80010fe:	800e      	strh	r6, [r1, #0]
 8001100:	e7d4      	b.n	80010ac <HALL_CalcAvrgMecSpeedUnit+0x20>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8001102:	33aa      	adds	r3, #170	; 0xaa
 8001104:	5ae0      	ldrh	r0, [r4, r3]
 8001106:	88a3      	ldrh	r3, [r4, #4]
 8001108:	1ac0      	subs	r0, r0, r3
 800110a:	23a8      	movs	r3, #168	; 0xa8
 800110c:	b200      	sxth	r0, r0
 800110e:	52e0      	strh	r0, [r4, r3]
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8001110:	331c      	adds	r3, #28
 8001112:	5ae1      	ldrh	r1, [r4, r3]
 8001114:	f7ff f882 	bl	800021c <__divsi3>
 8001118:	b200      	sxth	r0, r0
 800111a:	e7e2      	b.n	80010e2 <HALL_CalcAvrgMecSpeedUnit+0x56>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 800111c:	23b0      	movs	r3, #176	; 0xb0
 800111e:	5ae3      	ldrh	r3, [r4, r3]
 8001120:	800b      	strh	r3, [r1, #0]
 8001122:	e7c3      	b.n	80010ac <HALL_CalcAvrgMecSpeedUnit+0x20>
 8001124:	00007fff 	.word	0x00007fff

08001128 <HALL_TIMx_CC_IRQHandler>:
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	46c6      	mov	lr, r8
  if (pHandle->SensorIsReliable)
 800112c:	2349      	movs	r3, #73	; 0x49
{
 800112e:	b500      	push	{lr}
  if (pHandle->SensorIsReliable)
 8001130:	5cc3      	ldrb	r3, [r0, r3]
{
 8001132:	0004      	movs	r4, r0
  if (pHandle->SensorIsReliable)
 8001134:	2b00      	cmp	r3, #0
 8001136:	d041      	beq.n	80011bc <HALL_TIMx_CC_IRQHandler+0x94>
    bPrevHallState = pHandle->HallState;
 8001138:	23a6      	movs	r3, #166	; 0xa6
 800113a:	5cc1      	ldrb	r1, [r0, r3]
    PrevDirection = pHandle->Direction;
 800113c:	3b04      	subs	r3, #4
 800113e:	56c5      	ldrsb	r5, [r0, r3]
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001140:	3b82      	subs	r3, #130	; 0x82
 8001142:	5cc3      	ldrb	r3, [r0, r3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d03d      	beq.n	80011c4 <HALL_TIMx_CC_IRQHandler+0x9c>
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001148:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800114a:	6c67      	ldr	r7, [r4, #68]	; 0x44
 800114c:	691e      	ldr	r6, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 800114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001150:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001152:	691b      	ldr	r3, [r3, #16]
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001154:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001156:	403b      	ands	r3, r7
 8001158:	1bdb      	subs	r3, r3, r7
 800115a:	425f      	negs	r7, r3
 800115c:	417b      	adcs	r3, r7
 800115e:	6912      	ldr	r2, [r2, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001160:	005f      	lsls	r7, r3, #1
 8001162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001164:	4006      	ands	r6, r0
 8001166:	401a      	ands	r2, r3
 8001168:	1a30      	subs	r0, r6, r0
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4242      	negs	r2, r0
 800116e:	4150      	adcs	r0, r2
 8001170:	425a      	negs	r2, r3
 8001172:	4153      	adcs	r3, r2
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001174:	2204      	movs	r2, #4
 8001176:	0080      	lsls	r0, r0, #2
 8001178:	433b      	orrs	r3, r7
 800117a:	4050      	eors	r0, r2
 800117c:	4303      	orrs	r3, r0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	22a6      	movs	r2, #166	; 0xa6
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8001182:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001184:	54a3      	strb	r3, [r4, r2]
    switch (pHandle->HallState)
 8001186:	2b06      	cmp	r3, #6
 8001188:	d803      	bhi.n	8001192 <HALL_TIMx_CC_IRQHandler+0x6a>
 800118a:	4aa7      	ldr	r2, [pc, #668]	; (8001428 <HALL_TIMx_CC_IRQHandler+0x300>)
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	58d3      	ldr	r3, [r2, r3]
 8001190:	469f      	mov	pc, r3
        pHandle->SensorIsReliable = false;
 8001192:	2349      	movs	r3, #73	; 0x49
 8001194:	2200      	movs	r2, #0
 8001196:	54e2      	strb	r2, [r4, r3]
    PrevDirection = pHandle->Direction;
 8001198:	002e      	movs	r6, r5
    if (true == pHandle->HallMtpa)
 800119a:	23c7      	movs	r3, #199	; 0xc7
 800119c:	5ce3      	ldrb	r3, [r4, r3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HALL_TIMx_CC_IRQHandler+0x80>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80011a2:	23aa      	movs	r3, #170	; 0xaa
 80011a4:	5ae3      	ldrh	r3, [r4, r3]
 80011a6:	80a3      	strh	r3, [r4, #4]
    if (0U == pHandle->FirstCapt)
 80011a8:	234c      	movs	r3, #76	; 0x4c
 80011aa:	5ce2      	ldrb	r2, [r4, r3]
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d000      	beq.n	80011b2 <HALL_TIMx_CC_IRQHandler+0x8a>
 80011b0:	e076      	b.n	80012a0 <HALL_TIMx_CC_IRQHandler+0x178>
      pHandle->FirstCapt++;
 80011b2:	5ce2      	ldrb	r2, [r4, r3]
 80011b4:	3201      	adds	r2, #1
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	54e2      	strb	r2, [r4, r3]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80011ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80011bc:	2000      	movs	r0, #0
 80011be:	bc80      	pop	{r7}
 80011c0:	46b8      	mov	r8, r7
 80011c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80011c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80011c6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80011cc:	691f      	ldr	r7, [r3, #16]
 80011ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80011d2:	4037      	ands	r7, r6
 80011d4:	4002      	ands	r2, r0
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	4250      	negs	r0, r2
 80011da:	4142      	adcs	r2, r0
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011e0:	1bbe      	subs	r6, r7, r6
 80011e2:	4003      	ands	r3, r0
 80011e4:	4277      	negs	r7, r6
 80011e6:	417e      	adcs	r6, r7
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	4258      	negs	r0, r3
 80011ec:	4143      	adcs	r3, r0
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80011ee:	0092      	lsls	r2, r2, #2
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80011f0:	0076      	lsls	r6, r6, #1
 80011f2:	4332      	orrs	r2, r6
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	e7c3      	b.n	8001180 <HALL_TIMx_CC_IRQHandler+0x58>
        if (STATE_2 == bPrevHallState)
 80011f8:	2902      	cmp	r1, #2
 80011fa:	d100      	bne.n	80011fe <HALL_TIMx_CC_IRQHandler+0xd6>
 80011fc:	e0e5      	b.n	80013ca <HALL_TIMx_CC_IRQHandler+0x2a2>
        else if (STATE_4 == bPrevHallState)
 80011fe:	2904      	cmp	r1, #4
 8001200:	d1ca      	bne.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8001202:	23a2      	movs	r3, #162	; 0xa2
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001208:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800120a:	4a88      	ldr	r2, [pc, #544]	; (800142c <HALL_TIMx_CC_IRQHandler+0x304>)
 800120c:	e039      	b.n	8001282 <HALL_TIMx_CC_IRQHandler+0x15a>
        if (STATE_4 == bPrevHallState)
 800120e:	2904      	cmp	r1, #4
 8001210:	d100      	bne.n	8001214 <HALL_TIMx_CC_IRQHandler+0xec>
 8001212:	e0e5      	b.n	80013e0 <HALL_TIMx_CC_IRQHandler+0x2b8>
        else if (STATE_1 == bPrevHallState)
 8001214:	2901      	cmp	r1, #1
 8001216:	d1bf      	bne.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8001218:	23a2      	movs	r3, #162	; 0xa2
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800121e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001220:	4a83      	ldr	r2, [pc, #524]	; (8001430 <HALL_TIMx_CC_IRQHandler+0x308>)
 8001222:	e02e      	b.n	8001282 <HALL_TIMx_CC_IRQHandler+0x15a>
        if (STATE_6 == bPrevHallState)
 8001224:	2906      	cmp	r1, #6
 8001226:	d100      	bne.n	800122a <HALL_TIMx_CC_IRQHandler+0x102>
 8001228:	e0e7      	b.n	80013fa <HALL_TIMx_CC_IRQHandler+0x2d2>
        else if (STATE_5 == bPrevHallState)
 800122a:	2905      	cmp	r1, #5
 800122c:	d1b4      	bne.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 800122e:	23a2      	movs	r3, #162	; 0xa2
 8001230:	22ff      	movs	r2, #255	; 0xff
 8001232:	2601      	movs	r6, #1
 8001234:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001236:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8001238:	3308      	adds	r3, #8
 800123a:	52e2      	strh	r2, [r4, r3]
 800123c:	4276      	negs	r6, r6
 800123e:	e026      	b.n	800128e <HALL_TIMx_CC_IRQHandler+0x166>
        if (STATE_1 == bPrevHallState)
 8001240:	2901      	cmp	r1, #1
 8001242:	d100      	bne.n	8001246 <HALL_TIMx_CC_IRQHandler+0x11e>
 8001244:	e0d4      	b.n	80013f0 <HALL_TIMx_CC_IRQHandler+0x2c8>
        else if (STATE_2 == bPrevHallState)
 8001246:	2902      	cmp	r1, #2
 8001248:	d1a6      	bne.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 800124a:	23a2      	movs	r3, #162	; 0xa2
 800124c:	22ff      	movs	r2, #255	; 0xff
 800124e:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001250:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001252:	4a78      	ldr	r2, [pc, #480]	; (8001434 <HALL_TIMx_CC_IRQHandler+0x30c>)
 8001254:	e015      	b.n	8001282 <HALL_TIMx_CC_IRQHandler+0x15a>
        if (STATE_3 == bPrevHallState)
 8001256:	2903      	cmp	r1, #3
 8001258:	d100      	bne.n	800125c <HALL_TIMx_CC_IRQHandler+0x134>
 800125a:	e0da      	b.n	8001412 <HALL_TIMx_CC_IRQHandler+0x2ea>
        else if (STATE_6 == bPrevHallState)
 800125c:	2906      	cmp	r1, #6
 800125e:	d19b      	bne.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8001260:	23a2      	movs	r3, #162	; 0xa2
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001266:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001268:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HALL_TIMx_CC_IRQHandler+0x310>)
 800126a:	e00a      	b.n	8001282 <HALL_TIMx_CC_IRQHandler+0x15a>
        if (STATE_5 == bPrevHallState)
 800126c:	2905      	cmp	r1, #5
 800126e:	d100      	bne.n	8001272 <HALL_TIMx_CC_IRQHandler+0x14a>
 8001270:	e0c9      	b.n	8001406 <HALL_TIMx_CC_IRQHandler+0x2de>
        else if (STATE_3 == bPrevHallState)
 8001272:	2903      	cmp	r1, #3
 8001274:	d000      	beq.n	8001278 <HALL_TIMx_CC_IRQHandler+0x150>
 8001276:	e78f      	b.n	8001198 <HALL_TIMx_CC_IRQHandler+0x70>
          pHandle->Direction = NEGATIVE;
 8001278:	23a2      	movs	r3, #162	; 0xa2
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 800127e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001280:	4a6e      	ldr	r2, [pc, #440]	; (800143c <HALL_TIMx_CC_IRQHandler+0x314>)
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001282:	4694      	mov	ip, r2
 8001284:	2601      	movs	r6, #1
 8001286:	22aa      	movs	r2, #170	; 0xaa
 8001288:	4463      	add	r3, ip
 800128a:	52a3      	strh	r3, [r4, r2]
 800128c:	4276      	negs	r6, r6
    if (pHandle->Direction != PrevDirection)
 800128e:	42ae      	cmp	r6, r5
 8001290:	d100      	bne.n	8001294 <HALL_TIMx_CC_IRQHandler+0x16c>
 8001292:	e782      	b.n	800119a <HALL_TIMx_CC_IRQHandler+0x72>
      pHandle->BufferFilled = 0U ;
 8001294:	2300      	movs	r3, #0
 8001296:	224d      	movs	r2, #77	; 0x4d
 8001298:	54a3      	strb	r3, [r4, r2]
      pHandle->SpeedFIFOIdx = 0U;
 800129a:	324b      	adds	r2, #75	; 0x4b
 800129c:	54a3      	strb	r3, [r4, r2]
 800129e:	e77c      	b.n	800119a <HALL_TIMx_CC_IRQHandler+0x72>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 80012a0:	234d      	movs	r3, #77	; 0x4d
 80012a2:	2126      	movs	r1, #38	; 0x26
 80012a4:	5ce2      	ldrb	r2, [r4, r3]
 80012a6:	5c61      	ldrb	r1, [r4, r1]
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d203      	bcs.n	80012b4 <HALL_TIMx_CC_IRQHandler+0x18c>
        pHandle->BufferFilled++;
 80012ac:	5ce2      	ldrb	r2, [r4, r3]
 80012ae:	3201      	adds	r2, #1
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	54e2      	strb	r2, [r4, r3]
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80012b4:	254e      	movs	r5, #78	; 0x4e
 80012b6:	6b47      	ldr	r7, [r0, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80012b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 80012ba:	b293      	uxth	r3, r2
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80012bc:	5d62      	ldrb	r2, [r4, r5]
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 80012be:	469c      	mov	ip, r3
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80012c0:	043b      	lsls	r3, r7, #16
 80012c2:	0412      	lsls	r2, r2, #16
 80012c4:	0c1b      	lsrs	r3, r3, #16
 80012c6:	189b      	adds	r3, r3, r2
      if (pHandle->OVFCounter != 0U)
 80012c8:	5d62      	ldrb	r2, [r4, r5]
 80012ca:	b2d5      	uxtb	r5, r2
 80012cc:	46a8      	mov	r8, r5
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d03d      	beq.n	800134e <HALL_TIMx_CC_IRQHandler+0x226>
        hAux = hPrscBuf + 1U;
 80012d2:	4662      	mov	r2, ip
 80012d4:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 80012d6:	b292      	uxth	r2, r2
 80012d8:	4353      	muls	r3, r2
        if (pHandle->RatioInc)
 80012da:	224b      	movs	r2, #75	; 0x4b
 80012dc:	5ca5      	ldrb	r5, [r4, r2]
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d040      	beq.n	8001364 <HALL_TIMx_CC_IRQHandler+0x23c>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80012e2:	2000      	movs	r0, #0
 80012e4:	54a0      	strb	r0, [r4, r2]
      if (wCaptBuf < pHandle->MinPeriod)
 80012e6:	22bc      	movs	r2, #188	; 0xbc
 80012e8:	58a2      	ldr	r2, [r4, r2]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d82b      	bhi.n	8001346 <HALL_TIMx_CC_IRQHandler+0x21e>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80012ee:	209c      	movs	r0, #156	; 0x9c
 80012f0:	2298      	movs	r2, #152	; 0x98
 80012f2:	4684      	mov	ip, r0
 80012f4:	5ca2      	ldrb	r2, [r4, r2]
 80012f6:	5820      	ldr	r0, [r4, r0]
 80012f8:	0095      	lsls	r5, r2, #2
 80012fa:	1965      	adds	r5, r4, r5
 80012fc:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80012fe:	1bc0      	subs	r0, r0, r7
 8001300:	4667      	mov	r7, ip
 8001302:	51e0      	str	r0, [r4, r7]
        if (wCaptBuf >= pHandle->MaxPeriod)
 8001304:	371c      	adds	r7, #28
 8001306:	59e7      	ldr	r7, [r4, r7]
 8001308:	429f      	cmp	r7, r3
 800130a:	d84b      	bhi.n	80013a4 <HALL_TIMx_CC_IRQHandler+0x27c>
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 800130c:	4377      	muls	r7, r6
 800130e:	46b8      	mov	r8, r7
 8001310:	4640      	mov	r0, r8
        pHandle->SpeedFIFOIdx++;
 8001312:	3201      	adds	r2, #1
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	6528      	str	r0, [r5, #80]	; 0x50
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8001318:	4291      	cmp	r1, r2
 800131a:	d100      	bne.n	800131e <HALL_TIMx_CC_IRQHandler+0x1f6>
 800131c:	e07f      	b.n	800141e <HALL_TIMx_CC_IRQHandler+0x2f6>
        pHandle->SpeedFIFOIdx++;
 800131e:	2098      	movs	r0, #152	; 0x98
 8001320:	5422      	strb	r2, [r4, r0]
        if (pHandle->SensorIsReliable)
 8001322:	2249      	movs	r2, #73	; 0x49
 8001324:	5ca2      	ldrb	r2, [r4, r2]
 8001326:	2a00      	cmp	r2, #0
 8001328:	d039      	beq.n	800139e <HALL_TIMx_CC_IRQHandler+0x276>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 800132a:	224d      	movs	r2, #77	; 0x4d
 800132c:	5ca2      	ldrb	r2, [r4, r2]
 800132e:	4291      	cmp	r1, r2
 8001330:	d93f      	bls.n	80013b2 <HALL_TIMx_CC_IRQHandler+0x28a>
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03d      	beq.n	80013b2 <HALL_TIMx_CC_IRQHandler+0x28a>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8001336:	0019      	movs	r1, r3
 8001338:	23b4      	movs	r3, #180	; 0xb4
 800133a:	58e0      	ldr	r0, [r4, r3]
 800133c:	f7fe fee4 	bl	8000108 <__udivsi3>
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8001340:	23a4      	movs	r3, #164	; 0xa4
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8001342:	4346      	muls	r6, r0
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8001344:	52e6      	strh	r6, [r4, r3]
      pHandle->OVFCounter = 0U;
 8001346:	234e      	movs	r3, #78	; 0x4e
 8001348:	2200      	movs	r2, #0
 800134a:	54e2      	strb	r2, [r4, r3]
  return (MC_NULL);
 800134c:	e736      	b.n	80011bc <HALL_TIMx_CC_IRQHandler+0x94>
        if (pHandle->RatioDec) /* and don't decrease it again */
 800134e:	254a      	movs	r5, #74	; 0x4a
 8001350:	5d62      	ldrb	r2, [r4, r5]
 8001352:	2a00      	cmp	r2, #0
 8001354:	d011      	beq.n	800137a <HALL_TIMx_CC_IRQHandler+0x252>
          hAux = hPrscBuf + 2U;
 8001356:	4662      	mov	r2, ip
 8001358:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 800135a:	b292      	uxth	r2, r2
 800135c:	4353      	muls	r3, r2
          pHandle->RatioDec = false;
 800135e:	4642      	mov	r2, r8
 8001360:	5562      	strb	r2, [r4, r5]
 8001362:	e7c0      	b.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 8001364:	27ae      	movs	r7, #174	; 0xae
 8001366:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8001368:	5be7      	ldrh	r7, [r4, r7]
 800136a:	42af      	cmp	r7, r5
 800136c:	d9bb      	bls.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
 800136e:	6a85      	ldr	r5, [r0, #40]	; 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8001370:	3501      	adds	r5, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001372:	6285      	str	r5, [r0, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001374:	2001      	movs	r0, #1
 8001376:	54a0      	strb	r0, [r4, r2]
 8001378:	e7b5      	b.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
          uint16_t hAux = hPrscBuf + 1U;
 800137a:	4662      	mov	r2, ip
 800137c:	3201      	adds	r2, #1
          wCaptBuf *= hAux;
 800137e:	b292      	uxth	r2, r2
 8001380:	4353      	muls	r3, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001382:	22aa      	movs	r2, #170	; 0xaa
 8001384:	b2bf      	uxth	r7, r7
 8001386:	01d2      	lsls	r2, r2, #7
 8001388:	4297      	cmp	r7, r2
 800138a:	d2ac      	bcs.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800138c:	6a82      	ldr	r2, [r0, #40]	; 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 800138e:	2a00      	cmp	r2, #0
 8001390:	d0a9      	beq.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
 8001392:	6a82      	ldr	r2, [r0, #40]	; 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 8001394:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001396:	6282      	str	r2, [r0, #40]	; 0x28
              pHandle->RatioDec = true;
 8001398:	2201      	movs	r2, #1
 800139a:	5562      	strb	r2, [r4, r5]
 800139c:	e7a3      	b.n	80012e6 <HALL_TIMx_CC_IRQHandler+0x1be>
          pHandle->AvrElSpeedDpp = 0;
 800139e:	23a4      	movs	r3, #164	; 0xa4
 80013a0:	52e2      	strh	r2, [r4, r3]
 80013a2:	e7d0      	b.n	8001346 <HALL_TIMx_CC_IRQHandler+0x21e>
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80013a4:	0037      	movs	r7, r6
 80013a6:	435f      	muls	r7, r3
 80013a8:	46b8      	mov	r8, r7
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80013aa:	4667      	mov	r7, ip
 80013ac:	4440      	add	r0, r8
 80013ae:	51e0      	str	r0, [r4, r7]
 80013b0:	e7ae      	b.n	8001310 <HALL_TIMx_CC_IRQHandler+0x1e8>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80013b2:	239c      	movs	r3, #156	; 0x9c
 80013b4:	58e0      	ldr	r0, [r4, r3]
 80013b6:	f7fe ff31 	bl	800021c <__divsi3>
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80013ba:	23b4      	movs	r3, #180	; 0xb4
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80013bc:	0001      	movs	r1, r0
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80013be:	58e0      	ldr	r0, [r4, r3]
 80013c0:	f7fe ff2c 	bl	800021c <__divsi3>
 80013c4:	23a4      	movs	r3, #164	; 0xa4
 80013c6:	52e0      	strh	r0, [r4, r3]
 80013c8:	e7bd      	b.n	8001346 <HALL_TIMx_CC_IRQHandler+0x21e>
          pHandle->Direction = POSITIVE;
 80013ca:	23a2      	movs	r3, #162	; 0xa2
 80013cc:	2201      	movs	r2, #1
 80013ce:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80013d0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HALL_TIMx_CC_IRQHandler+0x310>)
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80013d4:	4694      	mov	ip, r2
 80013d6:	22aa      	movs	r2, #170	; 0xaa
 80013d8:	4463      	add	r3, ip
 80013da:	2601      	movs	r6, #1
 80013dc:	52a3      	strh	r3, [r4, r2]
 80013de:	e756      	b.n	800128e <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 80013e0:	23a2      	movs	r3, #162	; 0xa2
 80013e2:	2201      	movs	r2, #1
 80013e4:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80013e6:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80013e8:	3308      	adds	r3, #8
 80013ea:	2601      	movs	r6, #1
 80013ec:	52e2      	strh	r2, [r4, r3]
 80013ee:	e74e      	b.n	800128e <HALL_TIMx_CC_IRQHandler+0x166>
          pHandle->Direction = POSITIVE;
 80013f0:	23a2      	movs	r3, #162	; 0xa2
 80013f2:	54e1      	strb	r1, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80013f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <HALL_TIMx_CC_IRQHandler+0x314>)
 80013f8:	e7ec      	b.n	80013d4 <HALL_TIMx_CC_IRQHandler+0x2ac>
          pHandle->Direction = POSITIVE;
 80013fa:	23a2      	movs	r3, #162	; 0xa2
 80013fc:	2201      	movs	r2, #1
 80013fe:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001400:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HALL_TIMx_CC_IRQHandler+0x304>)
 8001404:	e7e6      	b.n	80013d4 <HALL_TIMx_CC_IRQHandler+0x2ac>
          pHandle->Direction = POSITIVE;
 8001406:	23a2      	movs	r3, #162	; 0xa2
 8001408:	2201      	movs	r2, #1
 800140a:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800140c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HALL_TIMx_CC_IRQHandler+0x308>)
 8001410:	e7e0      	b.n	80013d4 <HALL_TIMx_CC_IRQHandler+0x2ac>
          pHandle->Direction = POSITIVE;
 8001412:	23a2      	movs	r3, #162	; 0xa2
 8001414:	2201      	movs	r2, #1
 8001416:	54e2      	strb	r2, [r4, r3]
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001418:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800141a:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HALL_TIMx_CC_IRQHandler+0x30c>)
 800141c:	e7da      	b.n	80013d4 <HALL_TIMx_CC_IRQHandler+0x2ac>
          pHandle->SpeedFIFOIdx = 0U;
 800141e:	2298      	movs	r2, #152	; 0x98
 8001420:	2000      	movs	r0, #0
 8001422:	54a0      	strb	r0, [r4, r2]
 8001424:	e77d      	b.n	8001322 <HALL_TIMx_CC_IRQHandler+0x1fa>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	08006224 	.word	0x08006224
 800142c:	ffffd556 	.word	0xffffd556
 8001430:	00002aaa 	.word	0x00002aaa
 8001434:	00007fff 	.word	0x00007fff
 8001438:	ffffaaab 	.word	0xffffaaab
 800143c:	00005555 	.word	0x00005555

08001440 <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8001440:	2349      	movs	r3, #73	; 0x49
{
 8001442:	b570      	push	{r4, r5, r6, lr}
  if (pHandle->SensorIsReliable)
 8001444:	5cc3      	ldrb	r3, [r0, r3]
{
 8001446:	0004      	movs	r4, r0
  if (pHandle->SensorIsReliable)
 8001448:	2b00      	cmp	r3, #0
 800144a:	d018      	beq.n	800147e <HALL_TIMx_UP_IRQHandler+0x3e>
    pHandle->OVFCounter++;
 800144c:	224e      	movs	r2, #78	; 0x4e
 800144e:	5c83      	ldrb	r3, [r0, r2]
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8001450:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8001452:	3301      	adds	r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	5483      	strb	r3, [r0, r2]
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001458:	23c0      	movs	r3, #192	; 0xc0
  return (uint32_t)(READ_REG(TIMx->PSC));
 800145a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 800145c:	5c85      	ldrb	r5, [r0, r2]
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 800145e:	3274      	adds	r2, #116	; 0x74
 8001460:	5ac3      	ldrh	r3, [r0, r3]
 8001462:	5a80      	ldrh	r0, [r0, r2]
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8001464:	1c4a      	adds	r2, r1, #1
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8001466:	4358      	muls	r0, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8001468:	0153      	lsls	r3, r2, #5
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	0099      	lsls	r1, r3, #2
 800146e:	1889      	adds	r1, r1, r2
 8001470:	00c9      	lsls	r1, r1, #3
 8001472:	f7fe fe49 	bl	8000108 <__udivsi3>
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8001476:	b2ed      	uxtb	r5, r5
 8001478:	b280      	uxth	r0, r0
 800147a:	4285      	cmp	r5, r0
 800147c:	d201      	bcs.n	8001482 <HALL_TIMx_UP_IRQHandler+0x42>
}
 800147e:	2000      	movs	r0, #0
 8001480:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->_Super.hElSpeedDpp = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	81e3      	strh	r3, [r4, #14]
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001486:	3320      	adds	r3, #32
 8001488:	5ce3      	ldrb	r3, [r4, r3]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d120      	bne.n	80014d0 <HALL_TIMx_UP_IRQHandler+0x90>
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001492:	691a      	ldr	r2, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001496:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001498:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 800149a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800149c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800149e:	4032      	ands	r2, r6
 80014a0:	4005      	ands	r5, r0
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	1b92      	subs	r2, r2, r6
 80014a6:	1a28      	subs	r0, r5, r0
 80014a8:	400b      	ands	r3, r1
 80014aa:	4256      	negs	r6, r2
 80014ac:	4172      	adcs	r2, r6
 80014ae:	4245      	negs	r5, r0
 80014b0:	4168      	adcs	r0, r5
 80014b2:	1a5b      	subs	r3, r3, r1
 80014b4:	4259      	negs	r1, r3
 80014b6:	414b      	adcs	r3, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80014b8:	0092      	lsls	r2, r2, #2
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	4302      	orrs	r2, r0
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80014be:	4313      	orrs	r3, r2
 80014c0:	22a6      	movs	r2, #166	; 0xa6
 80014c2:	54a3      	strb	r3, [r4, r2]
    switch (pHandle->HallState)
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d86a      	bhi.n	800159e <HALL_TIMx_UP_IRQHandler+0x15e>
 80014c8:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <HALL_TIMx_UP_IRQHandler+0x170>)
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	58d3      	ldr	r3, [r2, r3]
 80014ce:	469f      	mov	pc, r3
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80014d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80014d2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80014d4:	6918      	ldr	r0, [r3, #16]
 80014d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80014d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	6912      	ldr	r2, [r2, #16]
 80014de:	402b      	ands	r3, r5
 80014e0:	1b5b      	subs	r3, r3, r5
 80014e2:	425d      	negs	r5, r3
 80014e4:	416b      	adcs	r3, r5
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 80014e6:	005d      	lsls	r5, r3, #1
 80014e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80014ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014ec:	401a      	ands	r2, r3
 80014ee:	4008      	ands	r0, r1
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	425a      	negs	r2, r3
 80014f4:	4153      	adcs	r3, r2
 80014f6:	1a42      	subs	r2, r0, r1
 80014f8:	4251      	negs	r1, r2
 80014fa:	414a      	adcs	r2, r1
 80014fc:	2104      	movs	r1, #4
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	432b      	orrs	r3, r5
 8001502:	404a      	eors	r2, r1
 8001504:	4313      	orrs	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	e7da      	b.n	80014c0 <HALL_TIMx_UP_IRQHandler+0x80>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HALL_TIMx_UP_IRQHandler+0x174>)
 800150c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800150e:	4694      	mov	ip, r2
 8001510:	4463      	add	r3, ip
 8001512:	b21b      	sxth	r3, r3
 8001514:	80a3      	strh	r3, [r4, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001516:	22aa      	movs	r2, #170	; 0xaa
 8001518:	52a3      	strh	r3, [r4, r2]
      pHandle->OVFCounter = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	3a5c      	subs	r2, #92	; 0x5c
 800151e:	54a3      	strb	r3, [r4, r2]
      pHandle->FirstCapt = 0U;
 8001520:	3a02      	subs	r2, #2
 8001522:	54a3      	strb	r3, [r4, r2]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001524:	3326      	adds	r3, #38	; 0x26
 8001526:	5ce0      	ldrb	r0, [r4, r3]
 8001528:	2800      	cmp	r0, #0
 800152a:	d03e      	beq.n	80015aa <HALL_TIMx_UP_IRQHandler+0x16a>
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 800152c:	3392      	adds	r3, #146	; 0x92
 800152e:	0022      	movs	r2, r4
 8001530:	58e1      	ldr	r1, [r4, r3]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001532:	2300      	movs	r3, #0
 8001534:	3250      	adds	r2, #80	; 0x50
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 800153a:	c202      	stmia	r2!, {r1}
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 800153c:	4283      	cmp	r3, r0
 800153e:	d1fa      	bne.n	8001536 <HALL_TIMx_UP_IRQHandler+0xf6>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8001540:	434b      	muls	r3, r1
      pHandle->BufferFilled = 0U ;
 8001542:	2200      	movs	r2, #0
 8001544:	214d      	movs	r1, #77	; 0x4d
 8001546:	5462      	strb	r2, [r4, r1]
      pHandle->AvrElSpeedDpp = 0;
 8001548:	3157      	adds	r1, #87	; 0x57
 800154a:	5262      	strh	r2, [r4, r1]
      pHandle->SpeedFIFOIdx = 0U;
 800154c:	2100      	movs	r1, #0
 800154e:	3298      	adds	r2, #152	; 0x98
 8001550:	54a1      	strb	r1, [r4, r2]
      pHandle->ElPeriodSum = (int32_t)tempReg;
 8001552:	3204      	adds	r2, #4
 8001554:	50a3      	str	r3, [r4, r2]
 8001556:	e792      	b.n	800147e <HALL_TIMx_UP_IRQHandler+0x3e>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HALL_TIMx_UP_IRQHandler+0x178>)
 800155a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800155c:	4694      	mov	ip, r2
 800155e:	4463      	add	r3, ip
 8001560:	b21b      	sxth	r3, r3
 8001562:	80a3      	strh	r3, [r4, #4]
        break;
 8001564:	e7d7      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HALL_TIMx_UP_IRQHandler+0x17c>)
 8001568:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800156a:	4694      	mov	ip, r2
 800156c:	4463      	add	r3, ip
 800156e:	b21b      	sxth	r3, r3
 8001570:	80a3      	strh	r3, [r4, #4]
        break;
 8001572:	e7d0      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HALL_TIMx_UP_IRQHandler+0x180>)
 8001576:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001578:	4694      	mov	ip, r2
 800157a:	4463      	add	r3, ip
 800157c:	b21b      	sxth	r3, r3
 800157e:	80a3      	strh	r3, [r4, #4]
        break;
 8001580:	e7c9      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HALL_TIMx_UP_IRQHandler+0x184>)
 8001584:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001586:	4694      	mov	ip, r2
 8001588:	4463      	add	r3, ip
 800158a:	b21b      	sxth	r3, r3
 800158c:	80a3      	strh	r3, [r4, #4]
        break;
 800158e:	e7c2      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HALL_TIMx_UP_IRQHandler+0x188>)
 8001592:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001594:	4694      	mov	ip, r2
 8001596:	4463      	add	r3, ip
 8001598:	b21b      	sxth	r3, r3
 800159a:	80a3      	strh	r3, [r4, #4]
        break;
 800159c:	e7bb      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
        pHandle->SensorIsReliable = false;
 800159e:	2349      	movs	r3, #73	; 0x49
 80015a0:	2200      	movs	r2, #0
 80015a2:	54e2      	strb	r2, [r4, r3]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80015a4:	2204      	movs	r2, #4
 80015a6:	5ea3      	ldrsh	r3, [r4, r2]
        break;
 80015a8:	e7b5      	b.n	8001516 <HALL_TIMx_UP_IRQHandler+0xd6>
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	e7c9      	b.n	8001542 <HALL_TIMx_UP_IRQHandler+0x102>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	08006240 	.word	0x08006240
 80015b4:	ffffc001 	.word	0xffffc001
 80015b8:	00001555 	.word	0x00001555
 80015bc:	ffffeaab 	.word	0xffffeaab
 80015c0:	00006aaa 	.word	0x00006aaa
 80015c4:	ffff9556 	.word	0xffff9556
 80015c8:	00003fff 	.word	0x00003fff

080015cc <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015cc:	2101      	movs	r1, #1
 80015ce:	4a31      	ldr	r2, [pc, #196]	; (8001694 <SystemClock_Config+0xc8>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b510      	push	{r4, lr}
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015d8:	6813      	ldr	r3, [r2, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80015da:	4219      	tst	r1, r3
 80015dc:	d0fc      	beq.n	80015d8 <SystemClock_Config+0xc>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <SystemClock_Config+0xcc>)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	4319      	orrs	r1, r3
 80015e4:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015e6:	2102      	movs	r1, #2
 80015e8:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80015ea:	4219      	tst	r1, r3
 80015ec:	d0fc      	beq.n	80015e8 <SystemClock_Config+0x1c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015ee:	21f8      	movs	r1, #248	; 0xf8
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	438b      	bics	r3, r1
 80015f4:	3978      	subs	r1, #120	; 0x78
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80015fa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015fc:	397f      	subs	r1, #127	; 0x7f
 80015fe:	430b      	orrs	r3, r1
 8001600:	6353      	str	r3, [r2, #52]	; 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8001602:	4a25      	ldr	r2, [pc, #148]	; (8001698 <SystemClock_Config+0xcc>)
 8001604:	3101      	adds	r1, #1
 8001606:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_HSI14_Enable();

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 8001608:	4219      	tst	r1, r3
 800160a:	d0fc      	beq.n	8001606 <SystemClock_Config+0x3a>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 800160c:	21f8      	movs	r1, #248	; 0xf8
 800160e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001610:	438b      	bics	r3, r1
 8001612:	3978      	subs	r1, #120	; 0x78
 8001614:	430b      	orrs	r3, r1
 8001616:	6353      	str	r3, [r2, #52]	; 0x34
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001618:	6853      	ldr	r3, [r2, #4]
 800161a:	4920      	ldr	r1, [pc, #128]	; (800169c <SystemClock_Config+0xd0>)
 800161c:	4019      	ands	r1, r3
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	039b      	lsls	r3, r3, #14
 8001622:	430b      	orrs	r3, r1
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001624:	210f      	movs	r1, #15
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001626:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001628:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800162a:	438b      	bics	r3, r1
 800162c:	62d3      	str	r3, [r2, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	045b      	lsls	r3, r3, #17
 8001634:	430b      	orrs	r3, r1
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001636:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001638:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <SystemClock_Config+0xcc>)
 800163c:	0489      	lsls	r1, r1, #18
 800163e:	6813      	ldr	r3, [r2, #0]
  LL_RCC_HSI14_SetCalibTrimming(16);
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001640:	420b      	tst	r3, r1
 8001642:	d0fc      	beq.n	800163e <SystemClock_Config+0x72>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001644:	21f0      	movs	r1, #240	; 0xf0
 8001646:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001648:	4c13      	ldr	r4, [pc, #76]	; (8001698 <SystemClock_Config+0xcc>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800164a:	438b      	bics	r3, r1
 800164c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800164e:	6853      	ldr	r3, [r2, #4]
 8001650:	4913      	ldr	r1, [pc, #76]	; (80016a0 <SystemClock_Config+0xd4>)
 8001652:	400b      	ands	r3, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001654:	2103      	movs	r1, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001656:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001658:	6853      	ldr	r3, [r2, #4]
 800165a:	438b      	bics	r3, r1
 800165c:	3901      	subs	r1, #1
 800165e:	430b      	orrs	r3, r1
 8001660:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001662:	220c      	movs	r2, #12
 8001664:	6863      	ldr	r3, [r4, #4]
 8001666:	4013      	ands	r3, r2
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001668:	2b08      	cmp	r3, #8
 800166a:	d1fb      	bne.n	8001664 <SystemClock_Config+0x98>
  {

  }
  LL_SetSystemCoreClock(48000000);
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <SystemClock_Config+0xd8>)
 800166e:	f004 f943 	bl	80058f8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001672:	2003      	movs	r0, #3
 8001674:	f003 fd76 	bl	8005164 <HAL_InitTick>
 8001678:	2800      	cmp	r0, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0xb4>
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167e:	e7fe      	b.n	800167e <SystemClock_Config+0xb2>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001680:	2204      	movs	r2, #4
 8001682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001684:	4393      	bics	r3, r2
 8001686:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001688:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800168a:	3a01      	subs	r2, #1
 800168c:	4393      	bics	r3, r2
 800168e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40022000 	.word	0x40022000
 8001698:	40021000 	.word	0x40021000
 800169c:	ffc2ffff 	.word	0xffc2ffff
 80016a0:	fffff8ff 	.word	0xfffff8ff
 80016a4:	02dc6c00 	.word	0x02dc6c00

080016a8 <main>:
{
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	46de      	mov	lr, fp
 80016ac:	4657      	mov	r7, sl
 80016ae:	464e      	mov	r6, r9
 80016b0:	4645      	mov	r5, r8
 80016b2:	b5e0      	push	{r5, r6, r7, lr}
 80016b4:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 80016b6:	f003 fd7b 	bl	80051b0 <HAL_Init>
  SystemClock_Config();
 80016ba:	f7ff ff87 	bl	80015cc <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016be:	466b      	mov	r3, sp
 80016c0:	2267      	movs	r2, #103	; 0x67
 80016c2:	189b      	adds	r3, r3, r2
 80016c4:	2200      	movs	r2, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	2100      	movs	r1, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016c8:	701a      	strb	r2, [r3, #0]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	a81e      	add	r0, sp, #120	; 0x78
 80016cc:	3218      	adds	r2, #24
 80016ce:	f004 fcde 	bl	800608e <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	4bfe      	ldr	r3, [pc, #1016]	; (8001ad0 <main+0x428>)
 80016d6:	03c9      	lsls	r1, r1, #15
 80016d8:	4698      	mov	r8, r3
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	2080      	movs	r0, #128	; 0x80
 80016de:	430a      	orrs	r2, r1
 80016e0:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016e2:	695b      	ldr	r3, [r3, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 80016e4:	4642      	mov	r2, r8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016e6:	400b      	ands	r3, r1
 80016e8:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 80016ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  SET_BIT(RCC->AHBENR, Periphs);
 80016ec:	4643      	mov	r3, r8
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	0280      	lsls	r0, r0, #10
 80016f2:	4303      	orrs	r3, r0
 80016f4:	6153      	str	r3, [r2, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016f6:	6953      	ldr	r3, [r2, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 80016f8:	4641      	mov	r1, r8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016fa:	4003      	ands	r3, r0
 80016fc:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 80016fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->AHBENR, Periphs);
 8001700:	6953      	ldr	r3, [r2, #20]
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	02d2      	lsls	r2, r2, #11
 8001706:	4313      	orrs	r3, r2
 8001708:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800170a:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800170c:	2480      	movs	r4, #128	; 0x80
 800170e:	4013      	ands	r3, r2
 8001710:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8001712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001714:	2390      	movs	r3, #144	; 0x90
 8001716:	0124      	lsls	r4, r4, #4
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	619c      	str	r4, [r3, #24]
 800171c:	469a      	mov	sl, r3
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800171e:	2180      	movs	r1, #128	; 0x80
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001720:	2340      	movs	r3, #64	; 0x40
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8001722:	2705      	movs	r7, #5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001724:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001726:	4ceb      	ldr	r4, [pc, #940]	; (8001ad4 <main+0x42c>)
 8001728:	4aeb      	ldr	r2, [pc, #940]	; (8001ad8 <main+0x430>)
 800172a:	61a3      	str	r3, [r4, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800172c:	62a1      	str	r1, [r4, #40]	; 0x28
 800172e:	6893      	ldr	r3, [r2, #8]
 8001730:	4689      	mov	r9, r1
 8001732:	3971      	subs	r1, #113	; 0x71
 8001734:	438b      	bics	r3, r1
 8001736:	433b      	orrs	r3, r7
 8001738:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800173a:	68e3      	ldr	r3, [r4, #12]
 800173c:	390c      	subs	r1, #12
 800173e:	438b      	bics	r3, r1
 8001740:	432b      	orrs	r3, r5
 8001742:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001744:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001746:	46ab      	mov	fp, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001748:	438b      	bics	r3, r1
 800174a:	6023      	str	r3, [r4, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800174c:	2664      	movs	r6, #100	; 0x64
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800174e:	9518      	str	r5, [sp, #96]	; 0x60
  EXTI_InitStruct.LineCommand = ENABLE;
 8001750:	466d      	mov	r5, sp
 8001752:	19ad      	adds	r5, r5, r6
 8001754:	465e      	mov	r6, fp
 8001756:	802e      	strh	r6, [r5, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001758:	466d      	mov	r5, sp
 800175a:	3665      	adds	r6, #101	; 0x65
 800175c:	19ae      	adds	r6, r5, r6
 800175e:	2502      	movs	r5, #2
 8001760:	7035      	strb	r5, [r6, #0]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001762:	ae18      	add	r6, sp, #96	; 0x60
 8001764:	0030      	movs	r0, r6
 8001766:	f003 fdc9 	bl	80052fc <LL_EXTI_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800176e:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8001770:	2500      	movs	r5, #0
 8001772:	2600      	movs	r6, #0
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	921e      	str	r2, [sp, #120]	; 0x78
 8001778:	931f      	str	r3, [sp, #124]	; 0x7c
  LL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 800177a:	ab1e      	add	r3, sp, #120	; 0x78
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800177c:	9122      	str	r1, [sp, #136]	; 0x88
  LL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 800177e:	4650      	mov	r0, sl
 8001780:	0019      	movs	r1, r3
  GPIO_InitStruct.Pin = OC_SEL_Pin;
 8001782:	9520      	str	r5, [sp, #128]	; 0x80
 8001784:	9621      	str	r6, [sp, #132]	; 0x84
  LL_GPIO_Init(OC_SEL_GPIO_Port, &GPIO_InitStruct);
 8001786:	f003 fe0f 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800178a:	2102      	movs	r1, #2
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin;
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001790:	9122      	str	r1, [sp, #136]	; 0x88
  LL_GPIO_Init(OCTH_STBY2_GPIO_Port, &GPIO_InitStruct);
 8001792:	0020      	movs	r0, r4
 8001794:	a91e      	add	r1, sp, #120	; 0x78
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin;
 8001796:	921e      	str	r2, [sp, #120]	; 0x78
 8001798:	931f      	str	r3, [sp, #124]	; 0x7c
 800179a:	9520      	str	r5, [sp, #128]	; 0x80
 800179c:	9621      	str	r6, [sp, #132]	; 0x84
  LL_GPIO_Init(OCTH_STBY2_GPIO_Port, &GPIO_InitStruct);
 800179e:	f003 fe03 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY1_Pin;
 80017a2:	9520      	str	r5, [sp, #128]	; 0x80
 80017a4:	9621      	str	r6, [sp, #132]	; 0x84
  LL_GPIO_Init(OCTH_STBY1_GPIO_Port, &GPIO_InitStruct);
 80017a6:	ae1e      	add	r6, sp, #120	; 0x78
  GPIO_InitStruct.Pin = OCTH_STBY1_Pin;
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	2301      	movs	r3, #1
  LL_GPIO_Init(OCTH_STBY1_GPIO_Port, &GPIO_InitStruct);
 80017ac:	0031      	movs	r1, r6
  SET_BIT(RCC->AHBENR, Periphs);
 80017ae:	4646      	mov	r6, r8
 80017b0:	0020      	movs	r0, r4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017b2:	3502      	adds	r5, #2
  GPIO_InitStruct.Pin = OCTH_STBY1_Pin;
 80017b4:	921e      	str	r2, [sp, #120]	; 0x78
 80017b6:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017b8:	9522      	str	r5, [sp, #136]	; 0x88
  LL_GPIO_Init(OCTH_STBY1_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f003 fdf5 	bl	80053a8 <LL_GPIO_Init>
 80017be:	6973      	ldr	r3, [r6, #20]
 80017c0:	465e      	mov	r6, fp
 80017c2:	4333      	orrs	r3, r6
 80017c4:	4646      	mov	r6, r8
 80017c6:	6173      	str	r3, [r6, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80017c8:	6973      	ldr	r3, [r6, #20]
 80017ca:	465e      	mov	r6, fp
 80017cc:	4033      	ands	r3, r6
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80017ce:	ae12      	add	r6, sp, #72	; 0x48
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	2100      	movs	r1, #0
 80017d6:	0030      	movs	r0, r6
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80017d8:	ae18      	add	r6, sp, #96	; 0x60
  (void)tmpreg;
 80017da:	9b00      	ldr	r3, [sp, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80017dc:	f004 fc57 	bl	800608e <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80017e0:	0030      	movs	r0, r6
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017e2:	4646      	mov	r6, r8
 80017e4:	2214      	movs	r2, #20
 80017e6:	2100      	movs	r1, #0
 80017e8:	f004 fc51 	bl	800608e <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	2210      	movs	r2, #16
 80017ee:	2100      	movs	r1, #0
 80017f0:	a820      	add	r0, sp, #128	; 0x80
 80017f2:	f004 fc4c 	bl	800608e <memset>
 80017f6:	69b3      	ldr	r3, [r6, #24]
 80017f8:	2680      	movs	r6, #128	; 0x80
 80017fa:	4645      	mov	r5, r8
  SET_BIT(RCC->AHBENR, Periphs);
 80017fc:	2080      	movs	r0, #128	; 0x80
 80017fe:	2280      	movs	r2, #128	; 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 8001800:	00b6      	lsls	r6, r6, #2
 8001802:	4333      	orrs	r3, r6
 8001804:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001806:	69ab      	ldr	r3, [r5, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8001808:	0280      	lsls	r0, r0, #10
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800180a:	4033      	ands	r3, r6
 800180c:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 800180e:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->AHBENR, Periphs);
 8001810:	696b      	ldr	r3, [r5, #20]
 8001812:	02d2      	lsls	r2, r2, #11
 8001814:	4303      	orrs	r3, r0
 8001816:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001818:	696b      	ldr	r3, [r5, #20]
  LL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 800181a:	a91e      	add	r1, sp, #120	; 0x78
 800181c:	4003      	ands	r3, r0
 800181e:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8001820:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8001822:	696b      	ldr	r3, [r5, #20]
 8001824:	4650      	mov	r0, sl
 8001826:	4313      	orrs	r3, r2
 8001828:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800182a:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800182c:	2500      	movs	r5, #0
 800182e:	4013      	ands	r3, r2
 8001830:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8001832:	2210      	movs	r2, #16
  (void)tmpreg;
 8001834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001836:	2303      	movs	r3, #3
 8001838:	921e      	str	r2, [sp, #120]	; 0x78
 800183a:	931f      	str	r3, [sp, #124]	; 0x7c
  LL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 800183c:	f003 fdb4 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001840:	2202      	movs	r2, #2
 8001842:	2303      	movs	r3, #3
  LL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001844:	a91e      	add	r1, sp, #120	; 0x78
 8001846:	48a5      	ldr	r0, [pc, #660]	; (8001adc <main+0x434>)
  GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001848:	921e      	str	r2, [sp, #120]	; 0x78
 800184a:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800184c:	9522      	str	r5, [sp, #136]	; 0x88
  LL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800184e:	f003 fdab 	bl	80053a8 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001852:	2120      	movs	r1, #32
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001854:	2440      	movs	r4, #64	; 0x40
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001856:	464d      	mov	r5, r9
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001858:	2080      	movs	r0, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800185a:	4ba1      	ldr	r3, [pc, #644]	; (8001ae0 <main+0x438>)
 800185c:	4ea1      	ldr	r6, [pc, #644]	; (8001ae4 <main+0x43c>)
 800185e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001860:	0040      	lsls	r0, r0, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001862:	4032      	ands	r2, r6
 8001864:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4e9f      	ldr	r6, [pc, #636]	; (8001ae8 <main+0x440>)
 800186a:	4032      	ands	r2, r6
 800186c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	438a      	bics	r2, r1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	43a2      	bics	r2, r4
 800187a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800187c:	681a      	ldr	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800187e:	4c9b      	ldr	r4, [pc, #620]	; (8001aec <main+0x444>)
 8001880:	43aa      	bics	r2, r5
 8001882:	432a      	orrs	r2, r5
 8001884:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4d99      	ldr	r5, [pc, #612]	; (8001af0 <main+0x448>)
 800188a:	402a      	ands	r2, r5
 800188c:	4302      	orrs	r2, r0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800188e:	2080      	movs	r0, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001890:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4d97      	ldr	r5, [pc, #604]	; (8001af4 <main+0x44c>)
 8001896:	00c0      	lsls	r0, r0, #3
 8001898:	402a      	ands	r2, r5
 800189a:	4302      	orrs	r2, r0
 800189c:	2010      	movs	r0, #16
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4303      	orrs	r3, r0
 80018a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80018aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80018ac:	0020      	movs	r0, r4
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62a3      	str	r3, [r4, #40]	; 0x28
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 80018b2:	2200      	movs	r2, #0
 80018b4:	2300      	movs	r3, #0
 80018b6:	9212      	str	r2, [sp, #72]	; 0x48
 80018b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80018ba:	2220      	movs	r2, #32
 80018bc:	2300      	movs	r3, #0
 80018be:	9214      	str	r2, [sp, #80]	; 0x50
 80018c0:	9315      	str	r3, [sp, #84]	; 0x54
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80018c2:	ab12      	add	r3, sp, #72	; 0x48
 80018c4:	0019      	movs	r1, r3
 80018c6:	f003 fce7 	bl	8005298 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO;
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	2300      	movs	r3, #0
 80018ce:	00d2      	lsls	r2, r2, #3
 80018d0:	9218      	str	r2, [sp, #96]	; 0x60
 80018d2:	9319      	str	r3, [sp, #100]	; 0x64
 80018d4:	2200      	movs	r2, #0
 80018d6:	2303      	movs	r3, #3
 80018d8:	921a      	str	r2, [sp, #104]	; 0x68
 80018da:	931b      	str	r3, [sp, #108]	; 0x6c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80018dc:	2300      	movs	r3, #0
 80018de:	931c      	str	r3, [sp, #112]	; 0x70
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018e0:	ab18      	add	r3, sp, #96	; 0x60
 80018e2:	0019      	movs	r1, r3
 80018e4:	0020      	movs	r0, r4
 80018e6:	f003 fcf1 	bl	80052cc <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80018ea:	2204      	movs	r2, #4
 80018ec:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80018ee:	2107      	movs	r1, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80018f0:	4393      	bics	r3, r2
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80018f2:	465a      	mov	r2, fp
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80018f4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80018f6:	6963      	ldr	r3, [r4, #20]
 80018f8:	438b      	bics	r3, r1
 80018fa:	4313      	orrs	r3, r2
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 80018fc:	2280      	movs	r2, #128	; 0x80
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80018fe:	6163      	str	r3, [r4, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8001900:	68e3      	ldr	r3, [r4, #12]
 8001902:	00d2      	lsls	r2, r2, #3
 8001904:	402b      	ands	r3, r5
 8001906:	4313      	orrs	r3, r2
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001908:	ad0d      	add	r5, sp, #52	; 0x34
 800190a:	60e3      	str	r3, [r4, #12]
 800190c:	2214      	movs	r2, #20
 800190e:	2100      	movs	r1, #0
 8001910:	0028      	movs	r0, r5
 8001912:	f004 fbbc 	bl	800608e <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001916:	ab1e      	add	r3, sp, #120	; 0x78
 8001918:	2220      	movs	r2, #32
 800191a:	2100      	movs	r1, #0
 800191c:	0018      	movs	r0, r3
 800191e:	f004 fbb6 	bl	800608e <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001922:	ab12      	add	r3, sp, #72	; 0x48
 8001924:	2218      	movs	r2, #24
 8001926:	2100      	movs	r1, #0
 8001928:	0018      	movs	r0, r3
 800192a:	f004 fbb0 	bl	800608e <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	ab1a      	add	r3, sp, #104	; 0x68
 8001930:	2208      	movs	r2, #8
 8001932:	2100      	movs	r1, #0
 8001934:	0018      	movs	r0, r3
 8001936:	f004 fbaa 	bl	800608e <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 800193a:	4643      	mov	r3, r8
 800193c:	2480      	movs	r4, #128	; 0x80
 800193e:	4642      	mov	r2, r8
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	0124      	lsls	r4, r4, #4
 8001944:	4323      	orrs	r3, r4
 8001946:	6193      	str	r3, [r2, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001948:	6993      	ldr	r3, [r2, #24]
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800194a:	4864      	ldr	r0, [pc, #400]	; (8001adc <main+0x434>)
 800194c:	4023      	ands	r3, r4
 800194e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001950:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8001952:	6953      	ldr	r3, [r2, #20]
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	4644      	mov	r4, r8
 8001958:	02d2      	lsls	r2, r2, #11
 800195a:	4313      	orrs	r3, r2
 800195c:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800195e:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001960:	2402      	movs	r4, #2
 8001962:	4013      	ands	r3, r2
 8001964:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001966:	2280      	movs	r2, #128	; 0x80
  (void)tmpreg;
 8001968:	9b04      	ldr	r3, [sp, #16]
 800196a:	2302      	movs	r3, #2
 800196c:	0152      	lsls	r2, r2, #5
 800196e:	9218      	str	r2, [sp, #96]	; 0x60
 8001970:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001972:	2302      	movs	r3, #2
 8001974:	931c      	str	r3, [sp, #112]	; 0x70
 8001976:	941d      	str	r4, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001978:	ab18      	add	r3, sp, #96	; 0x60
 800197a:	0019      	movs	r1, r3
 800197c:	f003 fd14 	bl	80053a8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001980:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <main+0x450>)
 8001982:	2010      	movs	r0, #16
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4957      	ldr	r1, [pc, #348]	; (8001ae4 <main+0x43c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001988:	2440      	movs	r4, #64	; 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800198a:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800198c:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800198e:	4302      	orrs	r2, r0
 8001990:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	0189      	lsls	r1, r1, #6
 8001996:	4032      	ands	r2, r6
 8001998:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800199a:	2120      	movs	r1, #32
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800199c:	4648      	mov	r0, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800199e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80019a0:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80019a2:	4e53      	ldr	r6, [pc, #332]	; (8001af0 <main+0x448>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80019a4:	438a      	bics	r2, r1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	43a2      	bics	r2, r4
 80019ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4382      	bics	r2, r0
 80019b4:	4302      	orrs	r2, r0
 80019b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	3080      	adds	r0, #128	; 0x80
 80019bc:	4032      	ands	r2, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80019be:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80019c0:	4302      	orrs	r2, r0
 80019c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	484b      	ldr	r0, [pc, #300]	; (8001af4 <main+0x44c>)
 80019c8:	00f6      	lsls	r6, r6, #3
 80019ca:	4002      	ands	r2, r0
 80019cc:	4332      	orrs	r2, r6
 80019ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <main+0x454>)
 80019d2:	4e44      	ldr	r6, [pc, #272]	; (8001ae4 <main+0x43c>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4032      	ands	r2, r6
 80019d8:	2610      	movs	r6, #16
 80019da:	4332      	orrs	r2, r6
 80019dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4e41      	ldr	r6, [pc, #260]	; (8001ae8 <main+0x440>)
 80019e2:	4032      	ands	r2, r6
 80019e4:	2680      	movs	r6, #128	; 0x80
 80019e6:	01b6      	lsls	r6, r6, #6
 80019e8:	4332      	orrs	r2, r6
 80019ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80019ec:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80019ee:	4e40      	ldr	r6, [pc, #256]	; (8001af0 <main+0x448>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80019f0:	438a      	bics	r2, r1
 80019f2:	430a      	orrs	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80019f4:	4649      	mov	r1, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80019f6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	43a2      	bics	r2, r4
 80019fc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	438a      	bics	r2, r1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	3180      	adds	r1, #128	; 0x80
 8001a0a:	4032      	ands	r2, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001a0c:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	00f6      	lsls	r6, r6, #3
 8001a16:	4002      	ands	r2, r0
 8001a18:	4332      	orrs	r2, r6
 8001a1a:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.Autoreload = ((PWM_PERIOD_CYCLES) / 2);
 8001a20:	2396      	movs	r3, #150	; 0x96
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8001a26:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
 8001a28:	9110      	str	r1, [sp, #64]	; 0x40
  TIM_InitStruct.RepetitionCounter = (REP_COUNTER);
 8001a2a:	9711      	str	r7, [sp, #68]	; 0x44
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a2c:	464f      	mov	r7, r9
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001a2e:	4c34      	ldr	r4, [pc, #208]	; (8001b00 <main+0x458>)
 8001a30:	0029      	movs	r1, r5
 8001a32:	0020      	movs	r0, r4
 8001a34:	f003 fda0 	bl	8005578 <LL_TIM_Init>
 8001a38:	6823      	ldr	r3, [r4, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001a3a:	2260      	movs	r2, #96	; 0x60
 8001a3c:	43bb      	bics	r3, r7
 8001a3e:	6023      	str	r3, [r4, #0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a40:	69a3      	ldr	r3, [r4, #24]
 8001a42:	3f78      	subs	r7, #120	; 0x78
 8001a44:	433b      	orrs	r3, r7
 8001a46:	61a3      	str	r3, [r4, #24]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	921e      	str	r2, [sp, #120]	; 0x78
 8001a4c:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a4e:	2396      	movs	r3, #150	; 0x96
 8001a50:	2200      	movs	r2, #0
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	9220      	str	r2, [sp, #128]	; 0x80
 8001a56:	9321      	str	r3, [sp, #132]	; 0x84
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9222      	str	r2, [sp, #136]	; 0x88
 8001a5e:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a60:	9224      	str	r2, [sp, #144]	; 0x90
 8001a62:	9325      	str	r3, [sp, #148]	; 0x94
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001a64:	ab1e      	add	r3, sp, #120	; 0x78
 8001a66:	001a      	movs	r2, r3
 8001a68:	2101      	movs	r1, #1
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f003 fdc8 	bl	8005600 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a70:	69a3      	ldr	r3, [r4, #24]
 8001a72:	3f04      	subs	r7, #4
 8001a74:	003e      	movs	r6, r7
 8001a76:	43bb      	bics	r3, r7
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a78:	2780      	movs	r7, #128	; 0x80
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a7a:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a7c:	69a3      	ldr	r3, [r4, #24]
 8001a7e:	013f      	lsls	r7, r7, #4
 8001a80:	433b      	orrs	r3, r7
 8001a82:	61a3      	str	r3, [r4, #24]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001a84:	ab1e      	add	r3, sp, #120	; 0x78
 8001a86:	001a      	movs	r2, r3
 8001a88:	2110      	movs	r1, #16
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f003 fdb8 	bl	8005600 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a90:	69a3      	ldr	r3, [r4, #24]
 8001a92:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <main+0x45c>)
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	4013      	ands	r3, r2
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a98:	2208      	movs	r2, #8
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a9a:	4d1b      	ldr	r5, [pc, #108]	; (8001b08 <main+0x460>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a9c:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001a9e:	686b      	ldr	r3, [r5, #4]
 8001aa0:	0020      	movs	r0, r4
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	606b      	str	r3, [r5, #4]
 8001aa6:	ab1e      	add	r3, sp, #120	; 0x78
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	0049      	lsls	r1, r1, #1
 8001aac:	f003 fda8 	bl	8005600 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ab0:	686b      	ldr	r3, [r5, #4]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	43b3      	bics	r3, r6
 8001ab6:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001ab8:	686b      	ldr	r3, [r5, #4]
 8001aba:	433b      	orrs	r3, r7
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001abc:	2770      	movs	r7, #112	; 0x70
 8001abe:	003e      	movs	r6, r7
 8001ac0:	971e      	str	r7, [sp, #120]	; 0x78
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ac2:	2780      	movs	r7, #128	; 0x80
 8001ac4:	606b      	str	r3, [r5, #4]
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <main+0x464>)
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001ac8:	017f      	lsls	r7, r7, #5
  TIM_OC_InitStruct.CompareValue = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001aca:	9321      	str	r3, [sp, #132]	; 0x84
 8001acc:	e020      	b.n	8001b10 <main+0x468>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	40020008 	.word	0x40020008
 8001ae4:	ffffbfef 	.word	0xffffbfef
 8001ae8:	ffffcfff 	.word	0xffffcfff
 8001aec:	40012400 	.word	0x40012400
 8001af0:	fffffcff 	.word	0xfffffcff
 8001af4:	fffff3ff 	.word	0xfffff3ff
 8001af8:	40020044 	.word	0x40020044
 8001afc:	40020058 	.word	0x40020058
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	fffffbff 	.word	0xfffffbff
 8001b08:	40012c18 	.word	0x40012c18
 8001b0c:	0000091c 	.word	0x0000091c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001b10:	ab1e      	add	r3, sp, #120	; 0x78
 8001b12:	001a      	movs	r2, r3
 8001b14:	0039      	movs	r1, r7
 8001b16:	f003 fd73 	bl	8005600 <LL_TIM_OC_Init>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b1a:	0031      	movs	r1, r6
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b1c:	686b      	ldr	r3, [r5, #4]
 8001b1e:	4afe      	ldr	r2, [pc, #1016]	; (8001f18 <main+0x870>)
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b20:	3950      	subs	r1, #80	; 0x50
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b22:	4013      	ands	r3, r2
 8001b24:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001b26:	464d      	mov	r5, r9
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b28:	6863      	ldr	r3, [r4, #4]
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	43b3      	bics	r3, r6
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001b32:	68a3      	ldr	r3, [r4, #8]
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	43ab      	bics	r3, r5
 8001b38:	60a3      	str	r3, [r4, #8]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	9212      	str	r2, [sp, #72]	; 0x48
 8001b40:	9313      	str	r3, [sp, #76]	; 0x4c
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001b42:	466d      	mov	r5, sp
 8001b44:	2254      	movs	r2, #84	; 0x54
 8001b46:	2314      	movs	r3, #20
 8001b48:	18ad      	adds	r5, r5, r2
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_1;
 8001b4a:	31e0      	adds	r1, #224	; 0xe0
 8001b4c:	9114      	str	r1, [sp, #80]	; 0x50
  TIM_BDTRInitStruct.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001b4e:	702b      	strb	r3, [r5, #0]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001b50:	466b      	mov	r3, sp
 8001b52:	2556      	movs	r5, #86	; 0x56
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001b54:	2280      	movs	r2, #128	; 0x80
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_ENABLE;
 8001b56:	195b      	adds	r3, r3, r5
 8001b58:	801f      	strh	r7, [r3, #0]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	0192      	lsls	r2, r2, #6
 8001b5e:	9216      	str	r2, [sp, #88]	; 0x58
 8001b60:	9317      	str	r3, [sp, #92]	; 0x5c
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001b62:	ab12      	add	r3, sp, #72	; 0x48
 8001b64:	0019      	movs	r1, r3
 8001b66:	0020      	movs	r0, r4
 8001b68:	f003 fe4c 	bl	8005804 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8001b6c:	4643      	mov	r3, r8
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4644      	mov	r4, r8
 8001b72:	2080      	movs	r0, #128	; 0x80
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	02d2      	lsls	r2, r2, #11
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b7c:	6963      	ldr	r3, [r4, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8001b7e:	0280      	lsls	r0, r0, #10
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b80:	4013      	ands	r3, r2
 8001b82:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8001b84:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8001b86:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	4303      	orrs	r3, r0
 8001b8c:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b8e:	6963      	ldr	r3, [r4, #20]
 8001b90:	2603      	movs	r6, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8001b96:	9b06      	ldr	r3, [sp, #24]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	2700      	movs	r7, #0
 8001b9c:	2402      	movs	r4, #2
 8001b9e:	2502      	movs	r5, #2
 8001ba0:	0192      	lsls	r2, r2, #6
 8001ba2:	9218      	str	r2, [sp, #96]	; 0x60
 8001ba4:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	ab18      	add	r3, sp, #96	; 0x60
 8001ba8:	0019      	movs	r1, r3
 8001baa:	48dc      	ldr	r0, [pc, #880]	; (8001f1c <main+0x874>)
  GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8001bac:	961a      	str	r6, [sp, #104]	; 0x68
 8001bae:	971b      	str	r7, [sp, #108]	; 0x6c
 8001bb0:	941c      	str	r4, [sp, #112]	; 0x70
 8001bb2:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f003 fbf8 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	2302      	movs	r3, #2
 8001bbc:	01d2      	lsls	r2, r2, #7
 8001bbe:	9218      	str	r2, [sp, #96]	; 0x60
 8001bc0:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	ab18      	add	r3, sp, #96	; 0x60
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	48d5      	ldr	r0, [pc, #852]	; (8001f1c <main+0x874>)
  GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8001bc8:	961a      	str	r6, [sp, #104]	; 0x68
 8001bca:	971b      	str	r7, [sp, #108]	; 0x6c
 8001bcc:	941c      	str	r4, [sp, #112]	; 0x70
 8001bce:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f003 fbea 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	9218      	str	r2, [sp, #96]	; 0x60
 8001bdc:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001bde:	ab18      	add	r3, sp, #96	; 0x60
 8001be0:	0019      	movs	r1, r3
 8001be2:	48ce      	ldr	r0, [pc, #824]	; (8001f1c <main+0x874>)
  GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8001be4:	961a      	str	r6, [sp, #104]	; 0x68
 8001be6:	971b      	str	r7, [sp, #108]	; 0x6c
 8001be8:	941c      	str	r4, [sp, #112]	; 0x70
 8001bea:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f003 fbdc 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin;
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	0052      	lsls	r2, r2, #1
 8001bf6:	9218      	str	r2, [sp, #96]	; 0x60
 8001bf8:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	ab18      	add	r3, sp, #96	; 0x60
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_UH_Pin;
 8001c00:	961a      	str	r6, [sp, #104]	; 0x68
 8001c02:	971b      	str	r7, [sp, #108]	; 0x6c
 8001c04:	941c      	str	r4, [sp, #112]	; 0x70
 8001c06:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_UH_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f003 fbce 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_VH_Pin;
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	2302      	movs	r3, #2
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	9218      	str	r2, [sp, #96]	; 0x60
 8001c14:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 8001c16:	ab18      	add	r3, sp, #96	; 0x60
 8001c18:	0019      	movs	r1, r3
 8001c1a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_VH_Pin;
 8001c1c:	961a      	str	r6, [sp, #104]	; 0x68
 8001c1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8001c20:	941c      	str	r4, [sp, #112]	; 0x70
 8001c22:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_VH_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f003 fbc0 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_WH_Pin;
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	00d2      	lsls	r2, r2, #3
 8001c2e:	9218      	str	r2, [sp, #96]	; 0x60
 8001c30:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 8001c32:	ab18      	add	r3, sp, #96	; 0x60
 8001c34:	0019      	movs	r1, r3
 8001c36:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_PWM_WH_Pin;
 8001c38:	961a      	str	r6, [sp, #104]	; 0x68
 8001c3a:	971b      	str	r7, [sp, #108]	; 0x6c
 8001c3c:	941c      	str	r4, [sp, #112]	; 0x70
 8001c3e:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_PWM_WH_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f003 fbb2 	bl	80053a8 <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c44:	ab12      	add	r3, sp, #72	; 0x48
 8001c46:	2214      	movs	r2, #20
 8001c48:	2100      	movs	r1, #0
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f004 fa1f 	bl	800608e <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c50:	ab1e      	add	r3, sp, #120	; 0x78
 8001c52:	0018      	movs	r0, r3
 8001c54:	2220      	movs	r2, #32
 8001c56:	2100      	movs	r1, #0
 8001c58:	f004 fa19 	bl	800608e <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	2100      	movs	r1, #0
 8001c60:	a81b      	add	r0, sp, #108	; 0x6c
 8001c62:	f004 fa14 	bl	800608e <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c66:	4643      	mov	r3, r8
 8001c68:	465a      	mov	r2, fp
 8001c6a:	69db      	ldr	r3, [r3, #28]
  SET_BIT(RCC->AHBENR, Periphs);
 8001c6c:	2080      	movs	r0, #128	; 0x80
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	4642      	mov	r2, r8
 8001c72:	61d3      	str	r3, [r2, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c74:	69d3      	ldr	r3, [r2, #28]
 8001c76:	465a      	mov	r2, fp
 8001c78:	4013      	ands	r3, r2
 8001c7a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001c7c:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8001c7e:	4643      	mov	r3, r8
 8001c80:	4642      	mov	r2, r8
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	0280      	lsls	r0, r0, #10
 8001c86:	4303      	orrs	r3, r0
 8001c88:	6153      	str	r3, [r2, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c8a:	6953      	ldr	r3, [r2, #20]
  GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4003      	ands	r3, r0
 8001c90:	930d      	str	r3, [sp, #52]	; 0x34
  (void)tmpreg;
 8001c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001c94:	2302      	movs	r3, #2
 8001c96:	9218      	str	r2, [sp, #96]	; 0x60
 8001c98:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	931d      	str	r3, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	ab18      	add	r3, sp, #96	; 0x60
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	f003 fb7e 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_HALL_H2_Pin;
 8001cac:	9418      	str	r4, [sp, #96]	; 0x60
 8001cae:	9519      	str	r5, [sp, #100]	; 0x64
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2502      	movs	r5, #2
  LL_GPIO_Init(M1_HALL_H2_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	ab18      	add	r3, sp, #96	; 0x60
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_HALL_H2_Pin;
 8001cba:	961a      	str	r6, [sp, #104]	; 0x68
 8001cbc:	971b      	str	r7, [sp, #108]	; 0x6c
 8001cbe:	941c      	str	r4, [sp, #112]	; 0x70
 8001cc0:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_HALL_H2_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f003 fb71 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_HALL_H3_Pin;
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9218      	str	r2, [sp, #96]	; 0x60
 8001ccc:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8001cce:	ab18      	add	r3, sp, #96	; 0x60
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = M1_HALL_H3_Pin;
 8001cd4:	961a      	str	r6, [sp, #104]	; 0x68
 8001cd6:	971b      	str	r7, [sp, #108]	; 0x6c
 8001cd8:	941c      	str	r4, [sp, #112]	; 0x70
 8001cda:	951d      	str	r5, [sp, #116]	; 0x74
  LL_GPIO_Init(M1_HALL_H3_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f003 fb64 	bl	80053a8 <LL_GPIO_Init>
  TIM_InitStruct.Prescaler = 0;
 8001ce0:	466b      	mov	r3, sp
 8001ce2:	3448      	adds	r4, #72	; 0x48
 8001ce4:	191c      	adds	r4, r3, r4
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cea:	001c      	movs	r4, r3
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cec:	9415      	str	r4, [sp, #84]	; 0x54
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001cee:	2480      	movs	r4, #128	; 0x80
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cf0:	9313      	str	r3, [sp, #76]	; 0x4c
  TIM_InitStruct.Autoreload = M1_HALL_TIM_PERIOD;
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <main+0x878>)
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001cf4:	05e4      	lsls	r4, r4, #23
  TIM_InitStruct.Autoreload = M1_HALL_TIM_PERIOD;
 8001cf6:	9314      	str	r3, [sp, #80]	; 0x50
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001cf8:	ab12      	add	r3, sp, #72	; 0x48
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	f003 fc3b 	bl	8005578 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d02:	4648      	mov	r0, r9
 8001d04:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <main+0x87c>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d08:	4383      	bics	r3, r0
 8001d0a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d0c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d0e:	2503      	movs	r5, #3
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d10:	4013      	ands	r3, r2
  CLEAR_BIT(TIMx->CCER, Channels);
 8001d12:	2211      	movs	r2, #17
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001d14:	2770      	movs	r7, #112	; 0x70
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d16:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001d18:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001d1a:	2107      	movs	r1, #7
  CLEAR_BIT(TIMx->CCER, Channels);
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	6223      	str	r3, [r4, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d20:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d22:	3a05      	subs	r2, #5
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d24:	43ab      	bics	r3, r5
 8001d26:	432b      	orrs	r3, r5
 8001d28:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d2a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001d2c:	3501      	adds	r5, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d2e:	4393      	bics	r3, r2
 8001d30:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d32:	69a3      	ldr	r3, [r4, #24]
 8001d34:	32e4      	adds	r2, #228	; 0xe4
 8001d36:	4393      	bics	r3, r2
 8001d38:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001d3a:	6a23      	ldr	r3, [r4, #32]
 8001d3c:	3ae6      	subs	r2, #230	; 0xe6
 8001d3e:	4393      	bics	r3, r2
 8001d40:	6223      	str	r3, [r4, #32]
  SET_BIT(TIMx->CR2, TIM_CR2_TI1S);
 8001d42:	6863      	ldr	r3, [r4, #4]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001d44:	2270      	movs	r2, #112	; 0x70
 8001d46:	4303      	orrs	r3, r0
 8001d48:	6063      	str	r3, [r4, #4]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8001d4a:	68a3      	ldr	r3, [r4, #8]
 8001d4c:	3840      	subs	r0, #64	; 0x40
 8001d4e:	43bb      	bics	r3, r7
 8001d50:	4303      	orrs	r3, r0
 8001d52:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8001d54:	68a3      	ldr	r3, [r4, #8]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001d56:	0020      	movs	r0, r4
 8001d58:	438b      	bics	r3, r1
 8001d5a:	432b      	orrs	r3, r5
 8001d5c:	60a3      	str	r3, [r4, #8]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	921e      	str	r2, [sp, #120]	; 0x78
 8001d62:	931f      	str	r3, [sp, #124]	; 0x7c
 8001d64:	2200      	movs	r2, #0
 8001d66:	2300      	movs	r3, #0
 8001d68:	9220      	str	r2, [sp, #128]	; 0x80
 8001d6a:	9321      	str	r3, [sp, #132]	; 0x84
 8001d6c:	9222      	str	r2, [sp, #136]	; 0x88
 8001d6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8001d70:	9224      	str	r2, [sp, #144]	; 0x90
 8001d72:	9325      	str	r3, [sp, #148]	; 0x94
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001d74:	ab1e      	add	r3, sp, #120	; 0x78
 8001d76:	001a      	movs	r2, r3
 8001d78:	3109      	adds	r1, #9
 8001d7a:	f003 fc41 	bl	8005600 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d7e:	4d66      	ldr	r5, [pc, #408]	; (8001f18 <main+0x870>)
 8001d80:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d82:	2250      	movs	r2, #80	; 0x50
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d84:	402b      	ands	r3, r5
 8001d86:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d88:	6863      	ldr	r3, [r4, #4]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	43bb      	bics	r3, r7
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d8e:	464f      	mov	r7, r9
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d90:	4313      	orrs	r3, r2
 8001d92:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d94:	68a3      	ldr	r3, [r4, #8]
 8001d96:	3a34      	subs	r2, #52	; 0x34
 8001d98:	43bb      	bics	r3, r7
 8001d9a:	60a3      	str	r3, [r4, #8]
 8001d9c:	ab1e      	add	r3, sp, #120	; 0x78
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f004 f975 	bl	800608e <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	ab1a      	add	r3, sp, #104	; 0x68
 8001da6:	220c      	movs	r2, #12
 8001da8:	2100      	movs	r1, #0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f004 f96f 	bl	800608e <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001db0:	4643      	mov	r3, r8
 8001db2:	2480      	movs	r4, #128	; 0x80
 8001db4:	4647      	mov	r7, r8
  SET_BIT(RCC->AHBENR, Periphs);
 8001db6:	2280      	movs	r2, #128	; 0x80
  SET_BIT(RCC->APB2ENR, Periphs);
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	01e4      	lsls	r4, r4, #7
 8001dbc:	4323      	orrs	r3, r4
 8001dbe:	61bb      	str	r3, [r7, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dc0:	69bb      	ldr	r3, [r7, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 8001dc2:	02d2      	lsls	r2, r2, #11
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dc4:	4023      	ands	r3, r4
 8001dc6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001dc8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001dca:	697b      	ldr	r3, [r7, #20]
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	4853      	ldr	r0, [pc, #332]	; (8001f1c <main+0x874>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001dd2:	697b      	ldr	r3, [r7, #20]
  GPIO_InitStruct.Pin = UART_RX_Pin;
 8001dd4:	2500      	movs	r5, #0
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = UART_TX_Pin;
 8001dda:	2240      	movs	r2, #64	; 0x40
  (void)tmpreg;
 8001ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001dde:	2302      	movs	r3, #2
 8001de0:	9218      	str	r2, [sp, #96]	; 0x60
 8001de2:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	931d      	str	r3, [sp, #116]	; 0x74
  LL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001de8:	ab18      	add	r3, sp, #96	; 0x60
 8001dea:	0019      	movs	r1, r3
 8001dec:	f003 fadc 	bl	80053a8 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = UART_RX_Pin;
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	2302      	movs	r3, #2
 8001df4:	2600      	movs	r6, #0
 8001df6:	9218      	str	r2, [sp, #96]	; 0x60
 8001df8:	9319      	str	r3, [sp, #100]	; 0x64
  LL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	ab18      	add	r3, sp, #96	; 0x60
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	4847      	ldr	r0, [pc, #284]	; (8001f1c <main+0x874>)
  GPIO_InitStruct.Pin = UART_RX_Pin;
 8001e00:	951a      	str	r5, [sp, #104]	; 0x68
 8001e02:	961b      	str	r6, [sp, #108]	; 0x6c
 8001e04:	951c      	str	r5, [sp, #112]	; 0x70
 8001e06:	961d      	str	r6, [sp, #116]	; 0x74
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001e08:	2720      	movs	r7, #32
  LL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f003 facd 	bl	80053a8 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <main+0x880>)
 8001e10:	4946      	ldr	r1, [pc, #280]	; (8001f2c <main+0x884>)
 8001e12:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e14:	4648      	mov	r0, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e16:	400a      	ands	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e18:	2140      	movs	r1, #64	; 0x40
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4d44      	ldr	r5, [pc, #272]	; (8001f30 <main+0x888>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e20:	4e44      	ldr	r6, [pc, #272]	; (8001f34 <main+0x88c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e22:	402a      	ands	r2, r5
 8001e24:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	43ba      	bics	r2, r7
 8001e2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	438a      	bics	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4382      	bics	r2, r0
 8001e36:	4302      	orrs	r2, r0
 8001e38:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e3a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e3c:	483e      	ldr	r0, [pc, #248]	; (8001f38 <main+0x890>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e3e:	4032      	ands	r2, r6
 8001e40:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e42:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e44:	4e39      	ldr	r6, [pc, #228]	; (8001f2c <main+0x884>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e46:	4002      	ands	r2, r0
 8001e48:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <main+0x894>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4032      	ands	r2, r6
 8001e50:	2610      	movs	r6, #16
 8001e52:	4332      	orrs	r2, r6
 8001e54:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e56:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e58:	4e36      	ldr	r6, [pc, #216]	; (8001f34 <main+0x88c>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e5a:	402a      	ands	r2, r5
 8001e5c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001e5e:	681a      	ldr	r2, [r3, #0]
  USART_InitStruct.BaudRate = 9600;
 8001e60:	2500      	movs	r5, #0
 8001e62:	43ba      	bics	r2, r7
 8001e64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	438a      	bics	r2, r1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e6a:	4649      	mov	r1, r9
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001e6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	438a      	bics	r2, r1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4032      	ands	r2, r6
 8001e7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2600      	movs	r6, #0
 8001e80:	4002      	ands	r2, r0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	2296      	movs	r2, #150	; 0x96
 8001e86:	2300      	movs	r3, #0
 8001e88:	0192      	lsls	r2, r2, #6
 8001e8a:	921e      	str	r2, [sp, #120]	; 0x78
 8001e8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8001e8e:	220c      	movs	r2, #12
 8001e90:	2300      	movs	r3, #0
 8001e92:	9222      	str	r2, [sp, #136]	; 0x88
 8001e94:	9323      	str	r3, [sp, #140]	; 0x8c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e96:	2300      	movs	r3, #0
  USART_InitStruct.BaudRate = 9600;
 8001e98:	9520      	str	r5, [sp, #128]	; 0x80
 8001e9a:	9621      	str	r6, [sp, #132]	; 0x84
  LL_USART_Init(USART1, &USART_InitStruct);
 8001e9c:	4d28      	ldr	r5, [pc, #160]	; (8001f40 <main+0x898>)
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e9e:	9324      	str	r3, [sp, #144]	; 0x90
  LL_USART_Init(USART1, &USART_InitStruct);
 8001ea0:	ab1e      	add	r3, sp, #120	; 0x78
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0028      	movs	r0, r5
 8001ea6:	f003 fcd7 	bl	8005858 <LL_USART_Init>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eaa:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eae:	f38b 8810 	msr	PRIMASK, fp
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001eb2:	4919      	ldr	r1, [pc, #100]	; (8001f18 <main+0x870>)
 8001eb4:	68ab      	ldr	r3, [r5, #8]
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	60ab      	str	r3, [r5, #8]
 8001eba:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <main+0x89c>)
 8001ec0:	686b      	ldr	r3, [r5, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ec2:	4658      	mov	r0, fp
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec4:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ec6:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec8:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001eca:	68ab      	ldr	r3, [r5, #8]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ecc:	2680      	movs	r6, #128	; 0x80
 8001ece:	4393      	bics	r3, r2
 8001ed0:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	00f6      	lsls	r6, r6, #3
 8001ed6:	4303      	orrs	r3, r0
 8001ed8:	602b      	str	r3, [r5, #0]
  MX_MotorControl_Init();
 8001eda:	f000 fe25 	bl	8002b28 <MX_MotorControl_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	20c6      	movs	r0, #198	; 0xc6
 8001ee0:	21c0      	movs	r1, #192	; 0xc0
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <main+0x8a0>)
 8001ee4:	0080      	lsls	r0, r0, #2
 8001ee6:	581a      	ldr	r2, [r3, r0]
 8001ee8:	0609      	lsls	r1, r1, #24
 8001eea:	0212      	lsls	r2, r2, #8
 8001eec:	0a12      	lsrs	r2, r2, #8
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0512      	lsls	r2, r2, #20
 8001ef6:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef8:	22c2      	movs	r2, #194	; 0xc2
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	589d      	ldr	r5, [r3, r2]
 8001efe:	4813      	ldr	r0, [pc, #76]	; (8001f4c <main+0x8a4>)
 8001f00:	4005      	ands	r5, r0
 8001f02:	432c      	orrs	r4, r5
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f04:	2580      	movs	r5, #128	; 0x80
 8001f06:	00ad      	lsls	r5, r5, #2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f08:	509c      	str	r4, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	601d      	str	r5, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0c:	589c      	ldr	r4, [r3, r2]
 8001f0e:	4d10      	ldr	r5, [pc, #64]	; (8001f50 <main+0x8a8>)
 8001f10:	0224      	lsls	r4, r4, #8
 8001f12:	0a24      	lsrs	r4, r4, #8
 8001f14:	509c      	str	r4, [r3, r2]
 8001f16:	e01d      	b.n	8001f54 <main+0x8ac>
 8001f18:	fffffbff 	.word	0xfffffbff
 8001f1c:	48000400 	.word	0x48000400
 8001f20:	0000ffff 	.word	0x0000ffff
 8001f24:	ffffbff8 	.word	0xffffbff8
 8001f28:	40020030 	.word	0x40020030
 8001f2c:	ffffbfef 	.word	0xffffbfef
 8001f30:	ffffcfff 	.word	0xffffcfff
 8001f34:	fffffcff 	.word	0xfffffcff
 8001f38:	fffff3ff 	.word	0xfffff3ff
 8001f3c:	4002001c 	.word	0x4002001c
 8001f40:	40013800 	.word	0x40013800
 8001f44:	ffffb7ff 	.word	0xffffb7ff
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	ffff00ff 	.word	0xffff00ff
 8001f50:	ff00ffff 	.word	0xff00ffff
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f54:	2480      	movs	r4, #128	; 0x80
 8001f56:	0124      	lsls	r4, r4, #4
 8001f58:	601c      	str	r4, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f5a:	589c      	ldr	r4, [r3, r2]
 8001f5c:	4025      	ands	r5, r4
 8001f5e:	24c0      	movs	r4, #192	; 0xc0
 8001f60:	0424      	lsls	r4, r4, #16
 8001f62:	432c      	orrs	r4, r5
 8001f64:	509c      	str	r4, [r3, r2]
 8001f66:	24c3      	movs	r4, #195	; 0xc3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f68:	601e      	str	r6, [r3, #0]
 8001f6a:	2680      	movs	r6, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f6c:	00a4      	lsls	r4, r4, #2
 8001f6e:	591a      	ldr	r2, [r3, r4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f70:	01b6      	lsls	r6, r6, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f72:	4002      	ands	r2, r0
 8001f74:	511a      	str	r2, [r3, r4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	601e      	str	r6, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	591a      	ldr	r2, [r3, r4]
 8001f7a:	0212      	lsls	r2, r2, #8
 8001f7c:	0a12      	lsrs	r2, r2, #8
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	511a      	str	r2, [r3, r4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	2280      	movs	r2, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f84:	21c1      	movs	r1, #193	; 0xc1
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	0212      	lsls	r2, r2, #8
 8001f88:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8a:	0089      	lsls	r1, r1, #2
 8001f8c:	585a      	ldr	r2, [r3, r1]
 8001f8e:	4002      	ands	r2, r0
 8001f90:	20c0      	movs	r0, #192	; 0xc0
 8001f92:	0200      	lsls	r0, r0, #8
 8001f94:	4310      	orrs	r0, r2
 8001f96:	5058      	str	r0, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f98:	601f      	str	r7, [r3, #0]
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <main+0x8f2>

08001f9c <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8001f9c:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 8001f9e:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <MC_StartMotor1+0xc>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f000 f88f 	bl	80020c4 <MCI_StartMotor>
}
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	200005b8 	.word	0x200005b8

08001fac <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8001fac:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 8001fae:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <MC_StopMotor1+0xc>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f000 f89f 	bl	80020f4 <MCI_StopMotor>
}
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	200005b8 	.word	0x200005b8

08001fbc <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
 8001fbc:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 8001fbe:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <MC_GetSTMStateMotor1+0xc>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	f000 f879 	bl	80020b8 <MCI_GetSTMState>
}
 8001fc6:	bd10      	pop	{r4, pc}
 8001fc8:	200005b8 	.word	0x200005b8

08001fcc <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001fcc:	2002      	movs	r0, #2
 8001fce:	4770      	bx	lr

08001fd0 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001fd0:	4770      	bx	lr
 8001fd2:	46c0      	nop			; (mov r8, r8)

08001fd4 <MC_APP_PostMediumFrequencyHook_M1>:
 8001fd4:	4770      	bx	lr
 8001fd6:	46c0      	nop			; (mov r8, r8)

08001fd8 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 8001fd8:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001fda:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 8001fdc:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
 8001fde:	6042      	str	r2, [r0, #4]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001fe0:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001fe2:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8001fe4:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 8001fe6:	82c3      	strh	r3, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001fe8:	6183      	str	r3, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
    pHandle->PastFaults = MC_NO_FAULTS;
 8001fea:	8383      	strh	r3, [r0, #28]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001fec:	7783      	strb	r3, [r0, #30]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001fee:	4770      	bx	lr

08001ff0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 8001ff6:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001ff8:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ffa:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001ffc:	4770      	bx	lr
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	00000301 	.word	0x00000301

08002004 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002004:	2302      	movs	r3, #2
 8002006:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 800200a:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800200c:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800200e:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002010:	4770      	bx	lr
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	00000401 	.word	0x00000401

08002018 <MCI_SetCurrentReferences>:
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002018:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <MCI_SetCurrentReferences+0x14>)
{
 800201c:	b082      	sub	sp, #8
    pHandle->Iqdref.q = Iqdref.q;
 800201e:	8241      	strh	r1, [r0, #18]
    pHandle->Iqdref.d = Iqdref.d;
 8002020:	0c09      	lsrs	r1, r1, #16
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002022:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.d = Iqdref.d;
 8002024:	8281      	strh	r1, [r0, #20]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002026:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002028:	b002      	add	sp, #8
 800202a:	4770      	bx	lr
 800202c:	00000401 	.word	0x00000401

08002030 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002030:	8b43      	ldrh	r3, [r0, #26]
 8002032:	430b      	orrs	r3, r1
 8002034:	4393      	bics	r3, r2
 8002036:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8002038:	8b83      	ldrh	r3, [r0, #28]
 800203a:	4319      	orrs	r1, r3
 800203c:	8381      	strh	r1, [r0, #28]

  return;
}
 800203e:	4770      	bx	lr

08002040 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8002040:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002042:	7f83      	ldrb	r3, [r0, #30]
{
 8002044:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002046:	2b01      	cmp	r3, #1
 8002048:	d000      	beq.n	800204c <MCI_ExecBufferedCommands+0xc>
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800204a:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 800204c:	7b02      	ldrb	r2, [r0, #12]
 800204e:	2a02      	cmp	r2, #2
 8002050:	d006      	beq.n	8002060 <MCI_ExecBufferedCommands+0x20>
 8002052:	2a03      	cmp	r2, #3
 8002054:	d026      	beq.n	80020a4 <MCI_ExecBufferedCommands+0x64>
 8002056:	2a01      	cmp	r2, #1
 8002058:	d015      	beq.n	8002086 <MCI_ExecBufferedCommands+0x46>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800205a:	2303      	movs	r3, #3
 800205c:	77a3      	strb	r3, [r4, #30]
}
 800205e:	e7f4      	b.n	800204a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002060:	2324      	movs	r3, #36	; 0x24
 8002062:	2200      	movs	r2, #0
 8002064:	6841      	ldr	r1, [r0, #4]
 8002066:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002068:	6800      	ldr	r0, [r0, #0]
 800206a:	2104      	movs	r1, #4
 800206c:	f003 ff58 	bl	8005f20 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002070:	8ae2      	ldrh	r2, [r4, #22]
 8002072:	2310      	movs	r3, #16
 8002074:	5ee1      	ldrsh	r1, [r4, r3]
 8002076:	6820      	ldr	r0, [r4, #0]
 8002078:	f003 ff56 	bl	8005f28 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800207c:	2800      	cmp	r0, #0
 800207e:	d0ec      	beq.n	800205a <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8002080:	2302      	movs	r3, #2
 8002082:	77a3      	strb	r3, [r4, #30]
 8002084:	e7e1      	b.n	800204a <MCI_ExecBufferedCommands+0xa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002086:	2200      	movs	r2, #0
 8002088:	6841      	ldr	r1, [r0, #4]
 800208a:	3323      	adds	r3, #35	; 0x23
 800208c:	54ca      	strb	r2, [r1, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800208e:	6800      	ldr	r0, [r0, #0]
 8002090:	2103      	movs	r1, #3
 8002092:	f003 ff45 	bl	8005f20 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002096:	8ae2      	ldrh	r2, [r4, #22]
 8002098:	230e      	movs	r3, #14
 800209a:	5ee1      	ldrsh	r1, [r4, r3]
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	f003 ff43 	bl	8005f28 <STC_ExecRamp>
          break;
 80020a2:	e7eb      	b.n	800207c <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020a4:	2224      	movs	r2, #36	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80020a6:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020a8:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80020aa:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80020ac:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80020ae:	3a20      	subs	r2, #32
 80020b0:	3010      	adds	r0, #16
 80020b2:	f003 ffe3 	bl	800607c <memcpy>
      if (commandHasBeenExecuted)
 80020b6:	e7e3      	b.n	8002080 <MCI_ExecBufferedCommands+0x40>

080020b8 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
 80020b8:	7e40      	ldrb	r0, [r0, #25]
}
 80020ba:	4770      	bx	lr

080020bc <MCI_GetOccurredFaults>:
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
 80020bc:	8b80      	ldrh	r0, [r0, #28]
}
 80020be:	4770      	bx	lr

080020c0 <MCI_GetCurrentFaults>:
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
 80020c0:	8b40      	ldrh	r0, [r0, #26]
}
 80020c2:	4770      	bx	lr

080020c4 <MCI_StartMotor>:
{
 80020c4:	b510      	push	{r4, lr}
 80020c6:	0004      	movs	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020c8:	f7ff fff6 	bl	80020b8 <MCI_GetSTMState>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d001      	beq.n	80020d4 <MCI_StartMotor+0x10>
    RetVal = false;
 80020d0:	2000      	movs	r0, #0
}
 80020d2:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020d4:	0020      	movs	r0, r4
 80020d6:	f7ff fff1 	bl	80020bc <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020da:	2800      	cmp	r0, #0
 80020dc:	d1f8      	bne.n	80020d0 <MCI_StartMotor+0xc>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80020de:	0020      	movs	r0, r4
 80020e0:	f7ff ffee 	bl	80020c0 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1f3      	bne.n	80020d0 <MCI_StartMotor+0xc>
    pHandle->DirectCommand = MCI_START;
 80020e8:	2301      	movs	r3, #1
    RetVal = true;
 80020ea:	3001      	adds	r0, #1
    pHandle->DirectCommand = MCI_START;
 80020ec:	7623      	strb	r3, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80020ee:	77a3      	strb	r3, [r4, #30]
    RetVal = true;
 80020f0:	e7ef      	b.n	80020d2 <MCI_StartMotor+0xe>
 80020f2:	46c0      	nop			; (mov r8, r8)

080020f4 <MCI_StopMotor>:
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0004      	movs	r4, r0
  State = MCI_GetSTMState(pHandle);
 80020f8:	f7ff ffde 	bl	80020b8 <MCI_GetSTMState>
    status = false;
 80020fc:	2500      	movs	r5, #0
  if (IDLE == State  || ICLWAIT == State)
 80020fe:	2800      	cmp	r0, #0
 8002100:	d004      	beq.n	800210c <MCI_StopMotor+0x18>
 8002102:	0003      	movs	r3, r0
 8002104:	3b0c      	subs	r3, #12
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	4193      	sbcs	r3, r2
 800210a:	b2dd      	uxtb	r5, r3
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800210c:	0020      	movs	r0, r4
 800210e:	f7ff ffd5 	bl	80020bc <MCI_GetOccurredFaults>
 8002112:	2800      	cmp	r0, #0
 8002114:	d002      	beq.n	800211c <MCI_StopMotor+0x28>
    RetVal = false;
 8002116:	2500      	movs	r5, #0
}
 8002118:	0028      	movs	r0, r5
 800211a:	bd70      	pop	{r4, r5, r6, pc}
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800211c:	0020      	movs	r0, r4
 800211e:	f7ff ffcf 	bl	80020c0 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002122:	2800      	cmp	r0, #0
 8002124:	d1f7      	bne.n	8002116 <MCI_StopMotor+0x22>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002126:	2d00      	cmp	r5, #0
 8002128:	d0f5      	beq.n	8002116 <MCI_StopMotor+0x22>
    pHandle->DirectCommand = MCI_STOP;
 800212a:	2305      	movs	r3, #5
 800212c:	7623      	strb	r3, [r4, #24]
    RetVal = true;
 800212e:	e7f3      	b.n	8002118 <MCI_StopMotor+0x24>

08002130 <MCI_FaultAcknowledged>:
{
 8002130:	b510      	push	{r4, lr}
 8002132:	0004      	movs	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002134:	f7ff ffc0 	bl	80020b8 <MCI_GetSTMState>
 8002138:	280b      	cmp	r0, #11
 800213a:	d001      	beq.n	8002140 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 800213c:	2000      	movs	r0, #0
}
 800213e:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002140:	0020      	movs	r0, r4
 8002142:	f7ff ffbd 	bl	80020c0 <MCI_GetCurrentFaults>
 8002146:	2800      	cmp	r0, #0
 8002148:	d1f8      	bne.n	800213c <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800214a:	2302      	movs	r3, #2
    pHandle->PastFaults = MC_NO_FAULTS;
 800214c:	83a0      	strh	r0, [r4, #28]
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800214e:	7623      	strb	r3, [r4, #24]
    RetVal = true;
 8002150:	3001      	adds	r0, #1
 8002152:	e7f4      	b.n	800213e <MCI_FaultAcknowledged+0xe>

08002154 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002154:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002156:	8b40      	ldrh	r0, [r0, #26]
 8002158:	0400      	lsls	r0, r0, #16
 800215a:	4318      	orrs	r0, r3

  return (LocalFaultState);
}
 800215c:	4770      	bx	lr
 800215e:	46c0      	nop			; (mov r8, r8)

08002160 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 8002160:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8002162:	4770      	bx	lr

08002164 <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 8002164:	230e      	movs	r3, #14
 8002166:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8002168:	4770      	bx	lr
 800216a:	46c0      	nop			; (mov r8, r8)

0800216c <MCI_GetLastRampFinalTorque>:
  {
    retVal = pHandle->hFinalTorque;
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
 800216c:	2310      	movs	r3, #16
 800216e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8002170:	4770      	bx	lr
 8002172:	46c0      	nop			; (mov r8, r8)

08002174 <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 8002174:	8ac0      	ldrh	r0, [r0, #22]
#endif
}
 8002176:	4770      	bx	lr

08002178 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 8002178:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 800217a:	6800      	ldr	r0, [r0, #0]
 800217c:	f003 ff16 	bl	8005fac <STC_StopRamp>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			; (mov r8, r8)

08002184 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8002184:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8002186:	6800      	ldr	r0, [r0, #0]
 8002188:	f003 feb6 	bl	8005ef8 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800218c:	f003 fe5e 	bl	8005e4c <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8002190:	bd10      	pop	{r4, pc}
 8002192:	46c0      	nop			; (mov r8, r8)

08002194 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 8002194:	b510      	push	{r4, lr}
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002196:	6800      	ldr	r0, [r0, #0]
 8002198:	f003 feba 	bl	8005f10 <STC_GetMecSpeedRefUnit>
#endif
}
 800219c:	bd10      	pop	{r4, pc}
 800219e:	46c0      	nop			; (mov r8, r8)

080021a0 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab(MCI_Handle_t *pHandle)
{
 80021a0:	b500      	push	{lr}
 80021a2:	b083      	sub	sp, #12
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80021a4:	6841      	ldr	r1, [r0, #4]
 80021a6:	2204      	movs	r2, #4
 80021a8:	a801      	add	r0, sp, #4
 80021aa:	f003 ff67 	bl	800607c <memcpy>
 80021ae:	466b      	mov	r3, sp
 80021b0:	466a      	mov	r2, sp
 80021b2:	88db      	ldrh	r3, [r3, #6]
 80021b4:	8890      	ldrh	r0, [r2, #4]
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	4318      	orrs	r0, r3
#endif
}
 80021ba:	b003      	add	sp, #12
 80021bc:	bd00      	pop	{pc}
 80021be:	46c0      	nop			; (mov r8, r8)

080021c0 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle)
{
 80021c0:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80021c2:	6841      	ldr	r1, [r0, #4]
{
 80021c4:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Ialphabeta);
 80021c6:	2204      	movs	r2, #4
 80021c8:	3104      	adds	r1, #4
 80021ca:	a801      	add	r0, sp, #4
 80021cc:	f003 ff56 	bl	800607c <memcpy>
 80021d0:	466b      	mov	r3, sp
 80021d2:	466a      	mov	r2, sp
 80021d4:	88db      	ldrh	r3, [r3, #6]
 80021d6:	8890      	ldrh	r0, [r2, #4]
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4318      	orrs	r0, r3
#endif
}
 80021dc:	b003      	add	sp, #12
 80021de:	bd00      	pop	{pc}

080021e0 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle)
{
 80021e0:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80021e2:	6841      	ldr	r1, [r0, #4]
{
 80021e4:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Iqd);
 80021e6:	2204      	movs	r2, #4
 80021e8:	310c      	adds	r1, #12
 80021ea:	a801      	add	r0, sp, #4
 80021ec:	f003 ff46 	bl	800607c <memcpy>
 80021f0:	466b      	mov	r3, sp
 80021f2:	466a      	mov	r2, sp
 80021f4:	88db      	ldrh	r3, [r3, #6]
 80021f6:	8890      	ldrh	r0, [r2, #4]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4318      	orrs	r0, r3
#endif
}
 80021fc:	b003      	add	sp, #12
 80021fe:	bd00      	pop	{pc}

08002200 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle)
{
 8002200:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8002202:	6841      	ldr	r1, [r0, #4]
{
 8002204:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Iqdref);
 8002206:	2204      	movs	r2, #4
 8002208:	3110      	adds	r1, #16
 800220a:	a801      	add	r0, sp, #4
 800220c:	f003 ff36 	bl	800607c <memcpy>
 8002210:	466b      	mov	r3, sp
 8002212:	466a      	mov	r2, sp
 8002214:	88db      	ldrh	r3, [r3, #6]
 8002216:	8890      	ldrh	r0, [r2, #4]
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4318      	orrs	r0, r3
#endif
}
 800221c:	b003      	add	sp, #12
 800221e:	bd00      	pop	{pc}

08002220 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle)
{
 8002220:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8002222:	6841      	ldr	r1, [r0, #4]
{
 8002224:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 8002226:	2204      	movs	r2, #4
 8002228:	3116      	adds	r1, #22
 800222a:	a801      	add	r0, sp, #4
 800222c:	f003 ff26 	bl	800607c <memcpy>
 8002230:	466b      	mov	r3, sp
 8002232:	466a      	mov	r2, sp
 8002234:	88db      	ldrh	r3, [r3, #6]
 8002236:	8890      	ldrh	r0, [r2, #4]
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	4318      	orrs	r0, r3
#endif
}
 800223c:	b003      	add	sp, #12
 800223e:	bd00      	pop	{pc}

08002240 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle)
{
 8002240:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8002242:	6841      	ldr	r1, [r0, #4]
{
 8002244:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 8002246:	2204      	movs	r2, #4
 8002248:	311a      	adds	r1, #26
 800224a:	a801      	add	r0, sp, #4
 800224c:	f003 ff16 	bl	800607c <memcpy>
 8002250:	466b      	mov	r3, sp
 8002252:	466a      	mov	r2, sp
 8002254:	88db      	ldrh	r3, [r3, #6]
 8002256:	8890      	ldrh	r0, [r2, #4]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	4318      	orrs	r0, r3
#endif
}
 800225c:	b003      	add	sp, #12
 800225e:	bd00      	pop	{pc}

08002260 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8002260:	6843      	ldr	r3, [r0, #4]
 8002262:	201e      	movs	r0, #30
 8002264:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 8002266:	4770      	bx	lr

08002268 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8002268:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800226a:	c811      	ldmia	r0, {r0, r4}
 800226c:	f003 fed2 	bl	8006014 <STC_GetDefaultIqdref>
 8002270:	8220      	strh	r0, [r4, #16]
 8002272:	0c00      	lsrs	r0, r0, #16
 8002274:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8002276:	bd10      	pop	{r4, pc}

08002278 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <MCM_Clarke+0x48>)
 800227a:	b201      	sxth	r1, r0
 800227c:	1400      	asrs	r0, r0, #16
 800227e:	4350      	muls	r0, r2
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8002280:	434a      	muls	r2, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002282:	4253      	negs	r3, r2
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8002284:	2280      	movs	r2, #128	; 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002286:	1a1b      	subs	r3, r3, r0
 8002288:	1a1b      	subs	r3, r3, r0
{
 800228a:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800228c:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 800228e:	0212      	lsls	r2, r2, #8
 8002290:	4293      	cmp	r3, r2
 8002292:	da04      	bge.n	800229e <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <MCM_Clarke+0x4c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	da08      	bge.n	80022ac <MCM_Clarke+0x34>
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MCM_Clarke+0x50>)
 800229c:	e000      	b.n	80022a0 <MCM_Clarke+0x28>
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MCM_Clarke+0x54>)
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 80022a0:	0409      	lsls	r1, r1, #16
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	0c08      	lsrs	r0, r1, #16
 80022a6:	4318      	orrs	r0, r3
}
 80022a8:	b004      	add	sp, #16
 80022aa:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <MCM_Clarke+0x50>)
 80022ae:	1c18      	adds	r0, r3, #0
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	4293      	cmp	r3, r2
 80022b4:	db01      	blt.n	80022ba <MCM_Clarke+0x42>
 80022b6:	b203      	sxth	r3, r0
 80022b8:	e7f2      	b.n	80022a0 <MCM_Clarke+0x28>
 80022ba:	1c10      	adds	r0, r2, #0
 80022bc:	b203      	sxth	r3, r0
 80022be:	e7ef      	b.n	80022a0 <MCM_Clarke+0x28>
 80022c0:	000049e6 	.word	0x000049e6
 80022c4:	ffff8000 	.word	0xffff8000
 80022c8:	ffff8001 	.word	0xffff8001
 80022cc:	00007fff 	.word	0x00007fff

080022d0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0209      	lsls	r1, r1, #8
 80022d4:	468c      	mov	ip, r1
 80022d6:	4460      	add	r0, ip
  uhindex = (uint16_t)shindex;
 80022d8:	b280      	uxth	r0, r0
{
 80022da:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 80022dc:	0980      	lsrs	r0, r0, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 80022de:	24c0      	movs	r4, #192	; 0xc0
 80022e0:	0001      	movs	r1, r0
 80022e2:	2580      	movs	r5, #128	; 0x80
 80022e4:	00a4      	lsls	r4, r4, #2
{
 80022e6:	2200      	movs	r2, #0
 80022e8:	2300      	movs	r3, #0
 80022ea:	b083      	sub	sp, #12
 80022ec:	4021      	ands	r1, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 80022ee:	00ad      	lsls	r5, r5, #2
 80022f0:	42a9      	cmp	r1, r5
 80022f2:	d023      	beq.n	800233c <MCM_Trig_Functions+0x6c>
 80022f4:	d815      	bhi.n	8002322 <MCM_Trig_Functions+0x52>
 80022f6:	2900      	cmp	r1, #0
 80022f8:	d029      	beq.n	800234e <MCM_Trig_Functions+0x7e>
 80022fa:	2480      	movs	r4, #128	; 0x80
 80022fc:	0064      	lsls	r4, r4, #1
 80022fe:	42a1      	cmp	r1, r4
 8002300:	d109      	bne.n	8002316 <MCM_Trig_Functions+0x46>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002302:	b2c0      	uxtb	r0, r0
 8002304:	43c3      	mvns	r3, r0
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <MCM_Trig_Functions+0x98>)
 8002308:	b2db      	uxtb	r3, r3
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800230e:	0040      	lsls	r0, r0, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002310:	425b      	negs	r3, r3
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8002312:	5e82      	ldrsh	r2, [r0, r2]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002314:	b21b      	sxth	r3, r3
    }

    default:
      break;
  }
  return (Local_Components);
 8002316:	0412      	lsls	r2, r2, #16
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	0c10      	lsrs	r0, r2, #16
 800231c:	4318      	orrs	r0, r3
}
 800231e:	b003      	add	sp, #12
 8002320:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8002322:	42a1      	cmp	r1, r4
 8002324:	d1f7      	bne.n	8002316 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002326:	b2c0      	uxtb	r0, r0
 8002328:	43c3      	mvns	r3, r0
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <MCM_Trig_Functions+0x98>)
 800232c:	b2db      	uxtb	r3, r3
 800232e:	005b      	lsls	r3, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002330:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002332:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002334:	5a82      	ldrh	r2, [r0, r2]
 8002336:	4252      	negs	r2, r2
 8002338:	b212      	sxth	r2, r2
      break;
 800233a:	e7ec      	b.n	8002316 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800233c:	b2c0      	uxtb	r0, r0
 800233e:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002340:	43c0      	mvns	r0, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002344:	b2c0      	uxtb	r0, r0
 8002346:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002348:	5e9b      	ldrsh	r3, [r3, r2]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800234a:	5e82      	ldrsh	r2, [r0, r2]
      break;
 800234c:	e7e3      	b.n	8002316 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800234e:	b2c0      	uxtb	r0, r0
 8002350:	0043      	lsls	r3, r0, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002352:	43c0      	mvns	r0, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002356:	b2c0      	uxtb	r0, r0
 8002358:	0040      	lsls	r0, r0, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800235a:	5a9b      	ldrh	r3, [r3, r2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800235c:	5a82      	ldrh	r2, [r0, r2]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800235e:	425b      	negs	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002360:	4252      	negs	r2, r2
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002362:	b21b      	sxth	r3, r3
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002364:	b212      	sxth	r2, r2
      break;
 8002366:	e7d6      	b.n	8002316 <MCM_Trig_Functions+0x46>
 8002368:	080062f8 	.word	0x080062f8

0800236c <MCM_Park>:
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	9001      	str	r0, [sp, #4]
 8002372:	b205      	sxth	r5, r0
 8002374:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002376:	0008      	movs	r0, r1
 8002378:	f7ff ffaa 	bl	80022d0 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800237c:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 800237e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002380:	000b      	movs	r3, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8002382:	0002      	movs	r2, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002384:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8002386:	4362      	muls	r2, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002388:	1a9b      	subs	r3, r3, r2
  if (wqd_tmp > INT16_MAX)
 800238a:	2280      	movs	r2, #128	; 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800238c:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 800238e:	0212      	lsls	r2, r2, #8
 8002390:	4293      	cmp	r3, r2
 8002392:	da12      	bge.n	80023ba <MCM_Park+0x4e>
  else if (wqd_tmp < (-32768))
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <MCM_Park+0x94>)
 8002396:	4293      	cmp	r3, r2
 8002398:	da24      	bge.n	80023e4 <MCM_Park+0x78>
  if (wqd_tmp > INT16_MAX)
 800239a:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 800239c:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800239e:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80023a0:	1840      	adds	r0, r0, r1
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <MCM_Park+0x98>)
 80023a4:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4298      	cmp	r0, r3
 80023aa:	db0f      	blt.n	80023cc <MCM_Park+0x60>
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <MCM_Park+0x9c>)
  return (Output);
 80023ae:	0410      	lsls	r0, r2, #16
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	0c00      	lsrs	r0, r0, #16
 80023b4:	4318      	orrs	r0, r3
}
 80023b6:	b004      	add	sp, #16
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <MCM_Park+0x9c>)
  if (wqd_tmp > INT16_MAX)
 80023bc:	2380      	movs	r3, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 80023be:	4368      	muls	r0, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80023c0:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80023c2:	1840      	adds	r0, r0, r1
 80023c4:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	4298      	cmp	r0, r3
 80023ca:	daef      	bge.n	80023ac <MCM_Park+0x40>
  else if (wqd_tmp < (-32768))
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MCM_Park+0x94>)
 80023ce:	4298      	cmp	r0, r3
 80023d0:	da01      	bge.n	80023d6 <MCM_Park+0x6a>
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MCM_Park+0x98>)
 80023d4:	e7eb      	b.n	80023ae <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 80023d6:	490b      	ldr	r1, [pc, #44]	; (8002404 <MCM_Park+0x98>)
 80023d8:	1c03      	adds	r3, r0, #0
 80023da:	b200      	sxth	r0, r0
 80023dc:	4288      	cmp	r0, r1
 80023de:	db0b      	blt.n	80023f8 <MCM_Park+0x8c>
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	e7e4      	b.n	80023ae <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 80023e4:	4e07      	ldr	r6, [pc, #28]	; (8002404 <MCM_Park+0x98>)
 80023e6:	1c1a      	adds	r2, r3, #0
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	42b3      	cmp	r3, r6
 80023ec:	db01      	blt.n	80023f2 <MCM_Park+0x86>
 80023ee:	b212      	sxth	r2, r2
 80023f0:	e7e4      	b.n	80023bc <MCM_Park+0x50>
 80023f2:	1c32      	adds	r2, r6, #0
 80023f4:	b212      	sxth	r2, r2
 80023f6:	e7e1      	b.n	80023bc <MCM_Park+0x50>
 80023f8:	1c0b      	adds	r3, r1, #0
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	e7d7      	b.n	80023ae <MCM_Park+0x42>
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	ffff8000 	.word	0xffff8000
 8002404:	ffff8001 	.word	0xffff8001
 8002408:	00007fff 	.word	0x00007fff

0800240c <MCM_Rev_Park>:
{
 800240c:	b530      	push	{r4, r5, lr}
 800240e:	b085      	sub	sp, #20
 8002410:	b205      	sxth	r5, r0
 8002412:	9001      	str	r0, [sp, #4]
 8002414:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002416:	0008      	movs	r0, r1
 8002418:	f7ff ff5a 	bl	80022d0 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 800241c:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800241e:	1400      	asrs	r0, r0, #16
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8002420:	0013      	movs	r3, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002422:	0001      	movs	r1, r0
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8002424:	436b      	muls	r3, r5
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002426:	4361      	muls	r1, r4
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8002428:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800242a:	4354      	muls	r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800242c:	185b      	adds	r3, r3, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800242e:	1a20      	subs	r0, r4, r0
 8002430:	13c0      	asrs	r0, r0, #15
  return (Output);
 8002432:	005c      	lsls	r4, r3, #1
 8002434:	0c24      	lsrs	r4, r4, #16
 8002436:	0400      	lsls	r0, r0, #16
 8002438:	4320      	orrs	r0, r4
}
 800243a:	b005      	add	sp, #20
 800243c:	bd30      	pop	{r4, r5, pc}
 800243e:	46c0      	nop			; (mov r8, r8)

08002440 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8002440:	2126      	movs	r1, #38	; 0x26
 8002442:	2200      	movs	r2, #0
 8002444:	4341      	muls	r1, r0
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <FOC_Clear+0x50>)
{
 8002448:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 800244a:	52ca      	strh	r2, [r1, r3]
 800244c:	185b      	adds	r3, r3, r1
 800244e:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8002450:	809a      	strh	r2, [r3, #4]
 8002452:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002454:	819a      	strh	r2, [r3, #12]
 8002456:	81da      	strh	r2, [r3, #14]
  {
    FOCVars[bMotor].Iqdref = NULL_qd;
 8002458:	821a      	strh	r2, [r3, #16]
 800245a:	825a      	strh	r2, [r3, #18]
  }
  FOCVars[bMotor].hTeref = (int16_t)0;
 800245c:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800245e:	82da      	strh	r2, [r3, #22]
 8002460:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8002462:	835a      	strh	r2, [r3, #26]
 8002464:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002466:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <FOC_Clear+0x54>)
 800246a:	0084      	lsls	r4, r0, #2
 800246c:	58e0      	ldr	r0, [r4, r3]
 800246e:	2100      	movs	r1, #0
 8002470:	f003 fb9e 	bl	8005bb0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <FOC_Clear+0x58>)
 8002476:	2100      	movs	r1, #0
 8002478:	58e0      	ldr	r0, [r4, r3]
 800247a:	f003 fb99 	bl	8005bb0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <FOC_Clear+0x5c>)
 8002480:	58e0      	ldr	r0, [r4, r3]
 8002482:	f003 fd3b 	bl	8005efc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <FOC_Clear+0x60>)
 8002488:	58e0      	ldr	r0, [r4, r3]
 800248a:	f000 fc77 	bl	8002d7c <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800248e:	bd10      	pop	{r4, pc}
 8002490:	20000470 	.word	0x20000470
 8002494:	20000374 	.word	0x20000374
 8002498:	20000370 	.word	0x20000370
 800249c:	20000378 	.word	0x20000378
 80024a0:	200004a0 	.word	0x200004a0

080024a4 <MCboot>:
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	46ce      	mov	lr, r9
 80024a8:	4647      	mov	r7, r8
 80024aa:	b580      	push	{r7, lr}
 80024ac:	0004      	movs	r4, r0
 80024ae:	b083      	sub	sp, #12
  if (MC_NULL == pMCIList)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d056      	beq.n	8002562 <MCboot+0xbe>
    bMCBootCompleted = (uint8_t )0;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <MCboot+0xc8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024b6:	4f2e      	ldr	r7, [pc, #184]	; (8002570 <MCboot+0xcc>)
    bMCBootCompleted = (uint8_t )0;
 80024b8:	4698      	mov	r8, r3
 80024ba:	2300      	movs	r3, #0
 80024bc:	4642      	mov	r2, r8
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024be:	482d      	ldr	r0, [pc, #180]	; (8002574 <MCboot+0xd0>)
    bMCBootCompleted = (uint8_t )0;
 80024c0:	7013      	strb	r3, [r2, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024c2:	6038      	str	r0, [r7, #0]
    R1_Init(&PWM_Handle_M1);
 80024c4:	f000 ffe6 	bl	8003494 <R1_Init>
    ASPEP_start(&aspepOverUartA);
 80024c8:	482b      	ldr	r0, [pc, #172]	; (8002578 <MCboot+0xd4>)
 80024ca:	f7fe f94f 	bl	800076c <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80024ce:	4e2b      	ldr	r6, [pc, #172]	; (800257c <MCboot+0xd8>)
 80024d0:	0030      	movs	r0, r6
 80024d2:	f003 fb59 	bl	8005b88 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <MCboot+0xdc>)
 80024d8:	4699      	mov	r9, r3
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fe fc80 	bl	8000de0 <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 80024e0:	4d28      	ldr	r5, [pc, #160]	; (8002584 <MCboot+0xe0>)
 80024e2:	0031      	movs	r1, r6
 80024e4:	464a      	mov	r2, r9
 80024e6:	6828      	ldr	r0, [r5, #0]
 80024e8:	f003 fcf4 	bl	8005ed4 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80024ec:	4826      	ldr	r0, [pc, #152]	; (8002588 <MCboot+0xe4>)
 80024ee:	f003 fb4b 	bl	8005b88 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80024f2:	4826      	ldr	r0, [pc, #152]	; (800258c <MCboot+0xe8>)
 80024f4:	f003 fb48 	bl	8005b88 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 80024f8:	4e25      	ldr	r6, [pc, #148]	; (8002590 <MCboot+0xec>)
 80024fa:	0030      	movs	r0, r6
 80024fc:	f003 fc2c 	bl	8005d58 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <MCboot+0xf0>)
    NTC_Init(&TempSensor_M1);
 8002502:	4825      	ldr	r0, [pc, #148]	; (8002598 <MCboot+0xf4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002508:	4e24      	ldr	r6, [pc, #144]	; (800259c <MCboot+0xf8>)
 800250a:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 800250c:	f003 faf8 	bl	8005b00 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8002510:	4823      	ldr	r0, [pc, #140]	; (80025a0 <MCboot+0xfc>)
 8002512:	f003 fc8f 	bl	8005e34 <REMNG_Init>
    FOC_Clear(M1);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff ff92 	bl	8002440 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800251c:	2301      	movs	r3, #1
 800251e:	4699      	mov	r9, r3
 8002520:	464a      	mov	r2, r9
 8002522:	3323      	adds	r3, #35	; 0x23
 8002524:	54f2      	strb	r2, [r6, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002526:	6828      	ldr	r0, [r5, #0]
 8002528:	f003 fd74 	bl	8006014 <STC_GetDefaultIqdref>
 800252c:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800252e:	6828      	ldr	r0, [r5, #0]
 8002530:	f003 fd70 	bl	8006014 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4f1b      	ldr	r7, [pc, #108]	; (80025a4 <MCboot+0x100>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002538:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800253a:	0032      	movs	r2, r6
 800253c:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800253e:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8002540:	0038      	movs	r0, r7
 8002542:	f7ff fd49 	bl	8001fd8 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8002546:	6828      	ldr	r0, [r5, #0]
 8002548:	f003 fd60 	bl	800600c <STC_GetMecSpeedRefUnitDefault>
 800254c:	2200      	movs	r2, #0
 800254e:	0001      	movs	r1, r0
 8002550:	0038      	movs	r0, r7
 8002552:	f7ff fd4d 	bl	8001ff0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8002556:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8002558:	f7ff fd3a 	bl	8001fd0 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800255c:	4643      	mov	r3, r8
 800255e:	464a      	mov	r2, r9
 8002560:	701a      	strb	r2, [r3, #0]
}
 8002562:	b003      	add	sp, #12
 8002564:	bcc0      	pop	{r6, r7}
 8002566:	46b9      	mov	r9, r7
 8002568:	46b0      	mov	r8, r6
 800256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256c:	20000496 	.word	0x20000496
 8002570:	200004a0 	.word	0x200004a0
 8002574:	2000023c 	.word	0x2000023c
 8002578:	200003b4 	.word	0x200003b4
 800257c:	20000200 	.word	0x20000200
 8002580:	200000e0 	.word	0x200000e0
 8002584:	20000378 	.word	0x20000378
 8002588:	200001d4 	.word	0x200001d4
 800258c:	200001a8 	.word	0x200001a8
 8002590:	20000000 	.word	0x20000000
 8002594:	2000036c 	.word	0x2000036c
 8002598:	20000344 	.word	0x20000344
 800259c:	20000470 	.word	0x20000470
 80025a0:	200002f8 	.word	0x200002f8
 80025a4:	2000043c 	.word	0x2000043c

080025a8 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80025a8:	4770      	bx	lr
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80025ac:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80025ae:	2426      	movs	r4, #38	; 0x26
 80025b0:	4344      	muls	r4, r0
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <FOC_CalcCurrRef+0x28>)
 80025b4:	191c      	adds	r4, r3, r4
 80025b6:	0023      	movs	r3, r4
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d000      	beq.n	80025c2 <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80025c0:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <FOC_CalcCurrRef+0x2c>)
 80025c4:	0080      	lsls	r0, r0, #2
 80025c6:	58c0      	ldr	r0, [r0, r3]
 80025c8:	f003 fcf4 	bl	8005fb4 <STC_CalcTorqueReference>
 80025cc:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80025ce:	8220      	strh	r0, [r4, #16]
}
 80025d0:	e7f6      	b.n	80025c0 <FOC_CalcCurrRef+0x14>
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	20000470 	.word	0x20000470
 80025d8:	20000378 	.word	0x20000378

080025dc <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80025dc:	4b01      	ldr	r3, [pc, #4]	; (80025e4 <TSK_SetChargeBootCapDelayM1+0x8>)
 80025de:	8018      	strh	r0, [r3, #0]
}
 80025e0:	4770      	bx	lr
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000498 	.word	0x20000498

080025e8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 80025ea:	8818      	ldrh	r0, [r3, #0]
 80025ec:	4243      	negs	r3, r0
 80025ee:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 80025f0:	b2c0      	uxtb	r0, r0
}
 80025f2:	4770      	bx	lr
 80025f4:	20000498 	.word	0x20000498

080025f8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <TSK_SetStopPermanencyTimeM1+0x8>)
 80025fa:	8018      	strh	r0, [r3, #0]
}
 80025fc:	4770      	bx	lr
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	2000049c 	.word	0x2000049c

08002604 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002604:	4b02      	ldr	r3, [pc, #8]	; (8002610 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8002606:	8818      	ldrh	r0, [r3, #0]
 8002608:	4243      	negs	r3, r0
 800260a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 800260c:	b2c0      	uxtb	r0, r0
}
 800260e:	4770      	bx	lr
 8002610:	2000049c 	.word	0x2000049c

08002614 <TSK_MediumFrequencyTaskM1>:
{
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8002618:	466b      	mov	r3, sp
 800261a:	1d99      	adds	r1, r3, #6
 800261c:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800261e:	4f56      	ldr	r7, [pc, #344]	; (8002778 <TSK_MediumFrequencyTaskM1+0x164>)
  int16_t wAux = 0;
 8002620:	800b      	strh	r3, [r1, #0]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002622:	0038      	movs	r0, r7
 8002624:	f7fe fd32 	bl	800108c <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002628:	4e54      	ldr	r6, [pc, #336]	; (800277c <TSK_MediumFrequencyTaskM1+0x168>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800262a:	0005      	movs	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 800262c:	6830      	ldr	r0, [r6, #0]
 800262e:	f003 fb35 	bl	8005c9c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002632:	4c53      	ldr	r4, [pc, #332]	; (8002780 <TSK_MediumFrequencyTaskM1+0x16c>)
 8002634:	0020      	movs	r0, r4
 8002636:	f7ff fd43 	bl	80020c0 <MCI_GetCurrentFaults>
 800263a:	2800      	cmp	r0, #0
 800263c:	d003      	beq.n	8002646 <TSK_MediumFrequencyTaskM1+0x32>
    Mci[M1].State = FAULT_NOW;
 800263e:	230a      	movs	r3, #10
 8002640:	7663      	strb	r3, [r4, #25]
}
 8002642:	b003      	add	sp, #12
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002646:	0020      	movs	r0, r4
 8002648:	f7ff fd38 	bl	80020bc <MCI_GetOccurredFaults>
 800264c:	2800      	cmp	r0, #0
 800264e:	d106      	bne.n	800265e <TSK_MediumFrequencyTaskM1+0x4a>
      switch (Mci[M1].State)
 8002650:	7e63      	ldrb	r3, [r4, #25]
 8002652:	2b11      	cmp	r3, #17
 8002654:	d8f5      	bhi.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
 8002656:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <TSK_MediumFrequencyTaskM1+0x170>)
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	58d3      	ldr	r3, [r2, r3]
 800265c:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 800265e:	230b      	movs	r3, #11
 8002660:	7663      	strb	r3, [r4, #25]
 8002662:	e7ee      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8002664:	7e23      	ldrb	r3, [r4, #24]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d065      	beq.n	8002736 <TSK_MediumFrequencyTaskM1+0x122>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800266a:	4d47      	ldr	r5, [pc, #284]	; (8002788 <TSK_MediumFrequencyTaskM1+0x174>)
 800266c:	2101      	movs	r1, #1
 800266e:	6828      	ldr	r0, [r5, #0]
 8002670:	f000 fb8c 	bl	8002d8c <PWMC_CurrentReadingCalibr>
 8002674:	2800      	cmp	r0, #0
 8002676:	d0e4      	beq.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002678:	7e23      	ldrb	r3, [r4, #24]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d072      	beq.n	8002764 <TSK_MediumFrequencyTaskM1+0x150>
                  R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800267e:	2100      	movs	r1, #0
 8002680:	6828      	ldr	r0, [r5, #0]
 8002682:	f001 f863 	bl	800374c <R1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8002686:	2014      	movs	r0, #20
 8002688:	f7ff ffa8 	bl	80025dc <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 800268c:	2310      	movs	r3, #16
 800268e:	7663      	strb	r3, [r4, #25]
 8002690:	e7d7      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002692:	7e23      	ldrb	r3, [r4, #24]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d04e      	beq.n	8002736 <TSK_MediumFrequencyTaskM1+0x122>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002698:	f7ff ffa6 	bl	80025e8 <TSK_ChargeBootCapDelayHasElapsedM1>
 800269c:	2800      	cmp	r0, #0
 800269e:	d0d0      	beq.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 80026a0:	4d39      	ldr	r5, [pc, #228]	; (8002788 <TSK_MediumFrequencyTaskM1+0x174>)
 80026a2:	6828      	ldr	r0, [r5, #0]
 80026a4:	f001 f9a2 	bl	80039ec <R1_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 80026a8:	0038      	movs	r0, r7
 80026aa:	f7fe fc27 	bl	8000efc <HALL_Clear>
              FOC_Clear( M1 );
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff fec6 	bl	8002440 <FOC_Clear>
              FOC_InitAdditionalMethods(M1);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff ff77 	bl	80025a8 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7ff ff76 	bl	80025ac <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <TSK_MediumFrequencyTaskM1+0x178>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f003 fcae 	bl	8006024 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80026c8:	0020      	movs	r0, r4
 80026ca:	f7ff fcb9 	bl	8002040 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 80026ce:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80026d0:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 80026d2:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80026d4:	f000 fb56 	bl	8002d84 <PWMC_SwitchOnPWM>
 80026d8:	e7b3      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80026da:	7e23      	ldrb	r3, [r4, #24]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d1b0      	bne.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80026e0:	2300      	movs	r3, #0
 80026e2:	8323      	strh	r3, [r4, #24]
 80026e4:	e7ad      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80026e6:	f7ff ff8d 	bl	8002604 <TSK_StopPermanencyTimeHasElapsedM1>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d0a9      	beq.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
 80026ee:	e7f7      	b.n	80026e0 <TSK_MediumFrequencyTaskM1+0xcc>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026f0:	7e23      	ldrb	r3, [r4, #24]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d01f      	beq.n	8002736 <TSK_MediumFrequencyTaskM1+0x122>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80026f6:	0020      	movs	r0, r4
 80026f8:	f7ff fca2 	bl	8002040 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff ff55 	bl	80025ac <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8002702:	2d00      	cmp	r5, #0
 8002704:	d19d      	bne.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2120      	movs	r1, #32
 800270a:	0020      	movs	r0, r4
 800270c:	f7ff fc90 	bl	8002030 <MCI_FaultProcessing>
 8002710:	e797      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002712:	2202      	movs	r2, #2
 8002714:	7e23      	ldrb	r3, [r4, #24]
 8002716:	4393      	bics	r3, r2
 8002718:	2b01      	cmp	r3, #1
 800271a:	d000      	beq.n	800271e <TSK_MediumFrequencyTaskM1+0x10a>
 800271c:	e791      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 800271e:	4d1a      	ldr	r5, [pc, #104]	; (8002788 <TSK_MediumFrequencyTaskM1+0x174>)
 8002720:	326c      	adds	r2, #108	; 0x6c
 8002722:	6828      	ldr	r0, [r5, #0]
 8002724:	5c82      	ldrb	r2, [r0, r2]
 8002726:	2a00      	cmp	r2, #0
 8002728:	d116      	bne.n	8002758 <TSK_MediumFrequencyTaskM1+0x144>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800272a:	2100      	movs	r1, #0
 800272c:	f000 fb2e 	bl	8002d8c <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8002730:	2311      	movs	r3, #17
 8002732:	7663      	strb	r3, [r4, #25]
 8002734:	e785      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
  R1_SwitchOffPWM(pwmcHandle[motor]);
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <TSK_MediumFrequencyTaskM1+0x174>)
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	f001 f957 	bl	80039ec <R1_SwitchOffPWM>
  FOC_Clear(motor);
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff fe7e 	bl	8002440 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8002744:	6830      	ldr	r0, [r6, #0]
 8002746:	f003 fac3 	bl	8005cd0 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 800274a:	20c8      	movs	r0, #200	; 0xc8
 800274c:	0080      	lsls	r0, r0, #2
 800274e:	f7ff ff53 	bl	80025f8 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002752:	2308      	movs	r3, #8
 8002754:	7663      	strb	r3, [r4, #25]
  return;
 8002756:	e774      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002758:	224e      	movs	r2, #78	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800275a:	2101      	movs	r1, #1
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 800275c:	5283      	strh	r3, [r0, r2]
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800275e:	f000 fb15 	bl	8002d8c <PWMC_CurrentReadingCalibr>
             R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002762:	e78c      	b.n	800267e <TSK_MediumFrequencyTaskM1+0x6a>
                  FOC_Clear(M1);
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff fe6b 	bl	8002440 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 800276a:	6830      	ldr	r0, [r6, #0]
 800276c:	f003 fab0 	bl	8005cd0 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002770:	2300      	movs	r3, #0
 8002772:	8323      	strh	r3, [r4, #24]
 8002774:	e765      	b.n	8002642 <TSK_MediumFrequencyTaskM1+0x2e>
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	200000e0 	.word	0x200000e0
 800277c:	2000036c 	.word	0x2000036c
 8002780:	2000043c 	.word	0x2000043c
 8002784:	08006534 	.word	0x08006534
 8002788:	200004a0 	.word	0x200004a0
 800278c:	20000378 	.word	0x20000378

08002790 <MC_Scheduler>:
{
 8002790:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <MC_Scheduler+0x80>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d000      	beq.n	800279c <MC_Scheduler+0xc>
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 800279c:	4c1d      	ldr	r4, [pc, #116]	; (8002814 <MC_Scheduler+0x84>)
 800279e:	8823      	ldrh	r3, [r4, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 80027a4:	3b01      	subs	r3, #1
 80027a6:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MC_Scheduler+0x88>)
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	2a00      	cmp	r2, #0
 80027ae:	d003      	beq.n	80027b8 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	3a01      	subs	r2, #1
 80027b4:	b292      	uxth	r2, r2
 80027b6:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <MC_Scheduler+0x8c>)
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d0ec      	beq.n	800279a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	3a01      	subs	r2, #1
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]
}
 80027c8:	e7e7      	b.n	800279a <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 80027ca:	f7ff ff23 	bl	8002614 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80027ce:	f7ff fc01 	bl	8001fd4 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80027d2:	4d13      	ldr	r5, [pc, #76]	; (8002820 <MC_Scheduler+0x90>)
 80027d4:	0029      	movs	r1, r5
 80027d6:	6828      	ldr	r0, [r5, #0]
 80027d8:	310c      	adds	r1, #12
 80027da:	6883      	ldr	r3, [r0, #8]
 80027dc:	4798      	blx	r3
 80027de:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d007      	beq.n	80027f4 <MC_Scheduler+0x64>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80027e4:	0029      	movs	r1, r5
 80027e6:	6828      	ldr	r0, [r5, #0]
 80027e8:	220a      	movs	r2, #10
 80027ea:	6803      	ldr	r3, [r0, #0]
 80027ec:	3108      	adds	r1, #8
 80027ee:	4798      	blx	r3
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d102      	bne.n	80027fa <MC_Scheduler+0x6a>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 80027f4:	2301      	movs	r3, #1
 80027f6:	8023      	strh	r3, [r4, #0]
 80027f8:	e7d6      	b.n	80027a8 <MC_Scheduler+0x18>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80027fa:	0028      	movs	r0, r5
 80027fc:	f003 f8c6 	bl	800598c <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002800:	6828      	ldr	r0, [r5, #0]
 8002802:	89ea      	ldrh	r2, [r5, #14]
 8002804:	68a9      	ldr	r1, [r5, #8]
 8002806:	230a      	movs	r3, #10
 8002808:	6845      	ldr	r5, [r0, #4]
 800280a:	47a8      	blx	r5
 800280c:	e7f2      	b.n	80027f4 <MC_Scheduler+0x64>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	20000496 	.word	0x20000496
 8002814:	2000049a 	.word	0x2000049a
 8002818:	20000498 	.word	0x20000498
 800281c:	2000049c 	.word	0x2000049c
 8002820:	20000390 	.word	0x20000390

08002824 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002826:	46ce      	mov	lr, r9
 8002828:	4647      	mov	r7, r8
 800282a:	b580      	push	{r7, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)HALL_CalcElAngle(&HALL_M1);
 800282c:	4837      	ldr	r0, [pc, #220]	; (800290c <TSK_HighFrequencyTask+0xe8>)
{
 800282e:	b087      	sub	sp, #28
  (void)HALL_CalcElAngle(&HALL_M1);
 8002830:	f7fe fc0e 	bl	8001050 <HALL_CalcElAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <TSK_HighFrequencyTask+0xec>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f003 fb5e 	bl	8005ef8 <STC_GetSpeedSensor>
 800283c:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800283e:	f003 fb01 	bl	8005e44 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002842:	4f34      	ldr	r7, [pc, #208]	; (8002914 <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 8002844:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002846:	a903      	add	r1, sp, #12
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f000 f987 	bl	8002b5c <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 800284e:	f002 fa8f 	bl	8004d70 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002852:	9803      	ldr	r0, [sp, #12]
 8002854:	f7ff fd10 	bl	8002278 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002858:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 800285a:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800285c:	f7ff fd86 	bl	800236c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002860:	4c2d      	ldr	r4, [pc, #180]	; (8002918 <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002862:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002864:	2310      	movs	r3, #16
 8002866:	5ee1      	ldrsh	r1, [r4, r3]
 8002868:	b203      	sxth	r3, r0
 800286a:	1ac9      	subs	r1, r1, r3
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <TSK_HighFrequencyTask+0xf8>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	f003 f9d2 	bl	8005c18 <PI_Controller>
 8002874:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002876:	2312      	movs	r3, #18
 8002878:	5ee1      	ldrsh	r1, [r4, r3]
 800287a:	ab01      	add	r3, sp, #4
 800287c:	2202      	movs	r2, #2
 800287e:	5e9b      	ldrsh	r3, [r3, r2]
 8002880:	1ac9      	subs	r1, r1, r3
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <TSK_HighFrequencyTask+0xfc>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f003 f9c7 	bl	8005c18 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800288a:	4642      	mov	r2, r8
 800288c:	ab02      	add	r3, sp, #8
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	8058      	strh	r0, [r3, #2]
 8002892:	9902      	ldr	r1, [sp, #8]
 8002894:	4823      	ldr	r0, [pc, #140]	; (8002924 <TSK_HighFrequencyTask+0x100>)
 8002896:	f003 f83b 	bl	8005910 <Circle_Limitation>
 800289a:	b203      	sxth	r3, r0
 800289c:	4699      	mov	r9, r3
 800289e:	9002      	str	r0, [sp, #8]
 80028a0:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80028a2:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80028a4:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80028a6:	f003 fad5 	bl	8005e54 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80028aa:	0029      	movs	r1, r5
 80028ac:	9802      	ldr	r0, [sp, #8]
 80028ae:	f7ff fdad 	bl	800240c <MCM_Rev_Park>
 80028b2:	9005      	str	r0, [sp, #20]
  RCM_ReadOngoingConv();
 80028b4:	f002 fa94 	bl	8004de0 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80028b8:	9905      	ldr	r1, [sp, #20]
 80028ba:	6838      	ldr	r0, [r7, #0]
 80028bc:	f000 f952 	bl	8002b64 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 80028c0:	002a      	movs	r2, r5
 80028c2:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80028c4:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f000 fa7e 	bl	8002dc8 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 80028cc:	464b      	mov	r3, r9
 80028ce:	82e3      	strh	r3, [r4, #22]
 80028d0:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80028d2:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 80028d4:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 80028d6:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80028d8:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 80028da:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80028dc:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 80028de:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80028e0:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80028e2:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80028e4:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 80028e6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80028e8:	f003 fbc8 	bl	800607c <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 80028ec:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80028ee:	2e01      	cmp	r6, #1
 80028f0:	d005      	beq.n	80028fe <TSK_HighFrequencyTask+0xda>
}
 80028f2:	2000      	movs	r0, #0
 80028f4:	b007      	add	sp, #28
 80028f6:	bcc0      	pop	{r6, r7}
 80028f8:	46b9      	mov	r9, r7
 80028fa:	46b0      	mov	r8, r6
 80028fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <TSK_HighFrequencyTask+0x104>)
 8002904:	f7ff fb94 	bl	8002030 <MCI_FaultProcessing>
 8002908:	e7f3      	b.n	80028f2 <TSK_HighFrequencyTask+0xce>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	200000e0 	.word	0x200000e0
 8002910:	20000378 	.word	0x20000378
 8002914:	200004a0 	.word	0x200004a0
 8002918:	20000470 	.word	0x20000470
 800291c:	20000374 	.word	0x20000374
 8002920:	20000370 	.word	0x20000370
 8002924:	2000002c 	.word	0x2000002c
 8002928:	2000043c 	.word	0x2000043c

0800292c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	46ce      	mov	lr, r9
 8002930:	4647      	mov	r7, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <TSK_SafetyTask_PWMOFF+0x7c>)
{
 8002934:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002936:	0087      	lsls	r7, r0, #2
{
 8002938:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800293a:	59d8      	ldr	r0, [r3, r7]
 800293c:	f003 f8f4 	bl	8005b28 <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002942:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002944:	59d8      	ldr	r0, [r3, r7]
 8002946:	4698      	mov	r8, r3
 8002948:	f000 fa74 	bl	8002e34 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800294c:	230c      	movs	r3, #12
 800294e:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002950:	4306      	orrs	r6, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002952:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002954:	b2b4      	uxth	r4, r6
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8002956:	2d00      	cmp	r5, #0
 8002958:	d011      	beq.n	800297e <TSK_SafetyTask_PWMOFF+0x52>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800295a:	43e2      	mvns	r2, r4
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <TSK_SafetyTask_PWMOFF+0x84>)
 800295e:	016e      	lsls	r6, r5, #5
 8002960:	18f6      	adds	r6, r6, r3
 8002962:	0030      	movs	r0, r6
 8002964:	0021      	movs	r1, r4
 8002966:	b292      	uxth	r2, r2
 8002968:	f7ff fb62 	bl	8002030 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 800296c:	0030      	movs	r0, r6
 800296e:	f7ff fbf1 	bl	8002154 <MCI_GetFaultState>
 8002972:	2800      	cmp	r0, #0
 8002974:	d10b      	bne.n	800298e <TSK_SafetyTask_PWMOFF+0x62>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002976:	bcc0      	pop	{r6, r7}
 8002978:	46b9      	mov	r9, r7
 800297a:	46b0      	mov	r8, r6
 800297c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 800297e:	480d      	ldr	r0, [pc, #52]	; (80029b4 <TSK_SafetyTask_PWMOFF+0x88>)
 8002980:	f003 fa1c 	bl	8005dbc <RVBS_CalcAvVbus>
 8002984:	464b      	mov	r3, r9
 8002986:	4398      	bics	r0, r3
 8002988:	4304      	orrs	r4, r0
 800298a:	b2a4      	uxth	r4, r4
 800298c:	e7e5      	b.n	800295a <TSK_SafetyTask_PWMOFF+0x2e>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800298e:	4643      	mov	r3, r8
 8002990:	59d8      	ldr	r0, [r3, r7]
 8002992:	f000 f9f3 	bl	8002d7c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002996:	0028      	movs	r0, r5
 8002998:	f7ff fd52 	bl	8002440 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <TSK_SafetyTask_PWMOFF+0x8c>)
 800299e:	59d8      	ldr	r0, [r3, r7]
 80029a0:	f003 f996 	bl	8005cd0 <PQD_Clear>
}
 80029a4:	e7e7      	b.n	8002976 <TSK_SafetyTask_PWMOFF+0x4a>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	2000037c 	.word	0x2000037c
 80029ac:	200004a0 	.word	0x200004a0
 80029b0:	2000043c 	.word	0x2000043c
 80029b4:	20000000 	.word	0x20000000
 80029b8:	2000036c 	.word	0x2000036c

080029bc <TSK_SafetyTask>:
{
 80029bc:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <TSK_SafetyTask+0x18>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d000      	beq.n	80029c8 <TSK_SafetyTask+0xc>
}
 80029c6:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff ffaf 	bl	800292c <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 80029ce:	f002 f9a1 	bl	8004d14 <RCM_ExecUserConv>
}
 80029d2:	e7f8      	b.n	80029c6 <TSK_SafetyTask+0xa>
 80029d4:	20000496 	.word	0x20000496

080029d8 <MC_RunMotorControlTasks>:
{
 80029d8:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <MC_RunMotorControlTasks+0x18>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <MC_RunMotorControlTasks+0xc>
}
 80029e2:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 80029e4:	f7ff fed4 	bl	8002790 <MC_Scheduler>
    TSK_SafetyTask();
 80029e8:	f7ff ffe8 	bl	80029bc <TSK_SafetyTask>
}
 80029ec:	e7f9      	b.n	80029e2 <MC_RunMotorControlTasks+0xa>
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	20000496 	.word	0x20000496

080029f4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80029f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <TSK_HardwareFaultTask+0x18>)
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f000 fff7 	bl	80039ec <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	4803      	ldr	r0, [pc, #12]	; (8002a10 <TSK_HardwareFaultTask+0x1c>)
 8002a04:	f7ff fb14 	bl	8002030 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	200004a0 	.word	0x200004a0
 8002a10:	2000043c 	.word	0x2000043c

08002a14 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002a14:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002a16:	f7ff fad1 	bl	8001fbc <MC_GetSTMStateMotor1>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d102      	bne.n	8002a24 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8002a1e:	f7ff fabd 	bl	8001f9c <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002a22:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8002a24:	f7ff fac2 	bl	8001fac <MC_StopMotor1>
}
 8002a28:	e7fb      	b.n	8002a22 <UI_HandleStartStopButton_cb+0xe>
 8002a2a:	46c0      	nop			; (mov r8, r8)

08002a2c <mc_lock_pins>:
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a2c:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a2e:	2110      	movs	r1, #16
 8002a30:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002a32:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a34:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <mc_lock_pins+0xe4>)
 8002a36:	05db      	lsls	r3, r3, #23
 8002a38:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a3a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a3c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	b08c      	sub	sp, #48	; 0x30
 8002a42:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8002a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a46:	4933      	ldr	r1, [pc, #204]	; (8002b14 <mc_lock_pins+0xe8>)
 8002a48:	4a33      	ldr	r2, [pc, #204]	; (8002b18 <mc_lock_pins+0xec>)
 8002a4a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a4c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a4e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a50:	69d4      	ldr	r4, [r2, #28]
 8002a52:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 8002a54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a56:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a58:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a5a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a5c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a5e:	3002      	adds	r0, #2
  temp = READ_REG(GPIOx->LCKR);
 8002a60:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8002a62:	9909      	ldr	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a64:	492d      	ldr	r1, [pc, #180]	; (8002b1c <mc_lock_pins+0xf0>)
 8002a66:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a68:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a6a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a6c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a6e:	3803      	subs	r0, #3
  temp = READ_REG(GPIOx->LCKR);
 8002a70:	9108      	str	r1, [sp, #32]
  (void) temp;
 8002a72:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a74:	492a      	ldr	r1, [pc, #168]	; (8002b20 <mc_lock_pins+0xf4>)
 8002a76:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a78:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a7a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a7c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a7e:	30ff      	adds	r0, #255	; 0xff
  temp = READ_REG(GPIOx->LCKR);
 8002a80:	9107      	str	r1, [sp, #28]
  (void) temp;
 8002a82:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a84:	4927      	ldr	r1, [pc, #156]	; (8002b24 <mc_lock_pins+0xf8>)
 8002a86:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a88:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a8a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002a8c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a8e:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8002a90:	9106      	str	r1, [sp, #24]
  (void) temp;
 8002a92:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a94:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a96:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a98:	0249      	lsls	r1, r1, #9
 8002a9a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002a9c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002a9e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002aa0:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002aa2:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002aa4:	9105      	str	r1, [sp, #20]
  (void) temp;
 8002aa6:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002aa8:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002aaa:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002aac:	0249      	lsls	r1, r1, #9
 8002aae:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ab0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ab2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ab4:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ab6:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002ab8:	9104      	str	r1, [sp, #16]
  (void) temp;
 8002aba:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002abc:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002abe:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ac0:	0249      	lsls	r1, r1, #9
 8002ac2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ac4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ac6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ac8:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002aca:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002acc:	9103      	str	r1, [sp, #12]
  (void) temp;
 8002ace:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ad0:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ad2:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ad4:	0249      	lsls	r1, r1, #9
 8002ad6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ad8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ada:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002adc:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ade:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002ae0:	9302      	str	r3, [sp, #8]
  (void) temp;
 8002ae2:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ae4:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ae6:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ae8:	025b      	lsls	r3, r3, #9
 8002aea:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002aec:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002aee:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002af0:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002af2:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8002af4:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002af6:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002af8:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002afa:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002afc:	025b      	lsls	r3, r3, #9
 8002afe:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002b00:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002b02:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002b04:	69d3      	ldr	r3, [r2, #28]
 8002b06:	9300      	str	r3, [sp, #0]
  (void) temp;
 8002b08:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002b0a:	b00c      	add	sp, #48	; 0x30
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	00010010 	.word	0x00010010
 8002b14:	00010002 	.word	0x00010002
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	00010004 	.word	0x00010004
 8002b20:	00010001 	.word	0x00010001
 8002b24:	00010100 	.word	0x00010100

08002b28 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002b28:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002b2a:	f002 fbaf 	bl	800528c <HAL_RCC_GetHCLKFreq>
 8002b2e:	21fa      	movs	r1, #250	; 0xfa
 8002b30:	00c9      	lsls	r1, r1, #3
 8002b32:	f7fd fae9 	bl	8000108 <__udivsi3>
 8002b36:	f002 fb89 	bl	800524c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <MX_MotorControl_Init+0x2c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	4240      	negs	r0, r0
 8002b44:	f002 fb50 	bl	80051e8 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <MX_MotorControl_Init+0x30>)
 8002b4a:	f7ff fcab 	bl	80024a4 <MCboot>
  mc_lock_pins();
 8002b4e:	f7ff ff6d 	bl	8002a2c <mc_lock_pins>
}
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	2000041c 	.word	0x2000041c
 8002b58:	200005b8 	.word	0x200005b8

08002b5c <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8002b5c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002b5e:	6803      	ldr	r3, [r0, #0]
 8002b60:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b083      	sub	sp, #12
 8002b68:	9101      	str	r1, [sp, #4]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002b6a:	b20b      	sxth	r3, r1
{
 8002b6c:	000a      	movs	r2, r1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002b6e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002b70:	1412      	asrs	r2, r2, #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002b72:	4359      	muls	r1, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002b74:	2360      	movs	r3, #96	; 0x60
 8002b76:	5ac6      	ldrh	r6, [r0, r3]
 8002b78:	4372      	muls	r2, r6
 8002b7a:	0052      	lsls	r2, r2, #1
 8002b7c:	4257      	negs	r7, r2

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002b7e:	1a8a      	subs	r2, r1, r2
 8002b80:	0fd4      	lsrs	r4, r2, #31
 8002b82:	18a4      	adds	r4, r4, r2
    wZ = (wUBeta - wUAlpha) / 2;
 8002b84:	1a79      	subs	r1, r7, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002b86:	1063      	asrs	r3, r4, #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002b88:	0fcc      	lsrs	r4, r1, #31
 8002b8a:	1864      	adds	r4, r4, r1
 8002b8c:	1064      	asrs	r4, r4, #1

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002b8e:	1c55      	adds	r5, r2, #1
 8002b90:	db56      	blt.n	8002c40 <PWMC_SetPhaseVoltage+0xdc>
          pHandle->highDuty = 1U;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002b92:	1c4d      	adds	r5, r1, #1
 8002b94:	db35      	blt.n	8002c02 <PWMC_SetPhaseVoltage+0x9e>
      {
        pHandle->Sector = SECTOR_2;
 8002b96:	256a      	movs	r5, #106	; 0x6a
 8002b98:	2701      	movs	r7, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002b9a:	1b1c      	subs	r4, r3, r4
        pHandle->Sector = SECTOR_2;
 8002b9c:	5547      	strb	r7, [r0, r5]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002b9e:	17e5      	asrs	r5, r4, #31
 8002ba0:	03ad      	lsls	r5, r5, #14
 8002ba2:	0bab      	lsrs	r3, r5, #14
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 8002ba4:	17d5      	asrs	r5, r2, #31
 8002ba6:	03ad      	lsls	r5, r5, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ba8:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - (wY / 131072);
 8002baa:	0bad      	lsrs	r5, r5, #14
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bac:	17cc      	asrs	r4, r1, #31
        wTimePhC = wTimePhA - (wY / 131072);
 8002bae:	18aa      	adds	r2, r5, r2
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002bb0:	149b      	asrs	r3, r3, #18
 8002bb2:	08b6      	lsrs	r6, r6, #2
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bb4:	03a4      	lsls	r4, r4, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002bb6:	199b      	adds	r3, r3, r6
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bb8:	0ba4      	lsrs	r4, r4, #14
        wTimePhC = wTimePhA - (wY / 131072);
 8002bba:	1492      	asrs	r2, r2, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bbc:	1861      	adds	r1, r4, r1
        wTimePhC = wTimePhA - (wY / 131072);
 8002bbe:	1a9d      	subs	r5, r3, r2

        pHandle->lowDuty = 2U;
 8002bc0:	2402      	movs	r4, #2
 8002bc2:	2246      	movs	r2, #70	; 0x46
 8002bc4:	5284      	strh	r4, [r0, r2]
        pHandle->midDuty = 0U;
 8002bc6:	2280      	movs	r2, #128	; 0x80
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bc8:	1489      	asrs	r1, r1, #18
        pHandle->midDuty = 0U;
 8002bca:	0252      	lsls	r2, r2, #9
        wTimePhB = wTimePhA + (wZ / 131072);
 8002bcc:	18c9      	adds	r1, r1, r3
        pHandle->midDuty = 0U;
 8002bce:	6482      	str	r2, [r0, #72]	; 0x48
          pHandle->midDuty = 1U;
          pHandle->highDuty = 0U;
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002bd0:	43dc      	mvns	r4, r3
 8002bd2:	17e4      	asrs	r4, r4, #31
 8002bd4:	4023      	ands	r3, r4
 8002bd6:	43cc      	mvns	r4, r1
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	17e4      	asrs	r4, r4, #31
 8002bdc:	4021      	ands	r1, r4
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b289      	uxth	r1, r1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002be2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002be4:	5281      	strh	r1, [r0, r2]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002be6:	43ea      	mvns	r2, r5
 8002be8:	2442      	movs	r4, #66	; 0x42
 8002bea:	17d2      	asrs	r2, r2, #31
 8002bec:	402a      	ands	r2, r5
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	5302      	strh	r2, [r0, r4]

    if (1U == pHandle->DTTest)
 8002bf2:	341c      	adds	r4, #28
 8002bf4:	5b04      	ldrh	r4, [r0, r4]
 8002bf6:	2c01      	cmp	r4, #1
 8002bf8:	d03f      	beq.n	8002c7a <PWMC_SetPhaseVoltage+0x116>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002bfa:	6943      	ldr	r3, [r0, #20]
 8002bfc:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002bfe:	b003      	add	sp, #12
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	dd6f      	ble.n	8002ce6 <PWMC_SetPhaseVoltage+0x182>
          pHandle->Sector = SECTOR_1;
 8002c06:	236a      	movs	r3, #106	; 0x6a
 8002c08:	2200      	movs	r2, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c0a:	1b3c      	subs	r4, r7, r4
          pHandle->Sector = SECTOR_1;
 8002c0c:	54c2      	strb	r2, [r0, r3]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c0e:	17ca      	asrs	r2, r1, #31
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c10:	17e3      	asrs	r3, r4, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c12:	0392      	lsls	r2, r2, #14
 8002c14:	0b92      	lsrs	r2, r2, #14
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c16:	039b      	lsls	r3, r3, #14
 8002c18:	0b9b      	lsrs	r3, r3, #14
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c1a:	1851      	adds	r1, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8002c1c:	17fa      	asrs	r2, r7, #31
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c1e:	191c      	adds	r4, r3, r4
          wTimePhC = wTimePhB - (wX / 131072);
 8002c20:	03d2      	lsls	r2, r2, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c22:	14a4      	asrs	r4, r4, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002c24:	0bd2      	lsrs	r2, r2, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002c26:	08b3      	lsrs	r3, r6, #2
 8002c28:	18e3      	adds	r3, r4, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8002c2a:	19d7      	adds	r7, r2, r7
          pHandle->lowDuty = 2U;
 8002c2c:	2402      	movs	r4, #2
 8002c2e:	2246      	movs	r2, #70	; 0x46
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c30:	1489      	asrs	r1, r1, #18
          pHandle->lowDuty = 2U;
 8002c32:	5284      	strh	r4, [r0, r2]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c34:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8002c36:	147d      	asrs	r5, r7, #17
          pHandle->midDuty = 1U;
 8002c38:	3a45      	subs	r2, #69	; 0x45
          wTimePhC = wTimePhB - (wX / 131072);
 8002c3a:	1b4d      	subs	r5, r1, r5
          pHandle->midDuty = 1U;
 8002c3c:	6482      	str	r2, [r0, #72]	; 0x48
 8002c3e:	e7c7      	b.n	8002bd0 <PWMC_SetPhaseVoltage+0x6c>
      if (wZ < 0)
 8002c40:	1c4d      	adds	r5, r1, #1
 8002c42:	db6d      	blt.n	8002d20 <PWMC_SetPhaseVoltage+0x1bc>
        if (wX <= 0)
 8002c44:	2f00      	cmp	r7, #0
 8002c46:	dd31      	ble.n	8002cac <PWMC_SetPhaseVoltage+0x148>
          pHandle->Sector = SECTOR_3;
 8002c48:	216a      	movs	r1, #106	; 0x6a
 8002c4a:	2402      	movs	r4, #2
 8002c4c:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002c4e:	1bdc      	subs	r4, r3, r7
 8002c50:	17e1      	asrs	r1, r4, #31
 8002c52:	0389      	lsls	r1, r1, #14
          wTimePhC = wTimePhA - (wY / 131072);
 8002c54:	17d5      	asrs	r5, r2, #31
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002c56:	0b8b      	lsrs	r3, r1, #14
          wTimePhC = wTimePhA - (wY / 131072);
 8002c58:	03ad      	lsls	r5, r5, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002c5a:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002c5c:	0bad      	lsrs	r5, r5, #14
 8002c5e:	18aa      	adds	r2, r5, r2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002c60:	149b      	asrs	r3, r3, #18
 8002c62:	08b6      	lsrs	r6, r6, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002c64:	1492      	asrs	r2, r2, #18
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002c66:	199b      	adds	r3, r3, r6
          wTimePhC = wTimePhA - (wY / 131072);
 8002c68:	1a9d      	subs	r5, r3, r2
          pHandle->lowDuty = 0U;
 8002c6a:	2400      	movs	r4, #0
 8002c6c:	2246      	movs	r2, #70	; 0x46
 8002c6e:	5284      	strh	r4, [r0, r2]
          pHandle->midDuty = 2U;
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <PWMC_SetPhaseVoltage+0x210>)
          wTimePhB = wTimePhC + (wX / 131072);
 8002c72:	1479      	asrs	r1, r7, #17
 8002c74:	1949      	adds	r1, r1, r5
          pHandle->midDuty = 2U;
 8002c76:	6482      	str	r2, [r0, #72]	; 0x48
 8002c78:	e7aa      	b.n	8002bd0 <PWMC_SetPhaseVoltage+0x6c>
      if (pHandle->Ia > 0)
 8002c7a:	344f      	adds	r4, #79	; 0x4f
 8002c7c:	5f04      	ldrsh	r4, [r0, r4]
 8002c7e:	2c00      	cmp	r4, #0
 8002c80:	dd73      	ble.n	8002d6a <PWMC_SetPhaseVoltage+0x206>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002c82:	2462      	movs	r4, #98	; 0x62
 8002c84:	5b04      	ldrh	r4, [r0, r4]
 8002c86:	18e3      	adds	r3, r4, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	87c3      	strh	r3, [r0, #62]	; 0x3e
      if (pHandle->Ib > 0)
 8002c8c:	2352      	movs	r3, #82	; 0x52
 8002c8e:	5ec3      	ldrsh	r3, [r0, r3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dd67      	ble.n	8002d64 <PWMC_SetPhaseVoltage+0x200>
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002c94:	1909      	adds	r1, r1, r4
 8002c96:	b289      	uxth	r1, r1
 8002c98:	2340      	movs	r3, #64	; 0x40
 8002c9a:	52c1      	strh	r1, [r0, r3]
      if (pHandle->Ic > 0)
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	5ec3      	ldrsh	r3, [r0, r3]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	dd5b      	ble.n	8002d5c <PWMC_SetPhaseVoltage+0x1f8>
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002ca4:	2342      	movs	r3, #66	; 0x42
 8002ca6:	1912      	adds	r2, r2, r4
 8002ca8:	52c2      	strh	r2, [r0, r3]
 8002caa:	e7a6      	b.n	8002bfa <PWMC_SetPhaseVoltage+0x96>
          pHandle->Sector = SECTOR_4;
 8002cac:	236a      	movs	r3, #106	; 0x6a
 8002cae:	2203      	movs	r2, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002cb0:	1b3c      	subs	r4, r7, r4
          pHandle->Sector = SECTOR_4;
 8002cb2:	54c2      	strb	r2, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002cb4:	17e2      	asrs	r2, r4, #31
 8002cb6:	0392      	lsls	r2, r2, #14
 8002cb8:	0b93      	lsrs	r3, r2, #14
          wTimePhB = wTimePhA + (wZ / 131072);
 8002cba:	17ca      	asrs	r2, r1, #31
 8002cbc:	0392      	lsls	r2, r2, #14
 8002cbe:	0b92      	lsrs	r2, r2, #14
 8002cc0:	1851      	adds	r1, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8002cc2:	17fa      	asrs	r2, r7, #31
 8002cc4:	03d2      	lsls	r2, r2, #15
 8002cc6:	0bd2      	lsrs	r2, r2, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002cc8:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhB - (wX / 131072);
 8002cca:	19d7      	adds	r7, r2, r7
          pHandle->lowDuty = 0U;
 8002ccc:	2400      	movs	r4, #0
 8002cce:	2246      	movs	r2, #70	; 0x46
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002cd0:	149b      	asrs	r3, r3, #18
 8002cd2:	08b6      	lsrs	r6, r6, #2
          pHandle->lowDuty = 0U;
 8002cd4:	5284      	strh	r4, [r0, r2]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002cd6:	199b      	adds	r3, r3, r6
          pHandle->midDuty = 1U;
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <PWMC_SetPhaseVoltage+0x214>)
          wTimePhB = wTimePhA + (wZ / 131072);
 8002cda:	1489      	asrs	r1, r1, #18
 8002cdc:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8002cde:	147d      	asrs	r5, r7, #17
 8002ce0:	1b4d      	subs	r5, r1, r5
          pHandle->midDuty = 1U;
 8002ce2:	6482      	str	r2, [r0, #72]	; 0x48
 8002ce4:	e774      	b.n	8002bd0 <PWMC_SetPhaseVoltage+0x6c>
          pHandle->Sector = SECTOR_6;
 8002ce6:	216a      	movs	r1, #106	; 0x6a
 8002ce8:	2405      	movs	r4, #5
 8002cea:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002cec:	1bdc      	subs	r4, r3, r7
 8002cee:	17e3      	asrs	r3, r4, #31
          wTimePhC = wTimePhA - (wY / 131072);
 8002cf0:	17d5      	asrs	r5, r2, #31
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	0b9b      	lsrs	r3, r3, #14
          wTimePhC = wTimePhA - (wY / 131072);
 8002cf6:	03ad      	lsls	r5, r5, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002cf8:	191b      	adds	r3, r3, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002cfa:	0bad      	lsrs	r5, r5, #14
 8002cfc:	18aa      	adds	r2, r5, r2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002cfe:	149b      	asrs	r3, r3, #18
 8002d00:	08b6      	lsrs	r6, r6, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002d02:	1492      	asrs	r2, r2, #18
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002d04:	199b      	adds	r3, r3, r6
          wTimePhC = wTimePhA - (wY / 131072);
 8002d06:	1a9d      	subs	r5, r3, r2
          pHandle->lowDuty = 1U;
 8002d08:	2401      	movs	r4, #1
 8002d0a:	2246      	movs	r2, #70	; 0x46
          wTimePhB = wTimePhC + (wX / 131072);
 8002d0c:	17f9      	asrs	r1, r7, #31
 8002d0e:	03c9      	lsls	r1, r1, #15
 8002d10:	0bc9      	lsrs	r1, r1, #15
 8002d12:	19c9      	adds	r1, r1, r7
          pHandle->lowDuty = 1U;
 8002d14:	5284      	strh	r4, [r0, r2]
          wTimePhB = wTimePhC + (wX / 131072);
 8002d16:	1449      	asrs	r1, r1, #17
          pHandle->midDuty = 2U;
 8002d18:	3a44      	subs	r2, #68	; 0x44
          wTimePhB = wTimePhC + (wX / 131072);
 8002d1a:	1949      	adds	r1, r1, r5
          pHandle->midDuty = 2U;
 8002d1c:	6482      	str	r2, [r0, #72]	; 0x48
 8002d1e:	e757      	b.n	8002bd0 <PWMC_SetPhaseVoltage+0x6c>
        pHandle->Sector = SECTOR_5;
 8002d20:	256a      	movs	r5, #106	; 0x6a
 8002d22:	2704      	movs	r7, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d24:	1b1c      	subs	r4, r3, r4
        pHandle->Sector = SECTOR_5;
 8002d26:	5547      	strb	r7, [r0, r5]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d28:	17e5      	asrs	r5, r4, #31
 8002d2a:	03ad      	lsls	r5, r5, #14
 8002d2c:	0bab      	lsrs	r3, r5, #14
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002d2e:	17d5      	asrs	r5, r2, #31
 8002d30:	03ad      	lsls	r5, r5, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d32:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002d34:	0bad      	lsrs	r5, r5, #14
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d36:	17cc      	asrs	r4, r1, #31
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002d38:	18aa      	adds	r2, r5, r2
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d3a:	149b      	asrs	r3, r3, #18
 8002d3c:	08b6      	lsrs	r6, r6, #2
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d3e:	03a4      	lsls	r4, r4, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d40:	199b      	adds	r3, r3, r6
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d42:	0ba4      	lsrs	r4, r4, #14
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002d44:	1492      	asrs	r2, r2, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d46:	1861      	adds	r1, r4, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002d48:	1a9d      	subs	r5, r3, r2
        pHandle->lowDuty = 1U;
 8002d4a:	2401      	movs	r4, #1
 8002d4c:	2246      	movs	r2, #70	; 0x46
 8002d4e:	5284      	strh	r4, [r0, r2]
        pHandle->midDuty = 0U;
 8002d50:	2280      	movs	r2, #128	; 0x80
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d52:	1489      	asrs	r1, r1, #18
        pHandle->midDuty = 0U;
 8002d54:	0292      	lsls	r2, r2, #10
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d56:	18c9      	adds	r1, r1, r3
        pHandle->midDuty = 0U;
 8002d58:	6482      	str	r2, [r0, #72]	; 0x48
 8002d5a:	e739      	b.n	8002bd0 <PWMC_SetPhaseVoltage+0x6c>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002d5c:	2342      	movs	r3, #66	; 0x42
 8002d5e:	1b12      	subs	r2, r2, r4
 8002d60:	52c2      	strh	r2, [r0, r3]
 8002d62:	e74a      	b.n	8002bfa <PWMC_SetPhaseVoltage+0x96>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002d64:	1b09      	subs	r1, r1, r4
 8002d66:	b289      	uxth	r1, r1
 8002d68:	e796      	b.n	8002c98 <PWMC_SetPhaseVoltage+0x134>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002d6a:	2462      	movs	r4, #98	; 0x62
 8002d6c:	5b04      	ldrh	r4, [r0, r4]
 8002d6e:	1b1b      	subs	r3, r3, r4
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	e78a      	b.n	8002c8a <PWMC_SetPhaseVoltage+0x126>
 8002d74:	00010002 	.word	0x00010002
 8002d78:	00020001 	.word	0x00020001

08002d7c <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8002d7c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002d7e:	6843      	ldr	r3, [r0, #4]
 8002d80:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002d82:	bd10      	pop	{r4, pc}

08002d84 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8002d84:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002d86:	6883      	ldr	r3, [r0, #8]
 8002d88:	4798      	blx	r3
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002d8a:	bd10      	pop	{r4, pc}

08002d8c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d011      	beq.n	8002db8 <PWMC_CurrentReadingCalibr+0x2c>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002d94:	2901      	cmp	r1, #1
 8002d96:	d002      	beq.n	8002d9e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002d98:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002d9a:	0028      	movs	r0, r5
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002d9e:	224e      	movs	r2, #78	; 0x4e
 8002da0:	5a83      	ldrh	r3, [r0, r2]
        retVal = true;
 8002da2:	2501      	movs	r5, #1
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f8      	beq.n	8002d9a <PWMC_CurrentReadingCalibr+0xe>
        pHandle->OffCalibrWaitTimeCounter--;
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002db2:	68c3      	ldr	r3, [r0, #12]
 8002db4:	4798      	blx	r3
          retVal = true;
 8002db6:	e7f0      	b.n	8002d9a <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002db8:	f7ff ffe0 	bl	8002d7c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002dbc:	0020      	movs	r0, r4
 8002dbe:	68e3      	ldr	r3, [r4, #12]
 8002dc0:	4798      	blx	r3
      retVal = true;
 8002dc2:	2501      	movs	r5, #1
 8002dc4:	e7e9      	b.n	8002d9a <PWMC_CurrentReadingCalibr+0xe>
 8002dc6:	46c0      	nop			; (mov r8, r8)

08002dc8 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	0005      	movs	r5, r0
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002dcc:	235c      	movs	r3, #92	; 0x5c
{
 8002dce:	000e      	movs	r6, r1
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	9101      	str	r1, [sp, #4]
 8002dd4:	1c0c      	adds	r4, r1, #0
 8002dd6:	0011      	movs	r1, r2
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002dd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002dda:	5ec0      	ldrsh	r0, [r0, r3]
 8002ddc:	b224      	sxth	r4, r4
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002dde:	13d3      	asrs	r3, r2, #15
 8002de0:	1ae3      	subs	r3, r4, r3
 8002de2:	4343      	muls	r3, r0
 8002de4:	189b      	adds	r3, r3, r2
 8002de6:	636b      	str	r3, [r5, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002de8:	ac02      	add	r4, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002dea:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002dec:	8023      	strh	r3, [r4, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002dee:	6bab      	ldr	r3, [r5, #56]	; 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8002df0:	1436      	asrs	r6, r6, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002df2:	13da      	asrs	r2, r3, #15
 8002df4:	1ab6      	subs	r6, r6, r2
 8002df6:	4370      	muls	r0, r6
 8002df8:	18c0      	adds	r0, r0, r3
 8002dfa:	63a8      	str	r0, [r5, #56]	; 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002dfc:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8002dfe:	8060      	strh	r0, [r4, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8002e00:	9802      	ldr	r0, [sp, #8]
 8002e02:	f7ff fb03 	bl	800240c <MCM_Rev_Park>

    /* reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 8002e06:	2356      	movs	r3, #86	; 0x56
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8002e08:	b202      	sxth	r2, r0
    pHandle->IaEst = ialpha_beta.alpha;
 8002e0a:	52ea      	strh	r2, [r5, r3]

    temp1 = - ialpha_beta.alpha;
 8002e0c:	4252      	negs	r2, r2
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /*Ib*/
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8002e0e:	b293      	uxth	r3, r2
 8002e10:	0c00      	lsrs	r0, r0, #16
 8002e12:	1a19      	subs	r1, r3, r0
 8002e14:	b209      	sxth	r1, r1
 8002e16:	0fca      	lsrs	r2, r1, #31
 8002e18:	1852      	adds	r2, r2, r1
 8002e1a:	2158      	movs	r1, #88	; 0x58
 8002e1c:	1052      	asrs	r2, r2, #1
 8002e1e:	526a      	strh	r2, [r5, r1]

    /*Ic*/
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8002e20:	225a      	movs	r2, #90	; 0x5a
 8002e22:	181b      	adds	r3, r3, r0
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	0fd8      	lsrs	r0, r3, #31
 8002e28:	18c3      	adds	r3, r0, r3
 8002e2a:	105b      	asrs	r3, r3, #1
 8002e2c:	52ab      	strh	r3, [r5, r2]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
}
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)

08002e34 <PWMC_CheckOverCurrent>:
  *	@param  pHandle: Handler of the current instance of the PWM component.
  * @retval #MC_BREAK_IN if an overcurrent has occurred since last call,
  *         and #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8002e34:	b510      	push	{r4, lr}
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002e36:	6983      	ldr	r3, [r0, #24]
 8002e38:	4798      	blx	r3
#endif
}
 8002e3a:	bd10      	pop	{r4, pc}

08002e3c <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002e3c:	23b8      	movs	r3, #184	; 0xb8
 8002e3e:	58c3      	ldr	r3, [r0, r3]
{
 8002e40:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002e42:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8002e44:	2400      	movs	r4, #0
 8002e46:	23b3      	movs	r3, #179	; 0xb3
 8002e48:	54c4      	strb	r4, [r0, r3]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002e4a:	6853      	ldr	r3, [r2, #4]
 8002e4c:	3470      	adds	r4, #112	; 0x70
 8002e4e:	43a3      	bics	r3, r4
 8002e50:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput( TIMx, LL_TIM_TRGO_RESET );
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8002e52:	239c      	movs	r3, #156	; 0x9c
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8002e54:	2288      	movs	r2, #136	; 0x88
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8002e56:	5ac3      	ldrh	r3, [r0, r3]
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8002e58:	5882      	ldr	r2, [r0, r2]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
 8002e5a:	4c89      	ldr	r4, [pc, #548]	; (8003080 <R1_GetPhaseCurrents+0x244>)
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8002e5c:	1a9b      	subs	r3, r3, r2
  if (wAux1 > -INT16_MAX)
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	db16      	blt.n	8002e90 <R1_GetPhaseCurrents+0x54>
  {
    if (wAux1 < INT16_MAX)
 8002e62:	4c88      	ldr	r4, [pc, #544]	; (8003084 <R1_GetPhaseCurrents+0x248>)
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	dc17      	bgt.n	8002e98 <R1_GetPhaseCurrents+0x5c>
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 8002e68:	249e      	movs	r4, #158	; 0x9e
 8002e6a:	5b04      	ldrh	r4, [r0, r4]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8002e6c:	1aa2      	subs	r2, r4, r2

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
 8002e6e:	4c84      	ldr	r4, [pc, #528]	; (8003080 <R1_GetPhaseCurrents+0x244>)
 8002e70:	42a2      	cmp	r2, r4
 8002e72:	db0b      	blt.n	8002e8c <R1_GetPhaseCurrents+0x50>
  {
    if (wAux2 < INT16_MAX)
 8002e74:	4c83      	ldr	r4, [pc, #524]	; (8003084 <R1_GetPhaseCurrents+0x248>)
 8002e76:	42a2      	cmp	r2, r4
 8002e78:	dc0c      	bgt.n	8002e94 <R1_GetPhaseCurrents+0x58>
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 8002e7a:	246a      	movs	r4, #106	; 0x6a
 8002e7c:	5d04      	ldrb	r4, [r0, r4]
 8002e7e:	2c05      	cmp	r4, #5
 8002e80:	d900      	bls.n	8002e84 <R1_GetPhaseCurrents+0x48>
 8002e82:	e0fa      	b.n	800307a <R1_GetPhaseCurrents+0x23e>
 8002e84:	4d80      	ldr	r5, [pc, #512]	; (8003088 <R1_GetPhaseCurrents+0x24c>)
 8002e86:	00a4      	lsls	r4, r4, #2
 8002e88:	592c      	ldr	r4, [r5, r4]
 8002e8a:	46a7      	mov	pc, r4
    wAux2 = -INT16_MAX;
 8002e8c:	4a7f      	ldr	r2, [pc, #508]	; (800308c <R1_GetPhaseCurrents+0x250>)
 8002e8e:	e7f4      	b.n	8002e7a <R1_GetPhaseCurrents+0x3e>
    wAux1 = -INT16_MAX;
 8002e90:	4b7e      	ldr	r3, [pc, #504]	; (800308c <R1_GetPhaseCurrents+0x250>)
 8002e92:	e7e9      	b.n	8002e68 <R1_GetPhaseCurrents+0x2c>
      wAux2 = INT16_MAX;
 8002e94:	4a7e      	ldr	r2, [pc, #504]	; (8003090 <R1_GetPhaseCurrents+0x254>)
 8002e96:	e7f0      	b.n	8002e7a <R1_GetPhaseCurrents+0x3e>
      wAux1 = INT16_MAX;
 8002e98:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <R1_GetPhaseCurrents+0x254>)
 8002e9a:	e7e5      	b.n	8002e68 <R1_GetPhaseCurrents+0x2c>
        hCurrB = -hCurrA-hCurrC;
      }
    }
    break;
  case SECTOR_5:
    if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) //iC,-iB are available to be sampled
 8002e9c:	24ad      	movs	r4, #173	; 0xad
 8002e9e:	5d05      	ldrb	r5, [r0, r4]
 8002ea0:	3ca7      	subs	r4, #167	; 0xa7
 8002ea2:	402c      	ands	r4, r5
 8002ea4:	2c06      	cmp	r4, #6
 8002ea6:	d100      	bne.n	8002eaa <R1_GetPhaseCurrents+0x6e>
 8002ea8:	e095      	b.n	8002fd6 <R1_GetPhaseCurrents+0x19a>
      hCurrB = (int16_t) wAux1;
      hCurrA = -hCurrB-hCurrC;
    }
    else
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) //iC, or -iB is available to be sampled
 8002eaa:	2c00      	cmp	r4, #0
 8002eac:	d100      	bne.n	8002eb0 <R1_GetPhaseCurrents+0x74>
 8002eae:	e080      	b.n	8002fb2 <R1_GetPhaseCurrents+0x176>
      {
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=270 degree
 8002eb0:	2569      	movs	r5, #105	; 0x69
 8002eb2:	5d45      	ldrb	r5, [r0, r5]
 8002eb4:	2d01      	cmp	r5, #1
 8002eb6:	d100      	bne.n	8002eba <R1_GetPhaseCurrents+0x7e>
 8002eb8:	e0be      	b.n	8003038 <R1_GetPhaseCurrents+0x1fc>
            hCurrA = 0;
          }
        }
        else  //not START Position
        {
          if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 8002eba:	2c04      	cmp	r4, #4
 8002ebc:	d100      	bne.n	8002ec0 <R1_GetPhaseCurrents+0x84>
 8002ebe:	e0c8      	b.n	8003052 <R1_GetPhaseCurrents+0x216>
            hCurrA = (int16_t) wAux2;
            hCurrB = pHandle->_Super.IbEst;
          }
          else  //0x02 -ib
          {
            wAux1 = -wAux1;
 8002ec0:	425b      	negs	r3, r3
            hCurrB = (int16_t) wAux1;
 8002ec2:	b21d      	sxth	r5, r3
            hCurrA = pHandle->_Super.IaEst;
 8002ec4:	2356      	movs	r3, #86	; 0x56
 8002ec6:	5ec4      	ldrsh	r4, [r0, r3]
 8002ec8:	e06c      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
    if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) //iA,-iB are available to be sampled
 8002eca:	24ad      	movs	r4, #173	; 0xad
 8002ecc:	5d05      	ldrb	r5, [r0, r4]
 8002ece:	3caa      	subs	r4, #170	; 0xaa
 8002ed0:	402c      	ands	r4, r5
 8002ed2:	2c03      	cmp	r4, #3
 8002ed4:	d100      	bne.n	8002ed8 <R1_GetPhaseCurrents+0x9c>
 8002ed6:	e094      	b.n	8003002 <R1_GetPhaseCurrents+0x1c6>
      if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) //iA, or -iB is available to be sampled
 8002ed8:	2c00      	cmp	r4, #0
 8002eda:	d100      	bne.n	8002ede <R1_GetPhaseCurrents+0xa2>
 8002edc:	e076      	b.n	8002fcc <R1_GetPhaseCurrents+0x190>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=330 degree
 8002ede:	2569      	movs	r5, #105	; 0x69
 8002ee0:	5d45      	ldrb	r5, [r0, r5]
 8002ee2:	2d01      	cmp	r5, #1
 8002ee4:	d100      	bne.n	8002ee8 <R1_GetPhaseCurrents+0xac>
 8002ee6:	e09a      	b.n	800301e <R1_GetPhaseCurrents+0x1e2>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK)//iA, is available to be sampled
 8002ee8:	2c01      	cmp	r4, #1
 8002eea:	d1e9      	bne.n	8002ec0 <R1_GetPhaseCurrents+0x84>
            hCurrB = pHandle->_Super.IbEst;
 8002eec:	2358      	movs	r3, #88	; 0x58
            hCurrA = (int16_t) wAux2;
 8002eee:	b214      	sxth	r4, r2
            hCurrB = pHandle->_Super.IbEst;
 8002ef0:	5ec5      	ldrsh	r5, [r0, r3]
 8002ef2:	e057      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
    if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) //iA and -iC are available to be sampled
 8002ef4:	24ad      	movs	r4, #173	; 0xad
 8002ef6:	5d05      	ldrb	r5, [r0, r4]
 8002ef8:	3ca8      	subs	r4, #168	; 0xa8
 8002efa:	402c      	ands	r4, r5
 8002efc:	2c05      	cmp	r4, #5
 8002efe:	d100      	bne.n	8002f02 <R1_GetPhaseCurrents+0xc6>
 8002f00:	e06e      	b.n	8002fe0 <R1_GetPhaseCurrents+0x1a4>
      if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) //iA or -iC is available to be sampled
 8002f02:	2c00      	cmp	r4, #0
 8002f04:	d047      	beq.n	8002f96 <R1_GetPhaseCurrents+0x15a>
        if(pHandle->_Super.AlignFlag == 0x01 ) //START Position     Aligning_angle=30 degree
 8002f06:	2569      	movs	r5, #105	; 0x69
 8002f08:	5d45      	ldrb	r5, [r0, r5]
 8002f0a:	2d01      	cmp	r5, #1
 8002f0c:	d100      	bne.n	8002f10 <R1_GetPhaseCurrents+0xd4>
 8002f0e:	e07c      	b.n	800300a <R1_GetPhaseCurrents+0x1ce>
          if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK)//iA, is available to be sampled
 8002f10:	2c01      	cmp	r4, #1
 8002f12:	d0eb      	beq.n	8002eec <R1_GetPhaseCurrents+0xb0>
            hCurrB = pHandle->_Super.IbEst;
 8002f14:	2258      	movs	r2, #88	; 0x58
 8002f16:	5e85      	ldrsh	r5, [r0, r2]
            hCurrA = -hCurrB-hCurrC;
 8002f18:	1b5b      	subs	r3, r3, r5
 8002f1a:	b21c      	sxth	r4, r3
 8002f1c:	e042      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
    if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) //iB,-iC are available to be sampled
 8002f1e:	24ad      	movs	r4, #173	; 0xad
 8002f20:	5d05      	ldrb	r5, [r0, r4]
 8002f22:	3ca7      	subs	r4, #167	; 0xa7
 8002f24:	402c      	ands	r4, r5
 8002f26:	2c06      	cmp	r4, #6
 8002f28:	d100      	bne.n	8002f2c <R1_GetPhaseCurrents+0xf0>
 8002f2a:	e066      	b.n	8002ffa <R1_GetPhaseCurrents+0x1be>
      if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) //iB, or -iC is available to be sampled
 8002f2c:	2c00      	cmp	r4, #0
 8002f2e:	d040      	beq.n	8002fb2 <R1_GetPhaseCurrents+0x176>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=90 degree
 8002f30:	2569      	movs	r5, #105	; 0x69
 8002f32:	5d45      	ldrb	r5, [r0, r5]
 8002f34:	2d01      	cmp	r5, #1
 8002f36:	d100      	bne.n	8002f3a <R1_GetPhaseCurrents+0xfe>
 8002f38:	e06c      	b.n	8003014 <R1_GetPhaseCurrents+0x1d8>
          if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK)//iB, is available to be sampled
 8002f3a:	2c02      	cmp	r4, #2
 8002f3c:	d013      	beq.n	8002f66 <R1_GetPhaseCurrents+0x12a>
            hCurrA = pHandle->_Super.IaEst;
 8002f3e:	2256      	movs	r2, #86	; 0x56
 8002f40:	5e84      	ldrsh	r4, [r0, r2]
            hCurrB = -hCurrA-hCurrC;
 8002f42:	1b1b      	subs	r3, r3, r4
 8002f44:	b21d      	sxth	r5, r3
 8002f46:	e02d      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
    if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) //iB,-iA are available to be sampled
 8002f48:	24ad      	movs	r4, #173	; 0xad
 8002f4a:	5d05      	ldrb	r5, [r0, r4]
 8002f4c:	3caa      	subs	r4, #170	; 0xaa
 8002f4e:	402c      	ands	r4, r5
 8002f50:	2c03      	cmp	r4, #3
 8002f52:	d04e      	beq.n	8002ff2 <R1_GetPhaseCurrents+0x1b6>
      if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) //iB, or -iA is available to be sampled
 8002f54:	2c00      	cmp	r4, #0
 8002f56:	d034      	beq.n	8002fc2 <R1_GetPhaseCurrents+0x186>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position    Aligning_angle=150 degree
 8002f58:	2569      	movs	r5, #105	; 0x69
 8002f5a:	5d45      	ldrb	r5, [r0, r5]
 8002f5c:	2d01      	cmp	r5, #1
 8002f5e:	d100      	bne.n	8002f62 <R1_GetPhaseCurrents+0x126>
 8002f60:	e071      	b.n	8003046 <R1_GetPhaseCurrents+0x20a>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK)//iB, is available to be sampled
 8002f62:	2c02      	cmp	r4, #2
 8002f64:	d112      	bne.n	8002f8c <R1_GetPhaseCurrents+0x150>
            hCurrA = pHandle->_Super.IaEst;
 8002f66:	2356      	movs	r3, #86	; 0x56
            hCurrB = (int16_t) wAux2;
 8002f68:	b215      	sxth	r5, r2
            hCurrA = pHandle->_Super.IaEst;
 8002f6a:	5ec4      	ldrsh	r4, [r0, r3]
 8002f6c:	e01a      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
    if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) //iC,-iA are available to be sampled
 8002f6e:	24ad      	movs	r4, #173	; 0xad
 8002f70:	5d05      	ldrb	r5, [r0, r4]
 8002f72:	3ca8      	subs	r4, #168	; 0xa8
 8002f74:	402c      	ands	r4, r5
 8002f76:	2c05      	cmp	r4, #5
 8002f78:	d036      	beq.n	8002fe8 <R1_GetPhaseCurrents+0x1ac>
      if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) //iC, or -iA is available to be sampled
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d00b      	beq.n	8002f96 <R1_GetPhaseCurrents+0x15a>
        if(pHandle->_Super.AlignFlag == 0x01) //START Position     Aligning_angle=210 degree
 8002f7e:	2569      	movs	r5, #105	; 0x69
 8002f80:	5d45      	ldrb	r5, [r0, r5]
 8002f82:	2d01      	cmp	r5, #1
 8002f84:	d051      	beq.n	800302a <R1_GetPhaseCurrents+0x1ee>
          if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 8002f86:	2c04      	cmp	r4, #4
 8002f88:	d100      	bne.n	8002f8c <R1_GetPhaseCurrents+0x150>
 8002f8a:	e068      	b.n	800305e <R1_GetPhaseCurrents+0x222>
            wAux1 = -wAux1;
 8002f8c:	425b      	negs	r3, r3
            hCurrA = (int16_t) wAux1;
 8002f8e:	b21c      	sxth	r4, r3
            hCurrB = pHandle->_Super.IbEst;
 8002f90:	2358      	movs	r3, #88	; 0x58
 8002f92:	5ec5      	ldrsh	r5, [r0, r3]
 8002f94:	e006      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
        hCurrA = pHandle->_Super.IaEst;
 8002f96:	2356      	movs	r3, #86	; 0x56
 8002f98:	5ec4      	ldrsh	r4, [r0, r3]
        hCurrC = pHandle->_Super.IcEst;
 8002f9a:	235a      	movs	r3, #90	; 0x5a
        hCurrB = -hCurrA-hCurrC;
 8002f9c:	5ac3      	ldrh	r3, [r0, r3]
 8002f9e:	191b      	adds	r3, r3, r4
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	b21d      	sxth	r5, r3
    break;
  default:
    break;
  }

  pHandle->CurrAOld = hCurrA;
 8002fa4:	22a8      	movs	r2, #168	; 0xa8
 8002fa6:	5284      	strh	r4, [r0, r2]
  pHandle->CurrBOld = hCurrB;
 8002fa8:	3202      	adds	r2, #2
 8002faa:	5285      	strh	r5, [r0, r2]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 8002fac:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 8002fae:	800c      	strh	r4, [r1, #0]
}
 8002fb0:	bd30      	pop	{r4, r5, pc}
        hCurrB = pHandle->_Super.IbEst;
 8002fb2:	2358      	movs	r3, #88	; 0x58
 8002fb4:	5ec5      	ldrsh	r5, [r0, r3]
        hCurrC = pHandle->_Super.IcEst;
 8002fb6:	235a      	movs	r3, #90	; 0x5a
        hCurrA = -hCurrB-hCurrC;
 8002fb8:	5ac4      	ldrh	r4, [r0, r3]
 8002fba:	1964      	adds	r4, r4, r5
 8002fbc:	4264      	negs	r4, r4
 8002fbe:	b224      	sxth	r4, r4
 8002fc0:	e7f0      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
        hCurrB = pHandle->_Super.IbEst;
 8002fc2:	2358      	movs	r3, #88	; 0x58
 8002fc4:	5ec5      	ldrsh	r5, [r0, r3]
        hCurrA = pHandle->_Super.IaEst;
 8002fc6:	2356      	movs	r3, #86	; 0x56
 8002fc8:	5ec4      	ldrsh	r4, [r0, r3]
 8002fca:	e7eb      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
        hCurrA = pHandle->_Super.IaEst;
 8002fcc:	2356      	movs	r3, #86	; 0x56
 8002fce:	5ec4      	ldrsh	r4, [r0, r3]
        hCurrB = pHandle->_Super.IbEst;
 8002fd0:	2358      	movs	r3, #88	; 0x58
 8002fd2:	5ec5      	ldrsh	r5, [r0, r3]
 8002fd4:	e7e6      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      wAux1 = -wAux1;
 8002fd6:	425d      	negs	r5, r3
      hCurrA = -hCurrB-hCurrC;
 8002fd8:	1a9b      	subs	r3, r3, r2
      hCurrB = (int16_t) wAux1;
 8002fda:	b22d      	sxth	r5, r5
      hCurrA = -hCurrB-hCurrC;
 8002fdc:	b21c      	sxth	r4, r3
 8002fde:	e7e1      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      hCurrB = -hCurrA-hCurrC;
 8002fe0:	1a9b      	subs	r3, r3, r2
      hCurrA = (int16_t) wAux2;
 8002fe2:	b214      	sxth	r4, r2
      hCurrB = -hCurrA-hCurrC;
 8002fe4:	b21d      	sxth	r5, r3
 8002fe6:	e7dd      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      wAux1 = -wAux1;
 8002fe8:	425c      	negs	r4, r3
      hCurrB = -hCurrA-hCurrC;
 8002fea:	1a9b      	subs	r3, r3, r2
      hCurrA = (int16_t) wAux1;
 8002fec:	b224      	sxth	r4, r4
      hCurrB = -hCurrA-hCurrC;
 8002fee:	b21d      	sxth	r5, r3
 8002ff0:	e7d8      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      wAux1 = -wAux1;
 8002ff2:	425b      	negs	r3, r3
      hCurrB = (int16_t) wAux2;
 8002ff4:	b215      	sxth	r5, r2
      hCurrA = (int16_t) wAux1;
 8002ff6:	b21c      	sxth	r4, r3
 8002ff8:	e7d4      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      hCurrA = -hCurrB-hCurrC;
 8002ffa:	1a9b      	subs	r3, r3, r2
      hCurrB = (int16_t) wAux2;
 8002ffc:	b215      	sxth	r5, r2
      hCurrA = -hCurrB-hCurrC;
 8002ffe:	b21c      	sxth	r4, r3
 8003000:	e7d0      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
      wAux1 = -wAux1;
 8003002:	425b      	negs	r3, r3
      hCurrA = (int16_t) wAux2;
 8003004:	b214      	sxth	r4, r2
      hCurrB = (int16_t) wAux1;
 8003006:	b21d      	sxth	r5, r3
 8003008:	e7cc      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
          if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK)//iA is available to be sampled and not iC
 800300a:	2c01      	cmp	r4, #1
 800300c:	d011      	beq.n	8003032 <R1_GetPhaseCurrents+0x1f6>
            hCurrB = 0;
 800300e:	2500      	movs	r5, #0
            hCurrA = (int16_t) wAux1;
 8003010:	b21c      	sxth	r4, r3
            hCurrB = 0;
 8003012:	e7c7      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
          if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK)//iB, is available to be sampled
 8003014:	2c02      	cmp	r4, #2
 8003016:	d013      	beq.n	8003040 <R1_GetPhaseCurrents+0x204>
            hCurrA = 0;
 8003018:	2400      	movs	r4, #0
            hCurrB = (int16_t) wAux1;
 800301a:	b21d      	sxth	r5, r3
            hCurrA = 0;
 800301c:	e7c2      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK)//iA, is available to be sampled
 800301e:	2c01      	cmp	r4, #1
 8003020:	d023      	beq.n	800306a <R1_GetPhaseCurrents+0x22e>
            wAux1 = -wAux1;
 8003022:	425d      	negs	r5, r3
            hCurrB = (int16_t) wAux1;
 8003024:	b22d      	sxth	r5, r5
            hCurrA = -hCurrB;
 8003026:	b21c      	sxth	r4, r3
 8003028:	e7bc      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            wAux1 = -wAux1;
 800302a:	425b      	negs	r3, r3
          if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 800302c:	2c04      	cmp	r4, #4
 800302e:	d1ee      	bne.n	800300e <R1_GetPhaseCurrents+0x1d2>
            hCurrA = -hCurrC;
 8003030:	4252      	negs	r2, r2
            hCurrB = 0;
 8003032:	2500      	movs	r5, #0
            hCurrA = -hCurrC;
 8003034:	b214      	sxth	r4, r2
            hCurrB = 0;
 8003036:	e7b5      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            wAux1 = -wAux1;
 8003038:	425b      	negs	r3, r3
          if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK)//iC, is available to be sampled
 800303a:	2c04      	cmp	r4, #4
 800303c:	d1ec      	bne.n	8003018 <R1_GetPhaseCurrents+0x1dc>
            hCurrB = -hCurrC;
 800303e:	4252      	negs	r2, r2
            hCurrA = 0;
 8003040:	2400      	movs	r4, #0
            hCurrB = -hCurrC;
 8003042:	b215      	sxth	r5, r2
 8003044:	e7ae      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
          if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK)//iB, is available to be sampled
 8003046:	2c02      	cmp	r4, #2
 8003048:	d013      	beq.n	8003072 <R1_GetPhaseCurrents+0x236>
            wAux1 = -wAux1;
 800304a:	425c      	negs	r4, r3
            hCurrA = (int16_t) wAux1;
 800304c:	b224      	sxth	r4, r4
            hCurrB = -hCurrA;
 800304e:	b21d      	sxth	r5, r3
 8003050:	e7a8      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            hCurrA = pHandle->_Super.IaEst;
 8003052:	2356      	movs	r3, #86	; 0x56
 8003054:	5ec4      	ldrsh	r4, [r0, r3]
            hCurrB = -hCurrA-hCurrC;
 8003056:	18a2      	adds	r2, r4, r2
 8003058:	4252      	negs	r2, r2
 800305a:	b215      	sxth	r5, r2
 800305c:	e7a2      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            hCurrB = pHandle->_Super.IbEst;
 800305e:	2358      	movs	r3, #88	; 0x58
 8003060:	5ec5      	ldrsh	r5, [r0, r3]
            hCurrA = -hCurrB-hCurrC;
 8003062:	18aa      	adds	r2, r5, r2
 8003064:	4254      	negs	r4, r2
 8003066:	b224      	sxth	r4, r4
 8003068:	e79c      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            hCurrA = (int16_t) wAux2;
 800306a:	b214      	sxth	r4, r2
            hCurrB = -hCurrA;
 800306c:	4252      	negs	r2, r2
 800306e:	b215      	sxth	r5, r2
 8003070:	e798      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
            hCurrB = (int16_t) wAux2;
 8003072:	b215      	sxth	r5, r2
            hCurrA = -hCurrB;
 8003074:	4252      	negs	r2, r2
 8003076:	b214      	sxth	r4, r2
 8003078:	e794      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
  switch (pHandle->_Super.Sector)
 800307a:	2500      	movs	r5, #0
 800307c:	002c      	movs	r4, r5
 800307e:	e791      	b.n	8002fa4 <R1_GetPhaseCurrents+0x168>
 8003080:	ffff8002 	.word	0xffff8002
 8003084:	00007ffe 	.word	0x00007ffe
 8003088:	0800657c 	.word	0x0800657c
 800308c:	ffff8001 	.word	0xffff8001
 8003090:	00007fff 	.word	0x00007fff

08003094 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  /* Derived class members container */
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003094:	23b8      	movs	r3, #184	; 0xb8
 8003096:	58c3      	ldr	r3, [r0, r3]
{
 8003098:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800309a:	685a      	ldr	r2, [r3, #4]
  /* clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 800309c:	2400      	movs	r4, #0
 800309e:	23b3      	movs	r3, #179	; 0xb3
 80030a0:	54c4      	strb	r4, [r0, r3]
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	3470      	adds	r4, #112	; 0x70
 80030a6:	43a3      	bics	r3, r4
 80030a8:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput( TIMx, LL_TIM_TRGO_RESET );
  if ( pHandle->Index < NB_CONVERSIONS )
 80030aa:	23ac      	movs	r3, #172	; 0xac
 80030ac:	5cc2      	ldrb	r2, [r0, r3]
 80030ae:	2a0f      	cmp	r2, #15
 80030b0:	d80a      	bhi.n	80030c8 <R1_HFCurrentsCalibration+0x34>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 80030b2:	3418      	adds	r4, #24
 80030b4:	5905      	ldr	r5, [r0, r4]
 80030b6:	229e      	movs	r2, #158	; 0x9e
 80030b8:	46ac      	mov	ip, r5
 80030ba:	5a82      	ldrh	r2, [r0, r2]
 80030bc:	4462      	add	r2, ip
 80030be:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 80030c0:	5cc2      	ldrb	r2, [r0, r3]
 80030c2:	3201      	adds	r2, #1
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80030cc:	804b      	strh	r3, [r1, #2]

}
 80030ce:	bd30      	pop	{r4, r5, pc}

080030d0 <R1_SetADCSampPointPolarization>:
{
  /* Derived class members container */
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80030d0:	21b8      	movs	r1, #184	; 0xb8
 80030d2:	22a0      	movs	r2, #160	; 0xa0
{
 80030d4:	b530      	push	{r4, r5, lr}
 80030d6:	0003      	movs	r3, r0
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80030d8:	5a82      	ldrh	r2, [r0, r2]
 80030da:	5840      	ldr	r0, [r0, r1]
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 80030e0:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 80030e2:	1909      	adds	r1, r1, r4
 80030e4:	b289      	uxth	r1, r1
 80030e6:	1a55      	subs	r5, r2, r1
 80030e8:	24a2      	movs	r4, #162	; 0xa2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80030ea:	1852      	adds	r2, r2, r1
 80030ec:	21a4      	movs	r1, #164	; 0xa4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80030ee:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80030f0:	525a      	strh	r2, [r3, r1]

  LL_ADC_REG_SetSequencerChannels( ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 80030f2:	2235      	movs	r2, #53	; 0x35
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	5c82      	ldrb	r2, [r0, r2]
 80030f8:	0189      	lsls	r1, r1, #6
 80030fa:	4091      	lsls	r1, r2
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <R1_SetADCSampPointPolarization+0x64>)
 80030fe:	0b49      	lsrs	r1, r1, #13
 8003100:	6291      	str	r1, [r2, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 8003102:	2136      	movs	r1, #54	; 0x36
 8003104:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003106:	2007      	movs	r0, #7
 8003108:	6954      	ldr	r4, [r2, #20]
 800310a:	4384      	bics	r4, r0
 800310c:	4321      	orrs	r1, r4
 800310e:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003110:	68d1      	ldr	r1, [r2, #12]
 8003112:	4809      	ldr	r0, [pc, #36]	; (8003138 <R1_SetADCSampPointPolarization+0x68>)
 8003114:	4008      	ands	r0, r1
 8003116:	2188      	movs	r1, #136	; 0x88
 8003118:	00c9      	lsls	r1, r1, #3
 800311a:	4301      	orrs	r1, r0
 800311c:	60d1      	str	r1, [r2, #12]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if ( pHandle->_Super.SWerror == 1u )
 800311e:	2244      	movs	r2, #68	; 0x44
 8003120:	5a98      	ldrh	r0, [r3, r2]
 8003122:	2801      	cmp	r0, #1
 8003124:	d002      	beq.n	800312c <R1_SetADCSampPointPolarization+0x5c>
    hAux = MC_DURATION;
 8003126:	326f      	adds	r2, #111	; 0x6f
 8003128:	5c98      	ldrb	r0, [r3, r2]
  {
    hAux = MC_DURATION;
    pHandle->_Super.SWerror = 0u;
  }
  return hAux;
}
 800312a:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 800312c:	2100      	movs	r1, #0
 800312e:	5299      	strh	r1, [r3, r2]
 8003130:	e7fb      	b.n	800312a <R1_SetADCSampPointPolarization+0x5a>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40012400 	.word	0x40012400
 8003138:	fffff23f 	.word	0xfffff23f

0800313c <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles( PWMC_Handle_t * pHdl )
{
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	4657      	mov	r7, sl
 8003140:	464e      	mov	r6, r9
 8003142:	4645      	mov	r5, r8
 8003144:	46de      	mov	lr, fp
  PWMC_R1_Handle_t * pHandle = ( PWMC_R1_Handle_t * )pHdl;
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003146:	22b8      	movs	r2, #184	; 0xb8
{
 8003148:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800314a:	5881      	ldr	r1, [r0, r2]
{
 800314c:	b08d      	sub	sp, #52	; 0x34
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800314e:	688a      	ldr	r2, [r1, #8]
 8003150:	9100      	str	r1, [sp, #0]
 8003152:	9205      	str	r2, [sp, #20]
  uint16_t hAux;
  uint8_t max, mid, min;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = pHandle->_Super.CntPhA;
 8003154:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
{
 8003156:	0003      	movs	r3, r0
  aCCRval[0] = pHandle->_Super.CntPhA;
 8003158:	4691      	mov	r9, r2
 800315a:	4649      	mov	r1, r9
 800315c:	aa0a      	add	r2, sp, #40	; 0x28
 800315e:	8011      	strh	r1, [r2, #0]
  aCCRval[1] = pHandle->_Super.CntPhB;
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	5a82      	ldrh	r2, [r0, r2]
 8003164:	a90a      	add	r1, sp, #40	; 0x28
 8003166:	804a      	strh	r2, [r1, #2]
 8003168:	9201      	str	r2, [sp, #4]
  aCCRval[2] = pHandle->_Super.CntPhC;
 800316a:	2242      	movs	r2, #66	; 0x42
 800316c:	5a82      	ldrh	r2, [r0, r2]

  max =  (uint16_t)pHandle->_Super.highDuty;
  mid =  (uint16_t)pHandle->_Super.midDuty;
  min =  (uint16_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 800316e:	2400      	movs	r4, #0
  aCCRval[2] = pHandle->_Super.CntPhC;
 8003170:	808a      	strh	r2, [r1, #4]
 8003172:	9204      	str	r2, [sp, #16]
  max =  (uint16_t)pHandle->_Super.highDuty;
 8003174:	224a      	movs	r2, #74	; 0x4a
 8003176:	5c85      	ldrb	r5, [r0, r2]
  mid =  (uint16_t)pHandle->_Super.midDuty;
 8003178:	3a02      	subs	r2, #2
 800317a:	5c82      	ldrb	r2, [r0, r2]
  min =  (uint16_t)pHandle->_Super.lowDuty;
 800317c:	2046      	movs	r0, #70	; 0x46
 800317e:	5c1e      	ldrb	r6, [r3, r0]
  pHandle->iflag=0x00;
 8003180:	3067      	adds	r0, #103	; 0x67
 8003182:	541c      	strb	r4, [r3, r0]

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[max]-aCCRval[mid];
 8003184:	0068      	lsls	r0, r5, #1
 8003186:	5e41      	ldrsh	r1, [r0, r1]
 8003188:	0052      	lsls	r2, r2, #1
 800318a:	9106      	str	r1, [sp, #24]
 800318c:	a90a      	add	r1, sp, #40	; 0x28
 800318e:	5a08      	ldrh	r0, [r1, r0]
 8003190:	5e51      	ldrsh	r1, [r2, r1]
 8003192:	9009      	str	r0, [sp, #36]	; 0x24
 8003194:	9102      	str	r1, [sp, #8]
 8003196:	a90a      	add	r1, sp, #40	; 0x28
 8003198:	5a8a      	ldrh	r2, [r1, r2]
  submax_mid_deltmin = submax_mid - pHandle->pParams_str->TMin;
 800319a:	9900      	ldr	r1, [sp, #0]
  submax_mid = aCCRval[max]-aCCRval[mid];
 800319c:	4694      	mov	ip, r2
  submax_mid_deltmin = submax_mid - pHandle->pParams_str->TMin;
 800319e:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80031a0:	4661      	mov	r1, ip
 80031a2:	1a80      	subs	r0, r0, r2
 80031a4:	9203      	str	r2, [sp, #12]
 80031a6:	1a40      	subs	r0, r0, r1
  submid_min = aCCRval[mid]-aCCRval[min];
 80031a8:	0072      	lsls	r2, r6, #1
 80031aa:	a90a      	add	r1, sp, #40	; 0x28
 80031ac:	5e51      	ldrsh	r1, [r2, r1]
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 80031ae:	9a03      	ldr	r2, [sp, #12]
  submid_min = aCCRval[mid]-aCCRval[min];
 80031b0:	4688      	mov	r8, r1
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 80031b2:	4661      	mov	r1, ip
 80031b4:	1a8a      	subs	r2, r1, r2
 80031b6:	4641      	mov	r1, r8
 80031b8:	1a52      	subs	r2, r2, r1
 80031ba:	b291      	uxth	r1, r2
 80031bc:	9107      	str	r1, [sp, #28]
  pHandle->aShiftval[0]=0;
 80031be:	2190      	movs	r1, #144	; 0x90
  submax_mid_deltmin = submax_mid - pHandle->pParams_str->TMin;
 80031c0:	b200      	sxth	r0, r0
  pHandle->aShiftval[0]=0;
 80031c2:	505c      	str	r4, [r3, r1]
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 80031c4:	3104      	adds	r1, #4
  submid_min_deltmin = submid_min - pHandle->pParams_str->TMin;
 80031c6:	b212      	sxth	r2, r2
  pHandle->aShiftval[2]=0;
 80031c8:	525c      	strh	r4, [r3, r1]
  max_bad_flag = 0;
  min_bad_flag = 0;

  if(submax_mid_deltmin > 0)
 80031ca:	2800      	cmp	r0, #0
 80031cc:	dc00      	bgt.n	80031d0 <R1_CalcDutyCycles+0x94>
 80031ce:	e0dc      	b.n	800338a <R1_CalcDutyCycles+0x24e>
  {
    pHandle->iflag |= ALFLAG[max];
 80031d0:	48ab      	ldr	r0, [pc, #684]	; (8003480 <R1_CalcDutyCycles+0x344>)
  }
  else
  {
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 80031d2:	9900      	ldr	r1, [sp, #0]
    pHandle->iflag |= ALFLAG[max];
 80031d4:	5744      	ldrsb	r4, [r0, r5]
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 80031d6:	25a0      	movs	r5, #160	; 0xa0
 80031d8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 80031da:	468a      	mov	sl, r1
 80031dc:	9108      	str	r1, [sp, #32]
 80031de:	5b59      	ldrh	r1, [r3, r5]
 80031e0:	468b      	mov	fp, r1
      pHandle->iflag |= ALFLAG[max];
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
    }
  }

  if(submid_min_deltmin > 0)
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	dc0f      	bgt.n	8003206 <R1_CalcDutyCycles+0xca>
  {
    pHandle->iflag |= ALFLAG[min];
  }
  else
  {
    if((submid_min_deltmin-1+aCCRval[min])<0)
 80031e6:	4641      	mov	r1, r8
 80031e8:	3a01      	subs	r2, #1
 80031ea:	42ca      	cmn	r2, r1
 80031ec:	d500      	bpl.n	80031f0 <R1_CalcDutyCycles+0xb4>
 80031ee:	e0e7      	b.n	80033c0 <R1_CalcDutyCycles+0x284>
      pHandle->iflag &= ~ALFLAG[min];
      min_bad_flag = 1;
    }
    else
    {
      pHandle->iflag |= ALFLAG[min];
 80031f0:	5d82      	ldrb	r2, [r0, r6]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 80031f2:	9807      	ldr	r0, [sp, #28]
      pHandle->iflag |= ALFLAG[min];
 80031f4:	4314      	orrs	r4, r2
 80031f6:	22ad      	movs	r2, #173	; 0xad
 80031f8:	549c      	strb	r4, [r3, r2]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 80031fa:	0032      	movs	r2, r6
 80031fc:	3248      	adds	r2, #72	; 0x48
 80031fe:	0052      	lsls	r2, r2, #1
 8003200:	3801      	subs	r0, #1
 8003202:	52d0      	strh	r0, [r2, r3]
    }
  }

  if((max_bad_flag == 0) && (min_bad_flag == 0))
 8003204:	e003      	b.n	800320e <R1_CalcDutyCycles+0xd2>
    pHandle->iflag |= ALFLAG[min];
 8003206:	5d82      	ldrb	r2, [r0, r6]
 8003208:	4314      	orrs	r4, r2
 800320a:	22ad      	movs	r2, #173	; 0xad
 800320c:	549c      	strb	r4, [r3, r2]
  {
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample;
 800320e:	9a00      	ldr	r2, [sp, #0]
 8003210:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8003212:	0011      	movs	r1, r2
 8003214:	9207      	str	r2, [sp, #28]
 8003216:	4662      	mov	r2, ip
 8003218:	1a52      	subs	r2, r2, r1
 800321a:	b212      	sxth	r2, r2
 800321c:	9202      	str	r2, [sp, #8]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 800321e:	9a03      	ldr	r2, [sp, #12]
 8003220:	1a52      	subs	r2, r2, r1
 8003222:	4462      	add	r2, ip
  pHandle->CntSmp2 = SamplePoint2;

  /* critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003224:	2090      	movs	r0, #144	; 0x90
 8003226:	4649      	mov	r1, r9
 8003228:	5a1d      	ldrh	r5, [r3, r0]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 800322a:	b212      	sxth	r2, r2
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 800322c:	1948      	adds	r0, r1, r5
 800322e:	b281      	uxth	r1, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003230:	2092      	movs	r0, #146	; 0x92
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003232:	9106      	str	r1, [sp, #24]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003234:	5a1c      	ldrh	r4, [r3, r0]
 8003236:	9901      	ldr	r1, [sp, #4]
 8003238:	190f      	adds	r7, r1, r4
 800323a:	b2b8      	uxth	r0, r7
 800323c:	9001      	str	r0, [sp, #4]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800323e:	2094      	movs	r0, #148	; 0x94
 8003240:	9f04      	ldr	r7, [sp, #16]
 8003242:	5a18      	ldrh	r0, [r3, r0]
    // second half PWM period CCR value transfered by DMA
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003244:	1b0c      	subs	r4, r1, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003246:	183e      	adds	r6, r7, r0
 8003248:	b2b6      	uxth	r6, r6
 800324a:	9604      	str	r6, [sp, #16]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800324c:	464e      	mov	r6, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800324e:	1a38      	subs	r0, r7, r0
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003250:	1b75      	subs	r5, r6, r5
 8003252:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003254:	b2a4      	uxth	r4, r4
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003256:	b280      	uxth	r0, r0
  if((SamplePoint2-SamplePoint1) < pHandle->pParams_str->hTADConv)
 8003258:	9902      	ldr	r1, [sp, #8]
 800325a:	1a51      	subs	r1, r2, r1
 800325c:	4551      	cmp	r1, sl
 800325e:	da14      	bge.n	800328a <R1_CalcDutyCycles+0x14e>
    SamplePoint1 = aCCRval[mid]-((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2;
 8003260:	4652      	mov	r2, sl
 8003262:	9903      	ldr	r1, [sp, #12]
 8003264:	1a52      	subs	r2, r2, r1
 8003266:	0fd6      	lsrs	r6, r2, #31
 8003268:	46b1      	mov	r9, r6
 800326a:	4491      	add	r9, r2
 800326c:	464a      	mov	r2, r9
 800326e:	4666      	mov	r6, ip
 8003270:	1052      	asrs	r2, r2, #1
 8003272:	1ab2      	subs	r2, r6, r2
 8003274:	b212      	sxth	r2, r2
 8003276:	9202      	str	r2, [sp, #8]
    SamplePoint2 = aCCRval[mid]+(pHandle->pParams_str->TMin) - pHandle->pParams_str->TSample +((pHandle->pParams_str->hTADConv)-(pHandle->pParams_str->TMin))/2+1;
 8003278:	1c4a      	adds	r2, r1, #1
 800327a:	9907      	ldr	r1, [sp, #28]
 800327c:	4462      	add	r2, ip
 800327e:	1a52      	subs	r2, r2, r1
 8003280:	4649      	mov	r1, r9
 8003282:	1049      	asrs	r1, r1, #1
 8003284:	4689      	mov	r9, r1
 8003286:	444a      	add	r2, r9
 8003288:	b212      	sxth	r2, r2
  if ((SamplePoint2 >= pHandle->Half_PWMPeriod)||(SamplePoint2 <= 0))
 800328a:	4593      	cmp	fp, r2
 800328c:	dc00      	bgt.n	8003290 <R1_CalcDutyCycles+0x154>
 800328e:	e079      	b.n	8003384 <R1_CalcDutyCycles+0x248>
 8003290:	2a00      	cmp	r2, #0
 8003292:	dc00      	bgt.n	8003296 <R1_CalcDutyCycles+0x15a>
 8003294:	e076      	b.n	8003384 <R1_CalcDutyCycles+0x248>
    SamplePoint2 = pHandle->Half_PWMPeriod-1;
 8003296:	b292      	uxth	r2, r2
 8003298:	4692      	mov	sl, r2
  if ((SamplePoint1 >= pHandle->Half_PWMPeriod)||(SamplePoint1 <= 0))
 800329a:	9a02      	ldr	r2, [sp, #8]
 800329c:	4593      	cmp	fp, r2
 800329e:	dd6e      	ble.n	800337e <R1_CalcDutyCycles+0x242>
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	dd6c      	ble.n	800337e <R1_CalcDutyCycles+0x242>
    SamplePoint1 = pHandle->Half_PWMPeriod-1;
 80032a4:	b292      	uxth	r2, r2
 80032a6:	4693      	mov	fp, r2
  pHandle->CntSmp1 = SamplePoint1;
 80032a8:	22a2      	movs	r2, #162	; 0xa2
 80032aa:	4659      	mov	r1, fp
 80032ac:	5299      	strh	r1, [r3, r2]
  pHandle->CntSmp2 = SamplePoint2;
 80032ae:	4651      	mov	r1, sl
 80032b0:	3202      	adds	r2, #2
 80032b2:	5299      	strh	r1, [r3, r2]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	4a73      	ldr	r2, [pc, #460]	; (8003484 <R1_CalcDutyCycles+0x348>)
 80032b8:	6989      	ldr	r1, [r1, #24]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80032ba:	9f01      	ldr	r7, [sp, #4]
 80032bc:	468c      	mov	ip, r1
 80032be:	9905      	ldr	r1, [sp, #20]
 80032c0:	4462      	add	r2, ip
 80032c2:	468c      	mov	ip, r1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	4462      	add	r2, ip
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	4688      	mov	r8, r1
 80032ce:	2102      	movs	r1, #2
 80032d0:	4689      	mov	r9, r1
 80032d2:	4641      	mov	r1, r8
 80032d4:	464e      	mov	r6, r9
 80032d6:	43b1      	bics	r1, r6
 80032d8:	6011      	str	r1, [r2, #0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80032da:	217c      	movs	r1, #124	; 0x7c
 80032dc:	000e      	movs	r6, r1
 80032de:	9906      	ldr	r1, [sp, #24]
 80032e0:	5399      	strh	r1, [r3, r6]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80032e2:	3602      	adds	r6, #2
 80032e4:	539f      	strh	r7, [r3, r6]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80032e6:	9f04      	ldr	r7, [sp, #16]
 80032e8:	3602      	adds	r6, #2
 80032ea:	539f      	strh	r7, [r3, r6]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 80032ec:	3602      	adds	r6, #2
 80032ee:	539d      	strh	r5, [r3, r6]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 80032f0:	3602      	adds	r6, #2
 80032f2:	539c      	strh	r4, [r3, r6]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 80032f4:	3602      	adds	r6, #2
 80032f6:	5398      	strh	r0, [r3, r6]

  if ( pHandle->TCDoneFlag == true )
 80032f8:	362e      	adds	r6, #46	; 0x2e
 80032fa:	5d9e      	ldrb	r6, [r3, r6]
 80032fc:	2e00      	cmp	r6, #0
 80032fe:	d010      	beq.n	8003322 <R1_CalcDutyCycles+0x1e6>
  {
    // first half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8003300:	2670      	movs	r6, #112	; 0x70
 8003302:	5399      	strh	r1, [r3, r6]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8003304:	2172      	movs	r1, #114	; 0x72
 8003306:	9e01      	ldr	r6, [sp, #4]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8003308:	2774      	movs	r7, #116	; 0x74
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 800330a:	525e      	strh	r6, [r3, r1]
    // second half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 800330c:	2676      	movs	r6, #118	; 0x76
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 800330e:	9904      	ldr	r1, [sp, #16]
 8003310:	53d9      	strh	r1, [r3, r7]
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8003312:	539d      	strh	r5, [r3, r6]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8003314:	2578      	movs	r5, #120	; 0x78
 8003316:	535c      	strh	r4, [r3, r5]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8003318:	247a      	movs	r4, #122	; 0x7a
  WRITE_REG(TIMx->CCR4, CompareValue);
 800331a:	4659      	mov	r1, fp
 800331c:	5318      	strh	r0, [r3, r4]
 800331e:	485a      	ldr	r0, [pc, #360]	; (8003488 <R1_CalcDutyCycles+0x34c>)
 8003320:	6401      	str	r1, [r0, #64]	; 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003322:	2402      	movs	r4, #2
 8003324:	6810      	ldr	r0, [r2, #0]
    /* do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels( ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 8003326:	9900      	ldr	r1, [sp, #0]
 8003328:	4320      	orrs	r0, r4
 800332a:	6010      	str	r0, [r2, #0]
 800332c:	2235      	movs	r2, #53	; 0x35
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800332e:	2080      	movs	r0, #128	; 0x80
 8003330:	5c8a      	ldrb	r2, [r1, r2]
 8003332:	0180      	lsls	r0, r0, #6
 8003334:	4090      	lsls	r0, r2
 8003336:	4a55      	ldr	r2, [pc, #340]	; (800348c <R1_CalcDutyCycles+0x350>)
 8003338:	0b40      	lsrs	r0, r0, #13
 800333a:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800333c:	6950      	ldr	r0, [r2, #20]
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 800333e:	3434      	adds	r4, #52	; 0x34
 8003340:	5d09      	ldrb	r1, [r1, r4]
 8003342:	3c2f      	subs	r4, #47	; 0x2f
 8003344:	43a0      	bics	r0, r4
 8003346:	4301      	orrs	r1, r0
 8003348:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800334a:	68d1      	ldr	r1, [r2, #12]
 800334c:	4850      	ldr	r0, [pc, #320]	; (8003490 <R1_CalcDutyCycles+0x354>)
 800334e:	4008      	ands	r0, r1
 8003350:	2188      	movs	r1, #136	; 0x88
 8003352:	00c9      	lsls	r1, r1, #3
 8003354:	4301      	orrs	r1, r0
 8003356:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8003358:	2296      	movs	r2, #150	; 0x96
 800335a:	4651      	mov	r1, sl
 800335c:	5299      	strh	r1, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 800335e:	4659      	mov	r1, fp
 8003360:	3204      	adds	r2, #4
 8003362:	5299      	strh	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if ( pHandle->_Super.SWerror == 1u )
 8003364:	3a56      	subs	r2, #86	; 0x56
 8003366:	5a98      	ldrh	r0, [r3, r2]
 8003368:	2801      	cmp	r0, #1
 800336a:	d026      	beq.n	80033ba <R1_CalcDutyCycles+0x27e>
    hAux = MC_DURATION;
 800336c:	326f      	adds	r2, #111	; 0x6f
 800336e:	5c98      	ldrb	r0, [r3, r2]
    hAux = MC_DURATION;
    pHandle->_Super.SWerror = 0u;
  }

  return (hAux);
}
 8003370:	b00d      	add	sp, #52	; 0x34
 8003372:	bcf0      	pop	{r4, r5, r6, r7}
 8003374:	46bb      	mov	fp, r7
 8003376:	46b2      	mov	sl, r6
 8003378:	46a9      	mov	r9, r5
 800337a:	46a0      	mov	r8, r4
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SamplePoint1 = pHandle->Half_PWMPeriod-1;
 800337e:	465a      	mov	r2, fp
 8003380:	3a01      	subs	r2, #1
 8003382:	e78f      	b.n	80032a4 <R1_CalcDutyCycles+0x168>
    SamplePoint2 = pHandle->Half_PWMPeriod-1;
 8003384:	465a      	mov	r2, fp
 8003386:	3a01      	subs	r2, #1
 8003388:	e785      	b.n	8003296 <R1_CalcDutyCycles+0x15a>
    if((1-submax_mid_deltmin+aCCRval[max]+pHandle->pParams_str->hTADConv)>(pHandle->Half_PWMPeriod))
 800338a:	9900      	ldr	r1, [sp, #0]
 800338c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 800338e:	468a      	mov	sl, r1
 8003390:	9108      	str	r1, [sp, #32]
 8003392:	21a0      	movs	r1, #160	; 0xa0
 8003394:	5a59      	ldrh	r1, [r3, r1]
 8003396:	468b      	mov	fp, r1
 8003398:	9906      	ldr	r1, [sp, #24]
 800339a:	1a0c      	subs	r4, r1, r0
 800339c:	3401      	adds	r4, #1
 800339e:	4454      	add	r4, sl
 80033a0:	455c      	cmp	r4, fp
 80033a2:	dc1c      	bgt.n	80033de <R1_CalcDutyCycles+0x2a2>
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
 80033a4:	9903      	ldr	r1, [sp, #12]
      pHandle->iflag |= ALFLAG[max];
 80033a6:	4836      	ldr	r0, [pc, #216]	; (8003480 <R1_CalcDutyCycles+0x344>)
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
 80033a8:	1c4f      	adds	r7, r1, #1
 80033aa:	9909      	ldr	r1, [sp, #36]	; 0x24
      pHandle->iflag |= ALFLAG[max];
 80033ac:	5744      	ldrsb	r4, [r0, r5]
      pHandle->aShiftval[max] = 1- submax_mid_deltmin;
 80033ae:	4467      	add	r7, ip
 80033b0:	3548      	adds	r5, #72	; 0x48
 80033b2:	006d      	lsls	r5, r5, #1
 80033b4:	1a7f      	subs	r7, r7, r1
 80033b6:	52ef      	strh	r7, [r5, r3]
 80033b8:	e713      	b.n	80031e2 <R1_CalcDutyCycles+0xa6>
    pHandle->_Super.SWerror = 0u;
 80033ba:	2100      	movs	r1, #0
 80033bc:	5299      	strh	r1, [r3, r2]
  return (hAux);
 80033be:	e7d7      	b.n	8003370 <R1_CalcDutyCycles+0x234>
      pHandle->iflag &= ~ALFLAG[min];
 80033c0:	5d82      	ldrb	r2, [r0, r6]
 80033c2:	4394      	bics	r4, r2
 80033c4:	22ad      	movs	r2, #173	; 0xad
 80033c6:	549c      	strb	r4, [r3, r2]
    SamplePoint2 = aCCRval[mid] + pHandle->pParams_str->hTADConv + pHandle->pParams_str->TMin - pHandle->pParams_str->TSample;
 80033c8:	9a00      	ldr	r2, [sp, #0]
 80033ca:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80033cc:	0011      	movs	r1, r2
 80033ce:	9207      	str	r2, [sp, #28]
 80033d0:	9a03      	ldr	r2, [sp, #12]
 80033d2:	1a52      	subs	r2, r2, r1
 80033d4:	9908      	ldr	r1, [sp, #32]
 80033d6:	4462      	add	r2, ip
 80033d8:	4688      	mov	r8, r1
 80033da:	4442      	add	r2, r8
 80033dc:	e722      	b.n	8003224 <R1_CalcDutyCycles+0xe8>
  if(submid_min_deltmin > 0)
 80033de:	2a00      	cmp	r2, #0
 80033e0:	dd14      	ble.n	800340c <R1_CalcDutyCycles+0x2d0>
    pHandle->iflag |= ALFLAG[min];
 80033e2:	21ad      	movs	r1, #173	; 0xad
 80033e4:	464d      	mov	r5, r9
 80033e6:	4a26      	ldr	r2, [pc, #152]	; (8003480 <R1_CalcDutyCycles+0x344>)
 80033e8:	9804      	ldr	r0, [sp, #16]
 80033ea:	5d92      	ldrb	r2, [r2, r6]
 80033ec:	9c01      	ldr	r4, [sp, #4]
 80033ee:	545a      	strb	r2, [r3, r1]
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample- pHandle->pParams_str->hTADConv;
 80033f0:	9a00      	ldr	r2, [sp, #0]
 80033f2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80033f4:	0011      	movs	r1, r2
 80033f6:	9207      	str	r2, [sp, #28]
 80033f8:	4662      	mov	r2, ip
 80033fa:	1a52      	subs	r2, r2, r1
 80033fc:	4651      	mov	r1, sl
 80033fe:	1a51      	subs	r1, r2, r1
    SamplePoint2 = aCCRval[mid];
 8003400:	464a      	mov	r2, r9
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample- pHandle->pParams_str->hTADConv;
 8003402:	b209      	sxth	r1, r1
 8003404:	9206      	str	r2, [sp, #24]
    SamplePoint2 = aCCRval[mid];
 8003406:	9a02      	ldr	r2, [sp, #8]
    SamplePoint1 = aCCRval[mid] - pHandle->pParams_str->TSample- pHandle->pParams_str->hTADConv;
 8003408:	9102      	str	r1, [sp, #8]
 800340a:	e725      	b.n	8003258 <R1_CalcDutyCycles+0x11c>
    if((submid_min_deltmin-1+aCCRval[min])<0)
 800340c:	4641      	mov	r1, r8
 800340e:	3a01      	subs	r2, #1
 8003410:	42ca      	cmn	r2, r1
 8003412:	d426      	bmi.n	8003462 <R1_CalcDutyCycles+0x326>
      pHandle->iflag |= ALFLAG[min];
 8003414:	21ad      	movs	r1, #173	; 0xad
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <R1_CalcDutyCycles+0x344>)
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8003418:	9807      	ldr	r0, [sp, #28]
      pHandle->iflag |= ALFLAG[min];
 800341a:	5d92      	ldrb	r2, [r2, r6]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 800341c:	3801      	subs	r0, #1
      pHandle->iflag |= ALFLAG[min];
 800341e:	545a      	strb	r2, [r3, r1]
      pHandle->aShiftval[min] = submid_min_deltmin - 1;
 8003420:	0032      	movs	r2, r6
 8003422:	3248      	adds	r2, #72	; 0x48
 8003424:	0052      	lsls	r2, r2, #1
 8003426:	52d0      	strh	r0, [r2, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8003428:	2290      	movs	r2, #144	; 0x90
 800342a:	5a9d      	ldrh	r5, [r3, r2]
 800342c:	464a      	mov	r2, r9
 800342e:	1957      	adds	r7, r2, r5
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8003430:	2292      	movs	r2, #146	; 0x92
 8003432:	9901      	ldr	r1, [sp, #4]
 8003434:	5a9c      	ldrh	r4, [r3, r2]
 8003436:	4688      	mov	r8, r1
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003438:	3202      	adds	r2, #2
 800343a:	5a98      	ldrh	r0, [r3, r2]
 800343c:	9a04      	ldr	r2, [sp, #16]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800343e:	44a0      	add	r8, r4
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8003440:	1812      	adds	r2, r2, r0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003442:	b292      	uxth	r2, r2
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8003444:	1b0c      	subs	r4, r1, r4
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003446:	9904      	ldr	r1, [sp, #16]
 8003448:	9204      	str	r2, [sp, #16]
 800344a:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800344c:	464e      	mov	r6, r9
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800344e:	b292      	uxth	r2, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8003450:	1b75      	subs	r5, r6, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8003452:	1a08      	subs	r0, r1, r0
 8003454:	9201      	str	r2, [sp, #4]
 8003456:	b2ba      	uxth	r2, r7
 8003458:	4691      	mov	r9, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800345a:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 800345c:	b2a4      	uxth	r4, r4
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800345e:	b280      	uxth	r0, r0
 8003460:	e7c6      	b.n	80033f0 <R1_CalcDutyCycles+0x2b4>
    SamplePoint1 = pHandle->Half_PWMPeriod / 2;
 8003462:	465a      	mov	r2, fp
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 8003464:	9900      	ldr	r1, [sp, #0]
    SamplePoint1 = pHandle->Half_PWMPeriod / 2;
 8003466:	0852      	lsrs	r2, r2, #1
 8003468:	9202      	str	r2, [sp, #8]
    SamplePoint2 = SamplePoint1 + pHandle->pParams_str->TSample + pHandle->pParams_str->hTADConv;
 800346a:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 800346c:	464d      	mov	r5, r9
 800346e:	4688      	mov	r8, r1
 8003470:	4452      	add	r2, sl
 8003472:	4442      	add	r2, r8
 8003474:	9804      	ldr	r0, [sp, #16]
 8003476:	9c01      	ldr	r4, [sp, #4]
 8003478:	9107      	str	r1, [sp, #28]
 800347a:	b212      	sxth	r2, r2
 800347c:	9506      	str	r5, [sp, #24]
 800347e:	e6eb      	b.n	8003258 <R1_CalcDutyCycles+0x11c>
 8003480:	08006594 	.word	0x08006594
 8003484:	08006598 	.word	0x08006598
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40012400 	.word	0x40012400
 8003490:	fffff23f 	.word	0xfffff23f

08003494 <R1_Init>:
{
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003496:	23b8      	movs	r3, #184	; 0xb8
{
 8003498:	4657      	mov	r7, sl
 800349a:	464e      	mov	r6, r9
 800349c:	4645      	mov	r5, r8
 800349e:	46de      	mov	lr, fp
 80034a0:	b5e0      	push	{r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80034a2:	58c5      	ldr	r5, [r0, r3]
{
 80034a4:	b085      	sub	sp, #20
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 80034a6:	68aa      	ldr	r2, [r5, #8]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80034a8:	686b      	ldr	r3, [r5, #4]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 80034aa:	4694      	mov	ip, r2
  pHandle->iflag = 0;
 80034ac:	2200      	movs	r2, #0
 80034ae:	4690      	mov	r8, r2
 80034b0:	4644      	mov	r4, r8
 80034b2:	32ad      	adds	r2, #173	; 0xad
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80034b4:	6829      	ldr	r1, [r5, #0]
  pHandle->iflag = 0;
 80034b6:	5484      	strb	r4, [r0, r2]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80034b8:	3a4d      	subs	r2, #77	; 0x4d
 80034ba:	5a82      	ldrh	r2, [r0, r2]
 80034bc:	34a0      	adds	r4, #160	; 0xa0
 80034be:	0857      	lsrs	r7, r2, #1
 80034c0:	5307      	strh	r7, [r0, r4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80034c2:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 80034c4:	9501      	str	r5, [sp, #4]
 80034c6:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 80034c8:	25a2      	movs	r5, #162	; 0xa2
 80034ca:	19a4      	adds	r4, r4, r6
 80034cc:	0892      	lsrs	r2, r2, #2
 80034ce:	b2a4      	uxth	r4, r4
 80034d0:	1b16      	subs	r6, r2, r4
 80034d2:	b2b6      	uxth	r6, r6
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80034d4:	1914      	adds	r4, r2, r4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80034d6:	5346      	strh	r6, [r0, r5]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80034d8:	b2a4      	uxth	r4, r4
 80034da:	3502      	adds	r5, #2
 80034dc:	5344      	strh	r4, [r0, r5]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80034de:	3d64      	subs	r5, #100	; 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80034e0:	87c2      	strh	r2, [r0, #62]	; 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80034e2:	46aa      	mov	sl, r5
 80034e4:	5342      	strh	r2, [r0, r5]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80034e6:	3502      	adds	r5, #2
 80034e8:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 80034ea:	352e      	adds	r5, #46	; 0x2e
 80034ec:	5342      	strh	r2, [r0, r5]
 80034ee:	46a9      	mov	r9, r5
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 80034f0:	350c      	adds	r5, #12
 80034f2:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR[1]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 80034f4:	3d0a      	subs	r5, #10
 80034f6:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 80034f8:	350c      	adds	r5, #12
 80034fa:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 80034fc:	3d0a      	subs	r5, #10
 80034fe:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 8003500:	350c      	adds	r5, #12
 8003502:	5342      	strh	r2, [r0, r5]
 8003504:	46ab      	mov	fp, r5
  pHandle->DmaBuffCCR[3]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 8003506:	3d0a      	subs	r5, #10
 8003508:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_latch[3] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 800350a:	350c      	adds	r5, #12
 800350c:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 800350e:	3d0a      	subs	r5, #10
 8003510:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 8003512:	350c      	adds	r5, #12
 8003514:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8003516:	3d0a      	subs	r5, #10
 8003518:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 800351a:	350c      	adds	r5, #12
 800351c:	5342      	strh	r2, [r0, r5]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800351e:	2296      	movs	r2, #150	; 0x96
 8003520:	5284      	strh	r4, [r0, r2]
  pHandle->BrakeActionLock = false;
 8003522:	4644      	mov	r4, r8
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003524:	3f01      	subs	r7, #1
 8003526:	3202      	adds	r2, #2
 8003528:	5287      	strh	r7, [r0, r2]
  SET_BIT(RCC->APB2ENR, Periphs);
 800352a:	2780      	movs	r7, #128	; 0x80
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800352c:	3202      	adds	r2, #2
 800352e:	5286      	strh	r6, [r0, r2]
  pHandle->BrakeActionLock = false;
 8003530:	3218      	adds	r2, #24
 8003532:	5284      	strh	r4, [r0, r2]
 8003534:	4c72      	ldr	r4, [pc, #456]	; (8003700 <R1_Init+0x26c>)
 8003536:	03ff      	lsls	r7, r7, #15
 8003538:	69a6      	ldr	r6, [r4, #24]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 800353a:	9d01      	ldr	r5, [sp, #4]
 800353c:	433e      	orrs	r6, r7
 800353e:	61a6      	str	r6, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003540:	69a2      	ldr	r2, [r4, #24]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8003542:	4c70      	ldr	r4, [pc, #448]	; (8003704 <R1_Init+0x270>)
 8003544:	403a      	ands	r2, r7
 8003546:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8003548:	9a03      	ldr	r2, [sp, #12]
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	68e6      	ldr	r6, [r4, #12]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	4332      	orrs	r2, r6
 8003552:	60e2      	str	r2, [r4, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003554:	2401      	movs	r4, #1
 8003556:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003558:	2708      	movs	r7, #8
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800355a:	43a2      	bics	r2, r4
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800355c:	464c      	mov	r4, r9
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800355e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003560:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003562:	4e69      	ldr	r6, [pc, #420]	; (8003708 <R1_Init+0x274>)
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8003564:	43a2      	bics	r2, r4
 8003566:	4654      	mov	r4, sl
 8003568:	4322      	orrs	r2, r4
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800356a:	464c      	mov	r4, r9
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800356c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	43a2      	bics	r2, r4
 8003572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	43ba      	bics	r2, r7
 8003578:	619a      	str	r2, [r3, #24]
 800357a:	699c      	ldr	r4, [r3, #24]
 800357c:	4034      	ands	r4, r6
 800357e:	619c      	str	r4, [r3, #24]
 8003580:	69dc      	ldr	r4, [r3, #28]
 8003582:	43bc      	bics	r4, r7
 8003584:	61dc      	str	r4, [r3, #28]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	4032      	ands	r2, r6
 800358a:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	6a1c      	ldr	r4, [r3, #32]
 8003590:	0152      	lsls	r2, r2, #5
 8003592:	4322      	orrs	r2, r4
 8003594:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003596:	4642      	mov	r2, r8
 8003598:	2438      	movs	r4, #56	; 0x38
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800359c:	3a81      	subs	r2, #129	; 0x81
 800359e:	611a      	str	r2, [r3, #16]
 80035a0:	5d2c      	ldrb	r4, [r5, r4]
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d004      	beq.n	80035b0 <R1_Init+0x11c>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80035a6:	465c      	mov	r4, fp
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80035a8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4322      	orrs	r2, r4
 80035ae:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 80035b0:	6a1c      	ldr	r4, [r3, #32]
 80035b2:	4a56      	ldr	r2, [pc, #344]	; (800370c <R1_Init+0x278>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80035b4:	9f01      	ldr	r7, [sp, #4]
 80035b6:	4322      	orrs	r2, r4
 80035b8:	621a      	str	r2, [r3, #32]
 80035ba:	4e55      	ldr	r6, [pc, #340]	; (8003710 <R1_Init+0x27c>)
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4d55      	ldr	r5, [pc, #340]	; (8003714 <R1_Init+0x280>)
 80035c0:	18b2      	adds	r2, r6, r2
 80035c2:	3a01      	subs	r2, #1
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	46a8      	mov	r8, r5
 80035c8:	4462      	add	r2, ip
 80035ca:	6814      	ldr	r4, [r2, #0]
 80035cc:	402c      	ands	r4, r5
 80035ce:	4d52      	ldr	r5, [pc, #328]	; (8003718 <R1_Init+0x284>)
 80035d0:	432c      	orrs	r4, r5
 80035d2:	6014      	str	r4, [r2, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 80035d4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80035d6:	46aa      	mov	sl, r5
 80035d8:	4d50      	ldr	r5, [pc, #320]	; (800371c <R1_Init+0x288>)
 80035da:	4025      	ands	r5, r4
 80035dc:	4c50      	ldr	r4, [pc, #320]	; (8003720 <R1_Init+0x28c>)
 80035de:	432c      	orrs	r4, r5
 80035e0:	649c      	str	r4, [r3, #72]	; 0x48
  LL_DMA_SetMemoryAddress( DMAx, pHandle->pParams_str->DMAChannelX, ( uint32_t )&pHandle->DmaBuffCCR[0] );
 80035e2:	0004      	movs	r4, r0
 80035e4:	3470      	adds	r4, #112	; 0x70
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80035e6:	60d4      	str	r4, [r2, #12]
  LL_DMA_SetPeriphAddress( DMAx, pHandle->pParams_str->DMAChannelX, ( uint32_t ) &TIMx->DMAR );
 80035e8:	001c      	movs	r4, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80035ea:	2506      	movs	r5, #6
 80035ec:	344c      	adds	r4, #76	; 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80035ee:	6094      	str	r4, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80035f0:	6854      	ldr	r4, [r2, #4]
  LL_DMA_SetPeriphAddress( DMAx, pHandle->pParams_str->DMASamplingPtChannelX, ( uint32_t ) &TIMx->CCR4 );
 80035f2:	3340      	adds	r3, #64	; 0x40
 80035f4:	0c24      	lsrs	r4, r4, #16
 80035f6:	0424      	lsls	r4, r4, #16
 80035f8:	432c      	orrs	r4, r5
 80035fa:	6054      	str	r4, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80035fc:	69fc      	ldr	r4, [r7, #28]
 80035fe:	1934      	adds	r4, r6, r4
 8003600:	3c01      	subs	r4, #1
 8003602:	7824      	ldrb	r4, [r4, #0]
 8003604:	4464      	add	r4, ip
 8003606:	6825      	ldr	r5, [r4, #0]
 8003608:	46a9      	mov	r9, r5
 800360a:	4645      	mov	r5, r8
 800360c:	464f      	mov	r7, r9
 800360e:	403d      	ands	r5, r7
 8003610:	4657      	mov	r7, sl
 8003612:	432f      	orrs	r7, r5
 8003614:	6027      	str	r7, [r4, #0]
  LL_DMA_SetMemoryAddress( DMAx, pHandle->pParams_str->DMASamplingPtChannelX, ( uint32_t )&pHandle->DmaBuffCCR_ADCTrig[0] );
 8003616:	0007      	movs	r7, r0
 8003618:	3796      	adds	r7, #150	; 0x96
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800361a:	60e7      	str	r7, [r4, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800361c:	2703      	movs	r7, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800361e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003620:	6863      	ldr	r3, [r4, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003622:	9d01      	ldr	r5, [sp, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	433b      	orrs	r3, r7
 800362a:	6063      	str	r3, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800362c:	2402      	movs	r4, #2
 800362e:	6813      	ldr	r3, [r2, #0]
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003630:	3f01      	subs	r7, #1
 8003632:	4323      	orrs	r3, r4
 8003634:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003638:	4698      	mov	r8, r3
 800363a:	0003      	movs	r3, r0
 800363c:	4446      	add	r6, r8
 800363e:	3e01      	subs	r6, #1
 8003640:	7832      	ldrb	r2, [r6, #0]
 8003642:	339c      	adds	r3, #156	; 0x9c
 8003644:	4462      	add	r2, ip
 8003646:	60d3      	str	r3, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8003648:	000b      	movs	r3, r1
 800364a:	3340      	adds	r3, #64	; 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800364c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800364e:	6853      	ldr	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval 0: no command of conversion stop is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8003650:	2610      	movs	r6, #16
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	4323      	orrs	r3, r4
 8003658:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800365a:	2204      	movs	r2, #4
 800365c:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(ADCx->CR,
 800365e:	4c31      	ldr	r4, [pc, #196]	; (8003724 <R1_Init+0x290>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003660:	4393      	bics	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003664:	600a      	str	r2, [r1, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8003666:	684b      	ldr	r3, [r1, #4]
 8003668:	3204      	adds	r2, #4
 800366a:	4393      	bics	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 800366e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8003670:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <R1_Init+0x294>)
 8003672:	6893      	ldr	r3, [r2, #8]
 8003674:	401c      	ands	r4, r3
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	4323      	orrs	r3, r4
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800367c:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CR,
 800367e:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003680:	6893      	ldr	r3, [r2, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8003682:	2b00      	cmp	r3, #0
 8003684:	dbfc      	blt.n	8003680 <R1_Init+0x1ec>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003686:	6893      	ldr	r3, [r2, #8]
 8003688:	421c      	tst	r4, r3
 800368a:	d1f9      	bne.n	8003680 <R1_Init+0x1ec>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 800368c:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 800368e:	421e      	tst	r6, r3
 8003690:	d1f6      	bne.n	8003680 <R1_Init+0x1ec>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8003692:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8003694:	421f      	tst	r7, r3
 8003696:	d1f3      	bne.n	8003680 <R1_Init+0x1ec>
  MODIFY_REG(ADCx->CR,
 8003698:	2601      	movs	r6, #1
 800369a:	6894      	ldr	r4, [r2, #8]
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <R1_Init+0x290>)
 800369e:	401c      	ands	r4, r3
 80036a0:	4334      	orrs	r4, r6
 80036a2:	6094      	str	r4, [r2, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80036a4:	68cc      	ldr	r4, [r1, #12]
 80036a6:	4b21      	ldr	r3, [pc, #132]	; (800372c <R1_Init+0x298>)
 80036a8:	401c      	ands	r4, r3
 80036aa:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80036ac:	2403      	movs	r4, #3
 80036ae:	68d3      	ldr	r3, [r2, #12]
 80036b0:	43a3      	bics	r3, r4
 80036b2:	4333      	orrs	r3, r6
 80036b4:	60d3      	str	r3, [r2, #12]
  while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 80036b6:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80036b8:	4c1b      	ldr	r4, [pc, #108]	; (8003728 <R1_Init+0x294>)
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	421a      	tst	r2, r3
 80036be:	d0fc      	beq.n	80036ba <R1_Init+0x226>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80036c0:	68cb      	ldr	r3, [r1, #12]
 80036c2:	4c1a      	ldr	r4, [pc, #104]	; (800372c <R1_Init+0x298>)
 80036c4:	401c      	ands	r4, r3
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4323      	orrs	r3, r4
 80036cc:	60cb      	str	r3, [r1, #12]
  LL_ADC_REG_SetSequencerChannels ( ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 80036ce:	2335      	movs	r3, #53	; 0x35
 80036d0:	0014      	movs	r4, r2
 80036d2:	5ceb      	ldrb	r3, [r5, r3]
 80036d4:	409c      	lsls	r4, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80036d6:	0363      	lsls	r3, r4, #13
 80036d8:	0b5b      	lsrs	r3, r3, #13
 80036da:	628b      	str	r3, [r1, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80036dc:	4914      	ldr	r1, [pc, #80]	; (8003730 <R1_Init+0x29c>)
 80036de:	680b      	ldr	r3, [r1, #0]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	600a      	str	r2, [r1, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick*/
 80036e4:	2300      	movs	r3, #0
 80036e6:	22b5      	movs	r2, #181	; 0xb5
 80036e8:	5483      	strb	r3, [r0, r2]
  pHandle->OverCurrentFlag = false;
 80036ea:	3a05      	subs	r2, #5
 80036ec:	5283      	strh	r3, [r0, r2]
  pHandle->_Super.DTTest = 0u;
 80036ee:	3a52      	subs	r2, #82	; 0x52
 80036f0:	5283      	strh	r3, [r0, r2]
}
 80036f2:	b005      	add	sp, #20
 80036f4:	bcf0      	pop	{r4, r5, r6, r7}
 80036f6:	46bb      	mov	fp, r7
 80036f8:	46b2      	mov	sl, r6
 80036fa:	46a9      	mov	r9, r5
 80036fc:	46a0      	mov	r8, r4
 80036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	40015800 	.word	0x40015800
 8003708:	fffff7ff 	.word	0xfffff7ff
 800370c:	00000555 	.word	0x00000555
 8003710:	08006598 	.word	0x08006598
 8003714:	ffff800f 	.word	0xffff800f
 8003718:	000035b0 	.word	0x000035b0
 800371c:	ffffe0e0 	.word	0xffffe0e0
 8003720:	0000020d 	.word	0x0000020d
 8003724:	7fffffe8 	.word	0x7fffffe8
 8003728:	40012400 	.word	0x40012400
 800372c:	fffff23f 	.word	0xfffff23f
 8003730:	40012c00 	.word	0x40012c00

08003734 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8003734:	2388      	movs	r3, #136	; 0x88
 8003736:	680a      	ldr	r2, [r1, #0]
 8003738:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 800373a:	2201      	movs	r2, #1
 800373c:	3b1a      	subs	r3, #26
 800373e:	54c2      	strb	r2, [r0, r3]
}
 8003740:	4770      	bx	lr
 8003742:	46c0      	nop			; (mov r8, r8)

08003744 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8003744:	2388      	movs	r3, #136	; 0x88
 8003746:	58c3      	ldr	r3, [r0, r3]
 8003748:	600b      	str	r3, [r1, #0]
}
 800374a:	4770      	bx	lr

0800374c <R1_TurnOnLowSides>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800374c:	23b8      	movs	r3, #184	; 0xb8
{
 800374e:	b530      	push	{r4, r5, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 8003750:	2501      	movs	r5, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003752:	58c4      	ldr	r4, [r0, r3]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8003754:	3b4d      	subs	r3, #77	; 0x4d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003756:	6862      	ldr	r2, [r4, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8003758:	54c5      	strb	r5, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800375a:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800375c:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800375e:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003760:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003762:	3b6d      	subs	r3, #109	; 0x6d
 8003764:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003766:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET )
 8003768:	4219      	tst	r1, r3
 800376a:	d0fc      	beq.n	8003766 <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	430b      	orrs	r3, r1
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8003776:	2334      	movs	r3, #52	; 0x34
 8003778:	5ce3      	ldrb	r3, [r4, r3]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d108      	bne.n	8003790 <R1_TurnOnLowSides+0x44>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800377e:	68e3      	ldr	r3, [r4, #12]
 8003780:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003782:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8003784:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800378a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800378c:	6963      	ldr	r3, [r4, #20]
 800378e:	619a      	str	r2, [r3, #24]
}
 8003790:	bd30      	pop	{r4, r5, pc}
 8003792:	46c0      	nop			; (mov r8, r8)

08003794 <R1_SwitchOnPWM>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003794:	23b8      	movs	r3, #184	; 0xb8
{
 8003796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003798:	464e      	mov	r6, r9
 800379a:	4645      	mov	r5, r8
 800379c:	46de      	mov	lr, fp
 800379e:	4657      	mov	r7, sl
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80037a0:	58c2      	ldr	r2, [r0, r3]
{
 80037a2:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80037a4:	6811      	ldr	r1, [r2, #0]
{
 80037a6:	b085      	sub	sp, #20
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80037a8:	468b      	mov	fp, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80037aa:	21a0      	movs	r1, #160	; 0xa0
{
 80037ac:	9001      	str	r0, [sp, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80037ae:	5a41      	ldrh	r1, [r0, r1]
 80037b0:	8e16      	ldrh	r6, [r2, #48]	; 0x30
 80037b2:	084c      	lsrs	r4, r1, #1
 80037b4:	4689      	mov	r9, r1
 80037b6:	8e51      	ldrh	r1, [r2, #50]	; 0x32
 80037b8:	0005      	movs	r5, r0
 80037ba:	1989      	adds	r1, r1, r6
 80037bc:	b289      	uxth	r1, r1
 80037be:	1a66      	subs	r6, r4, r1
 80037c0:	b2b0      	uxth	r0, r6
 80037c2:	26a2      	movs	r6, #162	; 0xa2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80037c4:	6853      	ldr	r3, [r2, #4]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 80037c6:	6897      	ldr	r7, [r2, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80037c8:	4680      	mov	r8, r0
 80037ca:	53a8      	strh	r0, [r5, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80037cc:	2000      	movs	r0, #0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80037ce:	1861      	adds	r1, r4, r1
 80037d0:	b289      	uxth	r1, r1
 80037d2:	3602      	adds	r6, #2
 80037d4:	53a9      	strh	r1, [r5, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80037d6:	3e39      	subs	r6, #57	; 0x39
 80037d8:	55a8      	strb	r0, [r5, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80037da:	362b      	adds	r6, #43	; 0x2b
 80037dc:	53a9      	strh	r1, [r5, r6]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80037de:	4640      	mov	r0, r8
 80037e0:	219a      	movs	r1, #154	; 0x9a
 80037e2:	5268      	strh	r0, [r5, r1]
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 80037e4:	4649      	mov	r1, r9
 80037e6:	3101      	adds	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80037e8:	6419      	str	r1, [r3, #64]	; 0x40
 80037ea:	9102      	str	r1, [sp, #8]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80037ec:	2180      	movs	r1, #128	; 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 80037ee:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80037f0:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80037f2:	63dc      	str	r4, [r3, #60]	; 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80037f4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80037f6:	0209      	lsls	r1, r1, #8
 80037f8:	4321      	orrs	r1, r4
 80037fa:	6459      	str	r1, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80037fc:	2134      	movs	r1, #52	; 0x34
 80037fe:	5c51      	ldrb	r1, [r2, r1]
 8003800:	2902      	cmp	r1, #2
 8003802:	d100      	bne.n	8003806 <R1_SwitchOnPWM+0x72>
 8003804:	e0cd      	b.n	80039a2 <R1_SwitchOnPWM+0x20e>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	2410      	movs	r4, #16
 800380a:	9801      	ldr	r0, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800380c:	06c9      	lsls	r1, r1, #27
 800380e:	d500      	bpl.n	8003812 <R1_SwitchOnPWM+0x7e>
 8003810:	e0b6      	b.n	8003980 <R1_SwitchOnPWM+0x1ec>
 8003812:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003814:	420c      	tst	r4, r1
 8003816:	d0fc      	beq.n	8003812 <R1_SwitchOnPWM+0x7e>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8003818:	6991      	ldr	r1, [r2, #24]
 800381a:	9001      	str	r0, [sp, #4]
  #include "stm32f0xx_ll_dma.h"
  #include "stm32f0xx_ll_comp.h"

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 800381c:	2f00      	cmp	r7, #0
 800381e:	d100      	bne.n	8003822 <R1_SwitchOnPWM+0x8e>
 8003820:	e0ba      	b.n	8003998 <R1_SwitchOnPWM+0x204>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel".      */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003822:	2502      	movs	r5, #2
 8003824:	002c      	movs	r4, r5
 8003826:	3901      	subs	r1, #1
 8003828:	008e      	lsls	r6, r1, #2
 800382a:	40b4      	lsls	r4, r6
 800382c:	607c      	str	r4, [r7, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel".      */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800382e:	2404      	movs	r4, #4
 8003830:	0020      	movs	r0, r4
 8003832:	40b0      	lsls	r0, r6
 8003834:	6078      	str	r0, [r7, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003836:	69d0      	ldr	r0, [r2, #28]
 8003838:	3801      	subs	r0, #1
 800383a:	9003      	str	r0, [sp, #12]
 800383c:	0080      	lsls	r0, r0, #2
 800383e:	4085      	lsls	r5, r0
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003840:	4084      	lsls	r4, r0
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003842:	607d      	str	r5, [r7, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003844:	607c      	str	r4, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003846:	2402      	movs	r4, #2
  pHandle->TCCnt = 0;
 8003848:	2000      	movs	r0, #0
 800384a:	9d01      	ldr	r5, [sp, #4]
 800384c:	4264      	negs	r4, r4
 800384e:	611c      	str	r4, [r3, #16]
 8003850:	34b0      	adds	r4, #176	; 0xb0
 8003852:	5528      	strb	r0, [r5, r4]
  pHandle->TCDoneFlag = false;
 8003854:	3406      	adds	r4, #6
 8003856:	5528      	strb	r0, [r5, r4]
 8003858:	4d5e      	ldr	r5, [pc, #376]	; (80039d4 <R1_SwitchOnPWM+0x240>)
  pHandle->TCCnt = 0;
 800385a:	4681      	mov	r9, r0
 800385c:	5c69      	ldrb	r1, [r5, r1]
 800385e:	3006      	adds	r0, #6
 8003860:	19c9      	adds	r1, r1, r7
 8003862:	684c      	ldr	r4, [r1, #4]
 8003864:	0c24      	lsrs	r4, r4, #16
 8003866:	0424      	lsls	r4, r4, #16
 8003868:	4304      	orrs	r4, r0
 800386a:	604c      	str	r4, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800386c:	2401      	movs	r4, #1
 800386e:	6808      	ldr	r0, [r1, #0]
 8003870:	4320      	orrs	r0, r4
 8003872:	6008      	str	r0, [r1, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 8003874:	68d8      	ldr	r0, [r3, #12]
 8003876:	4682      	mov	sl, r0
 8003878:	2080      	movs	r0, #128	; 0x80
 800387a:	0040      	lsls	r0, r0, #1
 800387c:	4684      	mov	ip, r0
 800387e:	4650      	mov	r0, sl
 8003880:	4666      	mov	r6, ip
 8003882:	4330      	orrs	r0, r6
 8003884:	60d8      	str	r0, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8003886:	68d8      	ldr	r0, [r3, #12]
 8003888:	4682      	mov	sl, r0
 800388a:	2080      	movs	r0, #128	; 0x80
 800388c:	0140      	lsls	r0, r0, #5
 800388e:	4684      	mov	ip, r0
 8003890:	4650      	mov	r0, sl
 8003892:	4666      	mov	r6, ip
 8003894:	4330      	orrs	r0, r6
 8003896:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003898:	9803      	ldr	r0, [sp, #12]
 800389a:	5c2e      	ldrb	r6, [r5, r0]
 800389c:	46b4      	mov	ip, r6
 800389e:	44bc      	add	ip, r7
 80038a0:	4660      	mov	r0, ip
 80038a2:	6846      	ldr	r6, [r0, #4]
 80038a4:	2003      	movs	r0, #3
 80038a6:	0c36      	lsrs	r6, r6, #16
 80038a8:	0436      	lsls	r6, r6, #16
 80038aa:	4306      	orrs	r6, r0
 80038ac:	4682      	mov	sl, r0
 80038ae:	4660      	mov	r0, ip
 80038b0:	6046      	str	r6, [r0, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80038b2:	6806      	ldr	r6, [r0, #0]
 80038b4:	4326      	orrs	r6, r4
 80038b6:	6006      	str	r6, [r0, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80038b8:	9802      	ldr	r0, [sp, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80038ba:	2602      	movs	r6, #2
 80038bc:	6418      	str	r0, [r3, #64]	; 0x40
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80038be:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80038c0:	4684      	mov	ip, r0
 80038c2:	4465      	add	r5, ip
 80038c4:	3d01      	subs	r5, #1
 80038c6:	782d      	ldrb	r5, [r5, #0]
  LL_ADC_REG_SetSequencerChannels ( ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL ( pHandle->pParams_str->IChannel ));
 80038c8:	0020      	movs	r0, r4
 80038ca:	19ef      	adds	r7, r5, r7
 80038cc:	683d      	ldr	r5, [r7, #0]
 80038ce:	43a5      	bics	r5, r4
 80038d0:	603d      	str	r5, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80038d2:	687d      	ldr	r5, [r7, #4]
 80038d4:	0c2d      	lsrs	r5, r5, #16
 80038d6:	042d      	lsls	r5, r5, #16
 80038d8:	4335      	orrs	r5, r6
 80038da:	607d      	str	r5, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80038dc:	683d      	ldr	r5, [r7, #0]
 80038de:	4325      	orrs	r5, r4
 80038e0:	603d      	str	r5, [r7, #0]
 80038e2:	2535      	movs	r5, #53	; 0x35
 80038e4:	5d55      	ldrb	r5, [r2, r5]
 80038e6:	40a8      	lsls	r0, r5
 80038e8:	0345      	lsls	r5, r0, #13
 80038ea:	4658      	mov	r0, fp
 80038ec:	0b6d      	lsrs	r5, r5, #13
 80038ee:	6285      	str	r5, [r0, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80038f0:	4d39      	ldr	r5, [pc, #228]	; (80039d8 <R1_SwitchOnPWM+0x244>)
 80038f2:	6968      	ldr	r0, [r5, #20]
 80038f4:	4684      	mov	ip, r0
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->ISamplingTime );
 80038f6:	2036      	movs	r0, #54	; 0x36
 80038f8:	5c10      	ldrb	r0, [r2, r0]
 80038fa:	9002      	str	r0, [sp, #8]
 80038fc:	2007      	movs	r0, #7
 80038fe:	4683      	mov	fp, r0
 8003900:	4660      	mov	r0, ip
 8003902:	465a      	mov	r2, fp
 8003904:	4390      	bics	r0, r2
 8003906:	0002      	movs	r2, r0
 8003908:	9802      	ldr	r0, [sp, #8]
 800390a:	4310      	orrs	r0, r2
 800390c:	6168      	str	r0, [r5, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800390e:	4650      	mov	r0, sl
 8003910:	68ea      	ldr	r2, [r5, #12]
 8003912:	4382      	bics	r2, r0
 8003914:	4322      	orrs	r2, r4
 8003916:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003918:	68ea      	ldr	r2, [r5, #12]
 800391a:	4830      	ldr	r0, [pc, #192]	; (80039dc <R1_SwitchOnPWM+0x248>)
 800391c:	4010      	ands	r0, r2
 800391e:	2288      	movs	r2, #136	; 0x88
 8003920:	00d2      	lsls	r2, r2, #3
 8003922:	4302      	orrs	r2, r0
 8003924:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(ADCx->CR,
 8003926:	68aa      	ldr	r2, [r5, #8]
 8003928:	482d      	ldr	r0, [pc, #180]	; (80039e0 <R1_SwitchOnPWM+0x24c>)
 800392a:	4002      	ands	r2, r0
 800392c:	2004      	movs	r0, #4
 800392e:	4302      	orrs	r2, r0
 8003930:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003932:	2570      	movs	r5, #112	; 0x70
 8003934:	685a      	ldr	r2, [r3, #4]
  pHandle->FOCDurationFlag = false;
 8003936:	4648      	mov	r0, r9
 8003938:	432a      	orrs	r2, r5
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	22b3      	movs	r2, #179	; 0xb3
 800393e:	9d01      	ldr	r5, [sp, #4]
 8003940:	54a8      	strb	r0, [r5, r2]
  pHandle->ADCRegularLocked=true;
 8003942:	3202      	adds	r2, #2
 8003944:	54ac      	strb	r4, [r5, r2]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003946:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003948:	3c03      	subs	r4, #3
 800394a:	4332      	orrs	r2, r6
 800394c:	600a      	str	r2, [r1, #0]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800394e:	2101      	movs	r1, #1
 8003950:	683a      	ldr	r2, [r7, #0]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003952:	3010      	adds	r0, #16
 8003954:	4316      	orrs	r6, r2
 8003956:	603e      	str	r6, [r7, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003958:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800395a:	691a      	ldr	r2, [r3, #16]
  while (( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 800395c:	4211      	tst	r1, r2
 800395e:	d0fc      	beq.n	800395a <R1_SwitchOnPWM+0x1c6>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4210      	tst	r0, r2
 8003964:	d1f9      	bne.n	800395a <R1_SwitchOnPWM+0x1c6>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003966:	481f      	ldr	r0, [pc, #124]	; (80039e4 <R1_SwitchOnPWM+0x250>)
 8003968:	68c2      	ldr	r2, [r0, #12]
 800396a:	4311      	orrs	r1, r2
  WRITE_REG(TIMx->CCR4, CompareValue);
 800396c:	4642      	mov	r2, r8
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800396e:	60c1      	str	r1, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003972:	b005      	add	sp, #20
 8003974:	bcf0      	pop	{r4, r5, r6, r7}
 8003976:	46bb      	mov	fp, r7
 8003978:	46b2      	mov	sl, r6
 800397a:	46a9      	mov	r9, r5
 800397c:	46a0      	mov	r8, r4
 800397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003980:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8003982:	420c      	tst	r4, r1
 8003984:	d1fc      	bne.n	8003980 <R1_SwitchOnPWM+0x1ec>
 8003986:	2410      	movs	r4, #16
 8003988:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800398a:	420c      	tst	r4, r1
 800398c:	d0fc      	beq.n	8003988 <R1_SwitchOnPWM+0x1f4>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 800398e:	6991      	ldr	r1, [r2, #24]
 8003990:	9001      	str	r0, [sp, #4]
  if (NULL == DMAx)
 8003992:	2f00      	cmp	r7, #0
 8003994:	d000      	beq.n	8003998 <R1_SwitchOnPWM+0x204>
 8003996:	e744      	b.n	8003822 <R1_SwitchOnPWM+0x8e>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003998:	69d0      	ldr	r0, [r2, #28]
 800399a:	3901      	subs	r1, #1
 800399c:	3801      	subs	r0, #1
 800399e:	9003      	str	r0, [sp, #12]
 80039a0:	e751      	b.n	8003846 <R1_SwitchOnPWM+0xb2>
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80039a2:	6a1c      	ldr	r4, [r3, #32]
 80039a4:	4910      	ldr	r1, [pc, #64]	; (80039e8 <R1_SwitchOnPWM+0x254>)
 80039a6:	420c      	tst	r4, r1
 80039a8:	d009      	beq.n	80039be <R1_SwitchOnPWM+0x22a>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80039aa:	68d1      	ldr	r1, [r2, #12]
 80039ac:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80039ae:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80039b0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80039b2:	6911      	ldr	r1, [r2, #16]
 80039b4:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80039b6:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
 80039b8:	6951      	ldr	r1, [r2, #20]
 80039ba:	618c      	str	r4, [r1, #24]
}
 80039bc:	e723      	b.n	8003806 <R1_SwitchOnPWM+0x72>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80039be:	68d1      	ldr	r1, [r2, #12]
 80039c0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 80039c2:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80039c4:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80039c6:	6911      	ldr	r1, [r2, #16]
 80039c8:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80039ca:	8d94      	ldrh	r4, [r2, #44]	; 0x2c
 80039cc:	6951      	ldr	r1, [r2, #20]
 80039ce:	628c      	str	r4, [r1, #40]	; 0x28
}
 80039d0:	e719      	b.n	8003806 <R1_SwitchOnPWM+0x72>
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	08006598 	.word	0x08006598
 80039d8:	40012400 	.word	0x40012400
 80039dc:	fffff23f 	.word	0xfffff23f
 80039e0:	7fffffe8 	.word	0x7fffffe8
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	00000555 	.word	0x00000555

080039ec <R1_SwitchOffPWM>:
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	4657      	mov	r7, sl
 80039f0:	464e      	mov	r6, r9
 80039f2:	4645      	mov	r5, r8
 80039f4:	46de      	mov	lr, fp
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80039f6:	22a0      	movs	r2, #160	; 0xa0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80039f8:	23b8      	movs	r3, #184	; 0xb8
{
 80039fa:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80039fc:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80039fe:	58c4      	ldr	r4, [r0, r3]
{
 8003a00:	b083      	sub	sp, #12
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003a02:	9200      	str	r2, [sp, #0]
 8003a04:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003a06:	0856      	lsrs	r6, r2, #1
 8003a08:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003a0a:	6863      	ldr	r3, [r4, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003a0c:	1952      	adds	r2, r2, r5
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	1ab5      	subs	r5, r6, r2
 8003a12:	b2ad      	uxth	r5, r5
 8003a14:	46ac      	mov	ip, r5
 8003a16:	25a2      	movs	r5, #162	; 0xa2
 8003a18:	4667      	mov	r7, ip
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003a1a:	18b6      	adds	r6, r6, r2
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003a1c:	68a1      	ldr	r1, [r4, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003a1e:	5347      	strh	r7, [r0, r5]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003a20:	b2b5      	uxth	r5, r6
 8003a22:	002e      	movs	r6, r5
 8003a24:	9501      	str	r5, [sp, #4]
 8003a26:	25a4      	movs	r5, #164	; 0xa4
 8003a28:	5346      	strh	r6, [r0, r5]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003a2a:	2601      	movs	r6, #1
 8003a2c:	68dd      	ldr	r5, [r3, #12]
 8003a2e:	43b5      	bics	r5, r6
 8003a30:	60dd      	str	r5, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003a32:	681d      	ldr	r5, [r3, #0]
 8003a34:	360f      	adds	r6, #15
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003a36:	06ed      	lsls	r5, r5, #27
 8003a38:	d500      	bpl.n	8003a3c <R1_SwitchOffPWM+0x50>
 8003a3a:	e0b1      	b.n	8003ba0 <R1_SwitchOffPWM+0x1b4>
 8003a3c:	2610      	movs	r6, #16
 8003a3e:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003a40:	422e      	tst	r6, r5
 8003a42:	d0fc      	beq.n	8003a3e <R1_SwitchOffPWM+0x52>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003a44:	4d5f      	ldr	r5, [pc, #380]	; (8003bc4 <R1_SwitchOffPWM+0x1d8>)
 8003a46:	2702      	movs	r7, #2
 8003a48:	46a9      	mov	r9, r5
 8003a4a:	69a5      	ldr	r5, [r4, #24]
 8003a4c:	444d      	add	r5, r9
 8003a4e:	3d01      	subs	r5, #1
 8003a50:	782e      	ldrb	r6, [r5, #0]
 8003a52:	1876      	adds	r6, r6, r1
 8003a54:	6835      	ldr	r5, [r6, #0]
 8003a56:	43bd      	bics	r5, r7
 8003a58:	6035      	str	r5, [r6, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8003a5a:	6835      	ldr	r5, [r6, #0]
 8003a5c:	3702      	adds	r7, #2
 8003a5e:	43bd      	bics	r5, r7
 8003a60:	6035      	str	r5, [r6, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8003a62:	2700      	movs	r7, #0
 8003a64:	256b      	movs	r5, #107	; 0x6b
 8003a66:	5547      	strb	r7, [r0, r5]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003a68:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8003a6a:	4f57      	ldr	r7, [pc, #348]	; (8003bc8 <R1_SwitchOffPWM+0x1dc>)
 8003a6c:	403d      	ands	r5, r7
 8003a6e:	645d      	str	r5, [r3, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8003a70:	25b2      	movs	r5, #178	; 0xb2
 8003a72:	5d45      	ldrb	r5, [r0, r5]
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	d104      	bne.n	8003a82 <R1_SwitchOffPWM+0x96>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8003a78:	3534      	adds	r5, #52	; 0x34
 8003a7a:	5d65      	ldrb	r5, [r4, r5]
 8003a7c:	2d02      	cmp	r5, #2
 8003a7e:	d100      	bne.n	8003a82 <R1_SwitchOffPWM+0x96>
 8003a80:	e096      	b.n	8003bb0 <R1_SwitchOffPWM+0x1c4>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003a82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003a84:	69e4      	ldr	r4, [r4, #28]
 8003a86:	444d      	add	r5, r9
 8003a88:	3d01      	subs	r5, #1
 8003a8a:	782d      	ldrb	r5, [r5, #0]
 8003a8c:	444c      	add	r4, r9
 8003a8e:	46aa      	mov	sl, r5
 8003a90:	448a      	add	sl, r1
 8003a92:	4655      	mov	r5, sl
 8003a94:	682d      	ldr	r5, [r5, #0]
 8003a96:	3c01      	subs	r4, #1
 8003a98:	002f      	movs	r7, r5
 8003a9a:	2501      	movs	r5, #1
 8003a9c:	43af      	bics	r7, r5
 8003a9e:	46bb      	mov	fp, r7
 8003aa0:	4657      	mov	r7, sl
 8003aa2:	465d      	mov	r5, fp
 8003aa4:	603d      	str	r5, [r7, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003aa6:	2501      	movs	r5, #1
 8003aa8:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8003aaa:	3501      	adds	r5, #1
 8003aac:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003aae:	3502      	adds	r5, #2
 8003ab0:	604d      	str	r5, [r1, #4]
 8003ab2:	46aa      	mov	sl, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003ab4:	6835      	ldr	r5, [r6, #0]
 8003ab6:	7824      	ldrb	r4, [r4, #0]
 8003ab8:	002f      	movs	r7, r5
 8003aba:	2501      	movs	r5, #1
 8003abc:	43af      	bics	r7, r5
 8003abe:	6037      	str	r7, [r6, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 8003ac0:	68dd      	ldr	r5, [r3, #12]
 8003ac2:	1909      	adds	r1, r1, r4
 8003ac4:	46a8      	mov	r8, r5
 8003ac6:	4646      	mov	r6, r8
 8003ac8:	4d40      	ldr	r5, [pc, #256]	; (8003bcc <R1_SwitchOffPWM+0x1e0>)
  LL_TIM_OC_SetCompareCH4( TIMx, ( uint32_t )(pHandle->Half_PWMPeriod + 1) );
 8003aca:	9f00      	ldr	r7, [sp, #0]
 8003acc:	402e      	ands	r6, r5
 8003ace:	2501      	movs	r5, #1
 8003ad0:	60de      	str	r6, [r3, #12]
 8003ad2:	680c      	ldr	r4, [r1, #0]
 8003ad4:	3701      	adds	r7, #1
 8003ad6:	43ac      	bics	r4, r5
 8003ad8:	600c      	str	r4, [r1, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	4c3c      	ldr	r4, [pc, #240]	; (8003bd0 <R1_SwitchOffPWM+0x1e4>)
 8003ade:	4021      	ands	r1, r4
 8003ae0:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003ae2:	2196      	movs	r1, #150	; 0x96
 8003ae4:	9c01      	ldr	r4, [sp, #4]
 8003ae6:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003ae8:	4664      	mov	r4, ip
 8003aea:	3104      	adds	r1, #4
 8003aec:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003aee:	2470      	movs	r4, #112	; 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003af0:	641f      	str	r7, [r3, #64]	; 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 8003af6:	4654      	mov	r4, sl
 8003af8:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003afa:	4936      	ldr	r1, [pc, #216]	; (8003bd4 <R1_SwitchOffPWM+0x1e8>)
 8003afc:	688b      	ldr	r3, [r1, #8]
 8003afe:	421c      	tst	r4, r3
 8003b00:	d009      	beq.n	8003b16 <R1_SwitchOffPWM+0x12a>
  MODIFY_REG(ADCx->CR,
 8003b02:	688b      	ldr	r3, [r1, #8]
 8003b04:	4c34      	ldr	r4, [pc, #208]	; (8003bd8 <R1_SwitchOffPWM+0x1ec>)
 8003b06:	4023      	ands	r3, r4
 8003b08:	2410      	movs	r4, #16
 8003b0a:	4323      	orrs	r3, r4
 8003b0c:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003b0e:	3c0c      	subs	r4, #12
 8003b10:	688b      	ldr	r3, [r1, #8]
    while ( LL_ADC_REG_IsConversionOngoing(ADC1))
 8003b12:	421c      	tst	r4, r3
 8003b14:	d1fc      	bne.n	8003b10 <R1_SwitchOffPWM+0x124>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003b16:	492f      	ldr	r1, [pc, #188]	; (8003bd4 <R1_SwitchOffPWM+0x1e8>)
 8003b18:	4c30      	ldr	r4, [pc, #192]	; (8003bdc <R1_SwitchOffPWM+0x1f0>)
 8003b1a:	68cb      	ldr	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	4023      	ands	r3, r4
 8003b20:	60cb      	str	r3, [r1, #12]
 8003b22:	23b5      	movs	r3, #181	; 0xb5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b24:	26a2      	movs	r6, #162	; 0xa2
  pHandle->ADCRegularLocked=false;
 8003b26:	54c5      	strb	r5, [r0, r3]
  pHandle->iflag = 0;
 8003b28:	3b08      	subs	r3, #8
 8003b2a:	54c5      	strb	r5, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8003b2c:	3b4d      	subs	r3, #77	; 0x4d
 8003b2e:	5ac1      	ldrh	r1, [r0, r3]
 8003b30:	3340      	adds	r3, #64	; 0x40
 8003b32:	084c      	lsrs	r4, r1, #1
 8003b34:	52c4      	strh	r4, [r0, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b36:	088b      	lsrs	r3, r1, #2
 8003b38:	1a99      	subs	r1, r3, r2
 8003b3a:	b289      	uxth	r1, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b3c:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b3e:	5381      	strh	r1, [r0, r6]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003b40:	b292      	uxth	r2, r2
 8003b42:	3602      	adds	r6, #2
 8003b44:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8003b46:	3e64      	subs	r6, #100	; 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8003b48:	87c3      	strh	r3, [r0, #62]	; 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8003b4a:	5383      	strh	r3, [r0, r6]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8003b4c:	3602      	adds	r6, #2
 8003b4e:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 8003b50:	362e      	adds	r6, #46	; 0x2e
 8003b52:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 8003b54:	360c      	adds	r6, #12
 8003b56:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[1]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 8003b58:	3e0a      	subs	r6, #10
 8003b5a:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 8003b5c:	360c      	adds	r6, #12
 8003b5e:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 8003b60:	3e0a      	subs	r6, #10
 8003b62:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 8003b64:	360c      	adds	r6, #12
 8003b66:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[3]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 8003b68:	3e0a      	subs	r6, #10
 8003b6a:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[3] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 8003b6c:	360c      	adds	r6, #12
 8003b6e:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 8003b70:	3e0a      	subs	r6, #10
 8003b72:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 8003b74:	360c      	adds	r6, #12
 8003b76:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8003b78:	3e0a      	subs	r6, #10
 8003b7a:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8003b7c:	360c      	adds	r6, #12
 8003b7e:	5383      	strh	r3, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003b80:	2396      	movs	r3, #150	; 0x96
 8003b82:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003b84:	2298      	movs	r2, #152	; 0x98
 8003b86:	3c01      	subs	r4, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003b88:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003b8a:	5284      	strh	r4, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003b8c:	52c1      	strh	r1, [r0, r3]
  pHandle->BrakeActionLock = false;
 8003b8e:	3318      	adds	r3, #24
 8003b90:	52c5      	strh	r5, [r0, r3]
}
 8003b92:	b003      	add	sp, #12
 8003b94:	bcf0      	pop	{r4, r5, r6, r7}
 8003b96:	46bb      	mov	fp, r7
 8003b98:	46b2      	mov	sl, r6
 8003b9a:	46a9      	mov	r9, r5
 8003b9c:	46a0      	mov	r8, r4
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003ba0:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8003ba2:	422e      	tst	r6, r5
 8003ba4:	d1fc      	bne.n	8003ba0 <R1_SwitchOffPWM+0x1b4>
 8003ba6:	2610      	movs	r6, #16
 8003ba8:	681d      	ldr	r5, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003baa:	422e      	tst	r6, r5
 8003bac:	d0fc      	beq.n	8003ba8 <R1_SwitchOffPWM+0x1bc>
 8003bae:	e749      	b.n	8003a44 <R1_SwitchOffPWM+0x58>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8003bb0:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8003bb2:	68e7      	ldr	r7, [r4, #12]
 8003bb4:	62bd      	str	r5, [r7, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8003bb6:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 8003bb8:	6927      	ldr	r7, [r4, #16]
 8003bba:	62bd      	str	r5, [r7, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8003bbc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8003bbe:	6967      	ldr	r7, [r4, #20]
 8003bc0:	62bd      	str	r5, [r7, #40]	; 0x28
}
 8003bc2:	e75e      	b.n	8003a82 <R1_SwitchOffPWM+0x96>
 8003bc4:	08006598 	.word	0x08006598
 8003bc8:	ffff7fff 	.word	0xffff7fff
 8003bcc:	fffffeff 	.word	0xfffffeff
 8003bd0:	ffffefff 	.word	0xffffefff
 8003bd4:	40012400 	.word	0x40012400
 8003bd8:	7fffffe8 	.word	0x7fffffe8
 8003bdc:	fffff23f 	.word	0xfffff23f

08003be0 <R1_CurrentReadingCalibration>:
{
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	4647      	mov	r7, r8
 8003be4:	46ce      	mov	lr, r9
  if (false == pHandle->_Super.offsetCalibStatus)
 8003be6:	236e      	movs	r3, #110	; 0x6e
{
 8003be8:	b580      	push	{r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003bea:	27b8      	movs	r7, #184	; 0xb8
  if (false == pHandle->_Super.offsetCalibStatus)
 8003bec:	5cc6      	ldrb	r6, [r0, r3]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003bee:	59c1      	ldr	r1, [r0, r7]
{
 8003bf0:	0004      	movs	r4, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8003bf2:	4698      	mov	r8, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003bf4:	684d      	ldr	r5, [r1, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 8003bf6:	2e00      	cmp	r6, #0
 8003bf8:	d042      	beq.n	8003c80 <R1_CurrentReadingCalibration+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 8003bfa:	6a2a      	ldr	r2, [r5, #32]
 8003bfc:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <R1_CurrentReadingCalibration+0xf4>)
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003bfe:	26a2      	movs	r6, #162	; 0xa2
 8003c00:	4313      	orrs	r3, r2
 8003c02:	622b      	str	r3, [r5, #32]
  pHandle->iflag = 0;
 8003c04:	2500      	movs	r5, #0
 8003c06:	23ad      	movs	r3, #173	; 0xad
 8003c08:	54e5      	strb	r5, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8003c0a:	3b4d      	subs	r3, #77	; 0x4d
 8003c0c:	5ae2      	ldrh	r2, [r4, r3]
 8003c0e:	3340      	adds	r3, #64	; 0x40
 8003c10:	0850      	lsrs	r0, r2, #1
 8003c12:	52e0      	strh	r0, [r4, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003c14:	0893      	lsrs	r3, r2, #2
 8003c16:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
 8003c18:	8e09      	ldrh	r1, [r1, #48]	; 0x30
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003c1a:	3801      	subs	r0, #1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003c1c:	1852      	adds	r2, r2, r1
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	1a99      	subs	r1, r3, r2
 8003c22:	b289      	uxth	r1, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003c24:	189a      	adds	r2, r3, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003c26:	53a1      	strh	r1, [r4, r6]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003c28:	b292      	uxth	r2, r2
 8003c2a:	3602      	adds	r6, #2
 8003c2c:	53a2      	strh	r2, [r4, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8003c2e:	3e64      	subs	r6, #100	; 0x64
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8003c30:	87e3      	strh	r3, [r4, #62]	; 0x3e
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8003c32:	53a3      	strh	r3, [r4, r6]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8003c34:	3602      	adds	r6, #2
 8003c36:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 8003c38:	362e      	adds	r6, #46	; 0x2e
 8003c3a:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during first half PWM period
 8003c3c:	360c      	adds	r6, #12
 8003c3e:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[1]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 8003c40:	3e0a      	subs	r6, #10
 8003c42:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during first half PWM period
 8003c44:	360c      	adds	r6, #12
 8003c46:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 8003c48:	3e0a      	subs	r6, #10
 8003c4a:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during first half PWM period
 8003c4c:	360c      	adds	r6, #12
 8003c4e:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[3]       = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 8003c50:	3e0a      	subs	r6, #10
 8003c52:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[3] = pHandle->_Super.CntPhA;       // CCR1 value overwritten during second half PWM period
 8003c54:	360c      	adds	r6, #12
 8003c56:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 8003c58:	3e0a      	subs	r6, #10
 8003c5a:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhB;       // CCR2 value overwritten during second half PWM period
 8003c5c:	360c      	adds	r6, #12
 8003c5e:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8003c60:	3e0a      	subs	r6, #10
 8003c62:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;       // CCR3 value overwritten during second half PWM period
 8003c64:	360c      	adds	r6, #12
 8003c66:	53a3      	strh	r3, [r4, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003c68:	2396      	movs	r3, #150	; 0x96
 8003c6a:	52e2      	strh	r2, [r4, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003c6c:	2298      	movs	r2, #152	; 0x98
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003c6e:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8003c70:	52a0      	strh	r0, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8003c72:	52e1      	strh	r1, [r4, r3]
  pHandle->BrakeActionLock = false;
 8003c74:	3318      	adds	r3, #24
 8003c76:	52e5      	strh	r5, [r4, r3]
}
 8003c78:	bcc0      	pop	{r6, r7}
 8003c7a:	46b9      	mov	r9, r7
 8003c7c:	46b0      	mov	r8, r6
 8003c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 8003c80:	331a      	adds	r3, #26
 8003c82:	50c6      	str	r6, [r0, r3]
 8003c84:	4699      	mov	r9, r3
    pHandle->Index = 0u;
 8003c86:	3324      	adds	r3, #36	; 0x24
 8003c88:	54c6      	strb	r6, [r0, r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003c8a:	6a2b      	ldr	r3, [r5, #32]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <R1_CurrentReadingCalibration+0xf8>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <R1_CurrentReadingCalibration+0xfc>)
 8003c94:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <R1_CurrentReadingCalibration+0x100>)
 8003c98:	6143      	str	r3, [r0, #20]
    R1_SwitchOnPWM( &pHandle->_Super );
 8003c9a:	f7ff fd7b 	bl	8003794 <R1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8003c9e:	2337      	movs	r3, #55	; 0x37
 8003ca0:	59e2      	ldr	r2, [r4, r7]
 8003ca2:	0021      	movs	r1, r4
 8003ca4:	5cd2      	ldrb	r2, [r2, r3]
 8003ca6:	0023      	movs	r3, r4
 8003ca8:	3144      	adds	r1, #68	; 0x44
 8003caa:	33ac      	adds	r3, #172	; 0xac
 8003cac:	0028      	movs	r0, r5
 8003cae:	f002 f821 	bl	8005cf4 <waitForPolarizationEnd>
    R1_SwitchOffPWM( &pHandle->_Super );
 8003cb2:	0020      	movs	r0, r4
 8003cb4:	f7ff fe9a 	bl	80039ec <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8003cb8:	464b      	mov	r3, r9
 8003cba:	464a      	mov	r2, r9
 8003cbc:	58e3      	ldr	r3, [r4, r3]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1) - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003cbe:	59e1      	ldr	r1, [r4, r7]
    pHandle->PhaseOffset >>= 4u;
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	50a3      	str	r3, [r4, r2]
    pHandle->_Super.offsetCalibStatus = 0;
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	54e6      	strb	r6, [r4, r3]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <R1_CurrentReadingCalibration+0x104>)
 8003cca:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <R1_CurrentReadingCalibration+0x108>)
 8003cce:	6163      	str	r3, [r4, #20]
 8003cd0:	e793      	b.n	8003bfa <R1_CurrentReadingCalibration+0x1a>
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	00000555 	.word	0x00000555
 8003cd8:	fffffaaa 	.word	0xfffffaaa
 8003cdc:	08003095 	.word	0x08003095
 8003ce0:	080030d1 	.word	0x080030d1
 8003ce4:	08002e3d 	.word	0x08002e3d
 8003ce8:	0800313d 	.word	0x0800313d

08003cec <R1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8003cec:	23b2      	movs	r3, #178	; 0xb2
 8003cee:	5cc3      	ldrb	r3, [r0, r3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <R1_BRK_IRQHandler+0x14>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8003cf4:	2234      	movs	r2, #52	; 0x34
 8003cf6:	33b8      	adds	r3, #184	; 0xb8
 8003cf8:	58c3      	ldr	r3, [r0, r3]
 8003cfa:	5c9a      	ldrb	r2, [r3, r2]
 8003cfc:	2a02      	cmp	r2, #2
 8003cfe:	d004      	beq.n	8003d0a <R1_BRK_IRQHandler+0x1e>
  pHandle->OverCurrentFlag = true;
 8003d00:	23b0      	movs	r3, #176	; 0xb0
 8003d02:	2201      	movs	r2, #1
 8003d04:	54c2      	strb	r2, [r0, r3]
  return &( pHandle->_Super.Motor );
 8003d06:	3068      	adds	r0, #104	; 0x68
}
 8003d08:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d0e:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8003d10:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d1a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003d1c:	e7f0      	b.n	8003d00 <R1_BRK_IRQHandler+0x14>
 8003d1e:	46c0      	nop			; (mov r8, r8)

08003d20 <R1_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 8003d20:	22b1      	movs	r2, #177	; 0xb1
{
 8003d22:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 8003d24:	5c81      	ldrb	r1, [r0, r2]
{
 8003d26:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d00b      	beq.n	8003d44 <R1_IsOverCurrentOccurred+0x24>
    pHandle->OverVoltageFlag = false;
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2442      	movs	r4, #66	; 0x42
 8003d30:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 8003d32:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8003d34:	22b0      	movs	r2, #176	; 0xb0
 8003d36:	5c99      	ldrb	r1, [r3, r2]
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	d002      	beq.n	8003d42 <R1_IsOverCurrentOccurred+0x22>
    pHandle->OverCurrentFlag = false;
 8003d3c:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 8003d3e:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 8003d40:	5499      	strb	r1, [r3, r2]
}
 8003d42:	bd10      	pop	{r4, pc}
 8003d44:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 8003d46:	2000      	movs	r0, #0
 8003d48:	e7f4      	b.n	8003d34 <R1_IsOverCurrentOccurred+0x14>
 8003d4a:	46c0      	nop			; (mov r8, r8)

08003d4c <R1_TIM1_UP_IRQHandler>:
  * @retval none
  */
__weak void * R1_TIM1_UP_IRQHandler( PWMC_R1_Handle_t * pHandle )
{

  if (pHandle->TCDoneFlag ==true)
 8003d4c:	22b4      	movs	r2, #180	; 0xb4
{
 8003d4e:	b510      	push	{r4, lr}
  if (pHandle->TCDoneFlag ==true)
 8003d50:	5c83      	ldrb	r3, [r0, r2]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d010      	beq.n	8003d78 <R1_TIM1_UP_IRQHandler+0x2c>
  MODIFY_REG(ADCx->CR,
 8003d56:	4909      	ldr	r1, [pc, #36]	; (8003d7c <R1_TIM1_UP_IRQHandler+0x30>)
 8003d58:	4c09      	ldr	r4, [pc, #36]	; (8003d80 <R1_TIM1_UP_IRQHandler+0x34>)
 8003d5a:	688b      	ldr	r3, [r1, #8]
 8003d5c:	4023      	ands	r3, r4
 8003d5e:	2404      	movs	r4, #4
 8003d60:	4323      	orrs	r3, r4
 8003d62:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003d64:	4907      	ldr	r1, [pc, #28]	; (8003d84 <R1_TIM1_UP_IRQHandler+0x38>)
 8003d66:	346c      	adds	r4, #108	; 0x6c
 8003d68:	684b      	ldr	r3, [r1, #4]
 8003d6a:	4323      	orrs	r3, r4
 8003d6c:	604b      	str	r3, [r1, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput( TIM1, LL_TIM_TRGO_OC4REF );
    pHandle->FOCDurationFlag = true;
 8003d6e:	23b3      	movs	r3, #179	; 0xb3
 8003d70:	2101      	movs	r1, #1
 8003d72:	54c1      	strb	r1, [r0, r3]
    pHandle->TCDoneFlag = false;
 8003d74:	2300      	movs	r3, #0
 8003d76:	5483      	strb	r3, [r0, r2]
  }

  return &( pHandle->_Super.Motor );
 8003d78:	3068      	adds	r0, #104	; 0x68
}
 8003d7a:	bd10      	pop	{r4, pc}
 8003d7c:	40012400 	.word	0x40012400
 8003d80:	7fffffe8 	.word	0x7fffffe8
 8003d84:	40012c00 	.word	0x40012c00

08003d88 <R1_DMAx_TC_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void *R1_DMAx_TC_IRQHandler( PWMC_R1_Handle_t * pHandle )
{
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003d88:	23b8      	movs	r3, #184	; 0xb8
 8003d8a:	58c2      	ldr	r2, [r0, r3]
{
 8003d8c:	b510      	push	{r4, lr}
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8003d8e:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 8003d90:	2c00      	cmp	r4, #0
 8003d92:	d005      	beq.n	8003da0 <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003d94:	2104      	movs	r1, #4
 8003d96:	6993      	ldr	r3, [r2, #24]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4099      	lsls	r1, r3
 8003d9e:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 8003da0:	21ae      	movs	r1, #174	; 0xae
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 8003da2:	2437      	movs	r4, #55	; 0x37
  pHandle->TCCnt++;
 8003da4:	5c43      	ldrb	r3, [r0, r1]
 8003da6:	3301      	adds	r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 8003dac:	5d12      	ldrb	r2, [r2, r4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d10c      	bne.n	8003dcc <R1_DMAx_TC_IRQHandler+0x44>
  {
    // first half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	58c2      	ldr	r2, [r0, r3]
 8003db6:	3304      	adds	r3, #4
 8003db8:	58c3      	ldr	r3, [r0, r3]
 8003dba:	6742      	str	r2, [r0, #116]	; 0x74
 8003dbc:	6783      	str	r3, [r0, #120]	; 0x78
    // second half PWM period CCR value transfered by DMA
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 8003dbe:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 8003dc0:	2201      	movs	r2, #1
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8003dc2:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8003dc4:	6704      	str	r4, [r0, #112]	; 0x70
    pHandle->TCCnt = 0;
 8003dc6:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 8003dc8:	33b4      	adds	r3, #180	; 0xb4
 8003dca:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return &( pHandle->_Super.Motor );
 8003dcc:	3068      	adds	r0, #104	; 0x68
}
 8003dce:	bd10      	pop	{r4, pc}

08003dd0 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	4645      	mov	r5, r8
 8003dd4:	46de      	mov	lr, fp
 8003dd6:	4657      	mov	r7, sl
 8003dd8:	464e      	mov	r6, r9
 8003dda:	b5e0      	push	{r5, r6, r7, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8003ddc:	220c      	movs	r2, #12
 8003dde:	5e83      	ldrsh	r3, [r0, r2]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8003de0:	2200      	movs	r2, #0
    uint8_t * txData = pHandle->txBuffer;
 8003de2:	6887      	ldr	r7, [r0, #8]
{
 8003de4:	b085      	sub	sp, #20
 8003de6:	4680      	mov	r8, r0
 8003de8:	468b      	mov	fp, r1
    uint8_t * txData = pHandle->txBuffer;
 8003dea:	003d      	movs	r5, r7
    uint8_t * rxData = pHandle->rxBuffer;
 8003dec:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 8003dee:	81c2      	strh	r2, [r0, #14]
  uint8_t retVal = MCP_CMD_OK;
 8003df0:	9201      	str	r2, [sp, #4]
    uint8_t accessResult;
    while (rxLength > 0)
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dd69      	ble.n	8003eca <RI_SetRegCommandParser+0xfa>
 8003df6:	9700      	str	r7, [sp, #0]
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003df8:	b29b      	uxth	r3, r3
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8003dfa:	8820      	ldrh	r0, [r4, #0]
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003dfc:	469a      	mov	sl, r3
 8003dfe:	3b02      	subs	r3, #2
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4691      	mov	r9, r2
    retVal = MCP_CMD_NOK;
  }
  else
  {
#endif
    uint16_t regID = dataID & REG_MASK;
 8003e04:	0001      	movs	r1, r0
 8003e06:	2207      	movs	r2, #7
 8003e08:	4391      	bics	r1, r2
 8003e0a:	000a      	movs	r2, r1
    uint8_t motorID;
    uint8_t typeID;

    typeID = (uint8_t)dataID & TYPE_MASK;
 8003e0c:	2138      	movs	r1, #56	; 0x38
 8003e0e:	4001      	ands	r1, r0
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8003e10:	3908      	subs	r1, #8
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8003e12:	1ca6      	adds	r6, r4, #2
    switch (typeID)
 8003e14:	b2c9      	uxtb	r1, r1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8003e16:	46b4      	mov	ip, r6
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003e18:	b21b      	sxth	r3, r3
    switch (typeID)
 8003e1a:	2920      	cmp	r1, #32
 8003e1c:	d803      	bhi.n	8003e26 <RI_SetRegCommandParser+0x56>
 8003e1e:	4fb2      	ldr	r7, [pc, #712]	; (80040e8 <RI_SetRegCommandParser+0x318>)
 8003e20:	0089      	lsls	r1, r1, #2
 8003e22:	5879      	ldr	r1, [r7, r1]
 8003e24:	468f      	mov	pc, r1
 8003e26:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8003e28:	9a00      	ldr	r2, [sp, #0]
 8003e2a:	1aaa      	subs	r2, r5, r2
 8003e2c:	3201      	adds	r2, #1
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	2a01      	cmp	r2, #1
 8003e32:	d045      	beq.n	8003ec0 <RI_SetRegCommandParser+0xf0>
        if (txSyncFreeSpace !=0 )
 8003e34:	9900      	ldr	r1, [sp, #0]
 8003e36:	465a      	mov	r2, fp
 8003e38:	4689      	mov	r9, r1
 8003e3a:	444a      	add	r2, r9
 8003e3c:	b292      	uxth	r2, r2
 8003e3e:	b2a9      	uxth	r1, r5
 8003e40:	428a      	cmp	r2, r1
 8003e42:	d100      	bne.n	8003e46 <RI_SetRegCommandParser+0x76>
 8003e44:	e0be      	b.n	8003fc4 <RI_SetRegCommandParser+0x1f4>
          pHandle->txLength++;
 8003e46:	4642      	mov	r2, r8
 8003e48:	4641      	mov	r1, r8
          *txData = accessResult;
 8003e4a:	7028      	strb	r0, [r5, #0]
          pHandle->txLength++;
 8003e4c:	89d2      	ldrh	r2, [r2, #14]
          txData = txData+1;
 8003e4e:	3501      	adds	r5, #1
          pHandle->txLength++;
 8003e50:	3201      	adds	r2, #1
 8003e52:	81ca      	strh	r2, [r1, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d000      	beq.n	8003e5a <RI_SetRegCommandParser+0x8a>
 8003e58:	e0bc      	b.n	8003fd4 <RI_SetRegCommandParser+0x204>
    while (rxLength > 0)
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	dc00      	bgt.n	8003e60 <RI_SetRegCommandParser+0x90>
 8003e5e:	e262      	b.n	8004326 <RI_SetRegCommandParser+0x556>
 8003e60:	4664      	mov	r4, ip
 8003e62:	e7c9      	b.n	8003df8 <RI_SetRegCommandParser+0x28>

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8003e64:	8861      	ldrh	r1, [r4, #2]
 8003e66:	3102      	adds	r1, #2
 8003e68:	b289      	uxth	r1, r1
 8003e6a:	468a      	mov	sl, r1
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	dd00      	ble.n	8003e72 <RI_SetRegCommandParser+0xa2>
 8003e70:	e1b9      	b.n	80041e6 <RI_SetRegCommandParser+0x416>
          *size = 0;
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
        }
        else
        {
          switch (regID)
 8003e72:	23d4      	movs	r3, #212	; 0xd4
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d100      	bne.n	8003e7c <RI_SetRegCommandParser+0xac>
 8003e7a:	e1da      	b.n	8004232 <RI_SetRegCommandParser+0x462>
 8003e7c:	d800      	bhi.n	8003e80 <RI_SetRegCommandParser+0xb0>
 8003e7e:	e188      	b.n	8004192 <RI_SetRegCommandParser+0x3c2>
 8003e80:	23f4      	movs	r3, #244	; 0xf4
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d100      	bne.n	8003e8a <RI_SetRegCommandParser+0xba>
 8003e88:	e1e1      	b.n	800424e <RI_SetRegCommandParser+0x47e>
 8003e8a:	3381      	adds	r3, #129	; 0x81
 8003e8c:	33ff      	adds	r3, #255	; 0xff
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d000      	beq.n	8003e94 <RI_SetRegCommandParser+0xc4>
 8003e92:	e190      	b.n	80041b6 <RI_SetRegCommandParser+0x3e6>
            }

            case MC_REG_CURRENT_REF:
            {
              qd_t currComp;
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003e94:	88a2      	ldrh	r2, [r4, #4]
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	801a      	strh	r2, [r3, #0]
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
 8003e9a:	88e2      	ldrh	r2, [r4, #6]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8003e9c:	4893      	ldr	r0, [pc, #588]	; (80040ec <RI_SetRegCommandParser+0x31c>)
              currComp.d = *((int16_t *) &rawData[2]); //cstat !MISRAC2012-Rule-11.3
 8003e9e:	805a      	strh	r2, [r3, #2]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8003ea0:	9903      	ldr	r1, [sp, #12]
 8003ea2:	f7fe f8b9 	bl	8002018 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	1a9b      	subs	r3, r3, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8003eac:	9a00      	ldr	r2, [sp, #0]
      rxData = rxData+size;
 8003eae:	4456      	add	r6, sl
        if ((1U == number_of_item) && (0 == rxLength))
 8003eb0:	1aaa      	subs	r2, r5, r2
 8003eb2:	3201      	adds	r2, #1
 8003eb4:	b2d2      	uxtb	r2, r2
      rxData = rxData+size;
 8003eb6:	46b4      	mov	ip, r6
  uint8_t retVal = MCP_CMD_OK;
 8003eb8:	2000      	movs	r0, #0
      rxLength = (int16_t) (rxLength - size);
 8003eba:	b21b      	sxth	r3, r3
        if ((1U == number_of_item) && (0 == rxLength))
 8003ebc:	2a01      	cmp	r2, #1
 8003ebe:	d1b9      	bne.n	8003e34 <RI_SetRegCommandParser+0x64>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1b7      	bne.n	8003e34 <RI_SetRegCommandParser+0x64>
      if (MCP_CMD_OK == retVal)
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d000      	beq.n	8003eca <RI_SetRegCommandParser+0xfa>
 8003ec8:	e07d      	b.n	8003fc6 <RI_SetRegCommandParser+0x1f6>
      pHandle->txLength = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	2000      	movs	r0, #0
 8003ed0:	81d3      	strh	r3, [r2, #14]
 8003ed2:	e078      	b.n	8003fc6 <RI_SetRegCommandParser+0x1f6>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	56a2      	ldrsb	r2, [r4, r2]
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d100      	bne.n	8003ede <RI_SetRegCommandParser+0x10e>
 8003edc:	e1d2      	b.n	8004284 <RI_SetRegCommandParser+0x4b4>
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	dc00      	bgt.n	8003ee4 <RI_SetRegCommandParser+0x114>
 8003ee2:	e179      	b.n	80041d8 <RI_SetRegCommandParser+0x408>
 8003ee4:	b2b2      	uxth	r2, r6
 8003ee6:	46ac      	mov	ip, r5
 8003ee8:	46b2      	mov	sl, r6
 8003eea:	001d      	movs	r5, r3
 8003eec:	9f00      	ldr	r7, [sp, #0]
 8003eee:	0013      	movs	r3, r2
 8003ef0:	1c71      	adds	r1, r6, #1
 8003ef2:	e002      	b.n	8003efa <RI_SetRegCommandParser+0x12a>
 8003ef4:	4295      	cmp	r5, r2
 8003ef6:	dc00      	bgt.n	8003efa <RI_SetRegCommandParser+0x12a>
 8003ef8:	e165      	b.n	80041c6 <RI_SetRegCommandParser+0x3f6>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8003efa:	0008      	movs	r0, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003efc:	2600      	movs	r6, #0
 8003efe:	3101      	adds	r1, #1
 8003f00:	b28c      	uxth	r4, r1
 8003f02:	5786      	ldrsb	r6, [r0, r6]
 8003f04:	1ae2      	subs	r2, r4, r3
 8003f06:	b292      	uxth	r2, r2
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	d1f3      	bne.n	8003ef4 <RI_SetRegCommandParser+0x124>
      rxData = rxData+size;
 8003f0c:	4665      	mov	r5, ip
 8003f0e:	4656      	mov	r6, sl
 8003f10:	0011      	movs	r1, r2
 8003f12:	9700      	str	r7, [sp, #0]
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	7003      	strb	r3, [r0, #0]
      rxLength = (int16_t) (rxLength - size);
 8003f18:	464b      	mov	r3, r9
      rxData = rxData+size;
 8003f1a:	46b4      	mov	ip, r6
      rxLength = (int16_t) (rxLength - size);
 8003f1c:	1a9b      	subs	r3, r3, r2
        retVal = MCP_ERROR_RO_REG;
 8003f1e:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 8003f20:	b21b      	sxth	r3, r3
      rxData = rxData+size;
 8003f22:	448c      	add	ip, r1
 8003f24:	e780      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003f26:	2399      	movs	r3, #153	; 0x99
 8003f28:	8866      	ldrh	r6, [r4, #2]
        switch (regID)
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d100      	bne.n	8003f32 <RI_SetRegCommandParser+0x162>
 8003f30:	e1e6      	b.n	8004300 <RI_SetRegCommandParser+0x530>
 8003f32:	d900      	bls.n	8003f36 <RI_SetRegCommandParser+0x166>
 8003f34:	e09d      	b.n	8004072 <RI_SetRegCommandParser+0x2a2>
 8003f36:	2384      	movs	r3, #132	; 0x84
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d100      	bne.n	8003f40 <RI_SetRegCommandParser+0x170>
 8003f3e:	e1ec      	b.n	800431a <RI_SetRegCommandParser+0x54a>
 8003f40:	d800      	bhi.n	8003f44 <RI_SetRegCommandParser+0x174>
 8003f42:	e082      	b.n	800404a <RI_SetRegCommandParser+0x27a>
 8003f44:	23c4      	movs	r3, #196	; 0xc4
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d100      	bne.n	8003f4e <RI_SetRegCommandParser+0x17e>
 8003f4c:	e19e      	b.n	800428c <RI_SetRegCommandParser+0x4bc>
 8003f4e:	d95f      	bls.n	8004010 <RI_SetRegCommandParser+0x240>
 8003f50:	2389      	movs	r3, #137	; 0x89
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d054      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
 8003f58:	d945      	bls.n	8003fe6 <RI_SetRegCommandParser+0x216>
 8003f5a:	2395      	movs	r3, #149	; 0x95
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d000      	beq.n	8003f64 <RI_SetRegCommandParser+0x194>
 8003f62:	e0a0      	b.n	80040a6 <RI_SetRegCommandParser+0x2d6>
            currComp = MCI_GetIqdref(pMCIN);
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <RI_SetRegCommandParser+0x31c>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	4699      	mov	r9, r3
 8003f6a:	f7fe f949 	bl	8002200 <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 8003f6e:	ab03      	add	r3, sp, #12
            currComp = MCI_GetIqdref(pMCIN);
 8003f70:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 8003f72:	801e      	strh	r6, [r3, #0]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8003f74:	4648      	mov	r0, r9
 8003f76:	9903      	ldr	r1, [sp, #12]
 8003f78:	f7fe f84e 	bl	8002018 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8003f7c:	4653      	mov	r3, sl
      rxData = rxData+size;
 8003f7e:	1d22      	adds	r2, r4, #4
      rxLength = (int16_t) (rxLength - size);
 8003f80:	3b04      	subs	r3, #4
      rxData = rxData+size;
 8003f82:	4694      	mov	ip, r2
  uint8_t retVal = MCP_CMD_OK;
 8003f84:	2000      	movs	r0, #0
      rxLength = (int16_t) (rxLength - size);
 8003f86:	b21b      	sxth	r3, r3
            break;
 8003f88:	e74e      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
        switch (regID)
 8003f8a:	2a48      	cmp	r2, #72	; 0x48
 8003f8c:	d100      	bne.n	8003f90 <RI_SetRegCommandParser+0x1c0>
 8003f8e:	e123      	b.n	80041d8 <RI_SetRegCommandParser+0x408>
 8003f90:	2a88      	cmp	r2, #136	; 0x88
 8003f92:	d100      	bne.n	8003f96 <RI_SetRegCommandParser+0x1c6>
 8003f94:	e130      	b.n	80041f8 <RI_SetRegCommandParser+0x428>
      rxLength = (int16_t) (rxLength - size);
 8003f96:	4653      	mov	r3, sl
      rxData = rxData+size;
 8003f98:	1ce2      	adds	r2, r4, #3
      rxLength = (int16_t) (rxLength - size);
 8003f9a:	3b03      	subs	r3, #3
      rxData = rxData+size;
 8003f9c:	4694      	mov	ip, r2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003f9e:	2005      	movs	r0, #5
      rxLength = (int16_t) (rxLength - size);
 8003fa0:	b21b      	sxth	r3, r3
            break;
 8003fa2:	e741      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
        switch (regID)
 8003fa4:	2a58      	cmp	r2, #88	; 0x58
 8003fa6:	d100      	bne.n	8003faa <RI_SetRegCommandParser+0x1da>
 8003fa8:	e11f      	b.n	80041ea <RI_SetRegCommandParser+0x41a>
 8003faa:	2a98      	cmp	r2, #152	; 0x98
 8003fac:	d100      	bne.n	8003fb0 <RI_SetRegCommandParser+0x1e0>
 8003fae:	e12f      	b.n	8004210 <RI_SetRegCommandParser+0x440>
 8003fb0:	2a18      	cmp	r2, #24
 8003fb2:	d100      	bne.n	8003fb6 <RI_SetRegCommandParser+0x1e6>
 8003fb4:	e119      	b.n	80041ea <RI_SetRegCommandParser+0x41a>
      rxLength = (int16_t) (rxLength - size);
 8003fb6:	4653      	mov	r3, sl
      rxData = rxData+size;
 8003fb8:	1da2      	adds	r2, r4, #6
      rxLength = (int16_t) (rxLength - size);
 8003fba:	3b06      	subs	r3, #6
      rxData = rxData+size;
 8003fbc:	4694      	mov	ip, r2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003fbe:	2005      	movs	r0, #5
      rxLength = (int16_t) (rxLength - size);
 8003fc0:	b21b      	sxth	r3, r3
            break;
 8003fc2:	e731      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003fc4:	2008      	movs	r0, #8
}
 8003fc6:	b005      	add	sp, #20
 8003fc8:	bcf0      	pop	{r4, r5, r6, r7}
 8003fca:	46bb      	mov	fp, r7
 8003fcc:	46b2      	mov	sl, r6
 8003fce:	46a9      	mov	r9, r5
 8003fd0:	46a0      	mov	r8, r4
 8003fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003fd4:	2807      	cmp	r0, #7
 8003fd6:	d101      	bne.n	8003fdc <RI_SetRegCommandParser+0x20c>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003fd8:	2001      	movs	r0, #1
  return (retVal);
 8003fda:	e7f4      	b.n	8003fc6 <RI_SetRegCommandParser+0x1f6>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003fdc:	280a      	cmp	r0, #10
 8003fde:	d0fb      	beq.n	8003fd8 <RI_SetRegCommandParser+0x208>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	9201      	str	r2, [sp, #4]
 8003fe4:	e739      	b.n	8003e5a <RI_SetRegCommandParser+0x8a>
 8003fe6:	23ba      	movs	r3, #186	; 0xba
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d009      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
 8003fee:	d928      	bls.n	8004042 <RI_SetRegCommandParser+0x272>
 8003ff0:	2381      	movs	r3, #129	; 0x81
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d004      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
 8003ff8:	d917      	bls.n	800402a <RI_SetRegCommandParser+0x25a>
 8003ffa:	2385      	movs	r3, #133	; 0x85
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d118      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
      rxLength = (int16_t) (rxLength - size);
 8004002:	4653      	mov	r3, sl
      rxData = rxData+size;
 8004004:	1d22      	adds	r2, r4, #4
      rxLength = (int16_t) (rxLength - size);
 8004006:	3b04      	subs	r3, #4
      rxData = rxData+size;
 8004008:	4694      	mov	ip, r2
            retVal = MCP_ERROR_RO_REG;
 800400a:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 800400c:	b21b      	sxth	r3, r3
            break;
 800400e:	e70b      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
 8004010:	3b80      	subs	r3, #128	; 0x80
 8004012:	429a      	cmp	r2, r3
 8004014:	d100      	bne.n	8004018 <RI_SetRegCommandParser+0x248>
 8004016:	e168      	b.n	80042ea <RI_SetRegCommandParser+0x51a>
 8004018:	3340      	adds	r3, #64	; 0x40
 800401a:	429a      	cmp	r2, r3
 800401c:	d10a      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 800401e:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <RI_SetRegCommandParser+0x320>)
 8004020:	b231      	sxth	r1, r6
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	f001 fdba 	bl	8005b9c <PID_SetKI>
            break;
 8004028:	e7a8      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 800402a:	2247      	movs	r2, #71	; 0x47
 800402c:	3b80      	subs	r3, #128	; 0x80
 800402e:	4390      	bics	r0, r2
 8004030:	4298      	cmp	r0, r3
 8004032:	d0e6      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
      rxLength = (int16_t) (rxLength - size);
 8004034:	4653      	mov	r3, sl
      rxData = rxData+size;
 8004036:	1d22      	adds	r2, r4, #4
      rxLength = (int16_t) (rxLength - size);
 8004038:	3b04      	subs	r3, #4
      rxData = rxData+size;
 800403a:	4694      	mov	ip, r2
            retVal = MCP_ERROR_UNKNOWN_REG;
 800403c:	2005      	movs	r0, #5
      rxLength = (int16_t) (rxLength - size);
 800403e:	b21b      	sxth	r3, r3
            break;
 8004040:	e6f2      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
 8004042:	3b40      	subs	r3, #64	; 0x40
 8004044:	429a      	cmp	r2, r3
 8004046:	d0dc      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
 8004048:	e7f4      	b.n	8004034 <RI_SetRegCommandParser+0x264>
 800404a:	3b01      	subs	r3, #1
 800404c:	3bff      	subs	r3, #255	; 0xff
 800404e:	429a      	cmp	r2, r3
 8004050:	d100      	bne.n	8004054 <RI_SetRegCommandParser+0x284>
 8004052:	e134      	b.n	80042be <RI_SetRegCommandParser+0x4ee>
 8004054:	d930      	bls.n	80040b8 <RI_SetRegCommandParser+0x2e8>
 8004056:	23c8      	movs	r3, #200	; 0xc8
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	429a      	cmp	r2, r3
 800405c:	d100      	bne.n	8004060 <RI_SetRegCommandParser+0x290>
 800405e:	e122      	b.n	80042a6 <RI_SetRegCommandParser+0x4d6>
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	429a      	cmp	r2, r3
 8004064:	d1e6      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <RI_SetRegCommandParser+0x324>)
 8004068:	b231      	sxth	r1, r6
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	f001 fd96 	bl	8005b9c <PID_SetKI>
            break;
 8004070:	e784      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <RI_SetRegCommandParser+0x328>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d100      	bne.n	800407a <RI_SetRegCommandParser+0x2aa>
 8004078:	e126      	b.n	80042c8 <RI_SetRegCommandParser+0x4f8>
 800407a:	d951      	bls.n	8004120 <RI_SetRegCommandParser+0x350>
 800407c:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <RI_SetRegCommandParser+0x32c>)
 800407e:	429a      	cmp	r2, r3
 8004080:	d100      	bne.n	8004084 <RI_SetRegCommandParser+0x2b4>
 8004082:	e127      	b.n	80042d4 <RI_SetRegCommandParser+0x504>
 8004084:	d922      	bls.n	80040cc <RI_SetRegCommandParser+0x2fc>
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RI_SetRegCommandParser+0x330>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d100      	bne.n	800408e <RI_SetRegCommandParser+0x2be>
 800408c:	e104      	b.n	8004298 <RI_SetRegCommandParser+0x4c8>
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <RI_SetRegCommandParser+0x334>)
 8004090:	429a      	cmp	r2, r3
 8004092:	d0b6      	beq.n	8004002 <RI_SetRegCommandParser+0x232>
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <RI_SetRegCommandParser+0x338>)
 8004096:	429a      	cmp	r2, r3
 8004098:	d1cc      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <RI_SetRegCommandParser+0x324>)
 800409c:	0031      	movs	r1, r6
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f001 fd96 	bl	8005bd0 <PID_SetKIDivisorPOW2>
            break;
 80040a4:	e76a      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d8c4      	bhi.n	8004034 <RI_SetRegCommandParser+0x264>
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <RI_SetRegCommandParser+0x33c>)
 80040ac:	469c      	mov	ip, r3
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <RI_SetRegCommandParser+0x340>)
 80040b0:	4462      	add	r2, ip
 80040b2:	421a      	tst	r2, r3
 80040b4:	d1be      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
 80040b6:	e7a4      	b.n	8004002 <RI_SetRegCommandParser+0x232>
 80040b8:	2a90      	cmp	r2, #144	; 0x90
 80040ba:	d100      	bne.n	80040be <RI_SetRegCommandParser+0x2ee>
 80040bc:	e0ee      	b.n	800429c <RI_SetRegCommandParser+0x4cc>
 80040be:	2ad0      	cmp	r2, #208	; 0xd0
 80040c0:	d1b8      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 80040c2:	4814      	ldr	r0, [pc, #80]	; (8004114 <RI_SetRegCommandParser+0x344>)
 80040c4:	b231      	sxth	r1, r6
 80040c6:	f001 fd69 	bl	8005b9c <PID_SetKI>
            break;
 80040ca:	e757      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <RI_SetRegCommandParser+0x348>)
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d100      	bne.n	80040d4 <RI_SetRegCommandParser+0x304>
 80040d2:	e0ee      	b.n	80042b2 <RI_SetRegCommandParser+0x4e2>
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <RI_SetRegCommandParser+0x34c>)
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d1ac      	bne.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <RI_SetRegCommandParser+0x320>)
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80040dc:	0031      	movs	r1, r6
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	f001 fd94 	bl	8005c0c <PID_SetKDDivisorPOW2>
 80040e4:	e74a      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	080065a0 	.word	0x080065a0
 80040ec:	2000043c 	.word	0x2000043c
 80040f0:	20000370 	.word	0x20000370
 80040f4:	20000374 	.word	0x20000374
 80040f8:	00001510 	.word	0x00001510
 80040fc:	000015d0 	.word	0x000015d0
 8004100:	00001650 	.word	0x00001650
 8004104:	00001b58 	.word	0x00001b58
 8004108:	00001610 	.word	0x00001610
 800410c:	fffff730 	.word	0xfffff730
 8004110:	0000ffbf 	.word	0x0000ffbf
 8004114:	20000200 	.word	0x20000200
 8004118:	00001550 	.word	0x00001550
 800411c:	00001590 	.word	0x00001590
 8004120:	4b82      	ldr	r3, [pc, #520]	; (800432c <RI_SetRegCommandParser+0x55c>)
 8004122:	429a      	cmp	r2, r3
 8004124:	d100      	bne.n	8004128 <RI_SetRegCommandParser+0x358>
 8004126:	e0db      	b.n	80042e0 <RI_SetRegCommandParser+0x510>
 8004128:	d90a      	bls.n	8004140 <RI_SetRegCommandParser+0x370>
 800412a:	4b81      	ldr	r3, [pc, #516]	; (8004330 <RI_SetRegCommandParser+0x560>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d100      	bne.n	8004132 <RI_SetRegCommandParser+0x362>
 8004130:	e0e1      	b.n	80042f6 <RI_SetRegCommandParser+0x526>
 8004132:	4b80      	ldr	r3, [pc, #512]	; (8004334 <RI_SetRegCommandParser+0x564>)
 8004134:	429a      	cmp	r2, r3
 8004136:	d000      	beq.n	800413a <RI_SetRegCommandParser+0x36a>
 8004138:	e77c      	b.n	8004034 <RI_SetRegCommandParser+0x264>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800413a:	0031      	movs	r1, r6
 800413c:	487e      	ldr	r0, [pc, #504]	; (8004338 <RI_SetRegCommandParser+0x568>)
 800413e:	e7cf      	b.n	80040e0 <RI_SetRegCommandParser+0x310>
 8004140:	23e5      	movs	r3, #229	; 0xe5
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	429a      	cmp	r2, r3
 8004146:	d100      	bne.n	800414a <RI_SetRegCommandParser+0x37a>
 8004148:	e718      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 800414a:	d90e      	bls.n	800416a <RI_SetRegCommandParser+0x39a>
 800414c:	23e9      	movs	r3, #233	; 0xe9
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	429a      	cmp	r2, r3
 8004152:	d100      	bne.n	8004156 <RI_SetRegCommandParser+0x386>
 8004154:	e712      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 8004156:	d200      	bcs.n	800415a <RI_SetRegCommandParser+0x38a>
 8004158:	e76c      	b.n	8004034 <RI_SetRegCommandParser+0x264>
 800415a:	4b78      	ldr	r3, [pc, #480]	; (800433c <RI_SetRegCommandParser+0x56c>)
 800415c:	469c      	mov	ip, r3
 800415e:	4b78      	ldr	r3, [pc, #480]	; (8004340 <RI_SetRegCommandParser+0x570>)
 8004160:	4462      	add	r2, ip
 8004162:	421a      	tst	r2, r3
 8004164:	d000      	beq.n	8004168 <RI_SetRegCommandParser+0x398>
 8004166:	e765      	b.n	8004034 <RI_SetRegCommandParser+0x264>
 8004168:	e74b      	b.n	8004002 <RI_SetRegCommandParser+0x232>
 800416a:	23a5      	movs	r3, #165	; 0xa5
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	429a      	cmp	r2, r3
 8004170:	d100      	bne.n	8004174 <RI_SetRegCommandParser+0x3a4>
 8004172:	e746      	b.n	8004002 <RI_SetRegCommandParser+0x232>
 8004174:	d905      	bls.n	8004182 <RI_SetRegCommandParser+0x3b2>
 8004176:	23a9      	movs	r3, #169	; 0xa9
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	429a      	cmp	r2, r3
 800417c:	d100      	bne.n	8004180 <RI_SetRegCommandParser+0x3b0>
 800417e:	e740      	b.n	8004002 <RI_SetRegCommandParser+0x232>
 8004180:	e758      	b.n	8004034 <RI_SetRegCommandParser+0x264>
 8004182:	4b70      	ldr	r3, [pc, #448]	; (8004344 <RI_SetRegCommandParser+0x574>)
 8004184:	469c      	mov	ip, r3
 8004186:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <RI_SetRegCommandParser+0x570>)
 8004188:	4462      	add	r2, ip
 800418a:	421a      	tst	r2, r3
 800418c:	d000      	beq.n	8004190 <RI_SetRegCommandParser+0x3c0>
 800418e:	e751      	b.n	8004034 <RI_SetRegCommandParser+0x264>
 8004190:	e737      	b.n	8004002 <RI_SetRegCommandParser+0x232>
 8004192:	2aa8      	cmp	r2, #168	; 0xa8
 8004194:	d002      	beq.n	800419c <RI_SetRegCommandParser+0x3cc>
 8004196:	d909      	bls.n	80041ac <RI_SetRegCommandParser+0x3dc>
 8004198:	2ae8      	cmp	r2, #232	; 0xe8
 800419a:	d10c      	bne.n	80041b6 <RI_SetRegCommandParser+0x3e6>
      rxLength = (int16_t) (rxLength - size);
 800419c:	464b      	mov	r3, r9
 800419e:	4652      	mov	r2, sl
      rxData = rxData+size;
 80041a0:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 80041a2:	1a9b      	subs	r3, r3, r2
      rxData = rxData+size;
 80041a4:	46b4      	mov	ip, r6
              retVal = MCP_ERROR_RO_REG;
 80041a6:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	e63d      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
 80041ac:	3b62      	subs	r3, #98	; 0x62
 80041ae:	3bff      	subs	r3, #255	; 0xff
 80041b0:	4398      	bics	r0, r3
 80041b2:	2828      	cmp	r0, #40	; 0x28
 80041b4:	d0f2      	beq.n	800419c <RI_SetRegCommandParser+0x3cc>
 80041b6:	464b      	mov	r3, r9
 80041b8:	4652      	mov	r2, sl
      rxData = rxData+size;
 80041ba:	4456      	add	r6, sl
      rxLength = (int16_t) (rxLength - size);
 80041bc:	1a9b      	subs	r3, r3, r2
      rxData = rxData+size;
 80041be:	46b4      	mov	ip, r6
              retVal = MCP_ERROR_UNKNOWN_REG;
 80041c0:	2005      	movs	r0, #5
      rxLength = (int16_t) (rxLength - size);
 80041c2:	b21b      	sxth	r3, r3
              break;
 80041c4:	e630      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
      rxLength = (int16_t) (rxLength - size);
 80041c6:	4665      	mov	r5, ip
      rxData = rxData+size;
 80041c8:	46d4      	mov	ip, sl
      rxLength = (int16_t) (rxLength - size);
 80041ca:	1b1c      	subs	r4, r3, r4
 80041cc:	444c      	add	r4, r9
        retVal = MCP_ERROR_RO_REG;
 80041ce:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 80041d0:	9700      	str	r7, [sp, #0]
 80041d2:	b223      	sxth	r3, r4
      rxData = rxData+size;
 80041d4:	4494      	add	ip, r2
 80041d6:	e627      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
      rxLength = (int16_t) (rxLength - size);
 80041d8:	4653      	mov	r3, sl
      rxData = rxData+size;
 80041da:	1ce2      	adds	r2, r4, #3
      rxLength = (int16_t) (rxLength - size);
 80041dc:	3b03      	subs	r3, #3
      rxData = rxData+size;
 80041de:	4694      	mov	ip, r2
            retVal = MCP_ERROR_RO_REG;
 80041e0:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 80041e2:	b21b      	sxth	r3, r3
 80041e4:	e620      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 80041e6:	200a      	movs	r0, #10
 80041e8:	e61e      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
      rxLength = (int16_t) (rxLength - size);
 80041ea:	4653      	mov	r3, sl
      rxData = rxData+size;
 80041ec:	1da2      	adds	r2, r4, #6
      rxLength = (int16_t) (rxLength - size);
 80041ee:	3b06      	subs	r3, #6
      rxData = rxData+size;
 80041f0:	4694      	mov	ip, r2
            retVal = MCP_ERROR_RO_REG;
 80041f2:	2004      	movs	r0, #4
      rxLength = (int16_t) (rxLength - size);
 80041f4:	b21b      	sxth	r3, r3
 80041f6:	e617      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
            uint8_t regdata8 = *data;
 80041f8:	78a3      	ldrb	r3, [r4, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d038      	beq.n	8004270 <RI_SetRegCommandParser+0x4a0>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d02c      	beq.n	800425c <RI_SetRegCommandParser+0x48c>
      rxLength = (int16_t) (rxLength - size);
 8004202:	4653      	mov	r3, sl
      rxData = rxData+size;
 8004204:	1ce2      	adds	r2, r4, #3
      rxLength = (int16_t) (rxLength - size);
 8004206:	3b03      	subs	r3, #3
      rxData = rxData+size;
 8004208:	4694      	mov	ip, r2
  uint8_t retVal = MCP_CMD_OK;
 800420a:	2000      	movs	r0, #0
      rxLength = (int16_t) (rxLength - size);
 800420c:	b21b      	sxth	r3, r3
 800420e:	e60b      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8004210:	2300      	movs	r3, #0
 8004212:	5ef0      	ldrsh	r0, [r6, r3]
 8004214:	2106      	movs	r1, #6
 8004216:	f7fc f801 	bl	800021c <__divsi3>
 800421a:	2200      	movs	r2, #0
 800421c:	b201      	sxth	r1, r0
 800421e:	484a      	ldr	r0, [pc, #296]	; (8004348 <RI_SetRegCommandParser+0x578>)
 8004220:	f7fd fee6 	bl	8001ff0 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8004224:	4653      	mov	r3, sl
      rxData = rxData+size;
 8004226:	1da2      	adds	r2, r4, #6
      rxLength = (int16_t) (rxLength - size);
 8004228:	3b06      	subs	r3, #6
      rxData = rxData+size;
 800422a:	4694      	mov	ip, r2
  uint8_t retVal = MCP_CMD_OK;
 800422c:	2000      	movs	r0, #0
      rxLength = (int16_t) (rxLength - size);
 800422e:	b21b      	sxth	r3, r3
            break;
 8004230:	e5fa      	b.n	8003e28 <RI_SetRegCommandParser+0x58>
              rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8004232:	88e0      	ldrh	r0, [r4, #6]
 8004234:	88a2      	ldrh	r2, [r4, #4]
 8004236:	0400      	lsls	r0, r0, #16
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8004238:	2106      	movs	r1, #6
              rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 800423a:	4310      	orrs	r0, r2
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800423c:	f7fb ffee 	bl	800021c <__divsi3>
 8004240:	8927      	ldrh	r7, [r4, #8]
 8004242:	b201      	sxth	r1, r0
 8004244:	003a      	movs	r2, r7
 8004246:	4840      	ldr	r0, [pc, #256]	; (8004348 <RI_SetRegCommandParser+0x578>)
 8004248:	f7fd fed2 	bl	8001ff0 <MCI_ExecSpeedRamp>
              break;
 800424c:	e62b      	b.n	8003ea6 <RI_SetRegCommandParser+0xd6>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800424e:	8922      	ldrh	r2, [r4, #8]
 8004250:	2304      	movs	r3, #4
 8004252:	5ee1      	ldrsh	r1, [r4, r3]
 8004254:	483c      	ldr	r0, [pc, #240]	; (8004348 <RI_SetRegCommandParser+0x578>)
 8004256:	f7fd fed5 	bl	8002004 <MCI_ExecTorqueRamp>
              break;
 800425a:	e624      	b.n	8003ea6 <RI_SetRegCommandParser+0xd6>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 800425c:	4e3a      	ldr	r6, [pc, #232]	; (8004348 <RI_SetRegCommandParser+0x578>)
 800425e:	0030      	movs	r0, r6
 8004260:	f7fd ff98 	bl	8002194 <MCI_GetMecSpeedRefUnit>
 8004264:	2200      	movs	r2, #0
 8004266:	0001      	movs	r1, r0
 8004268:	0030      	movs	r0, r6
 800426a:	f7fd fec1 	bl	8001ff0 <MCI_ExecSpeedRamp>
 800426e:	e7c8      	b.n	8004202 <RI_SetRegCommandParser+0x432>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8004270:	4e35      	ldr	r6, [pc, #212]	; (8004348 <RI_SetRegCommandParser+0x578>)
 8004272:	0030      	movs	r0, r6
 8004274:	f7fd fff4 	bl	8002260 <MCI_GetTeref>
 8004278:	2200      	movs	r2, #0
 800427a:	0001      	movs	r1, r0
 800427c:	0030      	movs	r0, r6
 800427e:	f7fd fec1 	bl	8002004 <MCI_ExecTorqueRamp>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8004282:	e7be      	b.n	8004202 <RI_SetRegCommandParser+0x432>
  const char_t *tempsrcString = srcString;
 8004284:	0030      	movs	r0, r6
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004286:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 8004288:	2201      	movs	r2, #1
 800428a:	e643      	b.n	8003f14 <RI_SetRegCommandParser+0x144>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <RI_SetRegCommandParser+0x57c>)
 800428e:	b231      	sxth	r1, r6
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	f001 fcb3 	bl	8005bfc <PID_SetKD>
            break;
 8004296:	e671      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8004298:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <RI_SetRegCommandParser+0x580>)
 800429a:	e71f      	b.n	80040dc <RI_SetRegCommandParser+0x30c>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 800429c:	4826      	ldr	r0, [pc, #152]	; (8004338 <RI_SetRegCommandParser+0x568>)
 800429e:	b231      	sxth	r1, r6
 80042a0:	f001 fc7a 	bl	8005b98 <PID_SetKP>
            break;
 80042a4:	e66a      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <RI_SetRegCommandParser+0x580>)
 80042a8:	b231      	sxth	r1, r6
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	f001 fc74 	bl	8005b98 <PID_SetKP>
            break;
 80042b0:	e664      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <RI_SetRegCommandParser+0x57c>)
 80042b4:	0031      	movs	r1, r6
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	f001 fc8a 	bl	8005bd0 <PID_SetKIDivisorPOW2>
            break;
 80042bc:	e65e      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 80042be:	481e      	ldr	r0, [pc, #120]	; (8004338 <RI_SetRegCommandParser+0x568>)
 80042c0:	b231      	sxth	r1, r6
 80042c2:	f001 fc9b 	bl	8005bfc <PID_SetKD>
            break;
 80042c6:	e659      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <RI_SetRegCommandParser+0x57c>)
 80042ca:	0031      	movs	r1, r6
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f001 fc73 	bl	8005bb8 <PID_SetKPDivisorPOW2>
            break;
 80042d2:	e653      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <RI_SetRegCommandParser+0x580>)
 80042d6:	0031      	movs	r1, r6
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f001 fc6d 	bl	8005bb8 <PID_SetKPDivisorPOW2>
            break;
 80042de:	e64d      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80042e0:	0031      	movs	r1, r6
 80042e2:	4815      	ldr	r0, [pc, #84]	; (8004338 <RI_SetRegCommandParser+0x568>)
 80042e4:	f001 fc68 	bl	8005bb8 <PID_SetKPDivisorPOW2>
            break;
 80042e8:	e648      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 80042ea:	4b18      	ldr	r3, [pc, #96]	; (800434c <RI_SetRegCommandParser+0x57c>)
 80042ec:	b231      	sxth	r1, r6
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	f001 fc52 	bl	8005b98 <PID_SetKP>
            break;
 80042f4:	e642      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80042f6:	0031      	movs	r1, r6
 80042f8:	480f      	ldr	r0, [pc, #60]	; (8004338 <RI_SetRegCommandParser+0x568>)
 80042fa:	f001 fc69 	bl	8005bd0 <PID_SetKIDivisorPOW2>
            break;
 80042fe:	e63d      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            currComp = MCI_GetIqdref(pMCIN);
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <RI_SetRegCommandParser+0x578>)
 8004302:	0018      	movs	r0, r3
 8004304:	4699      	mov	r9, r3
 8004306:	f7fd ff7b 	bl	8002200 <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 800430a:	ab03      	add	r3, sp, #12
            currComp = MCI_GetIqdref(pMCIN);
 800430c:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 800430e:	805e      	strh	r6, [r3, #2]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8004310:	4648      	mov	r0, r9
 8004312:	9903      	ldr	r1, [sp, #12]
 8004314:	f7fd fe80 	bl	8002018 <MCI_SetCurrentReferences>
            break;
 8004318:	e630      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <RI_SetRegCommandParser+0x580>)
 800431c:	b231      	sxth	r1, r6
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	f001 fc6c 	bl	8005bfc <PID_SetKD>
            break;
 8004324:	e62a      	b.n	8003f7c <RI_SetRegCommandParser+0x1ac>
 8004326:	9801      	ldr	r0, [sp, #4]
 8004328:	e5cc      	b.n	8003ec4 <RI_SetRegCommandParser+0xf4>
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	00001450 	.word	0x00001450
 8004330:	00001490 	.word	0x00001490
 8004334:	000014d0 	.word	0x000014d0
 8004338:	20000200 	.word	0x20000200
 800433c:	fffff130 	.word	0xfffff130
 8004340:	0000ffbf 	.word	0x0000ffbf
 8004344:	fffff630 	.word	0xfffff630
 8004348:	2000043c 	.word	0x2000043c
 800434c:	20000370 	.word	0x20000370
 8004350:	20000374 	.word	0x20000374

08004354 <RI_GetRegCommandParser>:
{
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	464e      	mov	r6, r9
 8004358:	4657      	mov	r7, sl
 800435a:	4645      	mov	r5, r8
 800435c:	46de      	mov	lr, fp
 800435e:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 8004360:	6843      	ldr	r3, [r0, #4]
{
 8004362:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 8004364:	4699      	mov	r9, r3
    uint16_t rxLength = pHandle->rxLength;
 8004366:	8983      	ldrh	r3, [r0, #12]
    uint8_t * txData = pHandle->txBuffer;
 8004368:	6886      	ldr	r6, [r0, #8]
    uint16_t rxLength = pHandle->rxLength;
 800436a:	4698      	mov	r8, r3
    pHandle->txLength = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8004370:	4643      	mov	r3, r8
{
 8004372:	b091      	sub	sp, #68	; 0x44
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 8004374:	b20c      	sxth	r4, r1
    while (rxLength > 0U)
 8004376:	2b00      	cmp	r3, #0
 8004378:	d100      	bne.n	800437c <RI_GetRegCommandParser+0x28>
 800437a:	e2d8      	b.n	800492e <RI_GetRegCommandParser+0x5da>
    switch (typeID)
 800437c:	4bbe      	ldr	r3, [pc, #760]	; (8004678 <RI_GetRegCommandParser+0x324>)
    while (rxLength > 0U)
 800437e:	464d      	mov	r5, r9
    switch (typeID)
 8004380:	469a      	mov	sl, r3
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8004382:	8829      	ldrh	r1, [r5, #0]
    uint16_t regID = dataID & REG_MASK;
 8004384:	2307      	movs	r3, #7
 8004386:	000a      	movs	r2, r1
 8004388:	439a      	bics	r2, r3
 800438a:	0013      	movs	r3, r2
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 800438c:	2238      	movs	r2, #56	; 0x38
 800438e:	400a      	ands	r2, r1
    switch (typeID)
 8004390:	3a08      	subs	r2, #8
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	2a20      	cmp	r2, #32
 8004396:	d803      	bhi.n	80043a0 <RI_GetRegCommandParser+0x4c>
 8004398:	4651      	mov	r1, sl
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	588a      	ldr	r2, [r1, r2]
 800439e:	4697      	mov	pc, r2
 80043a0:	2007      	movs	r0, #7
}
 80043a2:	b011      	add	sp, #68	; 0x44
 80043a4:	bcf0      	pop	{r4, r5, r6, r7}
 80043a6:	46bb      	mov	fp, r7
 80043a8:	46b2      	mov	sl, r6
 80043aa:	46a9      	mov	r9, r5
 80043ac:	46a0      	mov	r8, r4
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rawData++;
 80043b0:	1cb0      	adds	r0, r6, #2
        switch (regID)
 80043b2:	2be8      	cmp	r3, #232	; 0xe8
 80043b4:	d100      	bne.n	80043b8 <RI_GetRegCommandParser+0x64>
 80043b6:	e2aa      	b.n	800490e <RI_GetRegCommandParser+0x5ba>
 80043b8:	d900      	bls.n	80043bc <RI_GetRegCommandParser+0x68>
 80043ba:	e0bf      	b.n	800453c <RI_GetRegCommandParser+0x1e8>
 80043bc:	2b68      	cmp	r3, #104	; 0x68
 80043be:	d100      	bne.n	80043c2 <RI_GetRegCommandParser+0x6e>
 80043c0:	e287      	b.n	80048d2 <RI_GetRegCommandParser+0x57e>
 80043c2:	2ba8      	cmp	r3, #168	; 0xa8
 80043c4:	d000      	beq.n	80043c8 <RI_GetRegCommandParser+0x74>
 80043c6:	e0aa      	b.n	800451e <RI_GetRegCommandParser+0x1ca>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 80043c8:	230e      	movs	r3, #14
 80043ca:	8033      	strh	r3, [r6, #0]
            if ((*rawSize) +2  > freeSpace)
 80043cc:	2c0f      	cmp	r4, #15
 80043ce:	dd00      	ble.n	80043d2 <RI_GetRegCommandParser+0x7e>
 80043d0:	e267      	b.n	80048a2 <RI_GetRegCommandParser+0x54e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80043d2:	2008      	movs	r0, #8
 80043d4:	e7e5      	b.n	80043a2 <RI_GetRegCommandParser+0x4e>
        switch (regID)
 80043d6:	2ba0      	cmp	r3, #160	; 0xa0
 80043d8:	d100      	bne.n	80043dc <RI_GetRegCommandParser+0x88>
 80043da:	e247      	b.n	800486c <RI_GetRegCommandParser+0x518>
 80043dc:	d900      	bls.n	80043e0 <RI_GetRegCommandParser+0x8c>
 80043de:	e0cb      	b.n	8004578 <RI_GetRegCommandParser+0x224>
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d100      	bne.n	80043e6 <RI_GetRegCommandParser+0x92>
 80043e4:	e228      	b.n	8004838 <RI_GetRegCommandParser+0x4e4>
 80043e6:	2b60      	cmp	r3, #96	; 0x60
 80043e8:	d000      	beq.n	80043ec <RI_GetRegCommandParser+0x98>
 80043ea:	e07e      	b.n	80044ea <RI_GetRegCommandParser+0x196>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80043ec:	2000      	movs	r0, #0
 80043ee:	49a3      	ldr	r1, [pc, #652]	; (800467c <RI_GetRegCommandParser+0x328>)
 80043f0:	5608      	ldrsb	r0, [r1, r0]
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d100      	bne.n	80043f8 <RI_GetRegCommandParser+0xa4>
 80043f6:	e25d      	b.n	80048b4 <RI_GetRegCommandParser+0x560>
 80043f8:	2c01      	cmp	r4, #1
 80043fa:	dc00      	bgt.n	80043fe <RI_GetRegCommandParser+0xaa>
 80043fc:	e212      	b.n	8004824 <RI_GetRegCommandParser+0x4d0>
 80043fe:	2301      	movs	r3, #1
 8004400:	1b9b      	subs	r3, r3, r6
 8004402:	46ac      	mov	ip, r5
 8004404:	0032      	movs	r2, r6
 8004406:	0025      	movs	r5, r4
 8004408:	001c      	movs	r4, r3
 800440a:	e002      	b.n	8004412 <RI_GetRegCommandParser+0xbe>
 800440c:	42ab      	cmp	r3, r5
 800440e:	db00      	blt.n	8004412 <RI_GetRegCommandParser+0xbe>
 8004410:	e208      	b.n	8004824 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 8004412:	7010      	strb	r0, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004414:	2000      	movs	r0, #0
    tempsrcString++;
 8004416:	3101      	adds	r1, #1
    tempdestString++;
 8004418:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800441a:	5608      	ldrsb	r0, [r1, r0]
 800441c:	1913      	adds	r3, r2, r4
 800441e:	b29b      	uxth	r3, r3
 8004420:	2800      	cmp	r0, #0
 8004422:	d1f3      	bne.n	800440c <RI_GetRegCommandParser+0xb8>
        txData = txData+size;
 8004424:	002c      	movs	r4, r5
 8004426:	0019      	movs	r1, r3
 8004428:	4665      	mov	r5, ip
    *tempdestString = (int8_t)0;
 800442a:	2000      	movs	r0, #0
        if (freeSpace >= 2U)
 800442c:	b2a4      	uxth	r4, r4
    *tempdestString = (int8_t)0;
 800442e:	7010      	strb	r0, [r2, #0]
        pHandle->txLength += size;
 8004430:	89fa      	ldrh	r2, [r7, #14]
        freeSpaceS16 = freeSpaceS16-size;
 8004432:	1ae4      	subs	r4, r4, r3
        pHandle->txLength += size;
 8004434:	189a      	adds	r2, r3, r2
    while (rxLength > 0U)
 8004436:	464b      	mov	r3, r9
 8004438:	3502      	adds	r5, #2
 800443a:	4443      	add	r3, r8
        pHandle->txLength += size;
 800443c:	81fa      	strh	r2, [r7, #14]
    while (rxLength > 0U)
 800443e:	b29b      	uxth	r3, r3
 8004440:	b2aa      	uxth	r2, r5
        txData = txData+size;
 8004442:	1876      	adds	r6, r6, r1
        freeSpaceS16 = freeSpaceS16-size;
 8004444:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8004446:	429a      	cmp	r2, r3
 8004448:	d19b      	bne.n	8004382 <RI_GetRegCommandParser+0x2e>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800444a:	2000      	movs	r0, #0
 800444c:	e7a9      	b.n	80043a2 <RI_GetRegCommandParser+0x4e>
        if (freeSpace >= 2U)
 800444e:	b2a4      	uxth	r4, r4
 8004450:	2c01      	cmp	r4, #1
 8004452:	d9be      	bls.n	80043d2 <RI_GetRegCommandParser+0x7e>
          switch (regID)
 8004454:	2295      	movs	r2, #149	; 0x95
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <RI_GetRegCommandParser+0x10a>
 800445c:	e269      	b.n	8004932 <RI_GetRegCommandParser+0x5de>
 800445e:	d81f      	bhi.n	80044a0 <RI_GetRegCommandParser+0x14c>
 8004460:	22c4      	movs	r2, #196	; 0xc4
 8004462:	0092      	lsls	r2, r2, #2
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <RI_GetRegCommandParser+0x116>
 8004468:	e27c      	b.n	8004964 <RI_GetRegCommandParser+0x610>
 800446a:	d800      	bhi.n	800446e <RI_GetRegCommandParser+0x11a>
 800446c:	e164      	b.n	8004738 <RI_GetRegCommandParser+0x3e4>
 800446e:	2285      	movs	r2, #133	; 0x85
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	4293      	cmp	r3, r2
 8004474:	d100      	bne.n	8004478 <RI_GetRegCommandParser+0x124>
 8004476:	e26d      	b.n	8004954 <RI_GetRegCommandParser+0x600>
 8004478:	d800      	bhi.n	800447c <RI_GetRegCommandParser+0x128>
 800447a:	e14a      	b.n	8004712 <RI_GetRegCommandParser+0x3be>
 800447c:	228d      	movs	r2, #141	; 0x8d
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <RI_GetRegCommandParser+0x132>
 8004484:	e284      	b.n	8004990 <RI_GetRegCommandParser+0x63c>
 8004486:	3240      	adds	r2, #64	; 0x40
 8004488:	4293      	cmp	r3, r2
 800448a:	d000      	beq.n	800448e <RI_GetRegCommandParser+0x13a>
 800448c:	e134      	b.n	80046f8 <RI_GetRegCommandParser+0x3a4>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800448e:	487c      	ldr	r0, [pc, #496]	; (8004680 <RI_GetRegCommandParser+0x32c>)
 8004490:	f7fd fea6 	bl	80021e0 <MCI_GetIqd>
 8004494:	900a      	str	r0, [sp, #40]	; 0x28
 8004496:	0c00      	lsrs	r0, r0, #16
              break;
 8004498:	2102      	movs	r1, #2
          *size = 2;
 800449a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800449c:	8030      	strh	r0, [r6, #0]
              break;
 800449e:	e7c7      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80044a0:	4a78      	ldr	r2, [pc, #480]	; (8004684 <RI_GetRegCommandParser+0x330>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d100      	bne.n	80044a8 <RI_GetRegCommandParser+0x154>
 80044a6:	e295      	b.n	80049d4 <RI_GetRegCommandParser+0x680>
 80044a8:	d800      	bhi.n	80044ac <RI_GetRegCommandParser+0x158>
 80044aa:	e0bd      	b.n	8004628 <RI_GetRegCommandParser+0x2d4>
 80044ac:	4a76      	ldr	r2, [pc, #472]	; (8004688 <RI_GetRegCommandParser+0x334>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d100      	bne.n	80044b4 <RI_GetRegCommandParser+0x160>
 80044b2:	e28d      	b.n	80049d0 <RI_GetRegCommandParser+0x67c>
 80044b4:	d800      	bhi.n	80044b8 <RI_GetRegCommandParser+0x164>
 80044b6:	e0a6      	b.n	8004606 <RI_GetRegCommandParser+0x2b2>
 80044b8:	4a74      	ldr	r2, [pc, #464]	; (800468c <RI_GetRegCommandParser+0x338>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d100      	bne.n	80044c0 <RI_GetRegCommandParser+0x16c>
 80044be:	e290      	b.n	80049e2 <RI_GetRegCommandParser+0x68e>
 80044c0:	4a73      	ldr	r2, [pc, #460]	; (8004690 <RI_GetRegCommandParser+0x33c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d000      	beq.n	80044c8 <RI_GetRegCommandParser+0x174>
 80044c6:	e092      	b.n	80045ee <RI_GetRegCommandParser+0x29a>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80044c8:	4b72      	ldr	r3, [pc, #456]	; (8004694 <RI_GetRegCommandParser+0x340>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	f001 fb9c 	bl	8005c08 <PID_GetKDDivisorPOW2>
 80044d0:	2102      	movs	r1, #2
          *size = 2;
 80044d2:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80044d4:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80044d6:	e7ab      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
        if (freeSpace > 0U)
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d100      	bne.n	80044de <RI_GetRegCommandParser+0x18a>
 80044dc:	e779      	b.n	80043d2 <RI_GetRegCommandParser+0x7e>
          switch (regID)
 80044de:	2b48      	cmp	r3, #72	; 0x48
 80044e0:	d100      	bne.n	80044e4 <RI_GetRegCommandParser+0x190>
 80044e2:	e1a1      	b.n	8004828 <RI_GetRegCommandParser+0x4d4>
 80044e4:	2b88      	cmp	r3, #136	; 0x88
 80044e6:	d100      	bne.n	80044ea <RI_GetRegCommandParser+0x196>
 80044e8:	e194      	b.n	8004814 <RI_GetRegCommandParser+0x4c0>
 80044ea:	2005      	movs	r0, #5
 80044ec:	e759      	b.n	80043a2 <RI_GetRegCommandParser+0x4e>
        if (freeSpace >= 4U)
 80044ee:	b2a4      	uxth	r4, r4
 80044f0:	2c03      	cmp	r4, #3
 80044f2:	d800      	bhi.n	80044f6 <RI_GetRegCommandParser+0x1a2>
 80044f4:	e76d      	b.n	80043d2 <RI_GetRegCommandParser+0x7e>
          switch (regID)
 80044f6:	2b98      	cmp	r3, #152	; 0x98
 80044f8:	d100      	bne.n	80044fc <RI_GetRegCommandParser+0x1a8>
 80044fa:	e1df      	b.n	80048bc <RI_GetRegCommandParser+0x568>
 80044fc:	d900      	bls.n	8004500 <RI_GetRegCommandParser+0x1ac>
 80044fe:	e17d      	b.n	80047fc <RI_GetRegCommandParser+0x4a8>
 8004500:	2b18      	cmp	r3, #24
 8004502:	d100      	bne.n	8004506 <RI_GetRegCommandParser+0x1b2>
 8004504:	e1de      	b.n	80048c4 <RI_GetRegCommandParser+0x570>
 8004506:	2b58      	cmp	r3, #88	; 0x58
 8004508:	d1ef      	bne.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800450a:	485d      	ldr	r0, [pc, #372]	; (8004680 <RI_GetRegCommandParser+0x32c>)
 800450c:	f7fd fe3a 	bl	8002184 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8004510:	0043      	lsls	r3, r0, #1
 8004512:	181b      	adds	r3, r3, r0
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	6033      	str	r3, [r6, #0]
 8004518:	2104      	movs	r1, #4
          *size = 4;
 800451a:	2304      	movs	r3, #4
 800451c:	e788      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 800451e:	2b28      	cmp	r3, #40	; 0x28
 8004520:	d1e3      	bne.n	80044ea <RI_GetRegCommandParser+0x196>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004522:	230a      	movs	r3, #10
 8004524:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8004526:	2c0b      	cmp	r4, #11
 8004528:	d800      	bhi.n	800452c <RI_GetRegCommandParser+0x1d8>
 800452a:	e752      	b.n	80043d2 <RI_GetRegCommandParser+0x7e>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800452c:	495a      	ldr	r1, [pc, #360]	; (8004698 <RI_GetRegCommandParser+0x344>)
 800452e:	220a      	movs	r2, #10
 8004530:	f001 fda4 	bl	800607c <memcpy>
        if (freeSpace >= 2U)
 8004534:	b2a4      	uxth	r4, r4
 8004536:	210c      	movs	r1, #12
        *size = (*rawSize) + 2U;
 8004538:	230c      	movs	r3, #12
 800453a:	e779      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 800453c:	22f4      	movs	r2, #244	; 0xf4
 800453e:	0052      	lsls	r2, r2, #1
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <RI_GetRegCommandParser+0x1f2>
 8004544:	e1d3      	b.n	80048ee <RI_GetRegCommandParser+0x59a>
 8004546:	3281      	adds	r2, #129	; 0x81
 8004548:	32ff      	adds	r2, #255	; 0xff
 800454a:	4293      	cmp	r3, r2
 800454c:	d136      	bne.n	80045bc <RI_GetRegCommandParser+0x268>
            *rawSize = 4;
 800454e:	2304      	movs	r3, #4
 8004550:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8004552:	4b4b      	ldr	r3, [pc, #300]	; (8004680 <RI_GetRegCommandParser+0x32c>)
        if (freeSpace >= 2U)
 8004554:	b2a4      	uxth	r4, r4
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8004556:	0018      	movs	r0, r3
 8004558:	469b      	mov	fp, r3
 800455a:	f7fd fe51 	bl	8002200 <MCI_GetIqdref>
 800455e:	9003      	str	r0, [sp, #12]
 8004560:	8070      	strh	r0, [r6, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004562:	4658      	mov	r0, fp
 8004564:	f7fd fe4c 	bl	8002200 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8004568:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800456a:	9002      	str	r0, [sp, #8]
        *size = (*rawSize) + 2U;
 800456c:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800456e:	0c00      	lsrs	r0, r0, #16
        *size = (*rawSize) + 2U;
 8004570:	b29b      	uxth	r3, r3
        txData = txData+size;
 8004572:	0019      	movs	r1, r3
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004574:	80b0      	strh	r0, [r6, #4]
      if (retVal == MCP_CMD_OK )
 8004576:	e75b      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004578:	2be0      	cmp	r3, #224	; 0xe0
 800457a:	d1b6      	bne.n	80044ea <RI_GetRegCommandParser+0x196>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800457c:	4b47      	ldr	r3, [pc, #284]	; (800469c <RI_GetRegCommandParser+0x348>)
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800457e:	2224      	movs	r2, #36	; 0x24
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0018      	movs	r0, r3
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004584:	5699      	ldrsb	r1, [r3, r2]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8004586:	3024      	adds	r0, #36	; 0x24
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004588:	2900      	cmp	r1, #0
 800458a:	d100      	bne.n	800458e <RI_GetRegCommandParser+0x23a>
 800458c:	e192      	b.n	80048b4 <RI_GetRegCommandParser+0x560>
 800458e:	2c01      	cmp	r4, #1
 8004590:	dc00      	bgt.n	8004594 <RI_GetRegCommandParser+0x240>
 8004592:	e147      	b.n	8004824 <RI_GetRegCommandParser+0x4d0>
 8004594:	2301      	movs	r3, #1
 8004596:	1b9b      	subs	r3, r3, r6
 8004598:	46ac      	mov	ip, r5
 800459a:	0032      	movs	r2, r6
 800459c:	0025      	movs	r5, r4
 800459e:	001c      	movs	r4, r3
 80045a0:	e002      	b.n	80045a8 <RI_GetRegCommandParser+0x254>
 80045a2:	42ab      	cmp	r3, r5
 80045a4:	db00      	blt.n	80045a8 <RI_GetRegCommandParser+0x254>
 80045a6:	e13d      	b.n	8004824 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 80045a8:	7011      	strb	r1, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80045aa:	2100      	movs	r1, #0
    tempsrcString++;
 80045ac:	3001      	adds	r0, #1
    tempdestString++;
 80045ae:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80045b0:	5641      	ldrsb	r1, [r0, r1]
 80045b2:	1913      	adds	r3, r2, r4
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2900      	cmp	r1, #0
 80045b8:	d1f3      	bne.n	80045a2 <RI_GetRegCommandParser+0x24e>
 80045ba:	e733      	b.n	8004424 <RI_GetRegCommandParser+0xd0>
 80045bc:	3ac1      	subs	r2, #193	; 0xc1
 80045be:	3aff      	subs	r2, #255	; 0xff
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d192      	bne.n	80044ea <RI_GetRegCommandParser+0x196>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <RI_GetRegCommandParser+0x32c>)
        if (freeSpace >= 2U)
 80045c6:	b2a4      	uxth	r4, r4
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80045c8:	0018      	movs	r0, r3
 80045ca:	469b      	mov	fp, r3
 80045cc:	f7fd fdca 	bl	8002164 <MCI_GetLastRampFinalSpeed>
 80045d0:	0043      	lsls	r3, r0, #1
 80045d2:	181b      	adds	r3, r3, r0
 80045d4:	005b      	lsls	r3, r3, #1
            *rpm16p = (uint16_t) rpm32;
 80045d6:	8073      	strh	r3, [r6, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 80045d8:	141b      	asrs	r3, r3, #16
 80045da:	80b3      	strh	r3, [r6, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80045dc:	4658      	mov	r0, fp
 80045de:	f7fd fdc9 	bl	8002174 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80045e2:	2306      	movs	r3, #6
        if (freeSpace >= 2U)
 80045e4:	2108      	movs	r1, #8
            *rawSize = 6;
 80045e6:	8033      	strh	r3, [r6, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80045e8:	80f0      	strh	r0, [r6, #6]
        *size = (*rawSize) + 2U;
 80045ea:	3302      	adds	r3, #2
 80045ec:	e720      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80045ee:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <RI_GetRegCommandParser+0x34c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d000      	beq.n	80045f6 <RI_GetRegCommandParser+0x2a2>
 80045f4:	e779      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 80045f6:	4b27      	ldr	r3, [pc, #156]	; (8004694 <RI_GetRegCommandParser+0x340>)
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f001 fadb 	bl	8005bb4 <PID_GetKPDivisorPOW2>
 80045fe:	2102      	movs	r1, #2
          *size = 2;
 8004600:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8004602:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004604:	e714      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004606:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <RI_GetRegCommandParser+0x350>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <RI_GetRegCommandParser+0x2ba>
 800460c:	e199      	b.n	8004942 <RI_GetRegCommandParser+0x5ee>
 800460e:	d923      	bls.n	8004658 <RI_GetRegCommandParser+0x304>
 8004610:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <RI_GetRegCommandParser+0x354>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d000      	beq.n	8004618 <RI_GetRegCommandParser+0x2c4>
 8004616:	e768      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <RI_GetRegCommandParser+0x358>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	f001 fad2 	bl	8005bc4 <PID_GetKIDivisorPOW2>
 8004620:	2102      	movs	r1, #2
          *size = 2;
 8004622:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8004624:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004626:	e703      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004628:	22a9      	movs	r2, #169	; 0xa9
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <RI_GetRegCommandParser+0x2de>
 8004630:	e1f8      	b.n	8004a24 <RI_GetRegCommandParser+0x6d0>
 8004632:	d94f      	bls.n	80046d4 <RI_GetRegCommandParser+0x380>
 8004634:	22ed      	movs	r2, #237	; 0xed
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <RI_GetRegCommandParser+0x2ea>
 800463c:	e202      	b.n	8004a44 <RI_GetRegCommandParser+0x6f0>
 800463e:	d93f      	bls.n	80046c0 <RI_GetRegCommandParser+0x36c>
 8004640:	22f1      	movs	r2, #241	; 0xf1
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	4293      	cmp	r3, r2
 8004646:	d000      	beq.n	800464a <RI_GetRegCommandParser+0x2f6>
 8004648:	e74f      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 800464a:	4819      	ldr	r0, [pc, #100]	; (80046b0 <RI_GetRegCommandParser+0x35c>)
 800464c:	f001 fc36 	bl	8005ebc <SPD_GetS16Speed>
 8004650:	2102      	movs	r1, #2
          *size = 2;
 8004652:	2302      	movs	r3, #2
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 8004654:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004656:	e6eb      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004658:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <RI_GetRegCommandParser+0x360>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d100      	bne.n	8004660 <RI_GetRegCommandParser+0x30c>
 800465e:	e1ea      	b.n	8004a36 <RI_GetRegCommandParser+0x6e2>
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <RI_GetRegCommandParser+0x364>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d000      	beq.n	8004668 <RI_GetRegCommandParser+0x314>
 8004666:	e740      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8004668:	4814      	ldr	r0, [pc, #80]	; (80046bc <RI_GetRegCommandParser+0x368>)
 800466a:	f001 facd 	bl	8005c08 <PID_GetKDDivisorPOW2>
 800466e:	2102      	movs	r1, #2
          *size = 2;
 8004670:	2302      	movs	r3, #2
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8004672:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004674:	e6dc      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	08006624 	.word	0x08006624
 800467c:	0800625c 	.word	0x0800625c
 8004680:	2000043c 	.word	0x2000043c
 8004684:	00001450 	.word	0x00001450
 8004688:	00001590 	.word	0x00001590
 800468c:	00001610 	.word	0x00001610
 8004690:	00001650 	.word	0x00001650
 8004694:	20000374 	.word	0x20000374
 8004698:	080062ec 	.word	0x080062ec
 800469c:	20000388 	.word	0x20000388
 80046a0:	000015d0 	.word	0x000015d0
 80046a4:	00001510 	.word	0x00001510
 80046a8:	00001550 	.word	0x00001550
 80046ac:	20000370 	.word	0x20000370
 80046b0:	200000e0 	.word	0x200000e0
 80046b4:	00001490 	.word	0x00001490
 80046b8:	000014d0 	.word	0x000014d0
 80046bc:	20000200 	.word	0x20000200
 80046c0:	4ac9      	ldr	r2, [pc, #804]	; (80049e8 <RI_GetRegCommandParser+0x694>)
 80046c2:	4694      	mov	ip, r2
 80046c4:	4ac9      	ldr	r2, [pc, #804]	; (80049ec <RI_GetRegCommandParser+0x698>)
 80046c6:	4463      	add	r3, ip
 80046c8:	4213      	tst	r3, r2
 80046ca:	d000      	beq.n	80046ce <RI_GetRegCommandParser+0x37a>
 80046cc:	e70d      	b.n	80044ea <RI_GetRegCommandParser+0x196>
 80046ce:	2102      	movs	r1, #2
 80046d0:	2302      	movs	r3, #2
 80046d2:	e6ad      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80046d4:	3a80      	subs	r2, #128	; 0x80
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d100      	bne.n	80046dc <RI_GetRegCommandParser+0x388>
 80046da:	e170      	b.n	80049be <RI_GetRegCommandParser+0x66a>
 80046dc:	d942      	bls.n	8004764 <RI_GetRegCommandParser+0x410>
 80046de:	22a5      	movs	r2, #165	; 0xa5
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d000      	beq.n	80046e8 <RI_GetRegCommandParser+0x394>
 80046e6:	e700      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80046e8:	48c1      	ldr	r0, [pc, #772]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80046ea:	f7fd fda9 	bl	8002240 <MCI_GetValphabeta>
 80046ee:	2102      	movs	r1, #2
 80046f0:	9005      	str	r0, [sp, #20]
          *size = 2;
 80046f2:	2302      	movs	r3, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80046f4:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80046f6:	e69b      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80046f8:	3a80      	subs	r2, #128	; 0x80
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d000      	beq.n	8004700 <RI_GetRegCommandParser+0x3ac>
 80046fe:	e6f4      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8004700:	48bb      	ldr	r0, [pc, #748]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004702:	f7fd fd5d 	bl	80021c0 <MCI_GetIalphabeta>
 8004706:	900c      	str	r0, [sp, #48]	; 0x30
 8004708:	0c00      	lsrs	r0, r0, #16
              break;
 800470a:	2102      	movs	r1, #2
          *size = 2;
 800470c:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800470e:	8030      	strh	r0, [r6, #0]
              break;
 8004710:	e68e      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004712:	3a80      	subs	r2, #128	; 0x80
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <RI_GetRegCommandParser+0x3c6>
 8004718:	e149      	b.n	80049ae <RI_GetRegCommandParser+0x65a>
 800471a:	d933      	bls.n	8004784 <RI_GetRegCommandParser+0x430>
 800471c:	2281      	movs	r2, #129	; 0x81
 800471e:	0112      	lsls	r2, r2, #4
 8004720:	4293      	cmp	r3, r2
 8004722:	d000      	beq.n	8004726 <RI_GetRegCommandParser+0x3d2>
 8004724:	e6e1      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8004726:	48b2      	ldr	r0, [pc, #712]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004728:	f7fd fd3a 	bl	80021a0 <MCI_GetIab>
 800472c:	900e      	str	r0, [sp, #56]	; 0x38
 800472e:	0c00      	lsrs	r0, r0, #16
              break;
 8004730:	2102      	movs	r1, #2
          *size = 2;
 8004732:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIab(pMCIN).b;
 8004734:	8030      	strh	r0, [r6, #0]
              break;
 8004736:	e67b      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004738:	3a41      	subs	r2, #65	; 0x41
 800473a:	3aff      	subs	r2, #255	; 0xff
 800473c:	4293      	cmp	r3, r2
 800473e:	d100      	bne.n	8004742 <RI_GetRegCommandParser+0x3ee>
 8004740:	e114      	b.n	800496c <RI_GetRegCommandParser+0x618>
 8004742:	d93c      	bls.n	80047be <RI_GetRegCommandParser+0x46a>
 8004744:	22a4      	movs	r2, #164	; 0xa4
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	4293      	cmp	r3, r2
 800474a:	d100      	bne.n	800474e <RI_GetRegCommandParser+0x3fa>
 800474c:	e10c      	b.n	8004968 <RI_GetRegCommandParser+0x614>
 800474e:	3240      	adds	r2, #64	; 0x40
 8004750:	4293      	cmp	r3, r2
 8004752:	d128      	bne.n	80047a6 <RI_GetRegCommandParser+0x452>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8004754:	4ba7      	ldr	r3, [pc, #668]	; (80049f4 <RI_GetRegCommandParser+0x6a0>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	f001 fa26 	bl	8005ba8 <PID_GetKI>
              break;
 800475c:	2102      	movs	r1, #2
          *size = 2;
 800475e:	2302      	movs	r3, #2
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8004760:	8030      	strh	r0, [r6, #0]
              break;
 8004762:	e665      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004764:	3a80      	subs	r2, #128	; 0x80
 8004766:	4293      	cmp	r3, r2
 8004768:	d100      	bne.n	800476c <RI_GetRegCommandParser+0x418>
 800476a:	e108      	b.n	800497e <RI_GetRegCommandParser+0x62a>
 800476c:	3240      	adds	r2, #64	; 0x40
 800476e:	4293      	cmp	r3, r2
 8004770:	d000      	beq.n	8004774 <RI_GetRegCommandParser+0x420>
 8004772:	e6ba      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8004774:	489e      	ldr	r0, [pc, #632]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004776:	f7fd fd53 	bl	8002220 <MCI_GetVqd>
 800477a:	2102      	movs	r1, #2
 800477c:	9007      	str	r0, [sp, #28]
          *size = 2;
 800477e:	2302      	movs	r3, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8004780:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004782:	e655      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004784:	22b2      	movs	r2, #178	; 0xb2
 8004786:	00d2      	lsls	r2, r2, #3
 8004788:	4293      	cmp	r3, r2
 800478a:	d100      	bne.n	800478e <RI_GetRegCommandParser+0x43a>
 800478c:	e0f0      	b.n	8004970 <RI_GetRegCommandParser+0x61c>
 800478e:	3240      	adds	r2, #64	; 0x40
 8004790:	4293      	cmp	r3, r2
 8004792:	d000      	beq.n	8004796 <RI_GetRegCommandParser+0x442>
 8004794:	e6a9      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8004796:	4b98      	ldr	r3, [pc, #608]	; (80049f8 <RI_GetRegCommandParser+0x6a4>)
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	f001 f9e5 	bl	8005b68 <NTC_GetAvTemp_C>
              break;
 800479e:	2102      	movs	r1, #2
          *size = 2;
 80047a0:	2302      	movs	r3, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80047a2:	8030      	strh	r0, [r6, #0]
              break;
 80047a4:	e644      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80047a6:	3ac0      	subs	r2, #192	; 0xc0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d000      	beq.n	80047ae <RI_GetRegCommandParser+0x45a>
 80047ac:	e69d      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 80047ae:	4b93      	ldr	r3, [pc, #588]	; (80049fc <RI_GetRegCommandParser+0x6a8>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	f001 fa25 	bl	8005c00 <PID_GetKD>
              break;
 80047b6:	2102      	movs	r1, #2
          *size = 2;
 80047b8:	2302      	movs	r3, #2
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80047ba:	8030      	strh	r0, [r6, #0]
              break;
 80047bc:	e638      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80047be:	3ac0      	subs	r2, #192	; 0xc0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <RI_GetRegCommandParser+0x472>
 80047c4:	e0bf      	b.n	8004946 <RI_GetRegCommandParser+0x5f2>
 80047c6:	d90c      	bls.n	80047e2 <RI_GetRegCommandParser+0x48e>
 80047c8:	22c8      	movs	r2, #200	; 0xc8
 80047ca:	0052      	lsls	r2, r2, #1
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d000      	beq.n	80047d2 <RI_GetRegCommandParser+0x47e>
 80047d0:	e68b      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 80047d2:	4b8a      	ldr	r3, [pc, #552]	; (80049fc <RI_GetRegCommandParser+0x6a8>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f001 f9e3 	bl	8005ba0 <PID_GetKP>
              break;
 80047da:	2102      	movs	r1, #2
          *size = 2;
 80047dc:	2302      	movs	r3, #2
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80047de:	8030      	strh	r0, [r6, #0]
              break;
 80047e0:	e626      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80047e2:	2b90      	cmp	r3, #144	; 0x90
 80047e4:	d100      	bne.n	80047e8 <RI_GetRegCommandParser+0x494>
 80047e6:	e0db      	b.n	80049a0 <RI_GetRegCommandParser+0x64c>
 80047e8:	2bd0      	cmp	r3, #208	; 0xd0
 80047ea:	d000      	beq.n	80047ee <RI_GetRegCommandParser+0x49a>
 80047ec:	e67d      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80047ee:	4884      	ldr	r0, [pc, #528]	; (8004a00 <RI_GetRegCommandParser+0x6ac>)
 80047f0:	f001 f9da 	bl	8005ba8 <PID_GetKI>
              break;
 80047f4:	2102      	movs	r1, #2
          *size = 2;
 80047f6:	2302      	movs	r3, #2
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 80047f8:	8030      	strh	r0, [r6, #0]
              break;
 80047fa:	e619      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 80047fc:	4a81      	ldr	r2, [pc, #516]	; (8004a04 <RI_GetRegCommandParser+0x6b0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d000      	beq.n	8004804 <RI_GetRegCommandParser+0x4b0>
 8004802:	e672      	b.n	80044ea <RI_GetRegCommandParser+0x196>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8004804:	4b80      	ldr	r3, [pc, #512]	; (8004a08 <RI_GetRegCommandParser+0x6b4>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	f001 fa66 	bl	8005cd8 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val;
 800480c:	2104      	movs	r1, #4
          *size = 4;
 800480e:	2304      	movs	r3, #4
              *regdataU32 = ReadVal.U32_Val;
 8004810:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004812:	e60d      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004814:	4876      	ldr	r0, [pc, #472]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004816:	f7fd fca3 	bl	8002160 <MCI_GetControlMode>
        if (freeSpace >= 2U)
 800481a:	b2a4      	uxth	r4, r4
              break;
 800481c:	2101      	movs	r1, #1
          *size = 1;
 800481e:	2301      	movs	r3, #1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004820:	7030      	strb	r0, [r6, #0]
              break;
 8004822:	e605      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
    retVal = MCP_ERROR_STRING_FORMAT;
 8004824:	2006      	movs	r0, #6
 8004826:	e5bc      	b.n	80043a2 <RI_GetRegCommandParser+0x4e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004828:	4871      	ldr	r0, [pc, #452]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 800482a:	f7fd fc45 	bl	80020b8 <MCI_GetSTMState>
        if (freeSpace >= 2U)
 800482e:	b2a4      	uxth	r4, r4
 8004830:	2101      	movs	r1, #1
          *size = 1;
 8004832:	2301      	movs	r3, #1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004834:	7030      	strb	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004836:	e5fb      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004838:	2000      	movs	r0, #0
 800483a:	4974      	ldr	r1, [pc, #464]	; (8004a0c <RI_GetRegCommandParser+0x6b8>)
 800483c:	5608      	ldrsb	r0, [r1, r0]
 800483e:	2800      	cmp	r0, #0
 8004840:	d038      	beq.n	80048b4 <RI_GetRegCommandParser+0x560>
 8004842:	2c01      	cmp	r4, #1
 8004844:	ddee      	ble.n	8004824 <RI_GetRegCommandParser+0x4d0>
 8004846:	2301      	movs	r3, #1
 8004848:	1b9b      	subs	r3, r3, r6
 800484a:	46ac      	mov	ip, r5
 800484c:	0032      	movs	r2, r6
 800484e:	0025      	movs	r5, r4
 8004850:	001c      	movs	r4, r3
 8004852:	e001      	b.n	8004858 <RI_GetRegCommandParser+0x504>
 8004854:	42ab      	cmp	r3, r5
 8004856:	dae5      	bge.n	8004824 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 8004858:	7010      	strb	r0, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800485a:	2000      	movs	r0, #0
    tempsrcString++;
 800485c:	3101      	adds	r1, #1
    tempdestString++;
 800485e:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004860:	5608      	ldrsb	r0, [r1, r0]
 8004862:	1913      	adds	r3, r2, r4
 8004864:	b29b      	uxth	r3, r3
 8004866:	2800      	cmp	r0, #0
 8004868:	d1f4      	bne.n	8004854 <RI_GetRegCommandParser+0x500>
 800486a:	e5db      	b.n	8004424 <RI_GetRegCommandParser+0xd0>
 800486c:	2100      	movs	r1, #0
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800486e:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <RI_GetRegCommandParser+0x6bc>)
 8004870:	6818      	ldr	r0, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004872:	5641      	ldrsb	r1, [r0, r1]
 8004874:	2900      	cmp	r1, #0
 8004876:	d01d      	beq.n	80048b4 <RI_GetRegCommandParser+0x560>
 8004878:	2c01      	cmp	r4, #1
 800487a:	ddd3      	ble.n	8004824 <RI_GetRegCommandParser+0x4d0>
 800487c:	2301      	movs	r3, #1
 800487e:	1b9b      	subs	r3, r3, r6
 8004880:	46ac      	mov	ip, r5
 8004882:	0032      	movs	r2, r6
 8004884:	0025      	movs	r5, r4
 8004886:	001c      	movs	r4, r3
 8004888:	e001      	b.n	800488e <RI_GetRegCommandParser+0x53a>
 800488a:	42ab      	cmp	r3, r5
 800488c:	daca      	bge.n	8004824 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800488e:	7011      	strb	r1, [r2, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004890:	2100      	movs	r1, #0
    tempsrcString++;
 8004892:	3001      	adds	r0, #1
    tempdestString++;
 8004894:	3201      	adds	r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8004896:	5641      	ldrsb	r1, [r0, r1]
 8004898:	1913      	adds	r3, r2, r4
 800489a:	b29b      	uxth	r3, r3
 800489c:	2900      	cmp	r1, #0
 800489e:	d1f4      	bne.n	800488a <RI_GetRegCommandParser+0x536>
 80048a0:	e5c0      	b.n	8004424 <RI_GetRegCommandParser+0xd0>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <RI_GetRegCommandParser+0x6c0>)
 80048a4:	220e      	movs	r2, #14
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	f001 fbe8 	bl	800607c <memcpy>
        if (freeSpace >= 2U)
 80048ac:	b2a4      	uxth	r4, r4
 80048ae:	2110      	movs	r1, #16
        *size = (*rawSize) + 2U;
 80048b0:	2310      	movs	r3, #16
 80048b2:	e5bd      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80048b4:	0032      	movs	r2, r6
 80048b6:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 80048b8:	2301      	movs	r3, #1
 80048ba:	e5b6      	b.n	800442a <RI_GetRegCommandParser+0xd6>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80048bc:	484c      	ldr	r0, [pc, #304]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80048be:	f7fd fc69 	bl	8002194 <MCI_GetMecSpeedRefUnit>
 80048c2:	e625      	b.n	8004510 <RI_GetRegCommandParser+0x1bc>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80048c4:	484a      	ldr	r0, [pc, #296]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80048c6:	f7fd fc45 	bl	8002154 <MCI_GetFaultState>
 80048ca:	2104      	movs	r1, #4
          *size = 4;
 80048cc:	2304      	movs	r3, #4
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80048ce:	6030      	str	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80048d0:	e5ae      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80048d2:	233c      	movs	r3, #60	; 0x3c
 80048d4:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80048d6:	2c3d      	cmp	r4, #61	; 0x3d
 80048d8:	d800      	bhi.n	80048dc <RI_GetRegCommandParser+0x588>
 80048da:	e57a      	b.n	80043d2 <RI_GetRegCommandParser+0x7e>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80048dc:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <RI_GetRegCommandParser+0x6c4>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80048de:	223c      	movs	r2, #60	; 0x3c
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	f001 fbcb 	bl	800607c <memcpy>
        if (freeSpace >= 2U)
 80048e6:	b2a4      	uxth	r4, r4
 80048e8:	213e      	movs	r1, #62	; 0x3e
        *size = (*rawSize) + 2U;
 80048ea:	233e      	movs	r3, #62	; 0x3e
 80048ec:	e5a0      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
            *rawSize = 4;
 80048ee:	2304      	movs	r3, #4
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80048f0:	483f      	ldr	r0, [pc, #252]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
            *rawSize = 4;
 80048f2:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80048f4:	f7fd fc3a 	bl	800216c <MCI_GetLastRampFinalTorque>
 80048f8:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80048fa:	483d      	ldr	r0, [pc, #244]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80048fc:	f7fd fc3a 	bl	8002174 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8004900:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004902:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8004904:	3302      	adds	r3, #2
 8004906:	b29b      	uxth	r3, r3
        txData = txData+size;
 8004908:	0019      	movs	r1, r3
        if (freeSpace >= 2U)
 800490a:	b2a4      	uxth	r4, r4
 800490c:	e590      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800490e:	230e      	movs	r3, #14
 8004910:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8004912:	2c0f      	cmp	r4, #15
 8004914:	d800      	bhi.n	8004918 <RI_GetRegCommandParser+0x5c4>
 8004916:	e55c      	b.n	80043d2 <RI_GetRegCommandParser+0x7e>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004918:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <RI_GetRegCommandParser+0x6c8>)
 800491a:	220e      	movs	r2, #14
 800491c:	681b      	ldr	r3, [r3, #0]
        if (freeSpace >= 2U)
 800491e:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004920:	0019      	movs	r1, r3
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	f001 fbaa 	bl	800607c <memcpy>
        if (freeSpace >= 2U)
 8004928:	2110      	movs	r1, #16
        *size = (*rawSize) + 2U;
 800492a:	2310      	movs	r3, #16
 800492c:	e580      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
  uint8_t retVal = MCP_CMD_NOK;
 800492e:	2001      	movs	r0, #1
 8004930:	e537      	b.n	80043a2 <RI_GetRegCommandParser+0x4e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8004932:	482f      	ldr	r0, [pc, #188]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004934:	f7fd fc64 	bl	8002200 <MCI_GetIqdref>
              break;
 8004938:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800493a:	9009      	str	r0, [sp, #36]	; 0x24
          *size = 2;
 800493c:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800493e:	8030      	strh	r0, [r6, #0]
              break;
 8004940:	e576      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <RI_GetRegCommandParser+0x6a0>)
 8004944:	e658      	b.n	80045f8 <RI_GetRegCommandParser+0x2a4>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8004946:	482e      	ldr	r0, [pc, #184]	; (8004a00 <RI_GetRegCommandParser+0x6ac>)
 8004948:	f001 f95a 	bl	8005c00 <PID_GetKD>
              break;
 800494c:	2102      	movs	r1, #2
          *size = 2;
 800494e:	2302      	movs	r3, #2
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8004950:	8030      	strh	r0, [r6, #0]
              break;
 8004952:	e56d      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8004954:	4826      	ldr	r0, [pc, #152]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004956:	f7fd fc33 	bl	80021c0 <MCI_GetIalphabeta>
              break;
 800495a:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800495c:	900d      	str	r0, [sp, #52]	; 0x34
          *size = 2;
 800495e:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8004960:	8030      	strh	r0, [r6, #0]
              break;
 8004962:	e565      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <RI_GetRegCommandParser+0x6a0>)
 8004966:	e723      	b.n	80047b0 <RI_GetRegCommandParser+0x45c>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <RI_GetRegCommandParser+0x6a0>)
 800496a:	e733      	b.n	80047d4 <RI_GetRegCommandParser+0x480>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 800496c:	4b23      	ldr	r3, [pc, #140]	; (80049fc <RI_GetRegCommandParser+0x6a8>)
 800496e:	e6f2      	b.n	8004756 <RI_GetRegCommandParser+0x402>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8004970:	482b      	ldr	r0, [pc, #172]	; (8004a20 <RI_GetRegCommandParser+0x6cc>)
 8004972:	f000 ffc7 	bl	8005904 <VBS_GetAvBusVoltage_V>
              break;
 8004976:	2102      	movs	r1, #2
          *size = 2;
 8004978:	2302      	movs	r3, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 800497a:	8030      	strh	r0, [r6, #0]
              break;
 800497c:	e558      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800497e:	481c      	ldr	r0, [pc, #112]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004980:	f7fd fc3e 	bl	8002200 <MCI_GetIqdref>
 8004984:	9008      	str	r0, [sp, #32]
 8004986:	0c00      	lsrs	r0, r0, #16
 8004988:	2102      	movs	r1, #2
          *size = 2;
 800498a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800498c:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800498e:	e54f      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8004990:	4817      	ldr	r0, [pc, #92]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 8004992:	f7fd fc25 	bl	80021e0 <MCI_GetIqd>
              break;
 8004996:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8004998:	900b      	str	r0, [sp, #44]	; 0x2c
          *size = 2;
 800499a:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800499c:	8030      	strh	r0, [r6, #0]
              break;
 800499e:	e547      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80049a0:	4817      	ldr	r0, [pc, #92]	; (8004a00 <RI_GetRegCommandParser+0x6ac>)
 80049a2:	f001 f8fd 	bl	8005ba0 <PID_GetKP>
 80049a6:	2102      	movs	r1, #2
          *size = 2;
 80049a8:	2302      	movs	r3, #2
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 80049aa:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80049ac:	e540      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80049ae:	4810      	ldr	r0, [pc, #64]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80049b0:	f7fd fbf6 	bl	80021a0 <MCI_GetIab>
              break;
 80049b4:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 80049b6:	900f      	str	r0, [sp, #60]	; 0x3c
          *size = 2;
 80049b8:	2302      	movs	r3, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 80049ba:	8030      	strh	r0, [r6, #0]
              break;
 80049bc:	e538      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80049be:	480c      	ldr	r0, [pc, #48]	; (80049f0 <RI_GetRegCommandParser+0x69c>)
 80049c0:	f7fd fc2e 	bl	8002220 <MCI_GetVqd>
 80049c4:	9006      	str	r0, [sp, #24]
 80049c6:	0c00      	lsrs	r0, r0, #16
 80049c8:	2102      	movs	r1, #2
          *size = 2;
 80049ca:	2302      	movs	r3, #2
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80049cc:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80049ce:	e52f      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80049d0:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <RI_GetRegCommandParser+0x6a0>)
 80049d2:	e57a      	b.n	80044ca <RI_GetRegCommandParser+0x176>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80049d4:	480a      	ldr	r0, [pc, #40]	; (8004a00 <RI_GetRegCommandParser+0x6ac>)
 80049d6:	f001 f8ed 	bl	8005bb4 <PID_GetKPDivisorPOW2>
 80049da:	2102      	movs	r1, #2
          *size = 2;
 80049dc:	2302      	movs	r3, #2
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80049de:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 80049e0:	e526      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <RI_GetRegCommandParser+0x6a8>)
 80049e4:	e619      	b.n	800461a <RI_GetRegCommandParser+0x2c6>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	fffff1b0 	.word	0xfffff1b0
 80049ec:	0000ffbf 	.word	0x0000ffbf
 80049f0:	2000043c 	.word	0x2000043c
 80049f4:	20000370 	.word	0x20000370
 80049f8:	2000037c 	.word	0x2000037c
 80049fc:	20000374 	.word	0x20000374
 8004a00:	20000200 	.word	0x20000200
 8004a04:	00001b58 	.word	0x00001b58
 8004a08:	2000036c 	.word	0x2000036c
 8004a0c:	0800626c 	.word	0x0800626c
 8004a10:	2000038c 	.word	0x2000038c
 8004a14:	20000380 	.word	0x20000380
 8004a18:	20000388 	.word	0x20000388
 8004a1c:	20000384 	.word	0x20000384
 8004a20:	20000000 	.word	0x20000000
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004a24:	480b      	ldr	r0, [pc, #44]	; (8004a54 <RI_GetRegCommandParser+0x700>)
 8004a26:	f7fd fc0b 	bl	8002240 <MCI_GetValphabeta>
 8004a2a:	9004      	str	r0, [sp, #16]
 8004a2c:	0c00      	lsrs	r0, r0, #16
 8004a2e:	2102      	movs	r1, #2
          *size = 2;
 8004a30:	2302      	movs	r3, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004a32:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004a34:	e4fc      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8004a36:	4808      	ldr	r0, [pc, #32]	; (8004a58 <RI_GetRegCommandParser+0x704>)
 8004a38:	f001 f8c4 	bl	8005bc4 <PID_GetKIDivisorPOW2>
 8004a3c:	2102      	movs	r1, #2
          *size = 2;
 8004a3e:	2302      	movs	r3, #2
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8004a40:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004a42:	e4f5      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 8004a44:	4805      	ldr	r0, [pc, #20]	; (8004a5c <RI_GetRegCommandParser+0x708>)
 8004a46:	f001 f9fd 	bl	8005e44 <SPD_GetElAngle>
 8004a4a:	2102      	movs	r1, #2
          *size = 2;
 8004a4c:	2302      	movs	r3, #2
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 8004a4e:	8030      	strh	r0, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8004a50:	e4ee      	b.n	8004430 <RI_GetRegCommandParser+0xdc>
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	2000043c 	.word	0x2000043c
 8004a58:	20000200 	.word	0x20000200
 8004a5c:	200000e0 	.word	0x200000e0

08004a60 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t *regConv)
{
 8004a60:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a62:	4d48      	ldr	r5, [pc, #288]	; (8004b84 <RCM_RegisterRegConv+0x124>)
{
 8004a64:	0003      	movs	r3, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	2900      	cmp	r1, #0
 8004a6a:	d026      	beq.n	8004aba <RCM_RegisterRegConv+0x5a>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a6c:	7902      	ldrb	r2, [r0, #4]
 8004a6e:	7908      	ldrb	r0, [r1, #4]
 8004a70:	4282      	cmp	r2, r0
 8004a72:	d016      	beq.n	8004aa2 <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a74:	6869      	ldr	r1, [r5, #4]
 8004a76:	2900      	cmp	r1, #0
 8004a78:	d055      	beq.n	8004b26 <RCM_RegisterRegConv+0xc6>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a7a:	790c      	ldrb	r4, [r1, #4]
  uint8_t handle = 255U;
 8004a7c:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a7e:	4294      	cmp	r4, r2
 8004a80:	d023      	beq.n	8004aca <RCM_RegisterRegConv+0x6a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a82:	68a9      	ldr	r1, [r5, #8]
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d064      	beq.n	8004b52 <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a88:	790c      	ldrb	r4, [r1, #4]
 8004a8a:	4294      	cmp	r4, r2
 8004a8c:	d053      	beq.n	8004b36 <RCM_RegisterRegConv+0xd6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a8e:	68e9      	ldr	r1, [r5, #12]
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d020      	beq.n	8004ad6 <RCM_RegisterRegConv+0x76>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a94:	790c      	ldrb	r4, [r1, #4]
 8004a96:	4294      	cmp	r4, r2
 8004a98:	d064      	beq.n	8004b64 <RCM_RegisterRegConv+0x104>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8004a9a:	2803      	cmp	r0, #3
 8004a9c:	d91e      	bls.n	8004adc <RCM_RegisterRegConv+0x7c>
 8004a9e:	20ff      	movs	r0, #255	; 0xff
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004aa2:	6809      	ldr	r1, [r1, #0]
 8004aa4:	681c      	ldr	r4, [r3, #0]
 8004aa6:	42a1      	cmp	r1, r4
 8004aa8:	d04b      	beq.n	8004b42 <RCM_RegisterRegConv+0xe2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aaa:	6869      	ldr	r1, [r5, #4]
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d1e4      	bne.n	8004a7a <RCM_RegisterRegConv+0x1a>
 8004ab0:	68a9      	ldr	r1, [r5, #8]
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d05e      	beq.n	8004b74 <RCM_RegisterRegConv+0x114>
      i++;
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e7e6      	b.n	8004a88 <RCM_RegisterRegConv+0x28>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aba:	6869      	ldr	r1, [r5, #4]
    uint8_t i = 0;
 8004abc:	2000      	movs	r0, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	d032      	beq.n	8004b28 <RCM_RegisterRegConv+0xc8>
 8004ac2:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004ac4:	790c      	ldrb	r4, [r1, #4]
 8004ac6:	4294      	cmp	r4, r2
 8004ac8:	d1db      	bne.n	8004a82 <RCM_RegisterRegConv+0x22>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004aca:	6809      	ldr	r1, [r1, #0]
 8004acc:	681c      	ldr	r4, [r3, #0]
 8004ace:	42a1      	cmp	r1, r4
 8004ad0:	d1d7      	bne.n	8004a82 <RCM_RegisterRegConv+0x22>
      i++;
 8004ad2:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 8004ad4:	e003      	b.n	8004ade <RCM_RegisterRegConv+0x7e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ad6:	2804      	cmp	r0, #4
 8004ad8:	d900      	bls.n	8004adc <RCM_RegisterRegConv+0x7c>
      i++;
 8004ada:	2003      	movs	r0, #3
 8004adc:	681c      	ldr	r4, [r3, #0]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004ade:	2100      	movs	r1, #0
      RCM_handle_array [handle] = regConv;
 8004ae0:	0082      	lsls	r2, r0, #2
 8004ae2:	50ab      	str	r3, [r5, r2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004ae4:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <RCM_RegisterRegConv+0x128>)
 8004ae6:	00c3      	lsls	r3, r0, #3
 8004ae8:	5099      	str	r1, [r3, r2]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8004aea:	68a3      	ldr	r3, [r4, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8004aec:	07db      	lsls	r3, r3, #31
 8004aee:	d40f      	bmi.n	8004b10 <RCM_RegisterRegConv+0xb0>
  MODIFY_REG(ADCx->CR,
 8004af0:	68a3      	ldr	r3, [r4, #8]
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <RCM_RegisterRegConv+0x12c>)
 8004af4:	401a      	ands	r2, r3
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60a3      	str	r3, [r4, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8004afe:	68a3      	ldr	r3, [r4, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dbfc      	blt.n	8004afe <RCM_RegisterRegConv+0x9e>
  MODIFY_REG(ADCx->CR,
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <RCM_RegisterRegConv+0x12c>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60a3      	str	r3, [r4, #8]
      RCM_NoInj_array[handle].enable = false;
 8004b10:	2100      	movs	r1, #0
 8004b12:	0043      	lsls	r3, r0, #1
 8004b14:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <RCM_RegisterRegConv+0x130>)
 8004b16:	181b      	adds	r3, r3, r0
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	5499      	strb	r1, [r3, r2]
      RCM_NoInj_array[handle].prev = handle;
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	0202      	lsls	r2, r0, #8
 8004b20:	4302      	orrs	r2, r0
 8004b22:	809a      	strh	r2, [r3, #4]
 8004b24:	e7bc      	b.n	8004aa0 <RCM_RegisterRegConv+0x40>
      i++;
 8004b26:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004b28:	68a9      	ldr	r1, [r5, #8]
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	d00c      	beq.n	8004b48 <RCM_RegisterRegConv+0xe8>
 8004b2e:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004b30:	790c      	ldrb	r4, [r1, #4]
 8004b32:	4294      	cmp	r4, r2
 8004b34:	d1ab      	bne.n	8004a8e <RCM_RegisterRegConv+0x2e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004b36:	6809      	ldr	r1, [r1, #0]
 8004b38:	681c      	ldr	r4, [r3, #0]
 8004b3a:	42a1      	cmp	r1, r4
 8004b3c:	d1a7      	bne.n	8004a8e <RCM_RegisterRegConv+0x2e>
      i++;
 8004b3e:	2002      	movs	r0, #2
 8004b40:	e7cd      	b.n	8004ade <RCM_RegisterRegConv+0x7e>
    uint8_t i = 0;
 8004b42:	2000      	movs	r0, #0
 8004b44:	e7cb      	b.n	8004ade <RCM_RegisterRegConv+0x7e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004b46:	2000      	movs	r0, #0
 8004b48:	68e9      	ldr	r1, [r5, #12]
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	d0c6      	beq.n	8004adc <RCM_RegisterRegConv+0x7c>
 8004b4e:	791a      	ldrb	r2, [r3, #4]
 8004b50:	e7a0      	b.n	8004a94 <RCM_RegisterRegConv+0x34>
 8004b52:	2804      	cmp	r0, #4
 8004b54:	d9f7      	bls.n	8004b46 <RCM_RegisterRegConv+0xe6>
 8004b56:	68e9      	ldr	r1, [r5, #12]
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d009      	beq.n	8004b70 <RCM_RegisterRegConv+0x110>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004b5c:	7908      	ldrb	r0, [r1, #4]
 8004b5e:	4290      	cmp	r0, r2
 8004b60:	d106      	bne.n	8004b70 <RCM_RegisterRegConv+0x110>
      i++;
 8004b62:	2002      	movs	r0, #2
 8004b64:	681c      	ldr	r4, [r3, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004b66:	680a      	ldr	r2, [r1, #0]
 8004b68:	42a2      	cmp	r2, r4
 8004b6a:	d196      	bne.n	8004a9a <RCM_RegisterRegConv+0x3a>
      i++;
 8004b6c:	2003      	movs	r0, #3
 8004b6e:	e7b6      	b.n	8004ade <RCM_RegisterRegConv+0x7e>
 8004b70:	2002      	movs	r0, #2
 8004b72:	e7b3      	b.n	8004adc <RCM_RegisterRegConv+0x7c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004b74:	68e9      	ldr	r1, [r5, #12]
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d0ab      	beq.n	8004ad2 <RCM_RegisterRegConv+0x72>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004b7a:	790e      	ldrb	r6, [r1, #4]
      i++;
 8004b7c:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004b7e:	4296      	cmp	r6, r2
 8004b80:	d0f1      	beq.n	8004b66 <RCM_RegisterRegConv+0x106>
 8004b82:	e7ac      	b.n	8004ade <RCM_RegisterRegConv+0x7e>
 8004b84:	200005fc 	.word	0x200005fc
 8004b88:	200005bc 	.word	0x200005bc
 8004b8c:	7fffffe8 	.word	0x7fffffe8
 8004b90:	200005dc 	.word	0x200005dc

08004b94 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004b94:	0041      	lsls	r1, r0, #1
 8004b96:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <RCM_ExecRegularConv+0x168>)
 8004b98:	180a      	adds	r2, r1, r0
 8004b9a:	0052      	lsls	r2, r2, #1
 8004b9c:	5c9a      	ldrb	r2, [r3, r2]
{
 8004b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	d142      	bne.n	8004c2a <RCM_ExecRegularConv+0x96>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	2a00      	cmp	r2, #0
 8004ba8:	d11c      	bne.n	8004be4 <RCM_ExecRegularConv+0x50>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004baa:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 8004bac:	799a      	ldrb	r2, [r3, #6]
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d100      	bne.n	8004bb4 <RCM_ExecRegularConv+0x20>
 8004bb2:	e07a      	b.n	8004caa <RCM_ExecRegularConv+0x116>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004bb4:	7adf      	ldrb	r7, [r3, #11]
 8004bb6:	42b8      	cmp	r0, r7
 8004bb8:	d200      	bcs.n	8004bbc <RCM_ExecRegularConv+0x28>
 8004bba:	e092      	b.n	8004ce2 <RCM_ExecRegularConv+0x14e>
      if (true == RCM_NoInj_array [i].enable)
 8004bbc:	7b1a      	ldrb	r2, [r3, #12]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d100      	bne.n	8004bc4 <RCM_ExecRegularConv+0x30>
 8004bc2:	e091      	b.n	8004ce8 <RCM_ExecRegularConv+0x154>
        if (RCM_NoInj_array[i].next > handle)
 8004bc4:	7c5f      	ldrb	r7, [r3, #17]
 8004bc6:	42b8      	cmp	r0, r7
 8004bc8:	d200      	bcs.n	8004bcc <RCM_ExecRegularConv+0x38>
 8004bca:	e092      	b.n	8004cf2 <RCM_ExecRegularConv+0x15e>
      if (true == RCM_NoInj_array [i].enable)
 8004bcc:	7c9a      	ldrb	r2, [r3, #18]
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8004bce:	2502      	movs	r5, #2
      if (true == RCM_NoInj_array [i].enable)
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	d100      	bne.n	8004bd6 <RCM_ExecRegularConv+0x42>
 8004bd4:	e073      	b.n	8004cbe <RCM_ExecRegularConv+0x12a>
        if (RCM_NoInj_array[i].next > handle)
 8004bd6:	7ddf      	ldrb	r7, [r3, #23]
 8004bd8:	4287      	cmp	r7, r0
 8004bda:	d800      	bhi.n	8004bde <RCM_ExecRegularConv+0x4a>
 8004bdc:	e08c      	b.n	8004cf8 <RCM_ExecRegularConv+0x164>
      i++;
 8004bde:	2203      	movs	r2, #3
      if (true == RCM_NoInj_array [i].enable)
 8004be0:	2603      	movs	r6, #3
 8004be2:	e005      	b.n	8004bf0 <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array[i].next > handle)
 8004be4:	795f      	ldrb	r7, [r3, #5]
  uint8_t i=0;
 8004be6:	2500      	movs	r5, #0
        if (RCM_NoInj_array[i].next > handle)
 8004be8:	4287      	cmp	r7, r0
 8004bea:	d9df      	bls.n	8004bac <RCM_ExecRegularConv+0x18>
  uint8_t i=0;
 8004bec:	2200      	movs	r2, #0
      if (true == RCM_NoInj_array [i].enable)
 8004bee:	2600      	movs	r6, #0
          RCM_NoInj_array[handle].next = formerNext;
 8004bf0:	180d      	adds	r5, r1, r0
          RCM_NoInj_array[i].next = handle;
 8004bf2:	0074      	lsls	r4, r6, #1
          RCM_NoInj_array[handle].next = formerNext;
 8004bf4:	006d      	lsls	r5, r5, #1
          RCM_NoInj_array[i].next = handle;
 8004bf6:	19a4      	adds	r4, r4, r6
          RCM_NoInj_array[handle].next = formerNext;
 8004bf8:	195d      	adds	r5, r3, r5
          RCM_NoInj_array[i].next = handle;
 8004bfa:	0064      	lsls	r4, r4, #1
          RCM_NoInj_array[handle].prev = i;
 8004bfc:	712a      	strb	r2, [r5, #4]
          RCM_NoInj_array[i].next = handle;
 8004bfe:	191c      	adds	r4, r3, r4
          RCM_NoInj_array[formerNext].prev = handle;
 8004c00:	007a      	lsls	r2, r7, #1
          RCM_NoInj_array[handle].next = formerNext;
 8004c02:	716f      	strb	r7, [r5, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004c04:	19d2      	adds	r2, r2, r7
          RCM_NoInj_array[i].next = handle;
 8004c06:	7160      	strb	r0, [r4, #5]
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8004c08:	0052      	lsls	r2, r2, #1
 8004c0a:	189a      	adds	r2, r3, r2
 8004c0c:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c0e:	4a3c      	ldr	r2, [pc, #240]	; (8004d00 <RCM_ExecRegularConv+0x16c>)
 8004c10:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array[handle].enable = true;
 8004c12:	2601      	movs	r6, #1
 8004c14:	180c      	adds	r4, r1, r0
 8004c16:	0064      	lsls	r4, r4, #1
 8004c18:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c1a:	006c      	lsls	r4, r5, #1
 8004c1c:	1964      	adds	r4, r4, r5
 8004c1e:	0064      	lsls	r4, r4, #1
 8004c20:	191c      	adds	r4, r3, r4
 8004c22:	7864      	ldrb	r4, [r4, #1]
 8004c24:	2c01      	cmp	r4, #1
 8004c26:	d000      	beq.n	8004c2a <RCM_ExecRegularConv+0x96>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8004c28:	7010      	strb	r0, [r2, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004c2a:	22b5      	movs	r2, #181	; 0xb5
 8004c2c:	4c35      	ldr	r4, [pc, #212]	; (8004d04 <RCM_ExecRegularConv+0x170>)
 8004c2e:	5ca2      	ldrb	r2, [r4, r2]
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d135      	bne.n	8004ca0 <RCM_ExecRegularConv+0x10c>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c34:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8004c36:	4e34      	ldr	r6, [pc, #208]	; (8004d08 <RCM_ExecRegularConv+0x174>)
 8004c38:	0082      	lsls	r2, r0, #2
 8004c3a:	58b5      	ldr	r5, [r6, r2]
 8004c3c:	682a      	ldr	r2, [r5, #0]
 8004c3e:	68d4      	ldr	r4, [r2, #12]
 8004c40:	43bc      	bics	r4, r7
 8004c42:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004c44:	68d4      	ldr	r4, [r2, #12]
 8004c46:	4f31      	ldr	r7, [pc, #196]	; (8004d0c <RCM_ExecRegularConv+0x178>)
 8004c48:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c4a:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004c4c:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c4e:	6954      	ldr	r4, [r2, #20]
 8004c50:	43bc      	bics	r4, r7
 8004c52:	68af      	ldr	r7, [r5, #8]
 8004c54:	433c      	orrs	r4, r7
 8004c56:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004c58:	2480      	movs	r4, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004c5a:	792d      	ldrb	r5, [r5, #4]
 8004c5c:	01a4      	lsls	r4, r4, #6
 8004c5e:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c60:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004c62:	0b64      	lsrs	r4, r4, #13
 8004c64:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c66:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8004c68:	6894      	ldr	r4, [r2, #8]
 8004c6a:	4f29      	ldr	r7, [pc, #164]	; (8004d10 <RCM_ExecRegularConv+0x17c>)
 8004c6c:	403c      	ands	r4, r7
 8004c6e:	432c      	orrs	r4, r5
 8004c70:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8004c72:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8004c74:	4225      	tst	r5, r4
 8004c76:	d0fc      	beq.n	8004c72 <RCM_ExecRegularConv+0xde>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c78:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004c7a:	6c14      	ldr	r4, [r2, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8004c7c:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8004c7e:	4d20      	ldr	r5, [pc, #128]	; (8004d00 <RCM_ExecRegularConv+0x16c>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8004c80:	0052      	lsls	r2, r2, #1
 8004c82:	189a      	adds	r2, r3, r2
 8004c84:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8004c86:	782c      	ldrb	r4, [r5, #0]
 8004c88:	00a4      	lsls	r4, r4, #2
 8004c8a:	5934      	ldr	r4, [r6, r4]
 8004c8c:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c8e:	68f4      	ldr	r4, [r6, #12]
 8004c90:	43bc      	bics	r4, r7
 8004c92:	3f02      	subs	r7, #2
 8004c94:	433c      	orrs	r4, r7
 8004c96:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004c98:	7954      	ldrb	r4, [r2, #5]
 8004c9a:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8004c9c:	2402      	movs	r4, #2
 8004c9e:	7054      	strb	r4, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004ca0:	1808      	adds	r0, r1, r0
 8004ca2:	0040      	lsls	r0, r0, #1
 8004ca4:	181b      	adds	r3, r3, r0
  return retVal;
 8004ca6:	8858      	ldrh	r0, [r3, #2]
}
 8004ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (true == RCM_NoInj_array [i].enable)
 8004caa:	7b1a      	ldrb	r2, [r3, #12]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d000      	beq.n	8004cb2 <RCM_ExecRegularConv+0x11e>
 8004cb0:	e788      	b.n	8004bc4 <RCM_ExecRegularConv+0x30>
 8004cb2:	7c9a      	ldrb	r2, [r3, #18]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	d000      	beq.n	8004cba <RCM_ExecRegularConv+0x126>
 8004cb8:	e78d      	b.n	8004bd6 <RCM_ExecRegularConv+0x42>
       if (LastEnable != RCM_MAX_CONV )
 8004cba:	2d04      	cmp	r5, #4
 8004cbc:	d00d      	beq.n	8004cda <RCM_ExecRegularConv+0x146>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004cbe:	006a      	lsls	r2, r5, #1
 8004cc0:	1952      	adds	r2, r2, r5
 8004cc2:	0052      	lsls	r2, r2, #1
 8004cc4:	189a      	adds	r2, r3, r2
         RCM_NoInj_array[handle].next = formerNext;
 8004cc6:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004cc8:	7956      	ldrb	r6, [r2, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004cca:	0064      	lsls	r4, r4, #1
 8004ccc:	191c      	adds	r4, r3, r4
 8004cce:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 8004cd0:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004cd2:	0072      	lsls	r2, r6, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004cd4:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8004cd6:	1992      	adds	r2, r2, r6
 8004cd8:	e796      	b.n	8004c08 <RCM_ExecRegularConv+0x74>
         RCM_currentHandle = handle;
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <RCM_ExecRegularConv+0x16c>)
 8004cdc:	0005      	movs	r5, r0
 8004cde:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 8004ce0:	e797      	b.n	8004c12 <RCM_ExecRegularConv+0x7e>
      i++;
 8004ce2:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 8004ce4:	2601      	movs	r6, #1
 8004ce6:	e783      	b.n	8004bf0 <RCM_ExecRegularConv+0x5c>
 8004ce8:	7c9a      	ldrb	r2, [r3, #18]
      i++;
 8004cea:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 8004cec:	2a00      	cmp	r2, #0
 8004cee:	d0e6      	beq.n	8004cbe <RCM_ExecRegularConv+0x12a>
 8004cf0:	e771      	b.n	8004bd6 <RCM_ExecRegularConv+0x42>
      i++;
 8004cf2:	2202      	movs	r2, #2
      if (true == RCM_NoInj_array [i].enable)
 8004cf4:	2602      	movs	r6, #2
 8004cf6:	e77b      	b.n	8004bf0 <RCM_ExecRegularConv+0x5c>
      i++;
 8004cf8:	2503      	movs	r5, #3
 8004cfa:	e7e0      	b.n	8004cbe <RCM_ExecRegularConv+0x12a>
 8004cfc:	200005dc 	.word	0x200005dc
 8004d00:	200005f8 	.word	0x200005f8
 8004d04:	2000023c 	.word	0x2000023c
 8004d08:	200005fc 	.word	0x200005fc
 8004d0c:	fffff23f 	.word	0xfffff23f
 8004d10:	7fffffe8 	.word	0x7fffffe8

08004d14 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8004d14:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004d16:	4c11      	ldr	r4, [pc, #68]	; (8004d5c <RCM_ExecUserConv+0x48>)
 8004d18:	7823      	ldrb	r3, [r4, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d000      	beq.n	8004d20 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <RCM_ExecUserConv+0x4c>)
 8004d22:	781d      	ldrb	r5, [r3, #0]
 8004d24:	0028      	movs	r0, r5
 8004d26:	f7ff ff35 	bl	8004b94 <RCM_ExecRegularConv>
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <RCM_ExecUserConv+0x50>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004d2c:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004d2e:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004d30:	006b      	lsls	r3, r5, #1
 8004d32:	195b      	adds	r3, r3, r5
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004d3a:	0001      	movs	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8004d40:	2302      	movs	r3, #2
 8004d42:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <RCM_ExecUserConv+0x58>)
 8004d46:	00ea      	lsls	r2, r5, #3
 8004d48:	58d6      	ldr	r6, [r2, r3]
 8004d4a:	2e00      	cmp	r6, #0
 8004d4c:	d0e7      	beq.n	8004d1e <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8004d4e:	2000      	movs	r0, #0
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004d50:	189b      	adds	r3, r3, r2
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8004d52:	7020      	strb	r0, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	0028      	movs	r0, r5
 8004d58:	47b0      	blx	r6
}
 8004d5a:	e7e0      	b.n	8004d1e <RCM_ExecUserConv+0xa>
 8004d5c:	200005f5 	.word	0x200005f5
 8004d60:	200005f4 	.word	0x200005f4
 8004d64:	200005f6 	.word	0x200005f6
 8004d68:	200005dc 	.word	0x200005dc
 8004d6c:	200005bc 	.word	0x200005bc

08004d70 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8004d70:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <RCM_ExecNextConv+0x5c>)
 8004d74:	4916      	ldr	r1, [pc, #88]	; (8004dd0 <RCM_ExecNextConv+0x60>)
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	0053      	lsls	r3, r2, #1
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	5c58      	ldrb	r0, [r3, r1]
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d021      	beq.n	8004dc8 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004d84:	2604      	movs	r6, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004d86:	2403      	movs	r4, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004d88:	4812      	ldr	r0, [pc, #72]	; (8004dd4 <RCM_ExecNextConv+0x64>)
 8004d8a:	0092      	lsls	r2, r2, #2
 8004d8c:	5815      	ldr	r5, [r2, r0]
                                         RCM_handle_array[RCM_currentHandle]->samplingTime);
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004d8e:	18cb      	adds	r3, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004d90:	682a      	ldr	r2, [r5, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004d92:	6016      	str	r6, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004d94:	68d0      	ldr	r0, [r2, #12]
 8004d96:	43a0      	bics	r0, r4
 8004d98:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004d9a:	68d0      	ldr	r0, [r2, #12]
 8004d9c:	4c0e      	ldr	r4, [pc, #56]	; (8004dd8 <RCM_ExecNextConv+0x68>)
 8004d9e:	4020      	ands	r0, r4
 8004da0:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004da2:	2007      	movs	r0, #7
 8004da4:	6954      	ldr	r4, [r2, #20]
 8004da6:	4384      	bics	r4, r0
 8004da8:	68a8      	ldr	r0, [r5, #8]
 8004daa:	4304      	orrs	r4, r0
 8004dac:	6154      	str	r4, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004dae:	7928      	ldrb	r0, [r5, #4]
 8004db0:	2501      	movs	r5, #1
 8004db2:	002c      	movs	r4, r5
 8004db4:	4084      	lsls	r4, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004db6:	0364      	lsls	r4, r4, #13
 8004db8:	0b64      	lsrs	r4, r4, #13
 8004dba:	6294      	str	r4, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8004dbc:	6890      	ldr	r0, [r2, #8]
 8004dbe:	4c07      	ldr	r4, [pc, #28]	; (8004ddc <RCM_ExecNextConv+0x6c>)
 8004dc0:	4020      	ands	r0, r4
 8004dc2:	4330      	orrs	r0, r6
 8004dc4:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004dc6:	705d      	strb	r5, [r3, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004dc8:	bd70      	pop	{r4, r5, r6, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	200005f8 	.word	0x200005f8
 8004dd0:	200005dc 	.word	0x200005dc
 8004dd4:	200005fc 	.word	0x200005fc
 8004dd8:	fffff23f 	.word	0xfffff23f
 8004ddc:	7fffffe8 	.word	0x7fffffe8

08004de0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004de2:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004de4:	4d11      	ldr	r5, [pc, #68]	; (8004e2c <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004de8:	7828      	ldrb	r0, [r5, #0]
 8004dea:	4912      	ldr	r1, [pc, #72]	; (8004e34 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004dec:	0082      	lsls	r2, r0, #2
 8004dee:	58d3      	ldr	r3, [r2, r3]
 8004df0:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8004df2:	6833      	ldr	r3, [r6, #0]
 8004df4:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8004df6:	0043      	lsls	r3, r0, #1
 8004df8:	181a      	adds	r2, r3, r0
 8004dfa:	0052      	lsls	r2, r2, #1
 8004dfc:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004dfe:	7854      	ldrb	r4, [r2, #1]
 8004e00:	43bc      	bics	r4, r7
 8004e02:	d002      	beq.n	8004e0a <RCM_ReadOngoingConv+0x2a>
 8004e04:	4664      	mov	r4, ip
 8004e06:	0764      	lsls	r4, r4, #29
 8004e08:	d405      	bmi.n	8004e16 <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004e0a:	181b      	adds	r3, r3, r0
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	18cb      	adds	r3, r1, r3
 8004e10:	795b      	ldrb	r3, [r3, #5]
 8004e12:	702b      	strb	r3, [r5, #0]
}
 8004e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004e16:	6c34      	ldr	r4, [r6, #64]	; 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004e18:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8004e1a:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004e1c:	2403      	movs	r4, #3
 8004e1e:	68f2      	ldr	r2, [r6, #12]
 8004e20:	43a2      	bics	r2, r4
 8004e22:	3c02      	subs	r4, #2
 8004e24:	4322      	orrs	r2, r4
 8004e26:	60f2      	str	r2, [r6, #12]
}
 8004e28:	e7ef      	b.n	8004e0a <RCM_ReadOngoingConv+0x2a>
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	200005f8 	.word	0x200005f8
 8004e30:	200005fc 	.word	0x200005fc
 8004e34:	200005dc 	.word	0x200005dc

08004e38 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_MspInit+0x2c>)
{
 8004e3c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	4311      	orrs	r1, r2
 8004e42:	6199      	str	r1, [r3, #24]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e48:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4a:	9200      	str	r2, [sp, #0]
 8004e4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	0549      	lsls	r1, r1, #21
 8004e52:	430a      	orrs	r2, r1
 8004e54:	61da      	str	r2, [r3, #28]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	400b      	ands	r3, r1
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e5e:	b002      	add	sp, #8
 8004e60:	4770      	bx	lr
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	40021000 	.word	0x40021000

08004e68 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004e68:	2207      	movs	r2, #7
{
 8004e6a:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004e6c:	4b02      	ldr	r3, [pc, #8]	; (8004e78 <DMA1_Channel1_IRQHandler+0x10>)
 8004e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8004e70:	f7fd fcd8 	bl	8002824 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	40020000 	.word	0x40020000

08004e7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8004e7c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 8004e7e:	25b8      	movs	r5, #184	; 0xb8
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004e80:	2201      	movs	r2, #1
 8004e82:	4c10      	ldr	r4, [pc, #64]	; (8004ec4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 8004e84:	5963      	ldr	r3, [r4, r5]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6919      	ldr	r1, [r3, #16]
 8004e8a:	420a      	tst	r2, r1
 8004e8c:	d002      	beq.n	8004e94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	420a      	tst	r2, r1
 8004e92:	d10d      	bne.n	8004eb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x34>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	6919      	ldr	r1, [r3, #16]
 8004e98:	420a      	tst	r2, r1
 8004e9a:	d008      	beq.n	8004eae <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8004e9c:	68d9      	ldr	r1, [r3, #12]
 8004e9e:	420a      	tst	r2, r1
 8004ea0:	d005      	beq.n	8004eae <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004ea2:	3a02      	subs	r2, #2
 8004ea4:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R1_BRK_IRQHandler(&PWM_Handle_M1);
 8004ea6:	0020      	movs	r0, r4
 8004ea8:	611a      	str	r2, [r3, #16]
 8004eaa:	f7fe ff1f 	bl	8003cec <R1_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8004eb0:	0020      	movs	r0, r4
 8004eb2:	f7fe ff4b 	bl	8003d4c <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004eb6:	2202      	movs	r2, #2
    LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004eb8:	5963      	ldr	r3, [r4, r5]
 8004eba:	4252      	negs	r2, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	611a      	str	r2, [r3, #16]
}
 8004ec0:	e7e8      	b.n	8004e94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	2000023c 	.word	0x2000023c

08004ec8 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8004ecc:	0292      	lsls	r2, r2, #10
 8004ece:	6819      	ldr	r1, [r3, #0]
  *         Required only for R1 with rep rate > 1
  * @param  None
  * @retval None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 8004ed0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8004ed2:	4211      	tst	r1, r2
 8004ed4:	d100      	bne.n	8004ed8 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8004ed6:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004ed8:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8004eda:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <DMA1_Channel4_5_IRQHandler+0x20>)
 8004edc:	f7fe ff54 	bl	8003d88 <R1_DMAx_TC_IRQHandler>
}
 8004ee0:	e7f9      	b.n	8004ed6 <DMA1_Channel4_5_IRQHandler+0xe>
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	2000023c 	.word	0x2000023c

08004eec <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8004eec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 8004eee:	4c0b      	ldr	r4, [pc, #44]	; (8004f1c <TIM2_IRQHandler+0x30>)
 8004ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	07d2      	lsls	r2, r2, #31
 8004ef6:	d409      	bmi.n	8004f0c <TIM2_IRQHandler+0x20>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	0792      	lsls	r2, r2, #30
 8004efc:	d505      	bpl.n	8004f0a <TIM2_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004efe:	2203      	movs	r2, #3
 8004f00:	4252      	negs	r2, r2
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
  {
    LL_TIM_ClearFlag_CC1(HALL_M1.TIMx);
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8004f02:	0020      	movs	r0, r4
 8004f04:	611a      	str	r2, [r3, #16]
 8004f06:	f7fc f90f 	bl	8001128 <HALL_TIMx_CC_IRQHandler>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004f0a:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	4252      	negs	r2, r2
 8004f10:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8004f12:	0020      	movs	r0, r4
 8004f14:	f7fc fa94 	bl	8001440 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8004f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f1a:	e7ed      	b.n	8004ef8 <TIM2_IRQHandler+0xc>
 8004f1c:	200000e0 	.word	0x200000e0

08004f20 <DMA1_Channel2_3_IRQHandler>:
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <DMA1_Channel2_3_IRQHandler+0x18>)
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4211      	tst	r1, r2
 8004f2c:	d003      	beq.n	8004f36 <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004f2e:	4803      	ldr	r0, [pc, #12]	; (8004f3c <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	f7fb fefb 	bl	8000d2c <ASPEP_HWDataReceivedIT>
  }
}
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	40020000 	.word	0x40020000
 8004f3c:	200003b4 	.word	0x200003b4

08004f40 <USART1_IRQHandler>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004f40:	2240      	movs	r2, #64	; 0x40
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <USART1_IRQHandler+0x94>)

void USART1_IRQHandler(void)
{
 8004f44:	b510      	push	{r4, lr}
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	420a      	tst	r2, r1
 8004f4a:	d008      	beq.n	8004f5e <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004f4c:	2401      	movs	r4, #1
 8004f4e:	4822      	ldr	r0, [pc, #136]	; (8004fd8 <USART1_IRQHandler+0x98>)
 8004f50:	6801      	ldr	r1, [r0, #0]
 8004f52:	43a1      	bics	r1, r4
 8004f54:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004f56:	4821      	ldr	r0, [pc, #132]	; (8004fdc <USART1_IRQHandler+0x9c>)
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004f58:	621a      	str	r2, [r3, #32]
 8004f5a:	f7fb fd2f 	bl	80009bc <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004f5e:	2208      	movs	r2, #8
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <USART1_IRQHandler+0x94>)
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	420a      	tst	r2, r1
 8004f66:	d00b      	beq.n	8004f80 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004f68:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	3a07      	subs	r2, #7
 8004f70:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004f74:	2010      	movs	r0, #16
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4302      	orrs	r2, r0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004f80:	2210      	movs	r2, #16
 8004f82:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <USART1_IRQHandler+0x94>)
 8004f84:	69d9      	ldr	r1, [r3, #28]
 8004f86:	420a      	tst	r2, r1
 8004f88:	d023      	beq.n	8004fd2 <USART1_IRQHandler+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	420a      	tst	r2, r1
 8004f8e:	d020      	beq.n	8004fd2 <USART1_IRQHandler+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f94:	2101      	movs	r1, #1
 8004f96:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	4390      	bics	r0, r2
 8004f9e:	6018      	str	r0, [r3, #0]
 8004fa0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa8:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004fac:	2440      	movs	r4, #64	; 0x40
 8004fae:	6898      	ldr	r0, [r3, #8]
 8004fb0:	43a0      	bics	r0, r4
 8004fb2:	6098      	str	r0, [r3, #8]
 8004fb4:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004fb8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4322      	orrs	r2, r4
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	f380 8810 	msr	PRIMASK, r0
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004fcc:	4803      	ldr	r0, [pc, #12]	; (8004fdc <USART1_IRQHandler+0x9c>)
 8004fce:	f7fb fefb 	bl	8000dc8 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	4002001c 	.word	0x4002001c
 8004fdc:	200003b4 	.word	0x200003b4

08004fe0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004fe0:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004fe2:	f7fd fd07 	bl	80029f4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004fe6:	e7fe      	b.n	8004fe6 <HardFault_Handler+0x6>

08004fe8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004fe8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004fea:	4c0d      	ldr	r4, [pc, #52]	; (8005020 <SysTick_Handler+0x38>)
 8004fec:	7823      	ldrb	r3, [r4, #0]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d00f      	beq.n	8005012 <SysTick_Handler+0x2a>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	7023      	strb	r3, [r4, #0]
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <SysTick_Handler+0x3c>)
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	4211      	tst	r1, r2
 8005002:	d003      	beq.n	800500c <SysTick_Handler+0x24>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8005004:	4808      	ldr	r0, [pc, #32]	; (8005028 <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	f7fb fe90 	bl	8000d2c <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 800500c:	f7fd fce4 	bl	80029d8 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8005010:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8005012:	f000 f8dd 	bl	80051d0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8005016:	f000 f935 	bl	8005284 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800501a:	2301      	movs	r3, #1
 800501c:	e7eb      	b.n	8004ff6 <SysTick_Handler+0xe>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	20000410 	.word	0x20000410
 8005024:	40020000 	.word	0x40020000
 8005028:	200003b4 	.word	0x200003b4

0800502c <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 800502c:	2201      	movs	r2, #1
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 8005030:	b510      	push	{r4, lr}
 8005032:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8005034:	420a      	tst	r2, r1
 8005036:	d100      	bne.n	800503a <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 8005038:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800503a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 800503c:	f7fd fcea 	bl	8002a14 <UI_HandleStartStopButton_cb>
}
 8005040:	e7fa      	b.n	8005038 <EXTI0_1_IRQHandler+0xc>
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	40010400 	.word	0x40010400

08005048 <UASPEP_INIT>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005048:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 800504a:	6803      	ldr	r3, [r0, #0]
{
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005050:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005054:	2101      	movs	r1, #1
 8005056:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800505a:	681c      	ldr	r4, [r3, #0]
 800505c:	4314      	orrs	r4, r2
 800505e:	601c      	str	r4, [r3, #0]
 8005060:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8005064:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005066:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800506e:	2680      	movs	r6, #128	; 0x80
 8005070:	68a3      	ldr	r3, [r4, #8]
 8005072:	4333      	orrs	r3, r6
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 800507a:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800507c:	6887      	ldr	r7, [r0, #8]
 800507e:	002e      	movs	r6, r5
 8005080:	46bc      	mov	ip, r7
 8005082:	6904      	ldr	r4, [r0, #16]
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <UASPEP_INIT+0x8c>)
 8005086:	3628      	adds	r6, #40	; 0x28
 8005088:	191c      	adds	r4, r3, r4
 800508a:	3c01      	subs	r4, #1
 800508c:	7824      	ldrb	r4, [r4, #0]
 800508e:	4464      	add	r4, ip
 8005090:	60a6      	str	r6, [r4, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005092:	622a      	str	r2, [r5, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005094:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005098:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800509c:	68ac      	ldr	r4, [r5, #8]
 800509e:	430c      	orrs	r4, r1
 80050a0:	60ac      	str	r4, [r5, #8]
 80050a2:	f386 8810 	msr	PRIMASK, r6
 80050a6:	68c6      	ldr	r6, [r0, #12]
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80050a8:	6804      	ldr	r4, [r0, #0]
 80050aa:	46b4      	mov	ip, r6
 80050ac:	0025      	movs	r5, r4
 80050ae:	4463      	add	r3, ip
 80050b0:	3b01      	subs	r3, #1
 80050b2:	781e      	ldrb	r6, [r3, #0]
 80050b4:	6843      	ldr	r3, [r0, #4]
 80050b6:	3524      	adds	r5, #36	; 0x24
 80050b8:	199b      	adds	r3, r3, r6
 80050ba:	609d      	str	r5, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80050bc:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80050c6:	68a3      	ldr	r3, [r4, #8]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	60a2      	str	r2, [r4, #8]
 80050cc:	f380 8810 	msr	PRIMASK, r0
}
 80050d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	080066a8 	.word	0x080066a8

080050d8 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80050d8:	b530      	push	{r4, r5, lr}
 80050da:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80050dc:	6902      	ldr	r2, [r0, #16]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80050de:	2501      	movs	r5, #1
 80050e0:	4694      	mov	ip, r2
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <UASPEP_SEND_PACKET+0x34>)
 80050e4:	4463      	add	r3, ip
 80050e6:	3b01      	subs	r3, #1
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 80050ec:	2000      	movs	r0, #0
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80050f2:	4215      	tst	r5, r2
 80050f4:	d109      	bne.n	800510a <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80050f6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80050f8:	6859      	ldr	r1, [r3, #4]
    result = true;
 80050fa:	3001      	adds	r0, #1
 80050fc:	0c09      	lsrs	r1, r1, #16
 80050fe:	040a      	lsls	r2, r1, #16
 8005100:	4322      	orrs	r2, r4
 8005102:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4315      	orrs	r5, r2
 8005108:	601d      	str	r5, [r3, #0]
  }
  return result;
}
 800510a:	bd30      	pop	{r4, r5, pc}
 800510c:	080066a8 	.word	0x080066a8

08005110 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8005110:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005112:	68c4      	ldr	r4, [r0, #12]
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <UASPEP_RECEIVE_BUFFER+0x30>)
 8005116:	46a4      	mov	ip, r4
 8005118:	4463      	add	r3, ip
 800511a:	3b01      	subs	r3, #1
 800511c:	781c      	ldrb	r4, [r3, #0]
 800511e:	6843      	ldr	r3, [r0, #4]
 8005120:	191b      	adds	r3, r3, r4
 8005122:	2401      	movs	r4, #1
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	43a0      	bics	r0, r4
 8005128:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800512a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	0c09      	lsrs	r1, r1, #16
 8005130:	0409      	lsls	r1, r1, #16
 8005132:	4311      	orrs	r1, r2
 8005134:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4322      	orrs	r2, r4
 800513a:	601a      	str	r2, [r3, #0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800513c:	bd10      	pop	{r4, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	080066a8 	.word	0x080066a8

08005144 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005144:	2110      	movs	r1, #16

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8005146:	6803      	ldr	r3, [r0, #0]
 8005148:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	2201      	movs	r2, #1
 8005150:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800515e:	4770      	bx	lr

08005160 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005160:	4770      	bx	lr
 8005162:	46c0      	nop			; (mov r8, r8)

08005164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005164:	b510      	push	{r4, lr}
 8005166:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005168:	20fa      	movs	r0, #250	; 0xfa
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_InitTick+0x40>)
 800516c:	0080      	lsls	r0, r0, #2
 800516e:	7819      	ldrb	r1, [r3, #0]
 8005170:	f7fa ffca 	bl	8000108 <__udivsi3>
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <HAL_InitTick+0x44>)
 8005176:	0001      	movs	r1, r0
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	f7fa ffc5 	bl	8000108 <__udivsi3>
 800517e:	f000 f865 	bl	800524c <HAL_SYSTICK_Config>
 8005182:	2800      	cmp	r0, #0
 8005184:	d10c      	bne.n	80051a0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8005186:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005188:	2c03      	cmp	r4, #3
 800518a:	d900      	bls.n	800518e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800518c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800518e:	3802      	subs	r0, #2
 8005190:	2200      	movs	r2, #0
 8005192:	0021      	movs	r1, r4
 8005194:	f000 f828 	bl	80051e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <HAL_InitTick+0x48>)
 800519a:	2000      	movs	r0, #0
 800519c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800519e:	e7f5      	b.n	800518c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80051a0:	2001      	movs	r0, #1
 80051a2:	e7f3      	b.n	800518c <HAL_InitTick+0x28>
 80051a4:	20000418 	.word	0x20000418
 80051a8:	20000414 	.word	0x20000414
 80051ac:	2000041c 	.word	0x2000041c

080051b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b0:	2110      	movs	r1, #16
 80051b2:	4a06      	ldr	r2, [pc, #24]	; (80051cc <HAL_Init+0x1c>)
{
 80051b4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80051b8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051ba:	430b      	orrs	r3, r1
 80051bc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80051be:	f7ff ffd1 	bl	8005164 <HAL_InitTick>
  HAL_MspInit();
 80051c2:	f7ff fe39 	bl	8004e38 <HAL_MspInit>
}
 80051c6:	2000      	movs	r0, #0
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	40022000 	.word	0x40022000

080051d0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <HAL_IncTick+0x10>)
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <HAL_IncTick+0x14>)
 80051d4:	6811      	ldr	r1, [r2, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	185b      	adds	r3, r3, r1
 80051da:	6013      	str	r3, [r2, #0]
}
 80051dc:	4770      	bx	lr
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	2000060c 	.word	0x2000060c
 80051e4:	20000418 	.word	0x20000418

080051e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051e8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80051ea:	2800      	cmp	r0, #0
 80051ec:	db14      	blt.n	8005218 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <HAL_NVIC_SetPriority+0x5c>)
 80051f0:	2203      	movs	r2, #3
 80051f2:	469c      	mov	ip, r3
 80051f4:	23ff      	movs	r3, #255	; 0xff
 80051f6:	0884      	lsrs	r4, r0, #2
 80051f8:	4010      	ands	r0, r2
 80051fa:	001a      	movs	r2, r3
 80051fc:	26c0      	movs	r6, #192	; 0xc0
 80051fe:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005200:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005202:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005204:	400b      	ands	r3, r1
 8005206:	4083      	lsls	r3, r0
 8005208:	00a4      	lsls	r4, r4, #2
 800520a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800520c:	00b6      	lsls	r6, r6, #2
 800520e:	59a5      	ldr	r5, [r4, r6]
 8005210:	4395      	bics	r5, r2
 8005212:	432b      	orrs	r3, r5
 8005214:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005216:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005218:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <HAL_NVIC_SetPriority+0x60>)
 800521a:	230f      	movs	r3, #15
 800521c:	4694      	mov	ip, r2
 800521e:	2203      	movs	r2, #3
 8005220:	4003      	ands	r3, r0
 8005222:	4010      	ands	r0, r2
 8005224:	32fc      	adds	r2, #252	; 0xfc
 8005226:	0015      	movs	r5, r2
 8005228:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800522a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800522c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800522e:	400a      	ands	r2, r1
 8005230:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005232:	3b08      	subs	r3, #8
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4463      	add	r3, ip
 800523a:	69dc      	ldr	r4, [r3, #28]
 800523c:	43ac      	bics	r4, r5
 800523e:	4322      	orrs	r2, r4
 8005240:	61da      	str	r2, [r3, #28]
 8005242:	e7e8      	b.n	8005216 <HAL_NVIC_SetPriority+0x2e>
 8005244:	e000e100 	.word	0xe000e100
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	1e43      	subs	r3, r0, #1
 8005250:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8005252:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005254:	4293      	cmp	r3, r2
 8005256:	d20e      	bcs.n	8005276 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005258:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800525a:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800525c:	4807      	ldr	r0, [pc, #28]	; (800527c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800525e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005260:	6a03      	ldr	r3, [r0, #32]
 8005262:	0609      	lsls	r1, r1, #24
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	430b      	orrs	r3, r1
 800526a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800526c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800526e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005270:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005272:	3307      	adds	r3, #7
 8005274:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005276:	4770      	bx	lr
 8005278:	e000e010 	.word	0xe000e010
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005280:	4770      	bx	lr
 8005282:	46c0      	nop			; (mov r8, r8)

08005284 <HAL_SYSTICK_IRQHandler>:
{
 8005284:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8005286:	f7ff fffb 	bl	8005280 <HAL_SYSTICK_Callback>
}
 800528a:	bd10      	pop	{r4, pc}

0800528c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800528c:	4b01      	ldr	r3, [pc, #4]	; (8005294 <HAL_RCC_GetHCLKFreq+0x8>)
 800528e:	6818      	ldr	r0, [r3, #0]
}
 8005290:	4770      	bx	lr
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	20000414 	.word	0x20000414

08005298 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8005298:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800529a:	0003      	movs	r3, r0
 800529c:	b510      	push	{r4, lr}
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800529e:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80052a0:	07d2      	lsls	r2, r2, #31
 80052a2:	d410      	bmi.n	80052c6 <LL_ADC_Init+0x2e>
    MODIFY_REG(ADCx->CFGR1,
 80052a4:	688c      	ldr	r4, [r1, #8]
 80052a6:	684a      	ldr	r2, [r1, #4]
 80052a8:	68d8      	ldr	r0, [r3, #12]
 80052aa:	4322      	orrs	r2, r4
 80052ac:	68cc      	ldr	r4, [r1, #12]
    MODIFY_REG(ADCx->CFGR2,
 80052ae:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 80052b0:	4322      	orrs	r2, r4
 80052b2:	4c05      	ldr	r4, [pc, #20]	; (80052c8 <LL_ADC_Init+0x30>)
 80052b4:	4020      	ands	r0, r4
 80052b6:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 80052b8:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 80052ba:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2,
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	0892      	lsrs	r2, r2, #2
 80052c2:	430a      	orrs	r2, r1
 80052c4:	611a      	str	r2, [r3, #16]
  }
  return status;
}
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	ffff3fc7 	.word	0xffff3fc7

080052cc <LL_ADC_REG_Init>:
 80052cc:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80052ce:	0002      	movs	r2, r0
 80052d0:	b510      	push	{r4, lr}

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80052d2:	2001      	movs	r0, #1
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80052d4:	07db      	lsls	r3, r3, #31
 80052d6:	d40e      	bmi.n	80052f6 <LL_ADC_REG_Init+0x2a>
    MODIFY_REG(ADCx->CFGR1,
 80052d8:	684c      	ldr	r4, [r1, #4]
 80052da:	680b      	ldr	r3, [r1, #0]
 80052dc:	68d0      	ldr	r0, [r2, #12]
 80052de:	4323      	orrs	r3, r4
 80052e0:	688c      	ldr	r4, [r1, #8]
 80052e2:	4323      	orrs	r3, r4
 80052e4:	68cc      	ldr	r4, [r1, #12]
 80052e6:	6909      	ldr	r1, [r1, #16]
 80052e8:	4323      	orrs	r3, r4
 80052ea:	430b      	orrs	r3, r1
 80052ec:	4902      	ldr	r1, [pc, #8]	; (80052f8 <LL_ADC_REG_Init+0x2c>)
 80052ee:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 80052f0:	2000      	movs	r0, #0
    MODIFY_REG(ADCx->CFGR1,
 80052f2:	430b      	orrs	r3, r1
 80052f4:	60d3      	str	r3, [r2, #12]
  }
  return status;
}
 80052f6:	bd10      	pop	{r4, pc}
 80052f8:	fffec23c 	.word	0xfffec23c

080052fc <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80052fc:	7902      	ldrb	r2, [r0, #4]
{
 80052fe:	0003      	movs	r3, r0
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005300:	2a00      	cmp	r2, #0
 8005302:	d015      	beq.n	8005330 <LL_EXTI_Init+0x34>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005304:	6800      	ldr	r0, [r0, #0]
 8005306:	2800      	cmp	r0, #0
 8005308:	d011      	beq.n	800532e <LL_EXTI_Init+0x32>
    {
      switch (EXTI_InitStruct->Mode)
 800530a:	795a      	ldrb	r2, [r3, #5]
 800530c:	2a01      	cmp	r2, #1
 800530e:	d037      	beq.n	8005380 <LL_EXTI_Init+0x84>
 8005310:	2a02      	cmp	r2, #2
 8005312:	d029      	beq.n	8005368 <LL_EXTI_Init+0x6c>
 8005314:	2101      	movs	r1, #1
 8005316:	2a00      	cmp	r2, #0
 8005318:	d01d      	beq.n	8005356 <LL_EXTI_Init+0x5a>
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800531a:	799b      	ldrb	r3, [r3, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d018      	beq.n	8005352 <LL_EXTI_Init+0x56>
      {
        switch (EXTI_InitStruct->Trigger)
 8005320:	2b02      	cmp	r3, #2
 8005322:	d00f      	beq.n	8005344 <LL_EXTI_Init+0x48>
 8005324:	2b03      	cmp	r3, #3
 8005326:	d038      	beq.n	800539a <LL_EXTI_Init+0x9e>
 8005328:	2b01      	cmp	r3, #1
 800532a:	d02d      	beq.n	8005388 <LL_EXTI_Init+0x8c>
 800532c:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 800532e:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <LL_EXTI_Init+0xa8>)
 8005332:	6800      	ldr	r0, [r0, #0]
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	4381      	bics	r1, r0
 8005338:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800533a:	6853      	ldr	r3, [r2, #4]
 800533c:	4383      	bics	r3, r0
 800533e:	6053      	str	r3, [r2, #4]
}
 8005340:	2000      	movs	r0, #0
 8005342:	e7f4      	b.n	800532e <LL_EXTI_Init+0x32>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <LL_EXTI_Init+0xa8>)
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4382      	bics	r2, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 800534a:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	4310      	orrs	r0, r2
 8005350:	60d8      	str	r0, [r3, #12]
}
 8005352:	0008      	movs	r0, r1
 8005354:	e7eb      	b.n	800532e <LL_EXTI_Init+0x32>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8005356:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <LL_EXTI_Init+0xa8>)
 8005358:	6851      	ldr	r1, [r2, #4]
 800535a:	4381      	bics	r1, r0
 800535c:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800535e:	6811      	ldr	r1, [r2, #0]
 8005360:	4301      	orrs	r1, r0
 8005362:	6011      	str	r1, [r2, #0]
}
 8005364:	2100      	movs	r1, #0
 8005366:	e7d8      	b.n	800531a <LL_EXTI_Init+0x1e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8005368:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <LL_EXTI_Init+0xa8>)
 800536a:	6811      	ldr	r1, [r2, #0]
 800536c:	4301      	orrs	r1, r0
 800536e:	6011      	str	r1, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005370:	6851      	ldr	r1, [r2, #4]
 8005372:	4301      	orrs	r1, r0
 8005374:	6051      	str	r1, [r2, #4]
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005376:	799b      	ldrb	r3, [r3, #6]
}
 8005378:	2100      	movs	r1, #0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0e9      	beq.n	8005352 <LL_EXTI_Init+0x56>
 800537e:	e7cf      	b.n	8005320 <LL_EXTI_Init+0x24>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <LL_EXTI_Init+0xa8>)
 8005382:	6811      	ldr	r1, [r2, #0]
 8005384:	4381      	bics	r1, r0
 8005386:	e7f2      	b.n	800536e <LL_EXTI_Init+0x72>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <LL_EXTI_Init+0xa8>)
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	4382      	bics	r2, r0
 800538e:	60da      	str	r2, [r3, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	4310      	orrs	r0, r2
 8005394:	6098      	str	r0, [r3, #8]
}
 8005396:	0008      	movs	r0, r1
 8005398:	e7c9      	b.n	800532e <LL_EXTI_Init+0x32>
  SET_BIT(EXTI->RTSR, ExtiLine);
 800539a:	4b02      	ldr	r3, [pc, #8]	; (80053a4 <LL_EXTI_Init+0xa8>)
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	4302      	orrs	r2, r0
 80053a0:	e7d3      	b.n	800534a <LL_EXTI_Init+0x4e>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	40010400 	.word	0x40010400

080053a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80053aa:	680c      	ldr	r4, [r1, #0]
{
 80053ac:	46de      	mov	lr, fp
 80053ae:	4657      	mov	r7, sl
 80053b0:	464e      	mov	r6, r9
 80053b2:	4645      	mov	r5, r8
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80053b4:	43e2      	mvns	r2, r4
  pinpos = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	4693      	mov	fp, r2
{
 80053ba:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80053bc:	2c00      	cmp	r4, #0
 80053be:	d11a      	bne.n	80053f6 <LL_GPIO_Init+0x4e>
 80053c0:	e055      	b.n	800546e <LL_GPIO_Init+0xc6>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80053c2:	68c2      	ldr	r2, [r0, #12]
 80053c4:	4692      	mov	sl, r2
 80053c6:	002a      	movs	r2, r5
 80053c8:	436a      	muls	r2, r5
 80053ca:	0057      	lsls	r7, r2, #1
 80053cc:	18bf      	adds	r7, r7, r2
 80053ce:	43fd      	mvns	r5, r7
 80053d0:	4656      	mov	r6, sl
 80053d2:	46a8      	mov	r8, r5
 80053d4:	690d      	ldr	r5, [r1, #16]
 80053d6:	43be      	bics	r6, r7
 80053d8:	4355      	muls	r5, r2
 80053da:	4335      	orrs	r5, r6
 80053dc:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80053de:	4647      	mov	r7, r8
 80053e0:	6805      	ldr	r5, [r0, #0]
 80053e2:	402f      	ands	r7, r5
 80053e4:	003d      	movs	r5, r7
 80053e6:	4667      	mov	r7, ip
 80053e8:	437a      	muls	r2, r7
 80053ea:	432a      	orrs	r2, r5
 80053ec:	6002      	str	r2, [r0, #0]
 80053ee:	0022      	movs	r2, r4
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80053f0:	3301      	adds	r3, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80053f2:	40da      	lsrs	r2, r3
 80053f4:	d03b      	beq.n	800546e <LL_GPIO_Init+0xc6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80053f6:	2201      	movs	r2, #1
 80053f8:	0025      	movs	r5, r4
 80053fa:	409a      	lsls	r2, r3
 80053fc:	4015      	ands	r5, r2
    if (currentpin != 0x00u)
 80053fe:	4214      	tst	r4, r2
 8005400:	d0f5      	beq.n	80053ee <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005402:	684a      	ldr	r2, [r1, #4]
 8005404:	4694      	mov	ip, r2
 8005406:	3a01      	subs	r2, #1
 8005408:	2a01      	cmp	r2, #1
 800540a:	d8da      	bhi.n	80053c2 <LL_GPIO_Init+0x1a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800540c:	002a      	movs	r2, r5
 800540e:	436a      	muls	r2, r5
 8005410:	0056      	lsls	r6, r2, #1
 8005412:	46b1      	mov	r9, r6
 8005414:	4491      	add	r9, r2
 8005416:	464e      	mov	r6, r9
 8005418:	43f6      	mvns	r6, r6
 800541a:	46b0      	mov	r8, r6
 800541c:	688e      	ldr	r6, [r1, #8]
 800541e:	6887      	ldr	r7, [r0, #8]
 8005420:	4356      	muls	r6, r2
 8005422:	46b2      	mov	sl, r6
 8005424:	464e      	mov	r6, r9
 8005426:	43b7      	bics	r7, r6
 8005428:	4656      	mov	r6, sl
 800542a:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800542c:	465e      	mov	r6, fp
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 800542e:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005430:	6847      	ldr	r7, [r0, #4]
 8005432:	403e      	ands	r6, r7
 8005434:	68cf      	ldr	r7, [r1, #12]
 8005436:	4367      	muls	r7, r4
 8005438:	4337      	orrs	r7, r6
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800543a:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800543c:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800543e:	4356      	muls	r6, r2
 8005440:	46b2      	mov	sl, r6
 8005442:	464e      	mov	r6, r9
 8005444:	68c7      	ldr	r7, [r0, #12]
 8005446:	43b7      	bics	r7, r6
 8005448:	4656      	mov	r6, sl
 800544a:	4337      	orrs	r7, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800544c:	4666      	mov	r6, ip
 800544e:	60c7      	str	r7, [r0, #12]
 8005450:	2e02      	cmp	r6, #2
 8005452:	d1c4      	bne.n	80053de <LL_GPIO_Init+0x36>
        if (currentpin < LL_GPIO_PIN_8)
 8005454:	2dff      	cmp	r5, #255	; 0xff
 8005456:	d811      	bhi.n	800547c <LL_GPIO_Init+0xd4>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005458:	0017      	movs	r7, r2
 800545a:	4357      	muls	r7, r2
 800545c:	6a05      	ldr	r5, [r0, #32]
 800545e:	013e      	lsls	r6, r7, #4
 8005460:	1bf6      	subs	r6, r6, r7
 8005462:	43b5      	bics	r5, r6
 8005464:	694e      	ldr	r6, [r1, #20]
 8005466:	4377      	muls	r7, r6
 8005468:	433d      	orrs	r5, r7
 800546a:	6205      	str	r5, [r0, #32]
}
 800546c:	e7b7      	b.n	80053de <LL_GPIO_Init+0x36>
  }

  return (SUCCESS);
}
 800546e:	2000      	movs	r0, #0
 8005470:	bcf0      	pop	{r4, r5, r6, r7}
 8005472:	46bb      	mov	fp, r7
 8005474:	46b2      	mov	sl, r6
 8005476:	46a9      	mov	r9, r5
 8005478:	46a0      	mov	r8, r4
 800547a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800547c:	0a2d      	lsrs	r5, r5, #8
 800547e:	436d      	muls	r5, r5
 8005480:	436d      	muls	r5, r5
 8005482:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8005484:	012e      	lsls	r6, r5, #4
 8005486:	1b76      	subs	r6, r6, r5
 8005488:	43b7      	bics	r7, r6
 800548a:	694e      	ldr	r6, [r1, #20]
 800548c:	4375      	muls	r5, r6
 800548e:	433d      	orrs	r5, r7
 8005490:	6245      	str	r5, [r0, #36]	; 0x24
}
 8005492:	e7a4      	b.n	80053de <LL_GPIO_Init+0x36>

08005494 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005494:	0003      	movs	r3, r0
 8005496:	b570      	push	{r4, r5, r6, lr}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005498:	2000      	movs	r0, #0

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800549a:	2b00      	cmp	r3, #0
 800549c:	d133      	bne.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 800549e:	4a31      	ldr	r2, [pc, #196]	; (8005564 <LL_RCC_GetUSARTClockFreq+0xd0>)
 80054a0:	3303      	adds	r3, #3
 80054a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054a4:	400b      	ands	r3, r1
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d052      	beq.n	8005550 <LL_RCC_GetUSARTClockFreq+0xbc>
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d048      	beq.n	8005540 <LL_RCC_GetUSARTClockFreq+0xac>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054ae:	6851      	ldr	r1, [r2, #4]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d029      	beq.n	8005508 <LL_RCC_GetUSARTClockFreq+0x74>
 80054b4:	230c      	movs	r3, #12
 80054b6:	400b      	ands	r3, r1
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d151      	bne.n	8005560 <LL_RCC_GetUSARTClockFreq+0xcc>
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	6850      	ldr	r0, [r2, #4]
 80054c0:	025b      	lsls	r3, r3, #9
 80054c2:	4018      	ands	r0, r3
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80054c4:	4243      	negs	r3, r0
 80054c6:	4158      	adcs	r0, r3
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <LL_RCC_GetUSARTClockFreq+0xd4>)
 80054ca:	4240      	negs	r0, r0
 80054cc:	4018      	ands	r0, r3
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <LL_RCC_GetUSARTClockFreq+0xd8>)
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80054d0:	240f      	movs	r4, #15
 80054d2:	469c      	mov	ip, r3
 80054d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054d6:	4460      	add	r0, ip
 80054d8:	4021      	ands	r1, r4
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80054da:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80054dc:	6855      	ldr	r5, [r2, #4]
 80054de:	f7fa fe13 	bl	8000108 <__udivsi3>
 80054e2:	0003      	movs	r3, r0
 80054e4:	0cad      	lsrs	r5, r5, #18
 80054e6:	402c      	ands	r4, r5
 80054e8:	1ca0      	adds	r0, r4, #2
 80054ea:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054ec:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <LL_RCC_GetUSARTClockFreq+0xd0>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80054ee:	4920      	ldr	r1, [pc, #128]	; (8005570 <LL_RCC_GetUSARTClockFreq+0xdc>)
 80054f0:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0612      	lsls	r2, r2, #24
 80054f6:	0f12      	lsrs	r2, r2, #28
 80054f8:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80054fa:	055b      	lsls	r3, r3, #21
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80054fc:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <LL_RCC_GetUSARTClockFreq+0xe0>)
 8005500:	0f5b      	lsrs	r3, r3, #29
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	40d8      	lsrs	r0, r3
}
 8005506:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005508:	330b      	adds	r3, #11
 800550a:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 800550c:	2b08      	cmp	r3, #8
 800550e:	d11d      	bne.n	800554c <LL_RCC_GetUSARTClockFreq+0xb8>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	6850      	ldr	r0, [r2, #4]
 8005514:	025b      	lsls	r3, r3, #9
 8005516:	4018      	ands	r0, r3
      pllinputfreq = HSE_VALUE;
 8005518:	4243      	negs	r3, r0
 800551a:	4158      	adcs	r0, r3
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <LL_RCC_GetUSARTClockFreq+0xd4>)
 800551e:	4240      	negs	r0, r0
 8005520:	4018      	ands	r0, r3
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <LL_RCC_GetUSARTClockFreq+0xd8>)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8005524:	240f      	movs	r4, #15
 8005526:	469c      	mov	ip, r3
 8005528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800552a:	4460      	add	r0, ip
 800552c:	4021      	ands	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800552e:	3101      	adds	r1, #1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8005530:	6855      	ldr	r5, [r2, #4]
 8005532:	f7fa fde9 	bl	8000108 <__udivsi3>
 8005536:	0cad      	lsrs	r5, r5, #18
 8005538:	402c      	ands	r4, r5
 800553a:	3402      	adds	r4, #2
 800553c:	4360      	muls	r0, r4
  return frequency;
 800553e:	e7e2      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005540:	6813      	ldr	r3, [r2, #0]
 8005542:	2202      	movs	r2, #2
 8005544:	0010      	movs	r0, r2
 8005546:	4018      	ands	r0, r3
        if (LL_RCC_HSI_IsReady())
 8005548:	421a      	tst	r2, r3
 800554a:	d0dc      	beq.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
          usart_frequency = HSI_VALUE;
 800554c:	4807      	ldr	r0, [pc, #28]	; (800556c <LL_RCC_GetUSARTClockFreq+0xd8>)
  return usart_frequency;
 800554e:	e7da      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005550:	0018      	movs	r0, r3
 8005552:	6a12      	ldr	r2, [r2, #32]
 8005554:	4010      	ands	r0, r2
        if (LL_RCC_LSE_IsReady())
 8005556:	4213      	tst	r3, r2
 8005558:	d0d5      	beq.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
          usart_frequency = LSE_VALUE;
 800555a:	2080      	movs	r0, #128	; 0x80
 800555c:	0200      	lsls	r0, r0, #8
 800555e:	e7d2      	b.n	8005506 <LL_RCC_GetUSARTClockFreq+0x72>
      frequency = HSI_VALUE;
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <LL_RCC_GetUSARTClockFreq+0xd8>)
 8005562:	e7c3      	b.n	80054ec <LL_RCC_GetUSARTClockFreq+0x58>
 8005564:	40021000 	.word	0x40021000
 8005568:	ffc2f700 	.word	0xffc2f700
 800556c:	007a1200 	.word	0x007a1200
 8005570:	080066b0 	.word	0x080066b0
 8005574:	080066c0 	.word	0x080066c0

08005578 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <LL_TIM_Init+0x70>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800557a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	4290      	cmp	r0, r2
 800557e:	d02e      	beq.n	80055de <LL_TIM_Init+0x66>
 8005580:	2280      	movs	r2, #128	; 0x80
 8005582:	05d2      	lsls	r2, r2, #23
 8005584:	4290      	cmp	r0, r2
 8005586:	d017      	beq.n	80055b8 <LL_TIM_Init+0x40>
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <LL_TIM_Init+0x74>)
 800558a:	4290      	cmp	r0, r2
 800558c:	d014      	beq.n	80055b8 <LL_TIM_Init+0x40>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558e:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <LL_TIM_Init+0x78>)
 8005590:	4290      	cmp	r0, r2
 8005592:	d015      	beq.n	80055c0 <LL_TIM_Init+0x48>
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <LL_TIM_Init+0x7c>)
 8005596:	4290      	cmp	r0, r2
 8005598:	d002      	beq.n	80055a0 <LL_TIM_Init+0x28>
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <LL_TIM_Init+0x80>)
 800559c:	4290      	cmp	r0, r2
 800559e:	d113      	bne.n	80055c8 <LL_TIM_Init+0x50>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <LL_TIM_Init+0x84>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ca      	ldr	r2, [r1, #12]
 80055a6:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80055a8:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80055aa:	688b      	ldr	r3, [r1, #8]
 80055ac:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80055ae:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80055b0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80055b2:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80055b4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80055b6:	e00c      	b.n	80055d2 <LL_TIM_Init+0x5a>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80055b8:	2270      	movs	r2, #112	; 0x70
 80055ba:	4393      	bics	r3, r2
 80055bc:	684a      	ldr	r2, [r1, #4]
 80055be:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80055c0:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <LL_TIM_Init+0x84>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ca      	ldr	r2, [r1, #12]
 80055c6:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80055c8:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80055ca:	688b      	ldr	r3, [r1, #8]
 80055cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80055ce:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80055d0:	6283      	str	r3, [r0, #40]	; 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80055d2:	2201      	movs	r2, #1
 80055d4:	6943      	ldr	r3, [r0, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80055da:	2000      	movs	r0, #0
 80055dc:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80055de:	2270      	movs	r2, #112	; 0x70
 80055e0:	4393      	bics	r3, r2
 80055e2:	684a      	ldr	r2, [r1, #4]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	e7db      	b.n	80055a0 <LL_TIM_Init+0x28>
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40002000 	.word	0x40002000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800
 80055fc:	fffffcff 	.word	0xfffffcff

08005600 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8005600:	2380      	movs	r3, #128	; 0x80
{
 8005602:	b570      	push	{r4, r5, r6, lr}
  switch (Channel)
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4299      	cmp	r1, r3
 8005608:	d100      	bne.n	800560c <LL_TIM_OC_Init+0xc>
 800560a:	e07b      	b.n	8005704 <LL_TIM_OC_Init+0x104>
 800560c:	d82b      	bhi.n	8005666 <LL_TIM_OC_Init+0x66>
 800560e:	2901      	cmp	r1, #1
 8005610:	d057      	beq.n	80056c2 <LL_TIM_OC_Init+0xc2>
 8005612:	2910      	cmp	r1, #16
 8005614:	d153      	bne.n	80056be <LL_TIM_OC_Init+0xbe>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005616:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005618:	4d6f      	ldr	r5, [pc, #444]	; (80057d8 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800561a:	438b      	bics	r3, r1
 800561c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800561e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005620:	6846      	ldr	r6, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005622:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005624:	402c      	ands	r4, r5
 8005626:	6815      	ldr	r5, [r2, #0]
 8005628:	022d      	lsls	r5, r5, #8
 800562a:	432c      	orrs	r4, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800562c:	2520      	movs	r5, #32
 800562e:	43ab      	bics	r3, r5
 8005630:	001d      	movs	r5, r3
 8005632:	6913      	ldr	r3, [r2, #16]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005638:	438b      	bics	r3, r1
 800563a:	6851      	ldr	r1, [r2, #4]
 800563c:	010d      	lsls	r5, r1, #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563e:	4967      	ldr	r1, [pc, #412]	; (80057dc <LL_TIM_OC_Init+0x1dc>)
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005640:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	4288      	cmp	r0, r1
 8005644:	d100      	bne.n	8005648 <LL_TIM_OC_Init+0x48>
 8005646:	e0ab      	b.n	80057a0 <LL_TIM_OC_Init+0x1a0>
 8005648:	4965      	ldr	r1, [pc, #404]	; (80057e0 <LL_TIM_OC_Init+0x1e0>)
 800564a:	4288      	cmp	r0, r1
 800564c:	d100      	bne.n	8005650 <LL_TIM_OC_Init+0x50>
 800564e:	e0a7      	b.n	80057a0 <LL_TIM_OC_Init+0x1a0>
 8005650:	4964      	ldr	r1, [pc, #400]	; (80057e4 <LL_TIM_OC_Init+0x1e4>)
 8005652:	4288      	cmp	r0, r1
 8005654:	d100      	bne.n	8005658 <LL_TIM_OC_Init+0x58>
 8005656:	e0a3      	b.n	80057a0 <LL_TIM_OC_Init+0x1a0>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005658:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800565a:	6046      	str	r6, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800565c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800565e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005660:	6203      	str	r3, [r0, #32]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005662:	2000      	movs	r0, #0
      break;
 8005664:	e02c      	b.n	80056c0 <LL_TIM_OC_Init+0xc0>
  switch (Channel)
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	015b      	lsls	r3, r3, #5
 800566a:	4299      	cmp	r1, r3
 800566c:	d127      	bne.n	80056be <LL_TIM_OC_Init+0xbe>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800566e:	6a01      	ldr	r1, [r0, #32]
 8005670:	4e5d      	ldr	r6, [pc, #372]	; (80057e8 <LL_TIM_OC_Init+0x1e8>)

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005672:	4c59      	ldr	r4, [pc, #356]	; (80057d8 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005674:	4031      	ands	r1, r6
 8005676:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005678:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800567a:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800567c:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800567e:	4021      	ands	r1, r4
 8005680:	6814      	ldr	r4, [r2, #0]
 8005682:	0224      	lsls	r4, r4, #8
 8005684:	430c      	orrs	r4, r1

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005686:	4959      	ldr	r1, [pc, #356]	; (80057ec <LL_TIM_OC_Init+0x1ec>)
 8005688:	4019      	ands	r1, r3
 800568a:	6913      	ldr	r3, [r2, #16]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	430b      	orrs	r3, r1

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005690:	6851      	ldr	r1, [r2, #4]
 8005692:	4033      	ands	r3, r6
 8005694:	0309      	lsls	r1, r1, #12
 8005696:	430b      	orrs	r3, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	4950      	ldr	r1, [pc, #320]	; (80057dc <LL_TIM_OC_Init+0x1dc>)
 800569a:	4288      	cmp	r0, r1
 800569c:	d100      	bne.n	80056a0 <LL_TIM_OC_Init+0xa0>
 800569e:	e095      	b.n	80057cc <LL_TIM_OC_Init+0x1cc>
 80056a0:	494f      	ldr	r1, [pc, #316]	; (80057e0 <LL_TIM_OC_Init+0x1e0>)
 80056a2:	4288      	cmp	r0, r1
 80056a4:	d100      	bne.n	80056a8 <LL_TIM_OC_Init+0xa8>
 80056a6:	e091      	b.n	80057cc <LL_TIM_OC_Init+0x1cc>
 80056a8:	494e      	ldr	r1, [pc, #312]	; (80057e4 <LL_TIM_OC_Init+0x1e4>)
 80056aa:	4288      	cmp	r0, r1
 80056ac:	d100      	bne.n	80056b0 <LL_TIM_OC_Init+0xb0>
 80056ae:	e08d      	b.n	80057cc <LL_TIM_OC_Init+0x1cc>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80056b0:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80056b2:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80056b4:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80056b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80056b8:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80056ba:	2000      	movs	r0, #0
      break;
 80056bc:	e000      	b.n	80056c0 <LL_TIM_OC_Init+0xc0>
  switch (Channel)
 80056be:	2001      	movs	r0, #1
}
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80056c2:	2673      	movs	r6, #115	; 0x73
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80056c4:	6a03      	ldr	r3, [r0, #32]
 80056c6:	438b      	bics	r3, r1
 80056c8:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80056ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80056cc:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80056ce:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80056d0:	43b4      	bics	r4, r6
 80056d2:	6816      	ldr	r6, [r2, #0]
 80056d4:	4334      	orrs	r4, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80056d6:	2602      	movs	r6, #2
 80056d8:	43b3      	bics	r3, r6
 80056da:	6916      	ldr	r6, [r2, #16]
 80056dc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80056de:	438b      	bics	r3, r1
 80056e0:	6851      	ldr	r1, [r2, #4]
 80056e2:	430b      	orrs	r3, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e4:	493d      	ldr	r1, [pc, #244]	; (80057dc <LL_TIM_OC_Init+0x1dc>)
 80056e6:	4288      	cmp	r0, r1
 80056e8:	d045      	beq.n	8005776 <LL_TIM_OC_Init+0x176>
 80056ea:	493d      	ldr	r1, [pc, #244]	; (80057e0 <LL_TIM_OC_Init+0x1e0>)
 80056ec:	4288      	cmp	r0, r1
 80056ee:	d042      	beq.n	8005776 <LL_TIM_OC_Init+0x176>
 80056f0:	493c      	ldr	r1, [pc, #240]	; (80057e4 <LL_TIM_OC_Init+0x1e4>)
 80056f2:	4288      	cmp	r0, r1
 80056f4:	d03f      	beq.n	8005776 <LL_TIM_OC_Init+0x176>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80056f6:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80056f8:	6045      	str	r5, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80056fa:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80056fc:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80056fe:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005700:	2000      	movs	r0, #0
      break;
 8005702:	e7dd      	b.n	80056c0 <LL_TIM_OC_Init+0xc0>
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005704:	2473      	movs	r4, #115	; 0x73
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005706:	6a01      	ldr	r1, [r0, #32]
 8005708:	4e39      	ldr	r6, [pc, #228]	; (80057f0 <LL_TIM_OC_Init+0x1f0>)
 800570a:	4031      	ands	r1, r6
 800570c:	6201      	str	r1, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800570e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005710:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005712:	69c5      	ldr	r5, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005714:	43a5      	bics	r5, r4
 8005716:	6814      	ldr	r4, [r2, #0]
 8005718:	4325      	orrs	r5, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800571a:	4c36      	ldr	r4, [pc, #216]	; (80057f4 <LL_TIM_OC_Init+0x1f4>)
 800571c:	401c      	ands	r4, r3
 800571e:	6913      	ldr	r3, [r2, #16]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	4323      	orrs	r3, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005724:	6854      	ldr	r4, [r2, #4]
 8005726:	4033      	ands	r3, r6
 8005728:	0224      	lsls	r4, r4, #8
 800572a:	431c      	orrs	r4, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <LL_TIM_OC_Init+0x1dc>)
 800572e:	4298      	cmp	r0, r3
 8005730:	d00c      	beq.n	800574c <LL_TIM_OC_Init+0x14c>
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <LL_TIM_OC_Init+0x1e0>)
 8005734:	4298      	cmp	r0, r3
 8005736:	d009      	beq.n	800574c <LL_TIM_OC_Init+0x14c>
 8005738:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <LL_TIM_OC_Init+0x1e4>)
 800573a:	4298      	cmp	r0, r3
 800573c:	d006      	beq.n	800574c <LL_TIM_OC_Init+0x14c>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800573e:	68d3      	ldr	r3, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005740:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005742:	61c5      	str	r5, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005744:	63c3      	str	r3, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005746:	6204      	str	r4, [r0, #32]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005748:	2000      	movs	r0, #0
      break;
 800574a:	e7b9      	b.n	80056c0 <LL_TIM_OC_Init+0xc0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800574c:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <LL_TIM_OC_Init+0x1f8>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800574e:	4e26      	ldr	r6, [pc, #152]	; (80057e8 <LL_TIM_OC_Init+0x1e8>)
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005750:	401c      	ands	r4, r3
 8005752:	6953      	ldr	r3, [r2, #20]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005754:	400e      	ands	r6, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005756:	029b      	lsls	r3, r3, #10
 8005758:	4323      	orrs	r3, r4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800575a:	4c28      	ldr	r4, [pc, #160]	; (80057fc <LL_TIM_OC_Init+0x1fc>)
 800575c:	4023      	ands	r3, r4
 800575e:	6894      	ldr	r4, [r2, #8]
 8005760:	02a4      	lsls	r4, r4, #10
 8005762:	431c      	orrs	r4, r3
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005764:	6993      	ldr	r3, [r2, #24]
 8005766:	0119      	lsls	r1, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <LL_TIM_OC_Init+0x1ec>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800576a:	4331      	orrs	r1, r6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800576c:	4019      	ands	r1, r3
 800576e:	69d3      	ldr	r3, [r2, #28]
 8005770:	015e      	lsls	r6, r3, #5
 8005772:	4331      	orrs	r1, r6
 8005774:	e7e3      	b.n	800573e <LL_TIM_OC_Init+0x13e>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005776:	2108      	movs	r1, #8
 8005778:	438b      	bics	r3, r1
 800577a:	0019      	movs	r1, r3
 800577c:	6953      	ldr	r3, [r2, #20]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	430b      	orrs	r3, r1
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005782:	2104      	movs	r1, #4
 8005784:	438b      	bics	r3, r1
 8005786:	6891      	ldr	r1, [r2, #8]
 8005788:	0089      	lsls	r1, r1, #2
 800578a:	430b      	orrs	r3, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800578c:	4918      	ldr	r1, [pc, #96]	; (80057f0 <LL_TIM_OC_Init+0x1f0>)
 800578e:	400d      	ands	r5, r1
 8005790:	6991      	ldr	r1, [r2, #24]
 8005792:	430d      	orrs	r5, r1
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005794:	4917      	ldr	r1, [pc, #92]	; (80057f4 <LL_TIM_OC_Init+0x1f4>)
 8005796:	400d      	ands	r5, r1
 8005798:	69d1      	ldr	r1, [r2, #28]
 800579a:	0049      	lsls	r1, r1, #1
 800579c:	430d      	orrs	r5, r1
 800579e:	e7aa      	b.n	80056f6 <LL_TIM_OC_Init+0xf6>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	438b      	bics	r3, r1
 80057a4:	001d      	movs	r5, r3
 80057a6:	6953      	ldr	r3, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80057a8:	3940      	subs	r1, #64	; 0x40
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80057aa:	019b      	lsls	r3, r3, #6
 80057ac:	432b      	orrs	r3, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80057ae:	438b      	bics	r3, r1
 80057b0:	6891      	ldr	r1, [r2, #8]
 80057b2:	018d      	lsls	r5, r1, #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80057b4:	4911      	ldr	r1, [pc, #68]	; (80057fc <LL_TIM_OC_Init+0x1fc>)
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80057b6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80057b8:	400e      	ands	r6, r1
 80057ba:	6991      	ldr	r1, [r2, #24]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80057bc:	4d0e      	ldr	r5, [pc, #56]	; (80057f8 <LL_TIM_OC_Init+0x1f8>)
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80057be:	0089      	lsls	r1, r1, #2
 80057c0:	4331      	orrs	r1, r6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80057c2:	4029      	ands	r1, r5
 80057c4:	69d5      	ldr	r5, [r2, #28]
 80057c6:	00ee      	lsls	r6, r5, #3
 80057c8:	430e      	orrs	r6, r1
 80057ca:	e745      	b.n	8005658 <LL_TIM_OC_Init+0x58>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80057cc:	490c      	ldr	r1, [pc, #48]	; (8005800 <LL_TIM_OC_Init+0x200>)
 80057ce:	400d      	ands	r5, r1
 80057d0:	6991      	ldr	r1, [r2, #24]
 80057d2:	0189      	lsls	r1, r1, #6
 80057d4:	430d      	orrs	r5, r1
 80057d6:	e76b      	b.n	80056b0 <LL_TIM_OC_Init+0xb0>
 80057d8:	ffff8cff 	.word	0xffff8cff
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800
 80057e8:	ffffefff 	.word	0xffffefff
 80057ec:	ffffdfff 	.word	0xffffdfff
 80057f0:	fffffeff 	.word	0xfffffeff
 80057f4:	fffffdff 	.word	0xfffffdff
 80057f8:	fffff7ff 	.word	0xfffff7ff
 80057fc:	fffffbff 	.word	0xfffffbff
 8005800:	ffffbfff 	.word	0xffffbfff

08005804 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005804:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005806:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005808:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800580a:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <LL_TIM_BDTR_Init+0x3c>)
 800580c:	4013      	ands	r3, r2
 800580e:	684a      	ldr	r2, [r1, #4]
 8005810:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <LL_TIM_BDTR_Init+0x40>)
 8005814:	4013      	ands	r3, r2
 8005816:	680a      	ldr	r2, [r1, #0]
 8005818:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800581a:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <LL_TIM_BDTR_Init+0x44>)
 800581c:	401a      	ands	r2, r3
 800581e:	89cb      	ldrh	r3, [r1, #14]
 8005820:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8005822:	4a0a      	ldr	r2, [pc, #40]	; (800584c <LL_TIM_BDTR_Init+0x48>)
 8005824:	4013      	ands	r3, r2
 8005826:	690a      	ldr	r2, [r1, #16]
 8005828:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <LL_TIM_BDTR_Init+0x4c>)
 800582c:	4013      	ands	r3, r2
 800582e:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005830:	4908      	ldr	r1, [pc, #32]	; (8005854 <LL_TIM_BDTR_Init+0x50>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005832:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005834:	400b      	ands	r3, r1
 8005836:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005838:	6443      	str	r3, [r0, #68]	; 0x44
}
 800583a:	2000      	movs	r0, #0
 800583c:	4770      	bx	lr
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	fffffbff 	.word	0xfffffbff
 8005844:	fffff7ff 	.word	0xfffff7ff
 8005848:	ffffefff 	.word	0xffffefff
 800584c:	ffffdfff 	.word	0xffffdfff
 8005850:	ffffbfff 	.word	0xffffbfff
 8005854:	ffff7fff 	.word	0xffff7fff

08005858 <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005858:	6803      	ldr	r3, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	0004      	movs	r4, r0
 800585e:	000d      	movs	r5, r1
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005860:	07db      	lsls	r3, r3, #31
 8005862:	d41a      	bmi.n	800589a <LL_USART_Init+0x42>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005864:	684b      	ldr	r3, [r1, #4]
 8005866:	68c9      	ldr	r1, [r1, #12]
 8005868:	6802      	ldr	r2, [r0, #0]
 800586a:	430b      	orrs	r3, r1
 800586c:	6929      	ldr	r1, [r5, #16]
 800586e:	430b      	orrs	r3, r1
 8005870:	69a9      	ldr	r1, [r5, #24]
 8005872:	430b      	orrs	r3, r1
 8005874:	491b      	ldr	r1, [pc, #108]	; (80058e4 <LL_USART_Init+0x8c>)
 8005876:	400a      	ands	r2, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800587c:	6843      	ldr	r3, [r0, #4]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <LL_USART_Init+0x90>)
 8005880:	4013      	ands	r3, r2
 8005882:	68aa      	ldr	r2, [r5, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005888:	6883      	ldr	r3, [r0, #8]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <LL_USART_Init+0x94>)
 800588c:	4013      	ands	r3, r2
 800588e:	696a      	ldr	r2, [r5, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <LL_USART_Init+0x98>)
 8005896:	4298      	cmp	r0, r3
 8005898:	d001      	beq.n	800589e <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 800589a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800589c:	bd70      	pop	{r4, r5, r6, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800589e:	2000      	movs	r0, #0
 80058a0:	f7ff fdf8 	bl	8005494 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0f8      	beq.n	800589a <LL_USART_Init+0x42>
        && (USART_InitStruct->BaudRate != 0U))
 80058a8:	6829      	ldr	r1, [r5, #0]
 80058aa:	2900      	cmp	r1, #0
 80058ac:	d0f5      	beq.n	800589a <LL_USART_Init+0x42>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	69aa      	ldr	r2, [r5, #24]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d008      	beq.n	80058ca <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80058b8:	084b      	lsrs	r3, r1, #1
 80058ba:	1818      	adds	r0, r3, r0
 80058bc:	f7fa fc24 	bl	8000108 <__udivsi3>
 80058c0:	0403      	lsls	r3, r0, #16
 80058c2:	0c1b      	lsrs	r3, r3, #16
      status = SUCCESS;
 80058c4:	2000      	movs	r0, #0
 80058c6:	60e3      	str	r3, [r4, #12]
 80058c8:	e7e8      	b.n	800589c <LL_USART_Init+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80058ca:	084b      	lsrs	r3, r1, #1
 80058cc:	0040      	lsls	r0, r0, #1
 80058ce:	18c0      	adds	r0, r0, r3
 80058d0:	f7fa fc1a 	bl	8000108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <LL_USART_Init+0x9c>)
 80058d6:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d8:	0700      	lsls	r0, r0, #28
 80058da:	0f40      	lsrs	r0, r0, #29
 80058dc:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 80058de:	60e0      	str	r0, [r4, #12]
 80058e0:	2000      	movs	r0, #0
 80058e2:	e7db      	b.n	800589c <LL_USART_Init+0x44>
 80058e4:	ffff69f3 	.word	0xffff69f3
 80058e8:	ffffcfff 	.word	0xffffcfff
 80058ec:	fffffcff 	.word	0xfffffcff
 80058f0:	40013800 	.word	0x40013800
 80058f4:	0000fff0 	.word	0x0000fff0

080058f8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80058f8:	4b01      	ldr	r3, [pc, #4]	; (8005900 <LL_SetSystemCoreClock+0x8>)
 80058fa:	6018      	str	r0, [r3, #0]
}
 80058fc:	4770      	bx	lr
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	20000414 	.word	0x20000414

08005904 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8005904:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005906:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005908:	885b      	ldrh	r3, [r3, #2]
 800590a:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 800590c:	0c00      	lsrs	r0, r0, #16
}
 800590e:	4770      	bx	lr

08005910 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005910:	b20b      	sxth	r3, r1
 8005912:	1409      	asrs	r1, r1, #16
 8005914:	b530      	push	{r4, r5, lr}
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005916:	000d      	movs	r5, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005918:	001c      	movs	r4, r3
    maxModule = (int32_t)pHandle->MaxModule;
 800591a:	8802      	ldrh	r2, [r0, #0]
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800591c:	434d      	muls	r5, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 800591e:	435c      	muls	r4, r3
    square_limit = maxModule * maxModule;
 8005920:	4352      	muls	r2, r2
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005922:	1964      	adds	r4, r4, r5
{
 8005924:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8005926:	42a2      	cmp	r2, r4
 8005928:	da10      	bge.n	800594c <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800592a:	8840      	ldrh	r0, [r0, #2]
 800592c:	0004      	movs	r4, r0
 800592e:	4344      	muls	r4, r0
    {
      if (square_d <= vd_square_limit)
 8005930:	42a5      	cmp	r5, r4
 8005932:	dc11      	bgt.n	8005958 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8005934:	1b52      	subs	r2, r2, r5
 8005936:	17d0      	asrs	r0, r2, #31
 8005938:	0300      	lsls	r0, r0, #12
 800593a:	0b00      	lsrs	r0, r0, #12
 800593c:	1882      	adds	r2, r0, r2
 800593e:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005940:	4811      	ldr	r0, [pc, #68]	; (8005988 <Circle_Limitation+0x78>)
 8005942:	0052      	lsls	r2, r2, #1
 8005944:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8005946:	2b00      	cmp	r3, #0
 8005948:	db19      	blt.n	800597e <Circle_Limitation+0x6e>
        if (Vqd.q < 0)
        {
          new_q = - new_q;
        }
      }
      Local_Vqd.q = (int16_t)new_q;
 800594a:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	0409      	lsls	r1, r1, #16
 8005950:	0c18      	lsrs	r0, r3, #16
 8005952:	4308      	orrs	r0, r1
}
 8005954:	b005      	add	sp, #20
 8005956:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8005958:	2900      	cmp	r1, #0
 800595a:	db13      	blt.n	8005984 <Circle_Limitation+0x74>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 800595c:	1b12      	subs	r2, r2, r4
 800595e:	17d1      	asrs	r1, r2, #31
 8005960:	0309      	lsls	r1, r1, #12
 8005962:	0b09      	lsrs	r1, r1, #12
 8005964:	188a      	adds	r2, r1, r2
 8005966:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005968:	4907      	ldr	r1, [pc, #28]	; (8005988 <Circle_Limitation+0x78>)
 800596a:	0052      	lsls	r2, r2, #1
 800596c:	5a52      	ldrh	r2, [r2, r1]
        if (Vqd.q < 0)
 800596e:	2b00      	cmp	r3, #0
 8005970:	db02      	blt.n	8005978 <Circle_Limitation+0x68>
      Local_Vqd.d = (int16_t)new_d;
 8005972:	b201      	sxth	r1, r0
      Local_Vqd.q = (int16_t)new_q;
 8005974:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
 8005976:	e7e9      	b.n	800594c <Circle_Limitation+0x3c>
          new_q = - new_q;
 8005978:	4252      	negs	r2, r2
      Local_Vqd.d = (int16_t)new_d;
 800597a:	b201      	sxth	r1, r0
 800597c:	e7fa      	b.n	8005974 <Circle_Limitation+0x64>
          new_q = -new_q;
 800597e:	4252      	negs	r2, r2
      Local_Vqd.q = (int16_t)new_q;
 8005980:	b213      	sxth	r3, r2
      Local_Vqd.d = (int16_t)new_d;
 8005982:	e7e3      	b.n	800594c <Circle_Limitation+0x3c>
          new_d = -new_d;
 8005984:	4240      	negs	r0, r0
 8005986:	e7e9      	b.n	800595c <Circle_Limitation+0x4c>
 8005988:	080066c8 	.word	0x080066c8

0800598c <MCP_ReceivedPacket>:
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 800598c:	6841      	ldr	r1, [r0, #4]
{
 800598e:	b5f0      	push	{r4, r5, r6, r7, lr}
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005990:	880a      	ldrh	r2, [r1, #0]
{
 8005992:	0004      	movs	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005994:	2307      	movs	r3, #7
 8005996:	0016      	movs	r6, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005998:	2780      	movs	r7, #128	; 0x80
 800599a:	20ff      	movs	r0, #255	; 0xff
 800599c:	0015      	movs	r5, r2
{
 800599e:	b083      	sub	sp, #12
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80059a0:	439e      	bics	r6, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80059a2:	007f      	lsls	r7, r7, #1
 80059a4:	4385      	bics	r5, r0
 80059a6:	42bd      	cmp	r5, r7
 80059a8:	d02d      	beq.n	8005a06 <MCP_ReceivedPacket+0x7a>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80059aa:	89a0      	ldrh	r0, [r4, #12]
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80059ac:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80059ae:	4013      	ands	r3, r2
 80059b0:	4d47      	ldr	r5, [pc, #284]	; (8005ad0 <MCP_ReceivedPacket+0x144>)
 80059b2:	015b      	lsls	r3, r3, #5
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80059b4:	3802      	subs	r0, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80059b6:	195d      	adds	r5, r3, r5
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80059b8:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80059ba:	6823      	ldr	r3, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80059bc:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80059be:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80059c0:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80059c2:	899a      	ldrh	r2, [r3, #12]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	b293      	uxth	r3, r2
 80059c8:	469c      	mov	ip, r3
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 80059ca:	2300      	movs	r3, #0
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80059cc:	b212      	sxth	r2, r2
    pHandle->txLength = 0;
 80059ce:	81e3      	strh	r3, [r4, #14]

    switch (command)
 80059d0:	2e38      	cmp	r6, #56	; 0x38
 80059d2:	d80c      	bhi.n	80059ee <MCP_ReceivedPacket+0x62>
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <MCP_ReceivedPacket+0x148>)
 80059d6:	00b6      	lsls	r6, r6, #2
 80059d8:	599b      	ldr	r3, [r3, r6]
 80059da:	469f      	mov	pc, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80059e0:	68a2      	ldr	r2, [r4, #8]
 80059e2:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80059e4:	89e3      	ldrh	r3, [r4, #14]
 80059e6:	3301      	adds	r3, #1
 80059e8:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80059ea:	b003      	add	sp, #12
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80059ee:	2e68      	cmp	r6, #104	; 0x68
 80059f0:	d063      	beq.n	8005aba <MCP_ReceivedPacket+0x12e>
 80059f2:	42be      	cmp	r6, r7
 80059f4:	d069      	beq.n	8005aca <MCP_ReceivedPacket+0x13e>
 80059f6:	2e48      	cmp	r6, #72	; 0x48
 80059f8:	d1f0      	bne.n	80059dc <MCP_ReceivedPacket+0x50>
        MCI_Clear_Iqdref(pMCI);
 80059fa:	0028      	movs	r0, r5
 80059fc:	f7fc fc34 	bl	8002268 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8005a00:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a02:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a04:	e7ec      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005a06:	89a0      	ldrh	r0, [r4, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a08:	6823      	ldr	r3, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005a0a:	3802      	subs	r0, #2
 8005a0c:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005a0e:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005a10:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005a12:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a14:	899a      	ldrh	r2, [r3, #12]
    pHandle->txLength = 0;
 8005a16:	2300      	movs	r3, #0
      userCommand = (command >> 3) & 0x1f;
 8005a18:	08f6      	lsrs	r6, r6, #3
    pHandle->txLength = 0;
 8005a1a:	81e3      	strh	r3, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005a1c:	331e      	adds	r3, #30
      userCommand = (command >> 3) & 0x1f;
 8005a1e:	b2f5      	uxtb	r5, r6
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005a20:	421e      	tst	r6, r3
 8005a22:	d03a      	beq.n	8005a9a <MCP_ReceivedPacket+0x10e>
        MCPResponse = MCP_CMD_OK;
 8005a24:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005a26:	200d      	movs	r0, #13
 8005a28:	e7da      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        if (IDLE == MCI_GetSTMState(pMCI))
 8005a2a:	0028      	movs	r0, r5
 8005a2c:	f7fc fb44 	bl	80020b8 <MCI_GetSTMState>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d005      	beq.n	8005a40 <MCP_ReceivedPacket+0xb4>
          (void)MCI_StopMotor(pMCI);
 8005a34:	0028      	movs	r0, r5
 8005a36:	f7fc fb5d 	bl	80020f4 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 8005a3a:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a3c:	89e3      	ldrh	r3, [r4, #14]
 8005a3e:	e7cf      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005a40:	0028      	movs	r0, r5
 8005a42:	f7fc fb3f 	bl	80020c4 <MCI_StartMotor>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4058      	eors	r0, r3
 8005a4a:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a4c:	89e3      	ldrh	r3, [r4, #14]
 8005a4e:	e7c7      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8005a50:	4661      	mov	r1, ip
 8005a52:	0020      	movs	r0, r4
 8005a54:	f7fe fc7e 	bl	8004354 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a58:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a5a:	e7c1      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        pHandle->txLength = 4;
 8005a5c:	2304      	movs	r3, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005a5e:	68a2      	ldr	r2, [r4, #8]
        pHandle->txLength = 4;
 8005a60:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005a62:	3b03      	subs	r3, #3
 8005a64:	7013      	strb	r3, [r2, #0]
        MCPResponse = MCP_CMD_OK;
 8005a66:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a68:	89e3      	ldrh	r3, [r4, #14]
      break;
 8005a6a:	e7b9      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8005a6c:	4661      	mov	r1, ip
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f7fe f9ae 	bl	8003dd0 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a74:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a76:	e7b3      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        if (RUN == MCI_GetSTMState(pMCI))
 8005a78:	0028      	movs	r0, r5
 8005a7a:	f7fc fb1d 	bl	80020b8 <MCI_GetSTMState>
 8005a7e:	2806      	cmp	r0, #6
 8005a80:	d1db      	bne.n	8005a3a <MCP_ReceivedPacket+0xae>
          MCI_StopRamp(pMCI);
 8005a82:	0028      	movs	r0, r5
 8005a84:	f7fc fb78 	bl	8002178 <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 8005a88:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a8a:	89e3      	ldrh	r3, [r4, #14]
 8005a8c:	e7a8      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
        (void)MCI_FaultAcknowledged(pMCI);
 8005a8e:	0028      	movs	r0, r5
 8005a90:	f7fc fb4e 	bl	8002130 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 8005a94:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005a96:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005a98:	e7a2      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
      userCommand = (command >> 3) & 0x1f;
 8005a9a:	231f      	movs	r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005a9c:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 8005a9e:	402b      	ands	r3, r5
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005aa0:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	; (8005ad8 <MCP_ReceivedPacket+0x14c>)
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	595d      	ldr	r5, [r3, r5]
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	d0bb      	beq.n	8005a24 <MCP_ReceivedPacket+0x98>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	0023      	movs	r3, r4
 8005ab2:	330e      	adds	r3, #14
 8005ab4:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005ab6:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005ab8:	e792      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	0023      	movs	r3, r4
 8005ac0:	330e      	adds	r3, #14
 8005ac2:	f7fc fa83 	bl	8001fcc <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005ac6:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005ac8:	e78a      	b.n	80059e0 <MCP_ReceivedPacket+0x54>
    switch (command)
 8005aca:	2300      	movs	r3, #0
 8005acc:	e7e9      	b.n	8005aa2 <MCP_ReceivedPacket+0x116>
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	2000043c 	.word	0x2000043c
 8005ad4:	08006ecc 	.word	0x08006ecc
 8005ad8:	200005b0 	.word	0x200005b0

08005adc <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8005adc:	8a02      	ldrh	r2, [r0, #16]
 8005ade:	8b41      	ldrh	r1, [r0, #26]
{
 8005ae0:	0003      	movs	r3, r0
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	d306      	bcc.n	8005af4 <NTC_SetFaultState+0x18>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8005ae6:	8b81      	ldrh	r1, [r0, #28]
    {
      hFault = MC_NO_ERROR;
 8005ae8:	2000      	movs	r0, #0
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8005aea:	4291      	cmp	r1, r2
 8005aec:	d900      	bls.n	8005af0 <NTC_SetFaultState+0x14>
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8005aee:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8005af0:	8ad8      	ldrh	r0, [r3, #22]
 8005af2:	e7fc      	b.n	8005aee <NTC_SetFaultState+0x12>
      hFault = MC_OVER_TEMP;
 8005af4:	2008      	movs	r0, #8
 8005af6:	e7fa      	b.n	8005aee <NTC_SetFaultState+0x12>

08005af8 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005afc:	4770      	bx	lr
 8005afe:	46c0      	nop			; (mov r8, r8)

08005b00 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8005b00:	7803      	ldrb	r3, [r0, #0]
{
 8005b02:	b510      	push	{r4, lr}
 8005b04:	0004      	movs	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <NTC_Init+0x14>
      pHandle->hFaultState = MC_NO_ERROR;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	82c3      	strh	r3, [r0, #22]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005b0e:	8a43      	ldrh	r3, [r0, #18]
 8005b10:	8203      	strh	r3, [r0, #16]
}
 8005b12:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005b14:	3004      	adds	r0, #4
 8005b16:	f7fe ffa3 	bl	8004a60 <RCM_RegisterRegConv>
 8005b1a:	2326      	movs	r3, #38	; 0x26
 8005b1c:	54e0      	strb	r0, [r4, r3]
      NTC_Clear(pHandle);
 8005b1e:	0020      	movs	r0, r4
 8005b20:	f7ff ffea 	bl	8005af8 <NTC_Clear>
 8005b24:	e7f5      	b.n	8005b12 <NTC_Init+0x12>
 8005b26:	46c0      	nop			; (mov r8, r8)

08005b28 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8005b28:	7803      	ldrb	r3, [r0, #0]
{
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	0004      	movs	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <NTC_CalcAvTemp+0x12>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8005b32:	2300      	movs	r3, #0
 8005b34:	82c3      	strh	r3, [r0, #22]
 8005b36:	2000      	movs	r0, #0
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8005b38:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005b3a:	3326      	adds	r3, #38	; 0x26
 8005b3c:	5cc0      	ldrb	r0, [r0, r3]
 8005b3e:	f7ff f829 	bl	8004b94 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <NTC_CalcAvTemp+0x3c>)
 8005b44:	4298      	cmp	r0, r3
 8005b46:	d007      	beq.n	8005b58 <NTC_CalcAvTemp+0x30>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005b48:	8b21      	ldrh	r1, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8005b4a:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005b4c:	1e4b      	subs	r3, r1, #1
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8005b4e:	4353      	muls	r3, r2
        wtemp += hAux;
 8005b50:	18c0      	adds	r0, r0, r3
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8005b52:	f7fa fad9 	bl	8000108 <__udivsi3>
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8005b56:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8005b58:	0020      	movs	r0, r4
 8005b5a:	f7ff ffbf 	bl	8005adc <NTC_SetFaultState>
 8005b5e:	82e0      	strh	r0, [r4, #22]
 8005b60:	e7ea      	b.n	8005b38 <NTC_CalcAvTemp+0x10>
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	0000ffff 	.word	0x0000ffff

08005b68 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005b68:	7803      	ldrb	r3, [r0, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 8005b6e:	6a02      	ldr	r2, [r0, #32]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005b70:	8a03      	ldrh	r3, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8005b72:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8005b74:	211e      	movs	r1, #30
 8005b76:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005b78:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp *= pHandle->hSensitivity;
 8005b7a:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005b7c:	141b      	asrs	r3, r3, #16
 8005b7e:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 8005b80:	b200      	sxth	r0, r0
}
 8005b82:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8005b84:	8a80      	ldrh	r0, [r0, #20]
 8005b86:	e7fb      	b.n	8005b80 <NTC_GetAvTemp_C+0x18>

08005b88 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005b88:	6803      	ldr	r3, [r0, #0]
 8005b8a:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005b8c:	8c03      	ldrh	r3, [r0, #32]
 8005b8e:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005b94:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b96:	4770      	bx	lr

08005b98 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005b98:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b9a:	4770      	bx	lr

08005b9c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005b9c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b9e:	4770      	bx	lr

08005ba0 <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005ba4:	4770      	bx	lr
 8005ba6:	46c0      	nop			; (mov r8, r8)

08005ba8 <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 8005ba8:	2306      	movs	r3, #6
 8005baa:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005bac:	4770      	bx	lr
 8005bae:	46c0      	nop			; (mov r8, r8)

08005bb0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005bb0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8005bb2:	4770      	bx	lr

08005bb4 <PID_GetKPDivisorPOW2>:
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
 8005bb4:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 8005bb6:	4770      	bx	lr

08005bb8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005bb8:	2301      	movs	r3, #1
 8005bba:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8005bbc:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005bbe:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005bc0:	4770      	bx	lr
 8005bc2:	46c0      	nop			; (mov r8, r8)

08005bc4 <PID_GetKIDivisorPOW2>:
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
 8005bc4:	8bc0      	ldrh	r0, [r0, #30]
#endif
}
 8005bc6:	4770      	bx	lr

08005bc8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8005bc8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005bca:	4770      	bx	lr

08005bcc <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8005bcc:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005bce:	4770      	bx	lr

08005bd0 <PID_SetKIDivisorPOW2>:
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005bd0:	2301      	movs	r3, #1
{
 8005bd2:	b570      	push	{r4, r5, r6, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005bd4:	408b      	lsls	r3, r1
{
 8005bd6:	000d      	movs	r5, r1
 8005bd8:	0004      	movs	r4, r0
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8005bda:	83c1      	strh	r1, [r0, #30]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005bdc:	4905      	ldr	r1, [pc, #20]	; (8005bf4 <PID_SetKIDivisorPOW2+0x24>)
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8005bde:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005be0:	40a9      	lsls	r1, r5
 8005be2:	f7ff fff3 	bl	8005bcc <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8005be6:	4904      	ldr	r1, [pc, #16]	; (8005bf8 <PID_SetKIDivisorPOW2+0x28>)
 8005be8:	0020      	movs	r0, r4
 8005bea:	40a9      	lsls	r1, r5
 8005bec:	f7ff ffec 	bl	8005bc8 <PID_SetLowerIntegralTermLimit>
}
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	00007fff 	.word	0x00007fff
 8005bf8:	ffff8001 	.word	0xffff8001

08005bfc <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8005bfc:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005bfe:	4770      	bx	lr

08005c00 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 8005c00:	2322      	movs	r3, #34	; 0x22
 8005c02:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005c04:	4770      	bx	lr
 8005c06:	46c0      	nop			; (mov r8, r8)

08005c08 <PID_GetKDDivisorPOW2>:
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
 8005c08:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
#endif
}
 8005c0a:	4770      	bx	lr

08005c0c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8005c10:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005c12:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c14:	4770      	bx	lr
 8005c16:	46c0      	nop			; (mov r8, r8)

08005c18 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8005c18:	0003      	movs	r3, r0
 8005c1a:	b570      	push	{r4, r5, r6, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005c1c:	2216      	movs	r2, #22
 8005c1e:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005c20:	2214      	movs	r2, #20
 8005c22:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005c24:	2406      	movs	r4, #6
 8005c26:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c28:	2404      	movs	r4, #4
 8005c2a:	5f1a      	ldrsh	r2, [r3, r4]
 8005c2c:	2400      	movs	r4, #0
 8005c2e:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	d00b      	beq.n	8005c4c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005c34:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005c36:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 8005c38:	1865      	adds	r5, r4, r1
 8005c3a:	d41b      	bmi.n	8005c74 <PI_Controller+0x5c>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	db24      	blt.n	8005c8a <PI_Controller+0x72>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005c40:	68dc      	ldr	r4, [r3, #12]
 8005c42:	42ac      	cmp	r4, r5
 8005c44:	db02      	blt.n	8005c4c <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005c46:	691c      	ldr	r4, [r3, #16]
 8005c48:	42ac      	cmp	r4, r5
 8005c4a:	dd1c      	ble.n	8005c86 <PI_Controller+0x6e>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005c4c:	0025      	movs	r5, r4
 8005c4e:	8b99      	ldrh	r1, [r3, #28]
 8005c50:	410a      	asrs	r2, r1
 8005c52:	8bd9      	ldrh	r1, [r3, #30]
 8005c54:	410d      	asrs	r5, r1
 8005c56:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005c58:	4290      	cmp	r0, r2
 8005c5a:	da03      	bge.n	8005c64 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005c5c:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005c5e:	18a4      	adds	r4, r4, r2
 8005c60:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005c64:	4296      	cmp	r6, r2
 8005c66:	dd03      	ble.n	8005c70 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005c68:	1ab2      	subs	r2, r6, r2
 8005c6a:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8005c6c:	18a4      	adds	r4, r4, r2
 8005c6e:	e7f7      	b.n	8005c60 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8005c70:	b210      	sxth	r0, r2
 8005c72:	e7f5      	b.n	8005c60 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8005c74:	2c00      	cmp	r4, #0
 8005c76:	dde3      	ble.n	8005c40 <PI_Controller+0x28>
          if (wIntegral_Term > 0)
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	dde1      	ble.n	8005c40 <PI_Controller+0x28>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005c7c:	68dc      	ldr	r4, [r3, #12]
 8005c7e:	4905      	ldr	r1, [pc, #20]	; (8005c94 <PI_Controller+0x7c>)
            wIntegral_sum_temp = INT32_MAX;
 8005c80:	0025      	movs	r5, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005c82:	428c      	cmp	r4, r1
 8005c84:	d1e2      	bne.n	8005c4c <PI_Controller+0x34>
            wIntegral_sum_temp = INT32_MAX;
 8005c86:	002c      	movs	r4, r5
 8005c88:	e7e0      	b.n	8005c4c <PI_Controller+0x34>
          if (wIntegral_Term < 0)
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	dad8      	bge.n	8005c40 <PI_Controller+0x28>
            wIntegral_sum_temp = -INT32_MAX;
 8005c8e:	4d02      	ldr	r5, [pc, #8]	; (8005c98 <PI_Controller+0x80>)
 8005c90:	e7d6      	b.n	8005c40 <PI_Controller+0x28>
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	7fffffff 	.word	0x7fffffff
 8005c98:	80000001 	.word	0x80000001

08005c9c <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005c9c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005c9e:	6882      	ldr	r2, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	5ed1      	ldrsh	r1, [r2, r3]
 8005ca4:	2416      	movs	r4, #22
 8005ca6:	5f13      	ldrsh	r3, [r2, r4]
 8005ca8:	434b      	muls	r3, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005caa:	210e      	movs	r1, #14
 8005cac:	5e54      	ldrsh	r4, [r2, r1]
 8005cae:	2118      	movs	r1, #24
 8005cb0:	5e51      	ldrsh	r1, [r2, r1]
 8005cb2:	4361      	muls	r1, r4
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005cb4:	1859      	adds	r1, r3, r1
    wAux /= 65536;
 8005cb6:	17ca      	asrs	r2, r1, #31
 8005cb8:	0412      	lsls	r2, r2, #16

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	5ec4      	ldrsh	r4, [r0, r3]
    wAux /= 65536;
 8005cbe:	0c13      	lsrs	r3, r2, #16
 8005cc0:	185b      	adds	r3, r3, r1
 8005cc2:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8005cc4:	1b1b      	subs	r3, r3, r4
 8005cc6:	111b      	asrs	r3, r3, #4
 8005cc8:	191b      	adds	r3, r3, r4
 8005cca:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)

08005cd0 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8005cd4:	4770      	bx	lr
 8005cd6:	46c0      	nop			; (mov r8, r8)

08005cd8 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005cd8:	b570      	push	{r4, r5, r6, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	5ec5      	ldrsh	r5, [r0, r3]
{
 8005cde:	0004      	movs	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005ce0:	68c0      	ldr	r0, [r0, #12]
 8005ce2:	f7ff fe0f 	bl	8005904 <VBS_GetAvBusVoltage_V>
 8005ce6:	4368      	muls	r0, r5
 8005ce8:	f7fa fcaa 	bl	8000640 <__aeabi_i2f>
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	f7fa fb81 	bl	80003f4 <__aeabi_fmul>

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}

08005cf4 <waitForPolarizationEnd>:
  * @param  SWerror Variable used to report a SW error.
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005cf6:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005cf8:	3201      	adds	r2, #1
 8005cfa:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005cfc:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8005cfe:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005d00:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005d02:	0176      	lsls	r6, r6, #5
 8005d04:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 8005d06:	781c      	ldrb	r4, [r3, #0]
 8005d08:	2c0f      	cmp	r4, #15
 8005d0a:	d80c      	bhi.n	8005d26 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005d0c:	6904      	ldr	r4, [r0, #16]
 8005d0e:	4225      	tst	r5, r4
 8005d10:	d0f9      	beq.n	8005d06 <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005d12:	3201      	adds	r2, #1
 8005d14:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005d16:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005d18:	4296      	cmp	r6, r2
 8005d1a:	d8f4      	bhi.n	8005d06 <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8005d1c:	781c      	ldrb	r4, [r3, #0]
 8005d1e:	2c0f      	cmp	r4, #15
 8005d20:	d8f1      	bhi.n	8005d06 <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 8005d22:	2301      	movs	r3, #1
 8005d24:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8005d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d28 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005d28:	8c03      	ldrh	r3, [r0, #32]
 8005d2a:	8b42      	ldrh	r2, [r0, #26]
{
 8005d2c:	b510      	push	{r4, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005d2e:	18d2      	adds	r2, r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005d30:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005d32:	0852      	lsrs	r2, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <RVBS_Clear+0x22>
 8005d38:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 8005d3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d3c:	0059      	lsls	r1, r3, #1
 8005d3e:	530a      	strh	r2, [r1, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8005d40:	3301      	adds	r3, #1
 8005d42:	8b01      	ldrh	r1, [r0, #24]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d8f8      	bhi.n	8005d3c <RVBS_Clear+0x14>
    }
    pHandle->_Super.LatestConv = aux;
 8005d4a:	0413      	lsls	r3, r2, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	6042      	str	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8005d50:	2329      	movs	r3, #41	; 0x29
 8005d52:	2200      	movs	r2, #0
 8005d54:	54c2      	strb	r2, [r0, r3]
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8005d56:	bd10      	pop	{r4, pc}

08005d58 <RVBS_Init>:
{
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	0004      	movs	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8005d5c:	300c      	adds	r0, #12
 8005d5e:	f7fe fe7f 	bl	8004a60 <RCM_RegisterRegConv>
 8005d62:	232a      	movs	r3, #42	; 0x2a
 8005d64:	54e0      	strb	r0, [r4, r3]
    RVBS_Clear(pHandle);
 8005d66:	0020      	movs	r0, r4
 8005d68:	f7ff ffde 	bl	8005d28 <RVBS_Clear>
}
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)

08005d70 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8005d70:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005d72:	8b42      	ldrh	r2, [r0, #26]
 8005d74:	8b81      	ldrh	r1, [r0, #28]
{
 8005d76:	0003      	movs	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005d78:	428a      	cmp	r2, r1
 8005d7a:	d00d      	beq.n	8005d98 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005d7c:	88c4      	ldrh	r4, [r0, #6]
 8005d7e:	8c00      	ldrh	r0, [r0, #32]
 8005d80:	42a0      	cmp	r0, r4
 8005d82:	d807      	bhi.n	8005d94 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8005d84:	7f98      	ldrb	r0, [r3, #30]
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d10f      	bne.n	8005daa <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005d8a:	42a1      	cmp	r1, r4
 8005d8c:	d913      	bls.n	8005db6 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8005d8e:	2201      	movs	r2, #1
 8005d90:	779a      	strb	r2, [r3, #30]
          fault = MC_NO_ERROR;
 8005d92:	e000      	b.n	8005d96 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8005d94:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8005d96:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005d98:	88c0      	ldrh	r0, [r0, #6]
 8005d9a:	4282      	cmp	r2, r0
 8005d9c:	d30b      	bcc.n	8005db6 <RVBS_CheckFaultState+0x46>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005d9e:	8c1b      	ldrh	r3, [r3, #32]
        fault = MC_UNDER_VOLT;
 8005da0:	4298      	cmp	r0, r3
 8005da2:	4180      	sbcs	r0, r0
 8005da4:	4240      	negs	r0, r0
 8005da6:	0080      	lsls	r0, r0, #2
 8005da8:	e7f5      	b.n	8005d96 <RVBS_CheckFaultState+0x26>
        fault = MC_NO_ERROR;
 8005daa:	2000      	movs	r0, #0
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005dac:	42a2      	cmp	r2, r4
 8005dae:	d2f2      	bcs.n	8005d96 <RVBS_CheckFaultState+0x26>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005db0:	7798      	strb	r0, [r3, #30]
          fault = MC_OVER_VOLT;
 8005db2:	3002      	adds	r0, #2
 8005db4:	e7ef      	b.n	8005d96 <RVBS_CheckFaultState+0x26>
        fault = MC_OVER_VOLT;
 8005db6:	2002      	movs	r0, #2
 8005db8:	e7ed      	b.n	8005d96 <RVBS_CheckFaultState+0x26>
 8005dba:	46c0      	nop			; (mov r8, r8)

08005dbc <RVBS_CalcAvVbus>:
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	46c6      	mov	lr, r8
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005dc0:	232a      	movs	r3, #42	; 0x2a
{
 8005dc2:	b500      	push	{lr}
 8005dc4:	0004      	movs	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005dc6:	5cc0      	ldrb	r0, [r0, r3]
 8005dc8:	f7fe fee4 	bl	8004b94 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8005dcc:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <RVBS_CalcAvVbus+0x74>)
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005dce:	0005      	movs	r5, r0
    if (0xFFFFU == hAux)
 8005dd0:	4298      	cmp	r0, r3
 8005dd2:	d01f      	beq.n	8005e14 <RVBS_CalcAvVbus+0x58>
      pHandle->aBuffer[pHandle->index] = hAux;
 8005dd4:	2329      	movs	r3, #41	; 0x29
 8005dd6:	5ce3      	ldrb	r3, [r4, r3]
 8005dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005dda:	4698      	mov	r8, r3
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	5298      	strh	r0, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005de0:	7e27      	ldrb	r7, [r4, #24]
 8005de2:	8b26      	ldrh	r6, [r4, #24]
 8005de4:	2f00      	cmp	r7, #0
 8005de6:	d020      	beq.n	8005e2a <RVBS_CalcAvVbus+0x6e>
 8005de8:	2300      	movs	r3, #0
      wtemp = 0u;
 8005dea:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 8005dec:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005dee:	3301      	adds	r3, #1
 8005df0:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 8005df2:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8005df4:	3202      	adds	r2, #2
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	d1f8      	bne.n	8005dec <RVBS_CalcAvVbus+0x30>
      wtemp /= pHandle->LowPassFilterBW;
 8005dfa:	0031      	movs	r1, r6
 8005dfc:	f7fa f984 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005e00:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005e02:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8005e04:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8005e06:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8005e08:	45b0      	cmp	r8, r6
 8005e0a:	d20a      	bcs.n	8005e22 <RVBS_CalcAvVbus+0x66>
        pHandle->index++;
 8005e0c:	4647      	mov	r7, r8
 8005e0e:	2329      	movs	r3, #41	; 0x29
 8005e10:	3701      	adds	r7, #1
 8005e12:	54e7      	strb	r7, [r4, r3]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8005e14:	0020      	movs	r0, r4
 8005e16:	f7ff ffab 	bl	8005d70 <RVBS_CheckFaultState>
 8005e1a:	8120      	strh	r0, [r4, #8]
}
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	46b8      	mov	r8, r7
 8005e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 8005e22:	2329      	movs	r3, #41	; 0x29
 8005e24:	2200      	movs	r2, #0
 8005e26:	54e2      	strb	r2, [r4, r3]
 8005e28:	e7f4      	b.n	8005e14 <RVBS_CalcAvVbus+0x58>
      wtemp /= pHandle->LowPassFilterBW;
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e7e9      	b.n	8005e02 <RVBS_CalcAvVbus+0x46>
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	0000ffff 	.word	0x0000ffff

08005e34 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005e38:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8005e3a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005e3c:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 8005e3e:	3301      	adds	r3, #1
 8005e40:	6143      	str	r3, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8005e42:	4770      	bx	lr

08005e44 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8005e44:	2304      	movs	r3, #4
 8005e46:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005e48:	4770      	bx	lr
 8005e4a:	46c0      	nop			; (mov r8, r8)

08005e4c <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005e50:	4770      	bx	lr
 8005e52:	46c0      	nop			; (mov r8, r8)

08005e54 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8005e54:	2310      	movs	r3, #16
 8005e56:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005e58:	4770      	bx	lr
 8005e5a:	46c0      	nop			; (mov r8, r8)

08005e5c <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8005e5c:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	5e8a      	ldrsh	r2, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005e62:	78c5      	ldrb	r5, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005e64:	7803      	ldrb	r3, [r0, #0]
    if (*pMecSpeedUnit < 0)
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	db24      	blt.n	8005eb4 <SPD_IsMecSpeedReliable+0x58>
      hAux = -(*pMecSpeedUnit);
      hAbsMecSpeedUnit = (uint16_t)hAux;
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8005e6a:	b292      	uxth	r2, r2
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005e6c:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 8005e6e:	2401      	movs	r4, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005e70:	8a81      	ldrh	r1, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005e72:	4296      	cmp	r6, r2
 8005e74:	d802      	bhi.n	8005e7c <SPD_IsMecSpeedReliable+0x20>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005e76:	4291      	cmp	r1, r2
 8005e78:	4192      	sbcs	r2, r2
 8005e7a:	4254      	negs	r4, r2
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005e7c:	2212      	movs	r2, #18
 8005e7e:	5e81      	ldrsh	r1, [r0, r2]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	db14      	blt.n	8005eae <SPD_IsMecSpeedReliable+0x52>
      hAux = -(pHandle->hMecAccelUnitP);
      hAbsMecAccelUnitP = (uint16_t)hAux;
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8005e84:	b289      	uxth	r1, r1
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005e86:	8b02      	ldrh	r2, [r0, #24]
 8005e88:	428a      	cmp	r2, r1
 8005e8a:	d301      	bcc.n	8005e90 <SPD_IsMecSpeedReliable+0x34>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d009      	beq.n	8005ea4 <SPD_IsMecSpeedReliable+0x48>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8005e90:	429d      	cmp	r5, r3
 8005e92:	d901      	bls.n	8005e98 <SPD_IsMecSpeedReliable+0x3c>
      {
        bSpeedErrorNumber++;
 8005e94:	3301      	adds	r3, #1
 8005e96:	b2db      	uxtb	r3, r3
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8005e98:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8005e9a:	1b58      	subs	r0, r3, r5
 8005e9c:	1e42      	subs	r2, r0, #1
 8005e9e:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 8005ea0:	b2c0      	uxtb	r0, r0
}
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
        bSpeedErrorNumber = 0u;
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	4164      	adcs	r4, r4
 8005ea8:	4264      	negs	r4, r4
 8005eaa:	4023      	ands	r3, r4
 8005eac:	e7f4      	b.n	8005e98 <SPD_IsMecSpeedReliable+0x3c>
      hAux = -(pHandle->hMecAccelUnitP);
 8005eae:	4249      	negs	r1, r1
 8005eb0:	b289      	uxth	r1, r1
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8005eb2:	e7e8      	b.n	8005e86 <SPD_IsMecSpeedReliable+0x2a>
      hAux = -(*pMecSpeedUnit);
 8005eb4:	4252      	negs	r2, r2
 8005eb6:	b292      	uxth	r2, r2
      hAbsMecSpeedUnit = (uint16_t)hAux;
 8005eb8:	e7d8      	b.n	8005e6c <SPD_IsMecSpeedReliable+0x10>
 8005eba:	46c0      	nop			; (mov r8, r8)

08005ebc <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 8005ebc:	0003      	movs	r3, r0
 8005ebe:	b510      	push	{r4, lr}
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 8005ec0:	210c      	movs	r1, #12
 8005ec2:	5e42      	ldrsh	r2, [r0, r1]
    wAux *= INT16_MAX;
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005ec4:	2114      	movs	r1, #20
 8005ec6:	5e59      	ldrsh	r1, [r3, r1]
    wAux *= INT16_MAX;
 8005ec8:	03d0      	lsls	r0, r2, #15
 8005eca:	1a80      	subs	r0, r0, r2
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8005ecc:	f7fa f9a6 	bl	800021c <__divsi3>
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
 8005ed0:	b200      	sxth	r0, r0
}
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005ed4:	232a      	movs	r3, #42	; 0x2a
    pHandle->SPD = SPD_Handle;
 8005ed6:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005ed8:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8005eda:	5cc3      	ldrb	r3, [r0, r3]
 8005edc:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8005ede:	222c      	movs	r2, #44	; 0x2c
 8005ee0:	5e83      	ldrsh	r3, [r0, r2]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005ee6:	222e      	movs	r2, #46	; 0x2e
 8005ee8:	5e83      	ldrsh	r3, [r0, r2]
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005ef2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005ef4:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005ef6:	4770      	bx	lr

08005ef8 <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8005ef8:	6940      	ldr	r0, [r0, #20]
#endif
}
 8005efa:	4770      	bx	lr

08005efc <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005efc:	7803      	ldrb	r3, [r0, #0]
{
 8005efe:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d000      	beq.n	8005f06 <STC_Clear+0xa>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005f04:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005f06:	2100      	movs	r1, #0
 8005f08:	6900      	ldr	r0, [r0, #16]
 8005f0a:	f7ff fe51 	bl	8005bb0 <PID_SetIntegralTerm>
}
 8005f0e:	e7f9      	b.n	8005f04 <STC_Clear+0x8>

08005f10 <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 8005f10:	2306      	movs	r3, #6
 8005f12:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8005f14:	4770      	bx	lr
 8005f16:	46c0      	nop			; (mov r8, r8)

08005f18 <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8005f18:	230a      	movs	r3, #10
 8005f1a:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8005f1c:	4770      	bx	lr
 8005f1e:	46c0      	nop			; (mov r8, r8)

08005f20 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005f20:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005f22:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005f24:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005f26:	4770      	bx	lr

08005f28 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005f2a:	7803      	ldrb	r3, [r0, #0]
{
 8005f2c:	0004      	movs	r4, r0
 8005f2e:	000d      	movs	r5, r1
 8005f30:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d012      	beq.n	8005f5c <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8005f36:	2306      	movs	r3, #6
 8005f38:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8005f3a:	8bc3      	ldrh	r3, [r0, #30]
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	dd01      	ble.n	8005f44 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8005f40:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8005f44:	2224      	movs	r2, #36	; 0x24
 8005f46:	5e83      	ldrsh	r3, [r0, r2]
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	dcf9      	bgt.n	8005f40 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8005f4c:	8c03      	ldrh	r3, [r0, #32]
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	da0e      	bge.n	8005f70 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005f52:	2222      	movs	r2, #34	; 0x22
 8005f54:	5e83      	ldrsh	r3, [r0, r2]
 8005f56:	428b      	cmp	r3, r1
 8005f58:	dbf2      	blt.n	8005f40 <STC_ExecRamp+0x18>
 8005f5a:	e009      	b.n	8005f70 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005f5c:	f7ff ffdc 	bl	8005f18 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005f60:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005f62:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005f64:	429d      	cmp	r5, r3
 8005f66:	dceb      	bgt.n	8005f40 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005f68:	2228      	movs	r2, #40	; 0x28
 8005f6a:	5ea3      	ldrsh	r3, [r4, r2]
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	dce7      	bgt.n	8005f40 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d109      	bne.n	8005f88 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005f74:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005f76:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d015      	beq.n	8005fa8 <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005f7c:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2001      	movs	r0, #1
 8005f82:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8005f84:	61a3      	str	r3, [r4, #24]
 8005f86:	e7dc      	b.n	8005f42 <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 8005f88:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005f8a:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005f8c:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 8005f8e:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005f90:	4370      	muls	r0, r6
        wAux /= 1000U;
 8005f92:	f7fa f8b9 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005f96:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 8005f98:	1c41      	adds	r1, r0, #1
 8005f9a:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005f9c:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005f9e:	f7fa f93d 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8005fa2:	61a0      	str	r0, [r4, #24]
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e7cc      	b.n	8005f42 <STC_ExecRamp+0x1a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005fa8:	6065      	str	r5, [r4, #4]
 8005faa:	e7e8      	b.n	8005f7e <STC_ExecRamp+0x56>

08005fac <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005fb0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8005fb2:	4770      	bx	lr

08005fb4 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005fb4:	7802      	ldrb	r2, [r0, #0]
{
 8005fb6:	b570      	push	{r4, r5, r6, lr}
 8005fb8:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005fba:	2a04      	cmp	r2, #4
 8005fbc:	d023      	beq.n	8006006 <STC_CalcTorqueReference+0x52>
    {
      wCurrentReference = pHandle->TorqueRef;
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005fbe:	6845      	ldr	r5, [r0, #4]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8005fc0:	68e3      	ldr	r3, [r4, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d909      	bls.n	8005fda <STC_CalcTorqueReference+0x26>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8005fc6:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005fc8:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005fca:	468c      	mov	ip, r1
      pHandle->RampRemainingStep--;
 8005fcc:	60e3      	str	r3, [r4, #12]
      wCurrentReference += pHandle->IncDecAmount;
 8005fce:	4465      	add	r5, ip
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8005fd0:	2a03      	cmp	r2, #3
 8005fd2:	d00b      	beq.n	8005fec <STC_CalcTorqueReference+0x38>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8005fd4:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005fd6:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d1f8      	bne.n	8005fd0 <STC_CalcTorqueReference+0x1c>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 8005fe2:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005fe4:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005fe6:	60e3      	str	r3, [r4, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005fe8:	2a03      	cmp	r2, #3
 8005fea:	d1f3      	bne.n	8005fd4 <STC_CalcTorqueReference+0x20>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005fec:	6960      	ldr	r0, [r4, #20]
 8005fee:	f7ff ff2d 	bl	8005e4c <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8005ff2:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005ff4:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8005ff6:	b209      	sxth	r1, r1
 8005ff8:	6920      	ldr	r0, [r4, #16]
 8005ffa:	f7ff fe0d 	bl	8005c18 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005ffe:	0403      	lsls	r3, r0, #16
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8006000:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	e7e8      	b.n	8005fd8 <STC_CalcTorqueReference+0x24>
      wCurrentReference = pHandle->TorqueRef;
 8006006:	6885      	ldr	r5, [r0, #8]
 8006008:	e7da      	b.n	8005fc0 <STC_CalcTorqueReference+0xc>
 800600a:	46c0      	nop			; (mov r8, r8)

0800600c <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 800600c:	232c      	movs	r3, #44	; 0x2c
 800600e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8006010:	4770      	bx	lr
 8006012:	46c0      	nop			; (mov r8, r8)

08006014 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8006014:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8006016:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8006018:	041b      	lsls	r3, r3, #16
{
 800601a:	b082      	sub	sp, #8
  return (IqdRefDefault);
 800601c:	4318      	orrs	r0, r3
}
 800601e:	b002      	add	sp, #8
 8006020:	4770      	bx	lr
 8006022:	46c0      	nop			; (mov r8, r8)

08006024 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006024:	b510      	push	{r4, lr}
 8006026:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006028:	6940      	ldr	r0, [r0, #20]
 800602a:	f7ff ff0f 	bl	8005e4c <SPD_GetAvrgMecSpeedUnit>
 800602e:	0400      	lsls	r0, r0, #16
 8006030:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006032:	bd10      	pop	{r4, pc}

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	2600      	movs	r6, #0
 8006038:	4d0c      	ldr	r5, [pc, #48]	; (800606c <__libc_init_array+0x38>)
 800603a:	4c0d      	ldr	r4, [pc, #52]	; (8006070 <__libc_init_array+0x3c>)
 800603c:	1b64      	subs	r4, r4, r5
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	2600      	movs	r6, #0
 8006046:	f000 f82b 	bl	80060a0 <_init>
 800604a:	4d0a      	ldr	r5, [pc, #40]	; (8006074 <__libc_init_array+0x40>)
 800604c:	4c0a      	ldr	r4, [pc, #40]	; (8006078 <__libc_init_array+0x44>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	00b3      	lsls	r3, r6, #2
 800605a:	58eb      	ldr	r3, [r5, r3]
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	00b3      	lsls	r3, r6, #2
 8006064:	58eb      	ldr	r3, [r5, r3]
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	08006fb0 	.word	0x08006fb0
 8006070:	08006fb0 	.word	0x08006fb0
 8006074:	08006fb0 	.word	0x08006fb0
 8006078:	08006fb4 	.word	0x08006fb4

0800607c <memcpy>:
 800607c:	2300      	movs	r3, #0
 800607e:	b510      	push	{r4, lr}
 8006080:	429a      	cmp	r2, r3
 8006082:	d100      	bne.n	8006086 <memcpy+0xa>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	5ccc      	ldrb	r4, [r1, r3]
 8006088:	54c4      	strb	r4, [r0, r3]
 800608a:	3301      	adds	r3, #1
 800608c:	e7f8      	b.n	8006080 <memcpy+0x4>

0800608e <memset>:
 800608e:	0003      	movs	r3, r0
 8006090:	1882      	adds	r2, r0, r2
 8006092:	4293      	cmp	r3, r2
 8006094:	d100      	bne.n	8006098 <memset+0xa>
 8006096:	4770      	bx	lr
 8006098:	7019      	strb	r1, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	e7f9      	b.n	8006092 <memset+0x4>
	...

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
