
Speed Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db4  08004db4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004dc8  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004e68  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006f4  2000014c  08004f08  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000840  08004f08  00020840  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016fab  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002feb  00000000  00000000  00037125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  0003a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f68  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029f5e  00000000  00000000  0003c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016941  00000000  00000000  00066096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc596  00000000  00000000  0007c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00178f6d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000044f0  00000000  00000000  00178fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004d3c 	.word	0x08004d3c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004d3c 	.word	0x08004d3c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ETH_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <MX_ETH_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_ETH_Init+0x8c>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000554:	22e1      	movs	r2, #225	; 0xe1
 8000556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_ETH_Init+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ETH_Init+0x84>)
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_ETH_Init+0x8c>)
 800056e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ETH_Init+0x84>)
 8000572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_ETH_Init+0x84>)
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_ETH_Init+0x90>)
 800057c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ETH_Init+0x84>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_ETH_Init+0x94>)
 8000582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ETH_Init+0x84>)
 8000586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800058a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ETH_Init+0x84>)
 800058e:	f000 fe49 	bl	8001224 <HAL_ETH_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 fabe 	bl	8000b18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a2:	f004 fbc3 	bl	8004d2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a8:	2221      	movs	r2, #33	; 0x21
 80005aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_ETH_Init+0x98>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_ETH_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	40028000 	.word	0x40028000
 80005c8:	20000250 	.word	0x20000250
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000168 	.word	0x20000168

080005d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <HAL_ETH_MspInit+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	f040 8096 	bne.w	8000728 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800061a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_ETH_MspInit+0x160>)
 80006c0:	f001 f8d6 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_ETH_MspInit+0x164>)
 80006e0:	f001 f8c6 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_ETH_MspInit+0x168>)
 8000702:	f001 f8b5 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000706:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_ETH_MspInit+0x16c>)
 8000724:	f001 f8a4 	bl	8001870 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40028000 	.word	0x40028000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40021800 	.word	0x40021800

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <MX_GPIO_Init+0x134>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a46      	ldr	r2, [pc, #280]	; (800087c <MX_GPIO_Init+0x134>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b44      	ldr	r3, [pc, #272]	; (800087c <MX_GPIO_Init+0x134>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <MX_GPIO_Init+0x134>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a40      	ldr	r2, [pc, #256]	; (800087c <MX_GPIO_Init+0x134>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b3e      	ldr	r3, [pc, #248]	; (800087c <MX_GPIO_Init+0x134>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b3b      	ldr	r3, [pc, #236]	; (800087c <MX_GPIO_Init+0x134>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <MX_GPIO_Init+0x134>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b38      	ldr	r3, [pc, #224]	; (800087c <MX_GPIO_Init+0x134>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <MX_GPIO_Init+0x134>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a34      	ldr	r2, [pc, #208]	; (800087c <MX_GPIO_Init+0x134>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b32      	ldr	r3, [pc, #200]	; (800087c <MX_GPIO_Init+0x134>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_GPIO_Init+0x134>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2e      	ldr	r2, [pc, #184]	; (800087c <MX_GPIO_Init+0x134>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_GPIO_Init+0x134>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <MX_GPIO_Init+0x134>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4822      	ldr	r0, [pc, #136]	; (8000880 <MX_GPIO_Init+0x138>)
 80007f6:	f001 f9e7 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0x13c>)
 8000800:	f001 f9e2 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0x140>)
 800081c:	f001 f828 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_GPIO_Init+0x138>)
 800083a:	f001 f819 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0x13c>)
 8000856:	f001 f80b 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_GPIO_Init+0x13c>)
 800086e:	f000 ffff 	bl	8001870 <HAL_GPIO_Init>

}
 8000872:	bf00      	nop
 8000874:	3730      	adds	r7, #48	; 0x30
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C1_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C1_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c8:	f001 f998 	bl	8001bfc <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f921 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C1_Init+0x74>)
 80008da:	f001 fee7 	bl	80026ac <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f918 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ec:	f001 ff29 	bl	8002742 <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f90f 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000258 	.word	0x20000258
 8000904:	40005400 	.word	0x40005400
 8000908:	2010091a 	.word	0x2010091a

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ae      	sub	sp, #184	; 0xb8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2290      	movs	r2, #144	; 0x90
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f9fd 	bl	8004d2c <memset>
  if(i2cHandle->Instance==I2C1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <HAL_I2C_MspInit+0xb4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d13c      	bne.n	80009b6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800093c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000940:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000942:	2300      	movs	r3, #0
 8000944:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fdc2 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f000 f8df 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_I2C_MspInit+0xbc>)
 800099a:	f000 ff69 	bl	8001870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_I2C_MspInit+0xb8>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b6:	bf00      	nop
 80009b8:	37b8      	adds	r7, #184	; 0xb8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40005400 	.word	0x40005400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b090      	sub	sp, #64	; 0x40
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 fabf 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f82d 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff feb5 	bl	8000748 <MX_GPIO_Init>
  MX_ETH_Init();
 80009de:	f7ff fdad 	bl	800053c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009e2:	f000 f8ff 	bl	8000be4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e6:	f000 f98d 	bl	8000d04 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80009ea:	f7ff ff4f 	bl	800088c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  char str_buffer[64]; // Buffer for sending messages over USART

  if (MPU6050_Init(&hi2c1) == 0) { // Assume hi2c1 is your I2C handler
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0x58>)
 80009f0:	f000 fa59 	bl	8000ea6 <MPU6050_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d106      	bne.n	8000a08 <main+0x3c>
      HAL_UART_Transmit(&huart3, (uint8_t *)"MPU6050 initialization OK!\r\n", 29, 100); // Assume huart1 is your UART handler
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	221d      	movs	r2, #29
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <main+0x5c>)
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <main+0x60>)
 8000a02:	f003 f9dd 	bl	8003dc0 <HAL_UART_Transmit>
 8000a06:	e005      	b.n	8000a14 <main+0x48>
  } else {
      HAL_UART_Transmit(&huart3, (uint8_t *)"MPU6050 initialization Fail!\r\n", 30, 100);
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	221e      	movs	r2, #30
 8000a0c:	4908      	ldr	r1, [pc, #32]	; (8000a30 <main+0x64>)
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <main+0x60>)
 8000a10:	f003 f9d6 	bl	8003dc0 <HAL_UART_Transmit>
  }
  while (MPU6050_Init(&hi2c1) == 1);
 8000a14:	bf00      	nop
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <main+0x58>)
 8000a18:	f000 fa45 	bl	8000ea6 <MPU6050_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d0f9      	beq.n	8000a16 <main+0x4a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <main+0x56>
 8000a24:	20000258 	.word	0x20000258
 8000a28:	08004d54 	.word	0x08004d54
 8000a2c:	200002ac 	.word	0x200002ac
 8000a30:	08004d74 	.word	0x08004d74

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2234      	movs	r2, #52	; 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 f972 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a58:	f002 f808 	bl	8002a6c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <SystemClock_Config+0xdc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a2b      	ldr	r2, [pc, #172]	; (8000b10 <SystemClock_Config+0xdc>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <SystemClock_Config+0xdc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SystemClock_Config+0xe0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a7c:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <SystemClock_Config+0xe0>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <SystemClock_Config+0xe0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aa8:	2360      	movs	r3, #96	; 0x60
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 f835 	bl	8002b2c <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac8:	f000 f826 	bl	8000b18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000acc:	f001 ffde 	bl	8002a8c <HAL_PWREx_EnableOverDrive>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ad6:	f000 f81f 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2103      	movs	r1, #3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fac6 	bl	8003088 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b02:	f000 f809 	bl	8000b18 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x44>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x44>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x44>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x44>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x44>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 fa0a 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_USART3_UART_Init+0x5c>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART3_UART_Init+0x58>)
 8000c28:	f003 f87c 	bl	8003d24 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c32:	f7ff ff71 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002ac 	.word	0x200002ac
 8000c40:	40004800 	.word	0x40004800

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ae      	sub	sp, #184	; 0xb8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2290      	movs	r2, #144	; 0x90
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f861 	bl	8004d2c <memset>
  if(uartHandle->Instance==USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13c      	bne.n	8000cee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fc26 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c8e:	f7ff ff43 	bl	8000b18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000cea:	f000 fdc1 	bl	8001870 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	37b8      	adds	r7, #184	; 0xb8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2206      	movs	r2, #6
 8000d14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d48:	f001 fd47 	bl	80027da <HAL_PCD_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d52:	f7ff fee1 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000334 	.word	0x20000334

08000d60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ae      	sub	sp, #184	; 0xb8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2290      	movs	r2, #144	; 0x90
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 ffd3 	bl	8004d2c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d8e:	d159      	bne.n	8000e44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fb97 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000dac:	f7ff feb4 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de2:	230a      	movs	r3, #10
 8000de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4818      	ldr	r0, [pc, #96]	; (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000df0:	f000 fd3e 	bl	8001870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <HAL_PCD_MspInit+0xf0>)
 8000e10:	f000 fd2e 	bl	8001870 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1e:	6353      	str	r3, [r2, #52]	; 0x34
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e36:	6453      	str	r3, [r2, #68]	; 0x44
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <HAL_PCD_MspInit+0xec>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	37b8      	adds	r7, #184	; 0xb8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff fe9f 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f003 ff2f 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fda1 	bl	80009cc <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e98:	08004dbc 	.word	0x08004dbc
  ldr r2, =_sbss
 8000e9c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000ea0:	20000840 	.word	0x20000840

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>

08000ea6 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b088      	sub	sp, #32
 8000eaa:	af04      	add	r7, sp, #16
 8000eac:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	f107 030f 	add.w	r3, r7, #15
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	2275      	movs	r2, #117	; 0x75
 8000ec0:	21d0      	movs	r1, #208	; 0xd0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f001 f83e 	bl	8001f44 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b68      	cmp	r3, #104	; 0x68
 8000ecc:	d13d      	bne.n	8000f4a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f107 030e 	add.w	r3, r7, #14
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	226b      	movs	r2, #107	; 0x6b
 8000ee4:	21d0      	movs	r1, #208	; 0xd0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 ff18 	bl	8001d1c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000eec:	2307      	movs	r3, #7
 8000eee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030e 	add.w	r3, r7, #14
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	2219      	movs	r2, #25
 8000f02:	21d0      	movs	r1, #208	; 0xd0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 ff09 	bl	8001d1c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	f107 030e 	add.w	r3, r7, #14
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	221c      	movs	r2, #28
 8000f20:	21d0      	movs	r1, #208	; 0xd0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fefa 	bl	8001d1c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f107 030e 	add.w	r3, r7, #14
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	221b      	movs	r2, #27
 8000f3e:	21d0      	movs	r1, #208	; 0xd0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 feeb 	bl	8001d1c <HAL_I2C_Mem_Write>
        return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <MPU6050_Init+0xa6>
    }
    return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f92f 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f806 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fdde 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f93b 	bl	800120a <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f911 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000083c 	.word	0x2000083c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000083c 	.word	0x2000083c

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	4313      	orrs	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x40>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	05fa0000 	.word	0x05fa0000

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff47 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5c 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e06a      	b.n	800130c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2223      	movs	r2, #35	; 0x23
 8001244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f9c5 	bl	80005d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_ETH_Init+0xf0>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ETH_Init+0xf0>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_ETH_Init+0xf0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_ETH_Init+0xf4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <HAL_ETH_Init+0xf4>)
 800126c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001270:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_ETH_Init+0xf4>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <HAL_ETH_Init+0xf4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_ETH_Init+0xf4>)
 8001282:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800129a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff feac 	bl	8000ff8 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012a2:	e011      	b.n	80012c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012a4:	f7ff fea8 	bl	8000ff8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012b2:	d909      	bls.n	80012c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	22e0      	movs	r2, #224	; 0xe0
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e4      	bne.n	80012a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f958 	bl	8001590 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9ff 	bl	80016e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fa55 	bl	8001796 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	461a      	mov	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9bd 	bl	8001674 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2210      	movs	r2, #16
 8001306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800

0800131c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <ETH_SetMACConfig+0x15c>)
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	7c1b      	ldrb	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <ETH_SetMACConfig+0x28>
 800133e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001342:	e000      	b.n	8001346 <ETH_SetMACConfig+0x2a>
 8001344:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7c5b      	ldrb	r3, [r3, #17]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <ETH_SetMACConfig+0x38>
 800134e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001352:	e000      	b.n	8001356 <ETH_SetMACConfig+0x3a>
 8001354:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001356:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800135c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	7fdb      	ldrb	r3, [r3, #31]
 8001362:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001364:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800136a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	7f92      	ldrb	r2, [r2, #30]
 8001370:	2a00      	cmp	r2, #0
 8001372:	d102      	bne.n	800137a <ETH_SetMACConfig+0x5e>
 8001374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001378:	e000      	b.n	800137c <ETH_SetMACConfig+0x60>
 800137a:	2200      	movs	r2, #0
                        macconf->Speed |
 800137c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	7f1b      	ldrb	r3, [r3, #28]
 8001382:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001384:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800138a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001392:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	f892 2020 	ldrb.w	r2, [r2, #32]
 800139a:	2a00      	cmp	r2, #0
 800139c:	d102      	bne.n	80013a4 <ETH_SetMACConfig+0x88>
 800139e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a2:	e000      	b.n	80013a6 <ETH_SetMACConfig+0x8a>
 80013a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7bdb      	ldrb	r3, [r3, #15]
 80013ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013be:	4313      	orrs	r3, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fe1a 	bl	8001010 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013f2:	4013      	ands	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001402:	2a00      	cmp	r2, #0
 8001404:	d101      	bne.n	800140a <ETH_SetMACConfig+0xee>
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	e000      	b.n	800140c <ETH_SetMACConfig+0xf0>
 800140a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800140c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800141a:	2a01      	cmp	r2, #1
 800141c:	d101      	bne.n	8001422 <ETH_SetMACConfig+0x106>
 800141e:	2208      	movs	r2, #8
 8001420:	e000      	b.n	8001424 <ETH_SetMACConfig+0x108>
 8001422:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001424:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800142c:	2a01      	cmp	r2, #1
 800142e:	d101      	bne.n	8001434 <ETH_SetMACConfig+0x118>
 8001430:	2204      	movs	r2, #4
 8001432:	e000      	b.n	8001436 <ETH_SetMACConfig+0x11a>
 8001434:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001436:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800143e:	2a01      	cmp	r2, #1
 8001440:	d101      	bne.n	8001446 <ETH_SetMACConfig+0x12a>
 8001442:	2202      	movs	r2, #2
 8001444:	e000      	b.n	8001448 <ETH_SetMACConfig+0x12c>
 8001446:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001448:	4313      	orrs	r3, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fdd5 	bl	8001010 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	ff20810f 	.word	0xff20810f

0800147c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <ETH_SetDMAConfig+0x110>)
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7b1b      	ldrb	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <ETH_SetDMAConfig+0x2c>
 80014a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014a6:	e000      	b.n	80014aa <ETH_SetDMAConfig+0x2e>
 80014a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	7b5b      	ldrb	r3, [r3, #13]
 80014ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	7f52      	ldrb	r2, [r2, #29]
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d102      	bne.n	80014c0 <ETH_SetDMAConfig+0x44>
 80014ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014be:	e000      	b.n	80014c2 <ETH_SetDMAConfig+0x46>
 80014c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7b9b      	ldrb	r3, [r3, #14]
 80014c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	7f1b      	ldrb	r3, [r3, #28]
 80014d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7f9b      	ldrb	r3, [r3, #30]
 80014de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001500:	461a      	mov	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff fd7c 	bl	8001010 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001530:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001536:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800153c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001544:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001546:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800154e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001554:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800155e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001562:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fd4d 	bl	8001010 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	f8de3f23 	.word	0xf8de3f23

08001590 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0a6      	sub	sp, #152	; 0x98
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015cc:	2300      	movs	r3, #0
 80015ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001604:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fe86 	bl	800131c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001610:	2301      	movs	r3, #1
 8001612:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001614:	2301      	movs	r3, #1
 8001616:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800164c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001650:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff08 	bl	800147c <ETH_SetDMAConfig>
}
 800166c:	bf00      	nop
 800166e:	3798      	adds	r7, #152	; 0x98
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3305      	adds	r3, #5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	3204      	adds	r2, #4
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <ETH_MACAddressConfig+0x68>)
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3303      	adds	r3, #3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <ETH_MACAddressConfig+0x6c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40028040 	.word	0x40028040
 80016e0:	40028044 	.word	0x40028044

080016e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e03e      	b.n	8001770 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	3206      	adds	r2, #6
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d80c      	bhi.n	8001754 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	461a      	mov	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e004      	b.n	800175e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d9bd      	bls.n	80016f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001788:	611a      	str	r2, [r3, #16]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e046      	b.n	8001832 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6919      	ldr	r1, [r3, #16]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	3212      	adds	r2, #18
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d80c      	bhi.n	8001822 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6919      	ldr	r1, [r3, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	e004      	b.n	800182c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d9b5      	bls.n	80017a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	60da      	str	r2, [r3, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e175      	b.n	8001b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8164 	bne.w	8001b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x56>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80be 	beq.w	8001b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_GPIO_Init+0x324>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a12:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_GPIO_Init+0x32c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d037      	beq.n	8001aae <HAL_GPIO_Init+0x23e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d031      	beq.n	8001aaa <HAL_GPIO_Init+0x23a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x334>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02b      	beq.n	8001aa6 <HAL_GPIO_Init+0x236>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_GPIO_Init+0x338>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x232>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a54      	ldr	r2, [pc, #336]	; (8001bac <HAL_GPIO_Init+0x33c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x22e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <HAL_GPIO_Init+0x340>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x22a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x344>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x348>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x34c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <HAL_GPIO_Init+0x350>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a86:	2309      	movs	r3, #9
 8001a88:	e012      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	e010      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a8e:	2308      	movs	r3, #8
 8001a90:	e00e      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00c      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a96:	2306      	movs	r3, #6
 8001a98:	e00a      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x240>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_GPIO_Init+0x354>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f ae86 	bls.w	8001890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40021400 	.word	0x40021400
 8001bb4:	40021800 	.word	0x40021800
 8001bb8:	40021c00 	.word	0x40021c00
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40022400 	.word	0x40022400
 8001bc4:	40013c00 	.word	0x40013c00

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fe72 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d104      	bne.n	8001c96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_I2C_Init+0x11c>)
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	02008000 	.word	0x02008000

08001d1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	817b      	strh	r3, [r7, #10]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	813b      	strh	r3, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	f040 80f9 	bne.w	8001f36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x34>
 8001d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0ed      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Mem_Write+0x4e>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e0e6      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d72:	f7ff f941 	bl	8000ff8 <HAL_GetTick>
 8001d76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2319      	movs	r3, #25
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fac3 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d1      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2221      	movs	r2, #33	; 0x21
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dbc:	88f8      	ldrh	r0, [r7, #6]
 8001dbe:	893a      	ldrh	r2, [r7, #8]
 8001dc0:	8979      	ldrh	r1, [r7, #10]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f9d3 	bl	8002178 <I2C_RequestMemoryWrite>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0a9      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	d90e      	bls.n	8001e0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	8979      	ldrh	r1, [r7, #10]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fc1f 	bl	8002648 <I2C_TransferConfig>
 8001e0a:	e00f      	b.n	8001e2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fc0e 	bl	8002648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 faad 	bl	8002390 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e07b      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d034      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0x1c8>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d130      	bne.n	8001ee4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fa3f 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e04d      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d90e      	bls.n	8001ec4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	22ff      	movs	r2, #255	; 0xff
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fbc3 	bl	8002648 <I2C_TransferConfig>
 8001ec2:	e00f      	b.n	8001ee4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	8979      	ldrh	r1, [r7, #10]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fbb2 	bl	8002648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d19e      	bne.n	8001e2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fa8c 	bl	8002410 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e01a      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2220      	movs	r2, #32
 8001f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_I2C_Mem_Write+0x224>)
 8001f16:	400b      	ands	r3, r1
 8001f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	fe00e800 	.word	0xfe00e800

08001f44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	f040 80fd 	bne.w	8002166 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x34>
 8001f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0f1      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2C_Mem_Read+0x4e>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e0ea      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f9a:	f7ff f82d 	bl	8000ff8 <HAL_GetTick>
 8001f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2319      	movs	r3, #25
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f9af 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d5      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2222      	movs	r2, #34	; 0x22
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fe4:	88f8      	ldrh	r0, [r7, #6]
 8001fe6:	893a      	ldrh	r2, [r7, #8]
 8001fe8:	8979      	ldrh	r1, [r7, #10]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f913 	bl	8002220 <I2C_RequestMemoryRead>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ad      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d90e      	bls.n	8002034 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_I2C_Mem_Read+0x22c>)
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fb0b 	bl	8002648 <I2C_TransferConfig>
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_I2C_Mem_Read+0x22c>)
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fafa 	bl	8002648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	2200      	movs	r2, #0
 800205c:	2104      	movs	r1, #4
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f956 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07c      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d034      	beq.n	8002114 <HAL_I2C_Mem_Read+0x1d0>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d130      	bne.n	8002114 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f927 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e04d      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2bff      	cmp	r3, #255	; 0xff
 80020d4:	d90e      	bls.n	80020f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	22ff      	movs	r2, #255	; 0xff
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 faab 	bl	8002648 <I2C_TransferConfig>
 80020f2:	e00f      	b.n	8002114 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	b2da      	uxtb	r2, r3
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	2300      	movs	r3, #0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa9a 	bl	8002648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d19a      	bne.n	8002054 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f974 	bl	8002410 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e01a      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2220      	movs	r2, #32
 8002138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_I2C_Mem_Read+0x230>)
 8002146:	400b      	ands	r3, r1
 8002148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
  }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	80002400 	.word	0x80002400
 8002174:	fe00e800 	.word	0xfe00e800

08002178 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	8979      	ldrh	r1, [r7, #10]
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <I2C_RequestMemoryWrite+0xa4>)
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fa51 	bl	8002648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f8f0 	bl	8002390 <I2C_WaitOnTXISFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e02c      	b.n	8002214 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
 80021ca:	e015      	b.n	80021f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021cc:	893b      	ldrh	r3, [r7, #8]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f8d6 	bl	8002390 <I2C_WaitOnTXISFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e012      	b.n	8002214 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ee:	893b      	ldrh	r3, [r7, #8]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2200      	movs	r2, #0
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f884 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	80002000 	.word	0x80002000

08002220 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	817b      	strh	r3, [r7, #10]
 8002232:	460b      	mov	r3, r1
 8002234:	813b      	strh	r3, [r7, #8]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <I2C_RequestMemoryRead+0xa4>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9fe 	bl	8002648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f89d 	bl	8002390 <I2C_WaitOnTXISFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e02c      	b.n	80022ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
 8002270:	e015      	b.n	800229e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002272:	893b      	ldrh	r3, [r7, #8]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f883 	bl	8002390 <I2C_WaitOnTXISFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e012      	b.n	80022ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002294:	893b      	ldrh	r3, [r7, #8]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f831 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	80002000 	.word	0x80002000

080022c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d103      	bne.n	80022e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d007      	beq.n	8002304 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	619a      	str	r2, [r3, #24]
  }
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002320:	e022      	b.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d01e      	beq.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fe65 	bl	8000ff8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d113      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e00f      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4013      	ands	r3, r2
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	429a      	cmp	r2, r3
 8002384:	d0cd      	beq.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800239c:	e02c      	b.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f870 	bl	8002488 <I2C_IsErrorOccurred>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02a      	b.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d01e      	beq.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7fe fe1d 	bl	8000ff8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d113      	bne.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e007      	b.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d1cb      	bne.n	800239e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800241c:	e028      	b.n	8002470 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f830 	bl	8002488 <I2C_IsErrorOccurred>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e026      	b.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fde1 	bl	8000ff8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e007      	b.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b20      	cmp	r3, #32
 800247c:	d1cf      	bne.n	800241e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d068      	beq.n	8002586 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2210      	movs	r2, #16
 80024ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024bc:	e049      	b.n	8002552 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d045      	beq.n	8002552 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7fe fd97 	bl	8000ff8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_IsErrorOccurred+0x54>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d13a      	bne.n	8002552 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fe:	d121      	bne.n	8002544 <I2C_IsErrorOccurred+0xbc>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002506:	d01d      	beq.n	8002544 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d01a      	beq.n	8002544 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800251e:	f7fe fd6b 	bl	8000ff8 <HAL_GetTick>
 8002522:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002524:	e00e      	b.n	8002544 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002526:	f7fe fd67 	bl	8000ff8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b19      	cmp	r3, #25
 8002532:	d907      	bls.n	8002544 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002542:	e006      	b.n	8002552 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d1e9      	bne.n	8002526 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d003      	beq.n	8002568 <I2C_IsErrorOccurred+0xe0>
 8002560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0aa      	beq.n	80024be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80025f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fe63 	bl	80022c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <I2C_IsErrorOccurred+0x1bc>)
 800260e:	400b      	ands	r3, r1
 8002610:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	431a      	orrs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800263a:	4618      	mov	r0, r3
 800263c:	3728      	adds	r7, #40	; 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	4613      	mov	r3, r2
 8002658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002660:	7a7b      	ldrb	r3, [r7, #9]
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002668:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	4313      	orrs	r3, r2
 8002672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002676:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	0d5b      	lsrs	r3, r3, #21
 8002682:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <I2C_TransferConfig+0x60>)
 8002688:	430b      	orrs	r3, r1
 800268a:	43db      	mvns	r3, r3
 800268c:	ea02 0103 	and.w	r1, r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	03ff63ff 	.word	0x03ff63ff

080026ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d138      	bne.n	8002734 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e032      	b.n	8002736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d139      	bne.n	80027cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002762:	2302      	movs	r3, #2
 8002764:	e033      	b.n	80027ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2224      	movs	r2, #36	; 0x24
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0201 	bic.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002794:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027dc:	b08f      	sub	sp, #60	; 0x3c
 80027de:	af0a      	add	r7, sp, #40	; 0x28
 80027e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e116      	b.n	8002a1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe faaa 	bl	8000d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f001 ffbe 	bl	80047ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	687e      	ldr	r6, [r7, #4]
 8002838:	466d      	mov	r5, sp
 800283a:	f106 0410 	add.w	r4, r6, #16
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284a:	e885 0003 	stmia.w	r5, {r0, r1}
 800284e:	1d33      	adds	r3, r6, #4
 8002850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f001 ff52 	bl	80046fc <USB_CoreInit>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0d7      	b.n	8002a1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f001 ffac 	bl	80047ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e04a      	b.n	8002912 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	333d      	adds	r3, #61	; 0x3d
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	333c      	adds	r3, #60	; 0x3c
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	b298      	uxth	r0, r3
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3344      	adds	r3, #68	; 0x44
 80028b8:	4602      	mov	r2, r0
 80028ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3340      	adds	r3, #64	; 0x40
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	; 0x4c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3354      	adds	r3, #84	; 0x54
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3af      	bcc.n	800287c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e044      	b.n	80029ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3301      	adds	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3b5      	bcc.n	8002922 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	687e      	ldr	r6, [r7, #4]
 80029be:	466d      	mov	r5, sp
 80029c0:	f106 0410 	add.w	r4, r6, #16
 80029c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80029d4:	1d33      	adds	r3, r6, #4
 80029d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f001 ff45 	bl	8004868 <USB_DevInit>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e014      	b.n	8002a1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f80b 	bl	8002a24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 f903 	bl	8004c1e <USB_DevDisconnect>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	10000003 	.word	0x10000003

08002a6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40007000 	.word	0x40007000

08002a8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aba:	f7fe fa9d 	bl	8000ff8 <HAL_GetTick>
 8002abe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ac0:	e009      	b.n	8002ad6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac2:	f7fe fa99 	bl	8000ff8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad0:	d901      	bls.n	8002ad6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e022      	b.n	8002b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe fa82 	bl	8000ff8 <HAL_GetTick>
 8002af4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af6:	e009      	b.n	8002b0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af8:	f7fe fa7e 	bl	8000ff8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b06:	d901      	bls.n	8002b0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e007      	b.n	8002b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b18:	d1ee      	bne.n	8002af8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e29b      	b.n	800307a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b50:	4b96      	ldr	r3, [pc, #600]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5c:	4b93      	ldr	r3, [pc, #588]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62>
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x130>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d168      	bne.n	8002c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e275      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x7a>
 8002b98:	4b84      	ldr	r3, [pc, #528]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a83      	ldr	r2, [pc, #524]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x9c>
 8002bae:	4b7f      	ldr	r3, [pc, #508]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b7c      	ldr	r3, [pc, #496]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a7b      	ldr	r2, [pc, #492]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a72      	ldr	r2, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd8>
 8002bec:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6b      	ldr	r2, [pc, #428]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f9f4 	bl	8000ff8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe f9f0 	bl	8000ff8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e229      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe8>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe f9e0 	bl	8000ff8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f9dc 	bl	8000ff8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e215      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b57      	ldr	r3, [pc, #348]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x110>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d069      	beq.n	8002d3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b4d      	ldr	r3, [pc, #308]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x190>
 8002c82:	4b4a      	ldr	r3, [pc, #296]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1e9      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	493d      	ldr	r1, [pc, #244]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e040      	b.n	8002d3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d023      	beq.n	8002d0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a38      	ldr	r2, [pc, #224]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f992 	bl	8000ff8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe f98e 	bl	8000ff8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1c7      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4929      	ldr	r1, [pc, #164]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
 8002d0a:	e018      	b.n	8002d3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe f96e 	bl	8000ff8 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe f96a 	bl	8000ff8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1a3      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d038      	beq.n	8002dbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4a15      	ldr	r2, [pc, #84]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f94b 	bl	8000ff8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe f947 	bl	8000ff8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e180      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x23a>
 8002d84:	e01a      	b.n	8002dbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe f931 	bl	8000ff8 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f92d 	bl	8000ff8 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d903      	bls.n	8002db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e166      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
 8002dac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b92      	ldr	r3, [pc, #584]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a4 	beq.w	8002f12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a88      	ldr	r2, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	4b83      	ldr	r3, [pc, #524]	; (8003000 <HAL_RCC_OscConfig+0x4d4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dfe:	4b80      	ldr	r3, [pc, #512]	; (8003000 <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7f      	ldr	r2, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x4d4>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f8f5 	bl	8000ff8 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f8f1 	bl	8000ff8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e12a      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e24:	4b76      	ldr	r3, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x4d4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x31a>
 8002e38:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a6f      	ldr	r2, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e02d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x376>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x33c>
 8002e4e:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a67      	ldr	r2, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	e01c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x376>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x35e>
 8002e70:	4b62      	ldr	r3, [pc, #392]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	4b5f      	ldr	r3, [pc, #380]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a5e      	ldr	r2, [pc, #376]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x376>
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d015      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe f8a5 	bl	8000ff8 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe f8a1 	bl	8000ff8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0d8      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ee      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x386>
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f88f 	bl	8000ff8 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe f88b 	bl	8000ff8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0c2      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ee      	bne.n	8002ede <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80ae 	beq.w	8003078 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d06d      	beq.n	8003004 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d14b      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f85c 	bl	8000ff8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe f858 	bl	8000ff8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e091      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	019b      	lsls	r3, r3, #6
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	071b      	lsls	r3, r3, #28
 8002f8e:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f82a 	bl	8000ff8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f826 	bl	8000ff8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e05f      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
 8002fc6:	e057      	b.n	8003078 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f810 	bl	8000ff8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe f80c 	bl	8000ff8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e045      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_OscConfig+0x4d0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x4b0>
 8002ffa:	e03d      	b.n	8003078 <HAL_RCC_OscConfig+0x54c>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_RCC_OscConfig+0x558>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d030      	beq.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d129      	bne.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d122      	bne.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800303a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d119      	bne.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d10f      	bne.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 020f 	bic.w	r2, r3, #15
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800310a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fd ff3c 	bl	8000ff8 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fd ff38 	bl	8000ff8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 020f 	bic.w	r2, r3, #15
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4602      	mov	r2, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490a      	ldr	r1, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1d0>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fe98 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00
 8003250:	40023800 	.word	0x40023800
 8003254:	08004d94 	.word	0x08004d94
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b094      	sub	sp, #80	; 0x50
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	647b      	str	r3, [r7, #68]	; 0x44
 800326c:	2300      	movs	r3, #0
 800326e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003270:	2300      	movs	r3, #0
 8003272:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b79      	ldr	r3, [pc, #484]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80e1 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e0db      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003298:	e0db      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b73      	ldr	r3, [pc, #460]	; (8003468 <HAL_RCC_GetSysClockFreq+0x208>)
 800329c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800329e:	e0d8      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032aa:	4b6d      	ldr	r3, [pc, #436]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
 80032ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032d2:	4622      	mov	r2, r4
 80032d4:	462b      	mov	r3, r5
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	0159      	lsls	r1, r3, #5
 80032e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e4:	0150      	lsls	r0, r2, #5
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4621      	mov	r1, r4
 80032ec:	1a51      	subs	r1, r2, r1
 80032ee:	6139      	str	r1, [r7, #16]
 80032f0:	4629      	mov	r1, r5
 80032f2:	eb63 0301 	sbc.w	r3, r3, r1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003304:	4659      	mov	r1, fp
 8003306:	018b      	lsls	r3, r1, #6
 8003308:	4651      	mov	r1, sl
 800330a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800330e:	4651      	mov	r1, sl
 8003310:	018a      	lsls	r2, r1, #6
 8003312:	4651      	mov	r1, sl
 8003314:	ebb2 0801 	subs.w	r8, r2, r1
 8003318:	4659      	mov	r1, fp
 800331a:	eb63 0901 	sbc.w	r9, r3, r1
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800332e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003332:	4690      	mov	r8, r2
 8003334:	4699      	mov	r9, r3
 8003336:	4623      	mov	r3, r4
 8003338:	eb18 0303 	adds.w	r3, r8, r3
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	462b      	mov	r3, r5
 8003340:	eb49 0303 	adc.w	r3, r9, r3
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003352:	4629      	mov	r1, r5
 8003354:	024b      	lsls	r3, r1, #9
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800335c:	4621      	mov	r1, r4
 800335e:	024a      	lsls	r2, r1, #9
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003366:	2200      	movs	r2, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
 800336a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800336c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003370:	f7fc ff62 	bl	8000238 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800337c:	e058      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	2200      	movs	r2, #0
 8003386:	4618      	mov	r0, r3
 8003388:	4611      	mov	r1, r2
 800338a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
 8003394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	f04f 0000 	mov.w	r0, #0
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	0159      	lsls	r1, r3, #5
 80033a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033aa:	0150      	lsls	r0, r2, #5
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4641      	mov	r1, r8
 80033b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033b6:	4649      	mov	r1, r9
 80033b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d0:	ebb2 040a 	subs.w	r4, r2, sl
 80033d4:	eb63 050b 	sbc.w	r5, r3, fp
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	00eb      	lsls	r3, r5, #3
 80033e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e6:	00e2      	lsls	r2, r4, #3
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	18e3      	adds	r3, r4, r3
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	464b      	mov	r3, r9
 80033f4:	eb45 0303 	adc.w	r3, r5, r3
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003406:	4629      	mov	r1, r5
 8003408:	028b      	lsls	r3, r1, #10
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003410:	4621      	mov	r1, r4
 8003412:	028a      	lsls	r2, r1, #10
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	61fa      	str	r2, [r7, #28]
 8003420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003424:	f7fc ff08 	bl	8000238 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344a:	e002      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003454:	4618      	mov	r0, r3
 8003456:	3750      	adds	r7, #80	; 0x50
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400
 8003468:	007a1200 	.word	0x007a1200

0800346c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCC_GetHCLKFreq+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000000 	.word	0x20000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003488:	f7ff fff0 	bl	800346c <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08004da4 	.word	0x08004da4

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034b0:	f7ff ffdc 	bl	800346c <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0b5b      	lsrs	r3, r3, #13
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08004da4 	.word	0x08004da4

080034d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034fc:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a68      	ldr	r2, [pc, #416]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003506:	6093      	str	r3, [r2, #8]
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	4964      	ldr	r1, [pc, #400]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	4959      	ldr	r1, [pc, #356]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800356a:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	494a      	ldr	r1, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 808b 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	; 0x40
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd fd0c 	bl	8000ff8 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd fd08 	bl	8000ff8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e38f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d035      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d02e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d114      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fcd0 	bl	8000ff8 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fccc 	bl	8000ff8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e351      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368a:	d111      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800369a:	400b      	ands	r3, r1
 800369c:	4901      	ldr	r1, [pc, #4]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
 80036a2:	e00b      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	0ffffcff 	.word	0x0ffffcff
 80036b0:	4bac      	ldr	r3, [pc, #688]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4aab      	ldr	r2, [pc, #684]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ba:	6093      	str	r3, [r2, #8]
 80036bc:	4ba9      	ldr	r3, [pc, #676]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	49a6      	ldr	r1, [pc, #664]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036da:	4ba2      	ldr	r3, [pc, #648]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	4aa0      	ldr	r2, [pc, #640]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ea:	4b9e      	ldr	r3, [pc, #632]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	499b      	ldr	r1, [pc, #620]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b96      	ldr	r3, [pc, #600]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003716:	4993      	ldr	r1, [pc, #588]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372a:	4b8e      	ldr	r3, [pc, #568]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003738:	498a      	ldr	r1, [pc, #552]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374c:	4b85      	ldr	r3, [pc, #532]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	4982      	ldr	r1, [pc, #520]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4979      	ldr	r1, [pc, #484]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003790:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4971      	ldr	r1, [pc, #452]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f023 020c 	bic.w	r2, r3, #12
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	4968      	ldr	r1, [pc, #416]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d4:	4b63      	ldr	r3, [pc, #396]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	4960      	ldr	r1, [pc, #384]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f6:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	4957      	ldr	r1, [pc, #348]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003818:	4b52      	ldr	r3, [pc, #328]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	494f      	ldr	r1, [pc, #316]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	4946      	ldr	r1, [pc, #280]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800385c:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	493e      	ldr	r1, [pc, #248]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	4935      	ldr	r1, [pc, #212]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	492d      	ldr	r1, [pc, #180]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	4924      	ldr	r1, [pc, #144]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	4914      	ldr	r1, [pc, #80]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003934:	490b      	ldr	r1, [pc, #44]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003958:	4902      	ldr	r1, [pc, #8]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003960:	e002      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	4986      	ldr	r1, [pc, #536]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	497d      	ldr	r1, [pc, #500]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d006      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d6 	beq.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c4:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd fb12 	bl	8000ff8 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d8:	f7fd fb0e 	bl	8000ff8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e195      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d021      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0e1b      	lsrs	r3, r3, #24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	019a      	lsls	r2, r3, #6
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	4958      	ldr	r1, [pc, #352]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d129      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	493e      	ldr	r1, [pc, #248]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	f023 021f 	bic.w	r2, r3, #31
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4938      	ldr	r1, [pc, #224]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	0f1b      	lsrs	r3, r3, #28
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	019a      	lsls	r2, r3, #6
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	4926      	ldr	r1, [pc, #152]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4a:	f7fd fa55 	bl	8000ff8 <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b52:	f7fd fa51 	bl	8000ff8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b64      	cmp	r3, #100	; 0x64
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	f040 80ce 	bne.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b84:	f7fd fa38 	bl	8000ff8 <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b8c:	f7fd fa34 	bl	8000ff8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d904      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0bb      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb0:	d0ec      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d12a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	0f1b      	lsrs	r3, r3, #28
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	4944      	ldr	r1, [pc, #272]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	493d      	ldr	r1, [pc, #244]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d11d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	4929      	ldr	r1, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4911      	ldr	r1, [pc, #68]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd f984 	bl	8000ff8 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf4:	f7fd f980 	bl	8000ff8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e007      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d1ef      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e040      	b.n	8003db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc ff7c 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8b0 	bl	8003ec8 <UART_SetConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fb08 	bl	8004390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb8f 	bl	80044d4 <UART_CheckIdleState>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d171      	bne.n	8003ebc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Transmit+0x24>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e06a      	b.n	8003ebe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2221      	movs	r2, #33	; 0x21
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fd f8ff 	bl	8000ff8 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d108      	bne.n	8003e28 <HAL_UART_Transmit+0x68>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e003      	b.n	8003e30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e30:	e02c      	b.n	8003e8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fb96 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e038      	b.n	8003ebe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3302      	adds	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e007      	b.n	8003e7a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1cc      	bne.n	8003e32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2140      	movs	r1, #64	; 0x40
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fb63 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e005      	b.n	8003ebe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4ba6      	ldr	r3, [pc, #664]	; (800418c <UART_SetConfig+0x2c4>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a94      	ldr	r2, [pc, #592]	; (8004190 <UART_SetConfig+0x2c8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d120      	bne.n	8003f86 <UART_SetConfig+0xbe>
 8003f44:	4b93      	ldr	r3, [pc, #588]	; (8004194 <UART_SetConfig+0x2cc>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d816      	bhi.n	8003f80 <UART_SetConfig+0xb8>
 8003f52:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x90>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f6f 	.word	0x08003f6f
 8003f64:	08003f7b 	.word	0x08003f7b
 8003f68:	2301      	movs	r3, #1
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e150      	b.n	8004210 <UART_SetConfig+0x348>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e14d      	b.n	8004210 <UART_SetConfig+0x348>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e14a      	b.n	8004210 <UART_SetConfig+0x348>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e147      	b.n	8004210 <UART_SetConfig+0x348>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e144      	b.n	8004210 <UART_SetConfig+0x348>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a83      	ldr	r2, [pc, #524]	; (8004198 <UART_SetConfig+0x2d0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d132      	bne.n	8003ff6 <UART_SetConfig+0x12e>
 8003f90:	4b80      	ldr	r3, [pc, #512]	; (8004194 <UART_SetConfig+0x2cc>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d828      	bhi.n	8003ff0 <UART_SetConfig+0x128>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0xdc>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003ff1 	.word	0x08003ff1
 8003fac:	08003ff1 	.word	0x08003ff1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003fe5 	.word	0x08003fe5
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003fdf 	.word	0x08003fdf
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08003feb 	.word	0x08003feb
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e118      	b.n	8004210 <UART_SetConfig+0x348>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e115      	b.n	8004210 <UART_SetConfig+0x348>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e112      	b.n	8004210 <UART_SetConfig+0x348>
 8003fea:	2308      	movs	r3, #8
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e10f      	b.n	8004210 <UART_SetConfig+0x348>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e10c      	b.n	8004210 <UART_SetConfig+0x348>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a68      	ldr	r2, [pc, #416]	; (800419c <UART_SetConfig+0x2d4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d120      	bne.n	8004042 <UART_SetConfig+0x17a>
 8004000:	4b64      	ldr	r3, [pc, #400]	; (8004194 <UART_SetConfig+0x2cc>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800400a:	2b30      	cmp	r3, #48	; 0x30
 800400c:	d013      	beq.n	8004036 <UART_SetConfig+0x16e>
 800400e:	2b30      	cmp	r3, #48	; 0x30
 8004010:	d814      	bhi.n	800403c <UART_SetConfig+0x174>
 8004012:	2b20      	cmp	r3, #32
 8004014:	d009      	beq.n	800402a <UART_SetConfig+0x162>
 8004016:	2b20      	cmp	r3, #32
 8004018:	d810      	bhi.n	800403c <UART_SetConfig+0x174>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <UART_SetConfig+0x15c>
 800401e:	2b10      	cmp	r3, #16
 8004020:	d006      	beq.n	8004030 <UART_SetConfig+0x168>
 8004022:	e00b      	b.n	800403c <UART_SetConfig+0x174>
 8004024:	2300      	movs	r3, #0
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e0f2      	b.n	8004210 <UART_SetConfig+0x348>
 800402a:	2302      	movs	r3, #2
 800402c:	77fb      	strb	r3, [r7, #31]
 800402e:	e0ef      	b.n	8004210 <UART_SetConfig+0x348>
 8004030:	2304      	movs	r3, #4
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e0ec      	b.n	8004210 <UART_SetConfig+0x348>
 8004036:	2308      	movs	r3, #8
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e0e9      	b.n	8004210 <UART_SetConfig+0x348>
 800403c:	2310      	movs	r3, #16
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e0e6      	b.n	8004210 <UART_SetConfig+0x348>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a56      	ldr	r2, [pc, #344]	; (80041a0 <UART_SetConfig+0x2d8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d120      	bne.n	800408e <UART_SetConfig+0x1c6>
 800404c:	4b51      	ldr	r3, [pc, #324]	; (8004194 <UART_SetConfig+0x2cc>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004056:	2bc0      	cmp	r3, #192	; 0xc0
 8004058:	d013      	beq.n	8004082 <UART_SetConfig+0x1ba>
 800405a:	2bc0      	cmp	r3, #192	; 0xc0
 800405c:	d814      	bhi.n	8004088 <UART_SetConfig+0x1c0>
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d009      	beq.n	8004076 <UART_SetConfig+0x1ae>
 8004062:	2b80      	cmp	r3, #128	; 0x80
 8004064:	d810      	bhi.n	8004088 <UART_SetConfig+0x1c0>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <UART_SetConfig+0x1a8>
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d006      	beq.n	800407c <UART_SetConfig+0x1b4>
 800406e:	e00b      	b.n	8004088 <UART_SetConfig+0x1c0>
 8004070:	2300      	movs	r3, #0
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e0cc      	b.n	8004210 <UART_SetConfig+0x348>
 8004076:	2302      	movs	r3, #2
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e0c9      	b.n	8004210 <UART_SetConfig+0x348>
 800407c:	2304      	movs	r3, #4
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e0c6      	b.n	8004210 <UART_SetConfig+0x348>
 8004082:	2308      	movs	r3, #8
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e0c3      	b.n	8004210 <UART_SetConfig+0x348>
 8004088:	2310      	movs	r3, #16
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e0c0      	b.n	8004210 <UART_SetConfig+0x348>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a44      	ldr	r2, [pc, #272]	; (80041a4 <UART_SetConfig+0x2dc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d125      	bne.n	80040e4 <UART_SetConfig+0x21c>
 8004098:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <UART_SetConfig+0x2cc>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d017      	beq.n	80040d8 <UART_SetConfig+0x210>
 80040a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ac:	d817      	bhi.n	80040de <UART_SetConfig+0x216>
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b2:	d00b      	beq.n	80040cc <UART_SetConfig+0x204>
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b8:	d811      	bhi.n	80040de <UART_SetConfig+0x216>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <UART_SetConfig+0x1fe>
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	d006      	beq.n	80040d2 <UART_SetConfig+0x20a>
 80040c4:	e00b      	b.n	80040de <UART_SetConfig+0x216>
 80040c6:	2300      	movs	r3, #0
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e0a1      	b.n	8004210 <UART_SetConfig+0x348>
 80040cc:	2302      	movs	r3, #2
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e09e      	b.n	8004210 <UART_SetConfig+0x348>
 80040d2:	2304      	movs	r3, #4
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e09b      	b.n	8004210 <UART_SetConfig+0x348>
 80040d8:	2308      	movs	r3, #8
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e098      	b.n	8004210 <UART_SetConfig+0x348>
 80040de:	2310      	movs	r3, #16
 80040e0:	77fb      	strb	r3, [r7, #31]
 80040e2:	e095      	b.n	8004210 <UART_SetConfig+0x348>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <UART_SetConfig+0x2e0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d125      	bne.n	800413a <UART_SetConfig+0x272>
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <UART_SetConfig+0x2cc>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fc:	d017      	beq.n	800412e <UART_SetConfig+0x266>
 80040fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004102:	d817      	bhi.n	8004134 <UART_SetConfig+0x26c>
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004108:	d00b      	beq.n	8004122 <UART_SetConfig+0x25a>
 800410a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410e:	d811      	bhi.n	8004134 <UART_SetConfig+0x26c>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <UART_SetConfig+0x254>
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d006      	beq.n	8004128 <UART_SetConfig+0x260>
 800411a:	e00b      	b.n	8004134 <UART_SetConfig+0x26c>
 800411c:	2301      	movs	r3, #1
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e076      	b.n	8004210 <UART_SetConfig+0x348>
 8004122:	2302      	movs	r3, #2
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e073      	b.n	8004210 <UART_SetConfig+0x348>
 8004128:	2304      	movs	r3, #4
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e070      	b.n	8004210 <UART_SetConfig+0x348>
 800412e:	2308      	movs	r3, #8
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e06d      	b.n	8004210 <UART_SetConfig+0x348>
 8004134:	2310      	movs	r3, #16
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e06a      	b.n	8004210 <UART_SetConfig+0x348>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <UART_SetConfig+0x2e4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d138      	bne.n	80041b6 <UART_SetConfig+0x2ee>
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <UART_SetConfig+0x2cc>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800414e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004152:	d017      	beq.n	8004184 <UART_SetConfig+0x2bc>
 8004154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004158:	d82a      	bhi.n	80041b0 <UART_SetConfig+0x2e8>
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	d00b      	beq.n	8004178 <UART_SetConfig+0x2b0>
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004164:	d824      	bhi.n	80041b0 <UART_SetConfig+0x2e8>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <UART_SetConfig+0x2aa>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d006      	beq.n	800417e <UART_SetConfig+0x2b6>
 8004170:	e01e      	b.n	80041b0 <UART_SetConfig+0x2e8>
 8004172:	2300      	movs	r3, #0
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e04b      	b.n	8004210 <UART_SetConfig+0x348>
 8004178:	2302      	movs	r3, #2
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e048      	b.n	8004210 <UART_SetConfig+0x348>
 800417e:	2304      	movs	r3, #4
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e045      	b.n	8004210 <UART_SetConfig+0x348>
 8004184:	2308      	movs	r3, #8
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e042      	b.n	8004210 <UART_SetConfig+0x348>
 800418a:	bf00      	nop
 800418c:	efff69f3 	.word	0xefff69f3
 8004190:	40011000 	.word	0x40011000
 8004194:	40023800 	.word	0x40023800
 8004198:	40004400 	.word	0x40004400
 800419c:	40004800 	.word	0x40004800
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	40005000 	.word	0x40005000
 80041a8:	40011400 	.word	0x40011400
 80041ac:	40007800 	.word	0x40007800
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e02c      	b.n	8004210 <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a72      	ldr	r2, [pc, #456]	; (8004384 <UART_SetConfig+0x4bc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d125      	bne.n	800420c <UART_SetConfig+0x344>
 80041c0:	4b71      	ldr	r3, [pc, #452]	; (8004388 <UART_SetConfig+0x4c0>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ce:	d017      	beq.n	8004200 <UART_SetConfig+0x338>
 80041d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041d4:	d817      	bhi.n	8004206 <UART_SetConfig+0x33e>
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d00b      	beq.n	80041f4 <UART_SetConfig+0x32c>
 80041dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e0:	d811      	bhi.n	8004206 <UART_SetConfig+0x33e>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <UART_SetConfig+0x326>
 80041e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ea:	d006      	beq.n	80041fa <UART_SetConfig+0x332>
 80041ec:	e00b      	b.n	8004206 <UART_SetConfig+0x33e>
 80041ee:	2300      	movs	r3, #0
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e00d      	b.n	8004210 <UART_SetConfig+0x348>
 80041f4:	2302      	movs	r3, #2
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e00a      	b.n	8004210 <UART_SetConfig+0x348>
 80041fa:	2304      	movs	r3, #4
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e007      	b.n	8004210 <UART_SetConfig+0x348>
 8004200:	2308      	movs	r3, #8
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e004      	b.n	8004210 <UART_SetConfig+0x348>
 8004206:	2310      	movs	r3, #16
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e001      	b.n	8004210 <UART_SetConfig+0x348>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004218:	d15b      	bne.n	80042d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d828      	bhi.n	8004272 <UART_SetConfig+0x3aa>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <UART_SetConfig+0x360>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	08004273 	.word	0x08004273
 8004238:	08004263 	.word	0x08004263
 800423c:	08004273 	.word	0x08004273
 8004240:	08004273 	.word	0x08004273
 8004244:	08004273 	.word	0x08004273
 8004248:	0800426b 	.word	0x0800426b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7ff f91a 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8004250:	61b8      	str	r0, [r7, #24]
        break;
 8004252:	e013      	b.n	800427c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7ff f92a 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8004258:	61b8      	str	r0, [r7, #24]
        break;
 800425a:	e00f      	b.n	800427c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800425c:	4b4b      	ldr	r3, [pc, #300]	; (800438c <UART_SetConfig+0x4c4>)
 800425e:	61bb      	str	r3, [r7, #24]
        break;
 8004260:	e00c      	b.n	800427c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004262:	f7fe fffd 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 8004266:	61b8      	str	r0, [r7, #24]
        break;
 8004268:	e008      	b.n	800427c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e004      	b.n	800427c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	77bb      	strb	r3, [r7, #30]
        break;
 800427a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d074      	beq.n	800436c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	005a      	lsls	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b0f      	cmp	r3, #15
 800429c:	d916      	bls.n	80042cc <UART_SetConfig+0x404>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d212      	bcs.n	80042cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f023 030f 	bic.w	r3, r3, #15
 80042ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	4313      	orrs	r3, r2
 80042c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	89fa      	ldrh	r2, [r7, #14]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	e04f      	b.n	800436c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	77bb      	strb	r3, [r7, #30]
 80042d0:	e04c      	b.n	800436c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d828      	bhi.n	800432a <UART_SetConfig+0x462>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x418>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7ff f8be 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8004308:	61b8      	str	r0, [r7, #24]
        break;
 800430a:	e013      	b.n	8004334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7ff f8ce 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8004310:	61b8      	str	r0, [r7, #24]
        break;
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b1d      	ldr	r3, [pc, #116]	; (800438c <UART_SetConfig+0x4c4>)
 8004316:	61bb      	str	r3, [r7, #24]
        break;
 8004318:	e00c      	b.n	8004334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe ffa1 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800431e:	61b8      	str	r0, [r7, #24]
        break;
 8004320:	e008      	b.n	8004334 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	61bb      	str	r3, [r7, #24]
        break;
 8004328:	e004      	b.n	8004334 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	77bb      	strb	r3, [r7, #30]
        break;
 8004332:	bf00      	nop
    }

    if (pclk != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085a      	lsrs	r2, r3, #1
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b0f      	cmp	r3, #15
 8004352:	d909      	bls.n	8004368 <UART_SetConfig+0x4a0>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d205      	bcs.n	8004368 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e001      	b.n	800436c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004378:	7fbb      	ldrb	r3, [r7, #30]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40007c00 	.word	0x40007c00
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400

08004390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800448e:	d10a      	bne.n	80044a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e4:	f7fc fd88 	bl	8000ff8 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10e      	bne.n	8004516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f831 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e027      	b.n	8004566 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d10e      	bne.n	8004542 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f81b 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e011      	b.n	8004566 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b09c      	sub	sp, #112	; 0x70
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	e0a7      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	f000 80a3 	beq.w	80046d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fc fd35 	bl	8000ff8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800459a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13f      	bne.n	8004620 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045b4:	667b      	str	r3, [r7, #100]	; 0x64
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80045f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e5      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e068      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d050      	beq.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463c:	d148      	bne.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004646:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800465c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
 8004668:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800466c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e6      	bne.n	8004648 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	613b      	str	r3, [r7, #16]
   return(result);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	66bb      	str	r3, [r7, #104]	; 0x68
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800469a:	623a      	str	r2, [r7, #32]
 800469c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	69f9      	ldr	r1, [r7, #28]
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e010      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	f43f af48 	beq.w	8004580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3770      	adds	r7, #112	; 0x70
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046fc:	b084      	sub	sp, #16
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	f107 001c 	add.w	r0, r7, #28
 800470a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	d120      	bne.n	8004756 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <USB_CoreInit+0xac>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa96 	bl	8004c7c <USB_CoreReset>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e010      	b.n	8004778 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa8a 	bl	8004c7c <USB_CoreReset>
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d10b      	bne.n	8004796 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f043 0206 	orr.w	r2, r3, #6
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a2:	b004      	add	sp, #16
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	ffbdffbf 	.word	0xffbdffbf

080047ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 0201 	bic.w	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d115      	bne.n	800481c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fc fc07 	bl	8001010 <HAL_Delay>
      ms++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fa29 	bl	8004c60 <USB_GetMode>
 800480e:	4603      	mov	r3, r0
 8004810:	2b01      	cmp	r3, #1
 8004812:	d01e      	beq.n	8004852 <USB_SetCurrentMode+0x84>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b31      	cmp	r3, #49	; 0x31
 8004818:	d9f0      	bls.n	80047fc <USB_SetCurrentMode+0x2e>
 800481a:	e01a      	b.n	8004852 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d115      	bne.n	800484e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800482e:	2001      	movs	r0, #1
 8004830:	f7fc fbee 	bl	8001010 <HAL_Delay>
      ms++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa10 	bl	8004c60 <USB_GetMode>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <USB_SetCurrentMode+0x84>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b31      	cmp	r3, #49	; 0x31
 800484a:	d9f0      	bls.n	800482e <USB_SetCurrentMode+0x60>
 800484c:	e001      	b.n	8004852 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e005      	b.n	800485e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b32      	cmp	r3, #50	; 0x32
 8004856:	d101      	bne.n	800485c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004868:	b084      	sub	sp, #16
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	e009      	b.n	800489c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3340      	adds	r3, #64	; 0x40
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b0e      	cmp	r3, #14
 80048a0:	d9f2      	bls.n	8004888 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11c      	bne.n	80048e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b6:	f043 0302 	orr.w	r3, r3, #2
 80048ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e005      	b.n	80048ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	4619      	mov	r1, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	461a      	mov	r2, r3
 800490a:	680b      	ldr	r3, [r1, #0]
 800490c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800491a:	2100      	movs	r1, #0
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f965 	bl	8004bec <USB_SetDevSpeed>
 8004922:	e008      	b.n	8004936 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f960 	bl	8004bec <USB_SetDevSpeed>
 800492c:	e003      	b.n	8004936 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800492e:	2103      	movs	r1, #3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f95b 	bl	8004bec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004936:	2110      	movs	r1, #16
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8f3 	bl	8004b24 <USB_FlushTxFifo>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f91f 	bl	8004b8c <USB_FlushRxFifo>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	461a      	mov	r2, r3
 8004960:	2300      	movs	r3, #0
 8004962:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e043      	b.n	8004a0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004998:	d118      	bne.n	80049cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e013      	b.n	80049de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e008      	b.n	80049de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3b7      	bcc.n	8004982 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e043      	b.n	8004aa0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2e:	d118      	bne.n	8004a62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e013      	b.n	8004a74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e008      	b.n	8004a74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b7      	bcc.n	8004a18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <USB_DevInit+0x2b4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f043 0208 	orr.w	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699a      	ldr	r2, [r3, #24]
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <USB_DevInit+0x2b8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b18:	b004      	add	sp, #16
 8004b1a:	4770      	bx	lr
 8004b1c:	803c3800 	.word	0x803c3800
 8004b20:	40000004 	.word	0x40000004

08004b24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <USB_FlushTxFifo+0x64>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e01b      	b.n	8004b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	daf2      	bge.n	8004b32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <USB_FlushTxFifo+0x64>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e006      	b.n	8004b7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d0f0      	beq.n	8004b5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	00030d40 	.word	0x00030d40

08004b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <USB_FlushRxFifo+0x5c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e018      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	daf2      	bge.n	8004b98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <USB_FlushRxFifo+0x5c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d0f0      	beq.n	8004bbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	00030d40 	.word	0x00030d40

08004bec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c38:	f023 0303 	bic.w	r3, r3, #3
 8004c3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4c:	f043 0302 	orr.w	r3, r3, #2
 8004c50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <USB_CoreReset+0x64>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e01b      	b.n	8004cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	daf2      	bge.n	8004c88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <USB_CoreReset+0x64>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d0f0      	beq.n	8004cb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	00030d40 	.word	0x00030d40

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4d0d      	ldr	r5, [pc, #52]	; (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2600      	movs	r6, #0
 8004cf0:	42a6      	cmp	r6, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4d0b      	ldr	r5, [pc, #44]	; (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f000 f820 	bl	8004d3c <_init>
 8004cfc:	1b64      	subs	r4, r4, r5
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2600      	movs	r6, #0
 8004d02:	42a6      	cmp	r6, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0c:	4798      	blx	r3
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d16:	4798      	blx	r3
 8004d18:	3601      	adds	r6, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	08004db4 	.word	0x08004db4
 8004d20:	08004db4 	.word	0x08004db4
 8004d24:	08004db4 	.word	0x08004db4
 8004d28:	08004db8 	.word	0x08004db8

08004d2c <memset>:
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <_init>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr

08004d48 <_fini>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr
